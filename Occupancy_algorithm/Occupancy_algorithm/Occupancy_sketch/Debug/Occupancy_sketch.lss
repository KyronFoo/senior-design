
Occupancy_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033e  00800200  000042b6  0000434a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000042b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002d8  0080053e  0080053e  00004688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000046b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ac0  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e87f  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004b31  00000000  00000000  00023a37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000072bf  00000000  00000000  00028568  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ec0  00000000  00000000  0002f828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005eb1  00000000  00000000  000326e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015d92  00000000  00000000  00038599  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d28  00000000  00000000  0004e32b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f0 c3       	rjmp	.+2016   	; 0x7e2 <__ctors_end>
       2:	00 00       	nop
       4:	1e c4       	rjmp	.+2108   	; 0x842 <__bad_interrupt>
       6:	00 00       	nop
       8:	1c c4       	rjmp	.+2104   	; 0x842 <__bad_interrupt>
       a:	00 00       	nop
       c:	1a c4       	rjmp	.+2100   	; 0x842 <__bad_interrupt>
       e:	00 00       	nop
      10:	18 c4       	rjmp	.+2096   	; 0x842 <__bad_interrupt>
      12:	00 00       	nop
      14:	16 c4       	rjmp	.+2092   	; 0x842 <__bad_interrupt>
      16:	00 00       	nop
      18:	14 c4       	rjmp	.+2088   	; 0x842 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	12 c4       	rjmp	.+2084   	; 0x842 <__bad_interrupt>
      1e:	00 00       	nop
      20:	10 c4       	rjmp	.+2080   	; 0x842 <__bad_interrupt>
      22:	00 00       	nop
      24:	0e c4       	rjmp	.+2076   	; 0x842 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c c4       	rjmp	.+2072   	; 0x842 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0a c4       	rjmp	.+2068   	; 0x842 <__bad_interrupt>
      2e:	00 00       	nop
      30:	08 c4       	rjmp	.+2064   	; 0x842 <__bad_interrupt>
      32:	00 00       	nop
      34:	06 c4       	rjmp	.+2060   	; 0x842 <__bad_interrupt>
      36:	00 00       	nop
      38:	04 c4       	rjmp	.+2056   	; 0x842 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	02 c4       	rjmp	.+2052   	; 0x842 <__bad_interrupt>
      3e:	00 00       	nop
      40:	00 c4       	rjmp	.+2048   	; 0x842 <__bad_interrupt>
      42:	00 00       	nop
      44:	fe c3       	rjmp	.+2044   	; 0x842 <__bad_interrupt>
      46:	00 00       	nop
      48:	fc c3       	rjmp	.+2040   	; 0x842 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fa c3       	rjmp	.+2036   	; 0x842 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f8 c3       	rjmp	.+2032   	; 0x842 <__bad_interrupt>
      52:	00 00       	nop
      54:	f6 c3       	rjmp	.+2028   	; 0x842 <__bad_interrupt>
      56:	00 00       	nop
      58:	f4 c3       	rjmp	.+2024   	; 0x842 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b3 09 	jmp	0x1366	; 0x1366 <__vector_23>
      60:	f0 c3       	rjmp	.+2016   	; 0x842 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__vector_25>
      68:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <__vector_26>
      6c:	ea c3       	rjmp	.+2004   	; 0x842 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e8 c3       	rjmp	.+2000   	; 0x842 <__bad_interrupt>
      72:	00 00       	nop
      74:	e6 c3       	rjmp	.+1996   	; 0x842 <__bad_interrupt>
      76:	00 00       	nop
      78:	e4 c3       	rjmp	.+1992   	; 0x842 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e2 c3       	rjmp	.+1988   	; 0x842 <__bad_interrupt>
      7e:	00 00       	nop
      80:	e0 c3       	rjmp	.+1984   	; 0x842 <__bad_interrupt>
      82:	00 00       	nop
      84:	de c3       	rjmp	.+1980   	; 0x842 <__bad_interrupt>
      86:	00 00       	nop
      88:	dc c3       	rjmp	.+1976   	; 0x842 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	da c3       	rjmp	.+1972   	; 0x842 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d8 c3       	rjmp	.+1968   	; 0x842 <__bad_interrupt>
      92:	00 00       	nop
      94:	d6 c3       	rjmp	.+1964   	; 0x842 <__bad_interrupt>
      96:	00 00       	nop
      98:	d4 c3       	rjmp	.+1960   	; 0x842 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 ad 1f 	jmp	0x3f5a	; 0x3f5a <__vector_39>
      a0:	d0 c3       	rjmp	.+1952   	; 0x842 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ce c3       	rjmp	.+1948   	; 0x842 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	cc c3       	rjmp	.+1944   	; 0x842 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ca c3       	rjmp	.+1940   	; 0x842 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c8 c3       	rjmp	.+1936   	; 0x842 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c6 c3       	rjmp	.+1932   	; 0x842 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c4 c3       	rjmp	.+1928   	; 0x842 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c2 c3       	rjmp	.+1924   	; 0x842 <__bad_interrupt>
      be:	00 00       	nop
      c0:	c0 c3       	rjmp	.+1920   	; 0x842 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	be c3       	rjmp	.+1916   	; 0x842 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	bc c3       	rjmp	.+1912   	; 0x842 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	ba c3       	rjmp	.+1908   	; 0x842 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b8 c3       	rjmp	.+1904   	; 0x842 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b6 c3       	rjmp	.+1900   	; 0x842 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	b4 c3       	rjmp	.+1896   	; 0x842 <__bad_interrupt>
      da:	00 00       	nop
      dc:	b2 c3       	rjmp	.+1892   	; 0x842 <__bad_interrupt>
      de:	00 00       	nop
      e0:	b0 c3       	rjmp	.+1888   	; 0x842 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	e4 0a       	sbc	r14, r20
      e6:	e7 0a       	sbc	r14, r23
      e8:	d6 0a       	sbc	r13, r22
      ea:	da 0a       	sbc	r13, r26
      ec:	e0 0a       	sbc	r14, r16
      ee:	1e 0b       	sbc	r17, r30
      f0:	eb 0a       	sbc	r14, r27
      f2:	ef 0a       	sbc	r14, r31
      f4:	f5 0a       	sbc	r15, r21
      f6:	f9 0a       	sbc	r15, r25
      f8:	fd 0a       	sbc	r15, r29
      fa:	03 0b       	sbc	r16, r19
      fc:	07 0b       	sbc	r16, r23
      fe:	0b 0b       	sbc	r16, r27
     100:	1e 0b       	sbc	r17, r30
     102:	11 0b       	sbc	r17, r17
     104:	15 0b       	sbc	r17, r21
     106:	19 0b       	sbc	r17, r25

00000108 <__trampolines_end>:
     108:	41 4d       	sbci	r20, 0xD1	; 209
     10a:	47 38       	cpi	r20, 0x87	; 135
     10c:	38 78       	andi	r19, 0x88	; 136
     10e:	78 20       	and	r7, r8
     110:	74 68       	ori	r23, 0x84	; 132
     112:	65 72       	andi	r22, 0x25	; 37
     114:	6d 61       	ori	r22, 0x1D	; 29
     116:	6c 20       	and	r6, r12
     118:	63 61       	ori	r22, 0x13	; 19
     11a:	6d 65       	ori	r22, 0x5D	; 93
     11c:	72 61       	ori	r23, 0x12	; 18
     11e:	21 00       	.word	0x0021	; ????

00000120 <digital_pin_to_timer_PGM>:
     120:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     14c:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000166 <digital_pin_to_bit_mask_PGM>:
     166:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     176:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     186:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     196:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1a6:	04 08 10 20 40 80                                   ... @.

000001ac <digital_pin_to_port_PGM>:
     1ac:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1bc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1cc:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1dc:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1ec:	0b 0b 0b 0b 0b 0b                                   ......

000001f2 <port_to_input_PGM>:
     1f2:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     202:	00 01 00 00 03 01 06 01 09 01                       ..........

0000020c <port_to_output_PGM>:
     20c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     21c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000226 <port_to_mode_PGM>:
     226:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     236:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000240 <_ZL4font>:
     240:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     250:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     260:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     270:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     280:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     290:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     2a0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     2b0:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     2c0:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     2d0:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     2e0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2f0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     300:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     310:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     320:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     330:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     340:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     350:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     360:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     370:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     380:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     390:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     3a0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     3b0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3c0:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3d0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     3e0:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     3f0:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     400:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     410:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     420:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     430:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     440:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     450:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     460:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     470:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     480:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     490:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     4a0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     4b0:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     4c0:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     4d0:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     4e0:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     4f0:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     500:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     510:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     520:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     530:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     540:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     550:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     560:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     570:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     580:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     590:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     5a0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     5b0:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     5c0:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     5d0:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     5e0:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     5f0:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     600:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     610:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     620:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     630:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     640:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     650:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     660:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     670:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     680:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     690:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     6a0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     6b0:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     6c0:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     6d0:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     6e0:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     6f0:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     700:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     710:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     720:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     730:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000740 <_ZL5Rcmd3>:
     740:	04 e0 10 02 1c 07 12 37 32 29 2d 29 25 2b 39 00     .......72)-)%+9.
     750:	01 03 10 e1 10 03 1d 07 06 2e 2c 29 2d 2e 2e 37     ..........,)-..7
     760:	3f 00 00 02 10 13 80 0a 29 80 64                    ?.......).d

0000076b <_ZL16Rcmd2green160x80>:
     76b:	02 2a 04 00 00 00 4f 2b 04 00 00 00 9f              .*....O+.....

00000778 <_ZL13Rcmd2green144>:
     778:	02 2a 04 00 00 00 7f 2b 04 00 00 00 7f              .*.....+.....

00000785 <_ZL8Rcmd2red>:
     785:	02 2a 04 00 00 00 7f 2b 04 00 00 00 9f              .*.....+.....

00000792 <_ZL10Rcmd2green>:
     792:	02 2a 04 00 02 00 81 2b 04 00 01 00 a0              .*.....+.....

0000079f <_ZL5Rcmd1>:
     79f:	0f 01 80 96 11 80 ff b1 03 01 2c 2d b2 03 01 2c     ..........,-...,
     7af:	2d b3 06 01 2c 2d 01 2c 2d b4 01 07 c0 03 a2 02     -...,-.,-.......
     7bf:	84 c1 01 c5 c2 02 0a 00 c3 02 8a 2a c4 02 8a ee     ...........*....
     7cf:	c5 01 0e 20 00 36 01 c8 3a 01 05                    ... .6..:..

000007da <__ctors_start>:
     7da:	46 04       	cpc	r4, r6
     7dc:	57 04       	cpc	r5, r7
     7de:	f5 08       	sbc	r15, r5
     7e0:	aa 1e       	adc	r10, r26

000007e2 <__ctors_end>:
     7e2:	11 24       	eor	r1, r1
     7e4:	1f be       	out	0x3f, r1	; 63
     7e6:	cf ef       	ldi	r28, 0xFF	; 255
     7e8:	d1 e2       	ldi	r29, 0x21	; 33
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	cd bf       	out	0x3d, r28	; 61
     7ee:	00 e0       	ldi	r16, 0x00	; 0
     7f0:	0c bf       	out	0x3c, r16	; 60

000007f2 <__do_copy_data>:
     7f2:	15 e0       	ldi	r17, 0x05	; 5
     7f4:	a0 e0       	ldi	r26, 0x00	; 0
     7f6:	b2 e0       	ldi	r27, 0x02	; 2
     7f8:	e6 eb       	ldi	r30, 0xB6	; 182
     7fa:	f2 e4       	ldi	r31, 0x42	; 66
     7fc:	00 e0       	ldi	r16, 0x00	; 0
     7fe:	0b bf       	out	0x3b, r16	; 59
     800:	02 c0       	rjmp	.+4      	; 0x806 <__do_copy_data+0x14>
     802:	07 90       	elpm	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	ae 33       	cpi	r26, 0x3E	; 62
     808:	b1 07       	cpc	r27, r17
     80a:	d9 f7       	brne	.-10     	; 0x802 <__do_copy_data+0x10>

0000080c <__do_clear_bss>:
     80c:	28 e0       	ldi	r18, 0x08	; 8
     80e:	ae e3       	ldi	r26, 0x3E	; 62
     810:	b5 e0       	ldi	r27, 0x05	; 5
     812:	01 c0       	rjmp	.+2      	; 0x816 <.do_clear_bss_start>

00000814 <.do_clear_bss_loop>:
     814:	1d 92       	st	X+, r1

00000816 <.do_clear_bss_start>:
     816:	a6 31       	cpi	r26, 0x16	; 22
     818:	b2 07       	cpc	r27, r18
     81a:	e1 f7       	brne	.-8      	; 0x814 <.do_clear_bss_loop>

0000081c <__do_global_ctors>:
     81c:	13 e0       	ldi	r17, 0x03	; 3
     81e:	c1 ef       	ldi	r28, 0xF1	; 241
     820:	d3 e0       	ldi	r29, 0x03	; 3
     822:	00 e0       	ldi	r16, 0x00	; 0
     824:	06 c0       	rjmp	.+12     	; 0x832 <__do_global_ctors+0x16>
     826:	21 97       	sbiw	r28, 0x01	; 1
     828:	01 09       	sbc	r16, r1
     82a:	80 2f       	mov	r24, r16
     82c:	fe 01       	movw	r30, r28
     82e:	0e 94 28 21 	call	0x4250	; 0x4250 <__tablejump2__>
     832:	cd 3e       	cpi	r28, 0xED	; 237
     834:	d1 07       	cpc	r29, r17
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	08 07       	cpc	r16, r24
     83a:	a9 f7       	brne	.-22     	; 0x826 <__do_global_ctors+0xa>
     83c:	04 d5       	rcall	.+2568   	; 0x1246 <main>
     83e:	0c 94 59 21 	jmp	0x42b2	; 0x42b2 <_exit>

00000842 <__bad_interrupt>:
     842:	de cb       	rjmp	.-2116   	; 0x0 <__vectors>

00000844 <setup>:
	// put your setup code here, to run once:

	//Serial.begin(9600);
	//Serial.println(F("AMG88xx thermal camera!"));

	pinMode(PIR_read_pin, INPUT);
     844:	60 e0       	ldi	r22, 0x00	; 0
     846:	8f e1       	ldi	r24, 0x1F	; 31
     848:	fa d6       	rcall	.+3572   	; 0x163e <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     84a:	26 e0       	ldi	r18, 0x06	; 6
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	55 e2       	ldi	r21, 0x25	; 37
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	87 ea       	ldi	r24, 0xA7	; 167
     856:	96 e0       	ldi	r25, 0x06	; 6
     858:	f7 d3       	rcall	.+2030   	; 0x1048 <_ZN14HardwareSerial5beginEmh>
	
	Serial.begin(9600);
	Serial.println(F("AMG88xx thermal camera!"));
     85a:	68 e0       	ldi	r22, 0x08	; 8
     85c:	71 e0       	ldi	r23, 0x01	; 1
     85e:	87 ea       	ldi	r24, 0xA7	; 167
     860:	96 e0       	ldi	r25, 0x06	; 6

	Thermal_setup();
     862:	61 d5       	rcall	.+2754   	; 0x1326 <_ZN5Print7printlnEPK19__FlashStringHelper>
     864:	2b c0       	rjmp	.+86     	; 0x8bc <_Z13Thermal_setupv>

00000866 <loop>:
void loop() {
	// put your main code here, to run repeatedly:

	//determine phase, the functions below should be placed in a state machine
	
	Thermal_size_temp_read = Thermal_read(); //the values being returned here need to be determined in testing //returns max temp detected and any number of pixels above 25C -3/7 KF
     866:	6a d0       	rcall	.+212    	; 0x93c <_Z12Thermal_readv>
     868:	60 93 40 05 	sts	0x0540, r22	; 0x800540 <Thermal_size_temp_read>
     86c:	70 93 41 05 	sts	0x0541, r23	; 0x800541 <Thermal_size_temp_read+0x1>
     870:	80 93 42 05 	sts	0x0542, r24	; 0x800542 <Thermal_size_temp_read+0x2>
     874:	90 93 43 05 	sts	0x0543, r25	; 0x800543 <Thermal_size_temp_read+0x3>

	Distance = hcsr04.distanceInMillimeters();
     878:	84 e4       	ldi	r24, 0x44	; 68
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	0e 94 e8 1c 	call	0x39d0	; 0x39d0 <_ZN6HCSR0421distanceInMillimetersEv>
     880:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <__data_end+0x1>
     884:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <__data_end>

	digitalRead(PIR_read_pin);
     888:	8f e1       	ldi	r24, 0x1F	; 31
     88a:	43 c7       	rjmp	.+3718   	; 0x1712 <digitalRead>

0000088c <_GLOBAL__sub_I_hcsr04>:

	/*
	sleep here with delay 
	*/
	
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
#define PIR_read_pin 31
//#define Telecom_enable_pin 49
#define Ping_PIR_enable_pin 33
#define Camera_enable_pin 35

HCSR04 hcsr04(TRIG_PIN, ECHO_PIN, 20, 4000); //setup ping sensor
     890:	00 ea       	ldi	r16, 0xA0	; 160
     892:	1f e0       	ldi	r17, 0x0F	; 15
     894:	24 e1       	ldi	r18, 0x14	; 20
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	4b e1       	ldi	r20, 0x1B	; 27
     89a:	50 e0       	ldi	r21, 0x00	; 0
     89c:	6d e1       	ldi	r22, 0x1D	; 29
     89e:	70 e0       	ldi	r23, 0x00	; 0
     8a0:	84 e4       	ldi	r24, 0x44	; 68
     8a2:	95 e0       	ldi	r25, 0x05	; 5
     8a4:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZN6HCSR04C1Eiiii>

	/*
	sleep here with delay 
	*/
	
     8a8:	1f 91       	pop	r17
     8aa:	0f 91       	pop	r16
     8ac:	08 95       	ret

000008ae <_GLOBAL__sub_I_displayPixelWidth>:
unsigned long delayTime;
/*
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
*/

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
     8ae:	20 e3       	ldi	r18, 0x30	; 48
     8b0:	41 e3       	ldi	r20, 0x31	; 49
     8b2:	65 e3       	ldi	r22, 0x35	; 53
     8b4:	8c e5       	ldi	r24, 0x5C	; 92
     8b6:	95 e0       	ldi	r25, 0x05	; 5
     8b8:	0c 94 cc 1a 	jmp	0x3598	; 0x3598 <_ZN15Adafruit_ST7735C1Eaaa>

000008bc <_Z13Thermal_setupv>:


int Thermal_setup(){
	//Serial.println(F("AMG88xx thermal camera!"));

	tft.initR(INITR_144GREENTAB);   // initialize a ST7735S chip, black tab
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	8c e5       	ldi	r24, 0x5C	; 92
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 e2 1a 	call	0x35c4	; 0x35c4 <_ZN15Adafruit_ST77355initREh>
	tft.fillScreen(ST7735_BLACK);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	8c e5       	ldi	r24, 0x5C	; 92
     8cc:	95 e0       	ldi	r25, 0x05	; 5
     8ce:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <_ZN12Adafruit_GFX10fillScreenEj>

	displayPixelWidth = tft.width() / 8;
     8d2:	80 91 64 05 	lds	r24, 0x0564	; 0x800564 <tft+0x8>
     8d6:	90 91 65 05 	lds	r25, 0x0565	; 0x800565 <tft+0x9>
     8da:	97 fd       	sbrc	r25, 7
     8dc:	07 96       	adiw	r24, 0x07	; 7
     8de:	33 e0       	ldi	r19, 0x03	; 3
     8e0:	95 95       	asr	r25
     8e2:	87 95       	ror	r24
     8e4:	3a 95       	dec	r19
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <_Z13Thermal_setupv+0x24>
     8e8:	90 93 a6 06 	sts	0x06A6, r25	; 0x8006a6 <displayPixelWidth+0x1>
     8ec:	80 93 a5 06 	sts	0x06A5, r24	; 0x8006a5 <displayPixelWidth>
	displayPixelHeight = tft.height() / 8;
     8f0:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <tft+0xa>
     8f4:	90 91 67 05 	lds	r25, 0x0567	; 0x800567 <tft+0xb>
     8f8:	97 fd       	sbrc	r25, 7
     8fa:	07 96       	adiw	r24, 0x07	; 7
     8fc:	23 e0       	ldi	r18, 0x03	; 3
     8fe:	95 95       	asr	r25
     900:	87 95       	ror	r24
     902:	2a 95       	dec	r18
     904:	e1 f7       	brne	.-8      	; 0x8fe <_Z13Thermal_setupv+0x42>
     906:	90 93 a4 06 	sts	0x06A4, r25	; 0x8006a4 <displayPixelHeight+0x1>
     90a:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <displayPixelHeight>
	//tft.setRotation(3);
	
	bool status;
	
	// default settings
	status = amg.begin();
     90e:	69 e6       	ldi	r22, 0x69	; 105
     910:	8c e4       	ldi	r24, 0x4C	; 76
     912:	95 e0       	ldi	r25, 0x05	; 5
     914:	ae d7       	rcall	.+3932   	; 0x1872 <_ZN16Adafruit_AMG88xx5beginEh>
	if (!status) {
     916:	81 11       	cpse	r24, r1
     918:	06 c0       	rjmp	.+12     	; 0x926 <_Z13Thermal_setupv+0x6a>
		Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
     91a:	60 e0       	ldi	r22, 0x00	; 0
     91c:	72 e0       	ldi	r23, 0x02	; 2
     91e:	87 ea       	ldi	r24, 0xA7	; 167
     920:	96 e0       	ldi	r25, 0x06	; 6
     922:	11 d5       	rcall	.+2594   	; 0x1346 <_ZN5Print7printlnEPKc>
     924:	ff cf       	rjmp	.-2      	; 0x924 <_Z13Thermal_setupv+0x68>
		while (1);
	}
	
	Serial.println("-- Thermal Camera Test --");
     926:	65 e3       	ldi	r22, 0x35	; 53
     928:	72 e0       	ldi	r23, 0x02	; 2
     92a:	87 ea       	ldi	r24, 0xA7	; 167
     92c:	96 e0       	ldi	r25, 0x06	; 6
     92e:	0b d5       	rcall	.+2582   	; 0x1346 <_ZN5Print7printlnEPKc>
	delay(100); // let sensor boot up
     930:	64 e6       	ldi	r22, 0x64	; 100
     932:	70 e0       	ldi	r23, 0x00	; 0
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	85 c5       	rjmp	.+2826   	; 0x1444 <delay>

}
     93a:	08 95       	ret

0000093c <_Z12Thermal_readv>:


Thermal_SizeTemp_Struct Thermal_read(){
     93c:	2f 92       	push	r2
     93e:	3f 92       	push	r3
     940:	4f 92       	push	r4
     942:	5f 92       	push	r5
     944:	6f 92       	push	r6
     946:	7f 92       	push	r7
     948:	8f 92       	push	r8
     94a:	9f 92       	push	r9
     94c:	af 92       	push	r10
     94e:	bf 92       	push	r11
     950:	cf 92       	push	r12
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	cf 93       	push	r28
     95e:	df 93       	push	r29
     960:	00 d0       	rcall	.+0      	; 0x962 <_Z12Thermal_readv+0x26>
     962:	1f 92       	push	r1
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	amg.readPixels(pixels);
     968:	40 e4       	ldi	r20, 0x40	; 64
     96a:	63 ea       	ldi	r22, 0xA3	; 163
     96c:	75 e0       	ldi	r23, 0x05	; 5
     96e:	8c e4       	ldi	r24, 0x4C	; 76
     970:	95 e0       	ldi	r25, 0x05	; 5
     972:	fc d7       	rcall	.+4088   	; 0x196c <_ZN16Adafruit_AMG88xx10readPixelsEPfh>
     974:	53 ea       	ldi	r21, 0xA3	; 163
     976:	85 2e       	mov	r8, r21
     978:	55 e0       	ldi	r21, 0x05	; 5
     97a:	95 2e       	mov	r9, r21
     97c:	9c 82       	std	Y+4, r9	; 0x04
     97e:	8b 82       	std	Y+3, r8	; 0x03
	//int cold = 40;

	//Parse raw reads for info

	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
		if(pixels[i] > Size_temp_read.high_temp){
     980:	eb 81       	ldd	r30, Y+3	; 0x03
     982:	fc 81       	ldd	r31, Y+4	; 0x04
     984:	c1 90       	ld	r12, Z+
     986:	d1 90       	ld	r13, Z+
     988:	e1 90       	ld	r14, Z+
     98a:	f1 90       	ld	r15, Z+
     98c:	fc 83       	std	Y+4, r31	; 0x04
     98e:	eb 83       	std	Y+3, r30	; 0x03
     990:	b1 01       	movw	r22, r2
     992:	03 2c       	mov	r0, r3
     994:	00 0c       	add	r0, r0
     996:	88 0b       	sbc	r24, r24
     998:	99 0b       	sbc	r25, r25
     99a:	e4 d0       	rcall	.+456    	; 0xb64 <__floatsisf>
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c7 01       	movw	r24, r14
     9a2:	b6 01       	movw	r22, r12
     9a4:	96 d1       	rcall	.+812    	; 0xcd2 <__gesf2>
     9a6:	18 16       	cp	r1, r24
     9a8:	24 f4       	brge	.+8      	; 0x9b2 <_Z12Thermal_readv+0x76>
			Size_temp_read.high_temp = pixels[i];
     9aa:	c7 01       	movw	r24, r14
     9ac:	b6 01       	movw	r22, r12
     9ae:	a7 d0       	rcall	.+334    	; 0xafe <__fixsfsi>
     9b0:	1b 01       	movw	r2, r22
		}
		if(pixels[i] >= MAXTEMP - 2){
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	48 ec       	ldi	r20, 0xC8	; 200
     9b8:	51 e4       	ldi	r21, 0x41	; 65
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	89 d1       	rcall	.+786    	; 0xcd2 <__gesf2>
     9c0:	87 fd       	sbrc	r24, 7
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <_Z12Thermal_readv+0x92>
			Size_temp_read.size++;
     9c4:	89 81       	ldd	r24, Y+1	; 0x01
     9c6:	9a 81       	ldd	r25, Y+2	; 0x02
     9c8:	01 96       	adiw	r24, 0x01	; 1
     9ca:	9a 83       	std	Y+2, r25	; 0x02
     9cc:	89 83       	std	Y+1, r24	; 0x01
	struct Thermal_SizeTemp_Struct Size_temp_read;
	//int cold = 40;

	//Parse raw reads for info

	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
     9ce:	eb 81       	ldd	r30, Y+3	; 0x03
     9d0:	fc 81       	ldd	r31, Y+4	; 0x04
     9d2:	e3 5a       	subi	r30, 0xA3	; 163
     9d4:	f6 40       	sbci	r31, 0x06	; 6
     9d6:	a1 f6       	brne	.-88     	; 0x980 <_Z12Thermal_readv+0x44>
     9d8:	1c 82       	std	Y+4, r1	; 0x04
     9da:	1b 82       	std	Y+3, r1	; 0x03
     9dc:	84 01       	movw	r16, r8
		}

	}
	//modify array for display
	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
		if(pixels[i] > MAXTEMP){
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	48 ed       	ldi	r20, 0xD8	; 216
     9e4:	51 e4       	ldi	r21, 0x41	; 65
     9e6:	f4 01       	movw	r30, r8
     9e8:	60 81       	ld	r22, Z
     9ea:	71 81       	ldd	r23, Z+1	; 0x01
     9ec:	82 81       	ldd	r24, Z+2	; 0x02
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	70 d1       	rcall	.+736    	; 0xcd2 <__gesf2>
     9f2:	18 16       	cp	r1, r24
     9f4:	4c f4       	brge	.+18     	; 0xa08 <_Z12Thermal_readv+0xcc>
			pixels[i] = MAXTEMP; //prevent roll-over back to blue
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a8 ed       	ldi	r26, 0xD8	; 216
     9fc:	b1 e4       	ldi	r27, 0x41	; 65
     9fe:	f4 01       	movw	r30, r8
     a00:	80 83       	st	Z, r24
     a02:	91 83       	std	Z+1, r25	; 0x01
     a04:	a2 83       	std	Z+2, r26	; 0x02
     a06:	b3 83       	std	Z+3, r27	; 0x03
     a08:	f4 e0       	ldi	r31, 0x04	; 4
     a0a:	8f 0e       	add	r8, r31
     a0c:	91 1c       	adc	r9, r1
		}
		uint8_t colorIndex = map(pixels[i], MINTEMP, MAXTEMP, 0, 255);
     a0e:	f8 01       	movw	r30, r16
     a10:	60 81       	ld	r22, Z
     a12:	71 81       	ldd	r23, Z+1	; 0x01
     a14:	82 81       	ldd	r24, Z+2	; 0x02
     a16:	93 81       	ldd	r25, Z+3	; 0x03
     a18:	72 d0       	rcall	.+228    	; 0xafe <__fixsfsi>
     a1a:	1f 92       	push	r1
     a1c:	1f 92       	push	r1
     a1e:	1f 92       	push	r1
     a20:	ff ef       	ldi	r31, 0xFF	; 255
     a22:	ff 93       	push	r31
     a24:	a1 2c       	mov	r10, r1
     a26:	b1 2c       	mov	r11, r1
     a28:	65 01       	movw	r12, r10
     a2a:	1b e1       	ldi	r17, 0x1B	; 27
     a2c:	e1 2e       	mov	r14, r17
     a2e:	f1 2c       	mov	r15, r1
     a30:	00 e0       	ldi	r16, 0x00	; 0
     a32:	10 e0       	ldi	r17, 0x00	; 0
     a34:	2e e0       	ldi	r18, 0x0E	; 14
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e0       	ldi	r20, 0x00	; 0
     a3a:	50 e0       	ldi	r21, 0x00	; 0
     a3c:	92 d6       	rcall	.+3364   	; 0x1762 <_Z3maplllll>
     a3e:	f6 2e       	mov	r15, r22
		colorIndex = constrain(colorIndex, 0, 255);

		//draw the pixels!
		tft.fillRect(displayPixelHeight * floor(i / 8), displayPixelWidth * (i % 8),
     a40:	00 91 a5 06 	lds	r16, 0x06A5	; 0x8006a5 <displayPixelWidth>
     a44:	10 91 a6 06 	lds	r17, 0x06A6	; 0x8006a6 <displayPixelWidth+0x1>
     a48:	c0 90 a3 06 	lds	r12, 0x06A3	; 0x8006a3 <displayPixelHeight>
     a4c:	d0 90 a4 06 	lds	r13, 0x06A4	; 0x8006a4 <displayPixelHeight+0x1>
     a50:	6b 81       	ldd	r22, Y+3	; 0x03
     a52:	7c 81       	ldd	r23, Y+4	; 0x04
     a54:	33 e0       	ldi	r19, 0x03	; 3
     a56:	75 95       	asr	r23
     a58:	67 95       	ror	r22
     a5a:	3a 95       	dec	r19
     a5c:	e1 f7       	brne	.-8      	; 0xa56 <_Z12Thermal_readv+0x11a>
     a5e:	07 2e       	mov	r0, r23
     a60:	00 0c       	add	r0, r0
     a62:	88 0b       	sbc	r24, r24
     a64:	99 0b       	sbc	r25, r25
     a66:	7e d0       	rcall	.+252    	; 0xb64 <__floatsisf>
     a68:	b8 d0       	rcall	.+368    	; 0xbda <floor>
     a6a:	2b 01       	movw	r4, r22
     a6c:	3c 01       	movw	r6, r24
		displayPixelHeight, displayPixelWidth, camColors[colorIndex]);
     a6e:	ef 2d       	mov	r30, r15
     a70:	f0 e0       	ldi	r31, 0x00	; 0
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	e1 5b       	subi	r30, 0xB1	; 177
     a78:	fd 4f       	sbci	r31, 0xFD	; 253
     a7a:	e0 80       	ld	r14, Z
     a7c:	f1 80       	ldd	r15, Z+1	; 0x01
     a7e:	8b 81       	ldd	r24, Y+3	; 0x03
     a80:	9c 81       	ldd	r25, Y+4	; 0x04
     a82:	87 70       	andi	r24, 0x07	; 7
     a84:	99 27       	eor	r25, r25
     a86:	80 9f       	mul	r24, r16
     a88:	50 01       	movw	r10, r0
     a8a:	81 9f       	mul	r24, r17
     a8c:	b0 0c       	add	r11, r0
     a8e:	90 9f       	mul	r25, r16
     a90:	b0 0c       	add	r11, r0
     a92:	11 24       	eor	r1, r1
     a94:	b6 01       	movw	r22, r12
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	62 d0       	rcall	.+196    	; 0xb60 <__floatunsisf>
     a9c:	a3 01       	movw	r20, r6
     a9e:	92 01       	movw	r18, r4
     aa0:	1c d1       	rcall	.+568    	; 0xcda <__mulsf3>
     aa2:	2d d0       	rcall	.+90     	; 0xafe <__fixsfsi>
     aa4:	96 01       	movw	r18, r12
     aa6:	a5 01       	movw	r20, r10
     aa8:	8c e5       	ldi	r24, 0x5C	; 92
     aaa:	95 e0       	ldi	r25, 0x05	; 5
     aac:	0e 94 3f 19 	call	0x327e	; 0x327e <_ZN15Adafruit_SPITFT8fillRectEiiiij>
			Size_temp_read.size++;
		}

	}
	//modify array for display
	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
     ab0:	8b 81       	ldd	r24, Y+3	; 0x03
     ab2:	9c 81       	ldd	r25, Y+4	; 0x04
     ab4:	01 96       	adiw	r24, 0x01	; 1
     ab6:	9c 83       	std	Y+4, r25	; 0x04
     ab8:	8b 83       	std	Y+3, r24	; 0x03
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	80 34       	cpi	r24, 0x40	; 64
     ac4:	91 05       	cpc	r25, r1
     ac6:	09 f0       	breq	.+2      	; 0xaca <_Z12Thermal_readv+0x18e>
     ac8:	89 cf       	rjmp	.-238    	; 0x9dc <_Z12Thermal_readv+0xa0>

	int size;
	
	
	
	return Size_temp_read;
     aca:	b1 01       	movw	r22, r2
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
}
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	df 90       	pop	r13
     ae6:	cf 90       	pop	r12
     ae8:	bf 90       	pop	r11
     aea:	af 90       	pop	r10
     aec:	9f 90       	pop	r9
     aee:	8f 90       	pop	r8
     af0:	7f 90       	pop	r7
     af2:	6f 90       	pop	r6
     af4:	5f 90       	pop	r5
     af6:	4f 90       	pop	r4
     af8:	3f 90       	pop	r3
     afa:	2f 90       	pop	r2
     afc:	08 95       	ret

00000afe <__fixsfsi>:
     afe:	04 d0       	rcall	.+8      	; 0xb08 <__fixunssfsi>
     b00:	68 94       	set
     b02:	b1 11       	cpse	r27, r1
     b04:	e0 c0       	rjmp	.+448    	; 0xcc6 <__fp_szero>
     b06:	08 95       	ret

00000b08 <__fixunssfsi>:
     b08:	ac d0       	rcall	.+344    	; 0xc62 <__fp_splitA>
     b0a:	88 f0       	brcs	.+34     	; 0xb2e <__fixunssfsi+0x26>
     b0c:	9f 57       	subi	r25, 0x7F	; 127
     b0e:	90 f0       	brcs	.+36     	; 0xb34 <__fixunssfsi+0x2c>
     b10:	b9 2f       	mov	r27, r25
     b12:	99 27       	eor	r25, r25
     b14:	b7 51       	subi	r27, 0x17	; 23
     b16:	a0 f0       	brcs	.+40     	; 0xb40 <__fixunssfsi+0x38>
     b18:	d1 f0       	breq	.+52     	; 0xb4e <__fixunssfsi+0x46>
     b1a:	66 0f       	add	r22, r22
     b1c:	77 1f       	adc	r23, r23
     b1e:	88 1f       	adc	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	1a f0       	brmi	.+6      	; 0xb2a <__fixunssfsi+0x22>
     b24:	ba 95       	dec	r27
     b26:	c9 f7       	brne	.-14     	; 0xb1a <__fixunssfsi+0x12>
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__fixunssfsi+0x46>
     b2a:	b1 30       	cpi	r27, 0x01	; 1
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__fixunssfsi+0x46>
     b2e:	ca d0       	rcall	.+404    	; 0xcc4 <__fp_zero>
     b30:	b1 e0       	ldi	r27, 0x01	; 1
     b32:	08 95       	ret
     b34:	c7 c0       	rjmp	.+398    	; 0xcc4 <__fp_zero>
     b36:	67 2f       	mov	r22, r23
     b38:	78 2f       	mov	r23, r24
     b3a:	88 27       	eor	r24, r24
     b3c:	b8 5f       	subi	r27, 0xF8	; 248
     b3e:	39 f0       	breq	.+14     	; 0xb4e <__fixunssfsi+0x46>
     b40:	b9 3f       	cpi	r27, 0xF9	; 249
     b42:	cc f3       	brlt	.-14     	; 0xb36 <__fixunssfsi+0x2e>
     b44:	86 95       	lsr	r24
     b46:	77 95       	ror	r23
     b48:	67 95       	ror	r22
     b4a:	b3 95       	inc	r27
     b4c:	d9 f7       	brne	.-10     	; 0xb44 <__fixunssfsi+0x3c>
     b4e:	3e f4       	brtc	.+14     	; 0xb5e <__fixunssfsi+0x56>
     b50:	90 95       	com	r25
     b52:	80 95       	com	r24
     b54:	70 95       	com	r23
     b56:	61 95       	neg	r22
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	8f 4f       	sbci	r24, 0xFF	; 255
     b5c:	9f 4f       	sbci	r25, 0xFF	; 255
     b5e:	08 95       	ret

00000b60 <__floatunsisf>:
     b60:	e8 94       	clt
     b62:	09 c0       	rjmp	.+18     	; 0xb76 <__floatsisf+0x12>

00000b64 <__floatsisf>:
     b64:	97 fb       	bst	r25, 7
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__floatsisf+0x12>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	99 23       	and	r25, r25
     b78:	a9 f0       	breq	.+42     	; 0xba4 <__floatsisf+0x40>
     b7a:	f9 2f       	mov	r31, r25
     b7c:	96 e9       	ldi	r25, 0x96	; 150
     b7e:	bb 27       	eor	r27, r27
     b80:	93 95       	inc	r25
     b82:	f6 95       	lsr	r31
     b84:	87 95       	ror	r24
     b86:	77 95       	ror	r23
     b88:	67 95       	ror	r22
     b8a:	b7 95       	ror	r27
     b8c:	f1 11       	cpse	r31, r1
     b8e:	f8 cf       	rjmp	.-16     	; 0xb80 <__floatsisf+0x1c>
     b90:	fa f4       	brpl	.+62     	; 0xbd0 <__floatsisf+0x6c>
     b92:	bb 0f       	add	r27, r27
     b94:	11 f4       	brne	.+4      	; 0xb9a <__floatsisf+0x36>
     b96:	60 ff       	sbrs	r22, 0
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <__floatsisf+0x6c>
     b9a:	6f 5f       	subi	r22, 0xFF	; 255
     b9c:	7f 4f       	sbci	r23, 0xFF	; 255
     b9e:	8f 4f       	sbci	r24, 0xFF	; 255
     ba0:	9f 4f       	sbci	r25, 0xFF	; 255
     ba2:	16 c0       	rjmp	.+44     	; 0xbd0 <__floatsisf+0x6c>
     ba4:	88 23       	and	r24, r24
     ba6:	11 f0       	breq	.+4      	; 0xbac <__floatsisf+0x48>
     ba8:	96 e9       	ldi	r25, 0x96	; 150
     baa:	11 c0       	rjmp	.+34     	; 0xbce <__floatsisf+0x6a>
     bac:	77 23       	and	r23, r23
     bae:	21 f0       	breq	.+8      	; 0xbb8 <__floatsisf+0x54>
     bb0:	9e e8       	ldi	r25, 0x8E	; 142
     bb2:	87 2f       	mov	r24, r23
     bb4:	76 2f       	mov	r23, r22
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__floatsisf+0x5e>
     bb8:	66 23       	and	r22, r22
     bba:	71 f0       	breq	.+28     	; 0xbd8 <__floatsisf+0x74>
     bbc:	96 e8       	ldi	r25, 0x86	; 134
     bbe:	86 2f       	mov	r24, r22
     bc0:	70 e0       	ldi	r23, 0x00	; 0
     bc2:	60 e0       	ldi	r22, 0x00	; 0
     bc4:	2a f0       	brmi	.+10     	; 0xbd0 <__floatsisf+0x6c>
     bc6:	9a 95       	dec	r25
     bc8:	66 0f       	add	r22, r22
     bca:	77 1f       	adc	r23, r23
     bcc:	88 1f       	adc	r24, r24
     bce:	da f7       	brpl	.-10     	; 0xbc6 <__floatsisf+0x62>
     bd0:	88 0f       	add	r24, r24
     bd2:	96 95       	lsr	r25
     bd4:	87 95       	ror	r24
     bd6:	97 f9       	bld	r25, 7
     bd8:	08 95       	ret

00000bda <floor>:
     bda:	5d d0       	rcall	.+186    	; 0xc96 <__fp_trunc>
     bdc:	80 f0       	brcs	.+32     	; 0xbfe <floor+0x24>
     bde:	9f 37       	cpi	r25, 0x7F	; 127
     be0:	40 f4       	brcc	.+16     	; 0xbf2 <floor+0x18>
     be2:	91 11       	cpse	r25, r1
     be4:	0e f0       	brts	.+2      	; 0xbe8 <floor+0xe>
     be6:	6f c0       	rjmp	.+222    	; 0xcc6 <__fp_szero>
     be8:	60 e0       	ldi	r22, 0x00	; 0
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e8       	ldi	r24, 0x80	; 128
     bee:	9f eb       	ldi	r25, 0xBF	; 191
     bf0:	08 95       	ret
     bf2:	26 f4       	brtc	.+8      	; 0xbfc <floor+0x22>
     bf4:	1b 16       	cp	r1, r27
     bf6:	61 1d       	adc	r22, r1
     bf8:	71 1d       	adc	r23, r1
     bfa:	81 1d       	adc	r24, r1
     bfc:	01 c0       	rjmp	.+2      	; 0xc00 <__fp_mintl>
     bfe:	1b c0       	rjmp	.+54     	; 0xc36 <__fp_mpack>

00000c00 <__fp_mintl>:
     c00:	88 23       	and	r24, r24
     c02:	71 f4       	brne	.+28     	; 0xc20 <__fp_mintl+0x20>
     c04:	77 23       	and	r23, r23
     c06:	21 f0       	breq	.+8      	; 0xc10 <__fp_mintl+0x10>
     c08:	98 50       	subi	r25, 0x08	; 8
     c0a:	87 2b       	or	r24, r23
     c0c:	76 2f       	mov	r23, r22
     c0e:	07 c0       	rjmp	.+14     	; 0xc1e <__fp_mintl+0x1e>
     c10:	66 23       	and	r22, r22
     c12:	11 f4       	brne	.+4      	; 0xc18 <__fp_mintl+0x18>
     c14:	99 27       	eor	r25, r25
     c16:	0d c0       	rjmp	.+26     	; 0xc32 <__fp_mintl+0x32>
     c18:	90 51       	subi	r25, 0x10	; 16
     c1a:	86 2b       	or	r24, r22
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	2a f0       	brmi	.+10     	; 0xc2c <__fp_mintl+0x2c>
     c22:	9a 95       	dec	r25
     c24:	66 0f       	add	r22, r22
     c26:	77 1f       	adc	r23, r23
     c28:	88 1f       	adc	r24, r24
     c2a:	da f7       	brpl	.-10     	; 0xc22 <__fp_mintl+0x22>
     c2c:	88 0f       	add	r24, r24
     c2e:	96 95       	lsr	r25
     c30:	87 95       	ror	r24
     c32:	97 f9       	bld	r25, 7
     c34:	08 95       	ret

00000c36 <__fp_mpack>:
     c36:	9f 3f       	cpi	r25, 0xFF	; 255
     c38:	31 f0       	breq	.+12     	; 0xc46 <__fp_mpack_finite+0xc>

00000c3a <__fp_mpack_finite>:
     c3a:	91 50       	subi	r25, 0x01	; 1
     c3c:	20 f4       	brcc	.+8      	; 0xc46 <__fp_mpack_finite+0xc>
     c3e:	87 95       	ror	r24
     c40:	77 95       	ror	r23
     c42:	67 95       	ror	r22
     c44:	b7 95       	ror	r27
     c46:	88 0f       	add	r24, r24
     c48:	91 1d       	adc	r25, r1
     c4a:	96 95       	lsr	r25
     c4c:	87 95       	ror	r24
     c4e:	97 f9       	bld	r25, 7
     c50:	08 95       	ret

00000c52 <__fp_split3>:
     c52:	57 fd       	sbrc	r21, 7
     c54:	90 58       	subi	r25, 0x80	; 128
     c56:	44 0f       	add	r20, r20
     c58:	55 1f       	adc	r21, r21
     c5a:	59 f0       	breq	.+22     	; 0xc72 <__fp_splitA+0x10>
     c5c:	5f 3f       	cpi	r21, 0xFF	; 255
     c5e:	71 f0       	breq	.+28     	; 0xc7c <__fp_splitA+0x1a>
     c60:	47 95       	ror	r20

00000c62 <__fp_splitA>:
     c62:	88 0f       	add	r24, r24
     c64:	97 fb       	bst	r25, 7
     c66:	99 1f       	adc	r25, r25
     c68:	61 f0       	breq	.+24     	; 0xc82 <__fp_splitA+0x20>
     c6a:	9f 3f       	cpi	r25, 0xFF	; 255
     c6c:	79 f0       	breq	.+30     	; 0xc8c <__fp_splitA+0x2a>
     c6e:	87 95       	ror	r24
     c70:	08 95       	ret
     c72:	12 16       	cp	r1, r18
     c74:	13 06       	cpc	r1, r19
     c76:	14 06       	cpc	r1, r20
     c78:	55 1f       	adc	r21, r21
     c7a:	f2 cf       	rjmp	.-28     	; 0xc60 <__fp_split3+0xe>
     c7c:	46 95       	lsr	r20
     c7e:	f1 df       	rcall	.-30     	; 0xc62 <__fp_splitA>
     c80:	08 c0       	rjmp	.+16     	; 0xc92 <__fp_splitA+0x30>
     c82:	16 16       	cp	r1, r22
     c84:	17 06       	cpc	r1, r23
     c86:	18 06       	cpc	r1, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	f1 cf       	rjmp	.-30     	; 0xc6e <__fp_splitA+0xc>
     c8c:	86 95       	lsr	r24
     c8e:	71 05       	cpc	r23, r1
     c90:	61 05       	cpc	r22, r1
     c92:	08 94       	sec
     c94:	08 95       	ret

00000c96 <__fp_trunc>:
     c96:	e5 df       	rcall	.-54     	; 0xc62 <__fp_splitA>
     c98:	a0 f0       	brcs	.+40     	; 0xcc2 <__fp_trunc+0x2c>
     c9a:	be e7       	ldi	r27, 0x7E	; 126
     c9c:	b9 17       	cp	r27, r25
     c9e:	88 f4       	brcc	.+34     	; 0xcc2 <__fp_trunc+0x2c>
     ca0:	bb 27       	eor	r27, r27
     ca2:	9f 38       	cpi	r25, 0x8F	; 143
     ca4:	60 f4       	brcc	.+24     	; 0xcbe <__fp_trunc+0x28>
     ca6:	16 16       	cp	r1, r22
     ca8:	b1 1d       	adc	r27, r1
     caa:	67 2f       	mov	r22, r23
     cac:	78 2f       	mov	r23, r24
     cae:	88 27       	eor	r24, r24
     cb0:	98 5f       	subi	r25, 0xF8	; 248
     cb2:	f7 cf       	rjmp	.-18     	; 0xca2 <__fp_trunc+0xc>
     cb4:	86 95       	lsr	r24
     cb6:	77 95       	ror	r23
     cb8:	67 95       	ror	r22
     cba:	b1 1d       	adc	r27, r1
     cbc:	93 95       	inc	r25
     cbe:	96 39       	cpi	r25, 0x96	; 150
     cc0:	c8 f3       	brcs	.-14     	; 0xcb4 <__fp_trunc+0x1e>
     cc2:	08 95       	ret

00000cc4 <__fp_zero>:
     cc4:	e8 94       	clt

00000cc6 <__fp_szero>:
     cc6:	bb 27       	eor	r27, r27
     cc8:	66 27       	eor	r22, r22
     cca:	77 27       	eor	r23, r23
     ccc:	cb 01       	movw	r24, r22
     cce:	97 f9       	bld	r25, 7
     cd0:	08 95       	ret

00000cd2 <__gesf2>:
     cd2:	66 d0       	rcall	.+204    	; 0xda0 <__fp_cmp>
     cd4:	08 f4       	brcc	.+2      	; 0xcd8 <__gesf2+0x6>
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	08 95       	ret

00000cda <__mulsf3>:
     cda:	0b d0       	rcall	.+22     	; 0xcf2 <__mulsf3x>
     cdc:	9c c0       	rjmp	.+312    	; 0xe16 <__fp_round>
     cde:	8d d0       	rcall	.+282    	; 0xdfa <__fp_pscA>
     ce0:	28 f0       	brcs	.+10     	; 0xcec <__mulsf3+0x12>
     ce2:	92 d0       	rcall	.+292    	; 0xe08 <__fp_pscB>
     ce4:	18 f0       	brcs	.+6      	; 0xcec <__mulsf3+0x12>
     ce6:	95 23       	and	r25, r21
     ce8:	09 f0       	breq	.+2      	; 0xcec <__mulsf3+0x12>
     cea:	7e c0       	rjmp	.+252    	; 0xde8 <__fp_inf>
     cec:	83 c0       	rjmp	.+262    	; 0xdf4 <__fp_nan>
     cee:	11 24       	eor	r1, r1
     cf0:	ea cf       	rjmp	.-44     	; 0xcc6 <__fp_szero>

00000cf2 <__mulsf3x>:
     cf2:	af df       	rcall	.-162    	; 0xc52 <__fp_split3>
     cf4:	a0 f3       	brcs	.-24     	; 0xcde <__mulsf3+0x4>

00000cf6 <__mulsf3_pse>:
     cf6:	95 9f       	mul	r25, r21
     cf8:	d1 f3       	breq	.-12     	; 0xcee <__mulsf3+0x14>
     cfa:	95 0f       	add	r25, r21
     cfc:	50 e0       	ldi	r21, 0x00	; 0
     cfe:	55 1f       	adc	r21, r21
     d00:	62 9f       	mul	r22, r18
     d02:	f0 01       	movw	r30, r0
     d04:	72 9f       	mul	r23, r18
     d06:	bb 27       	eor	r27, r27
     d08:	f0 0d       	add	r31, r0
     d0a:	b1 1d       	adc	r27, r1
     d0c:	63 9f       	mul	r22, r19
     d0e:	aa 27       	eor	r26, r26
     d10:	f0 0d       	add	r31, r0
     d12:	b1 1d       	adc	r27, r1
     d14:	aa 1f       	adc	r26, r26
     d16:	64 9f       	mul	r22, r20
     d18:	66 27       	eor	r22, r22
     d1a:	b0 0d       	add	r27, r0
     d1c:	a1 1d       	adc	r26, r1
     d1e:	66 1f       	adc	r22, r22
     d20:	82 9f       	mul	r24, r18
     d22:	22 27       	eor	r18, r18
     d24:	b0 0d       	add	r27, r0
     d26:	a1 1d       	adc	r26, r1
     d28:	62 1f       	adc	r22, r18
     d2a:	73 9f       	mul	r23, r19
     d2c:	b0 0d       	add	r27, r0
     d2e:	a1 1d       	adc	r26, r1
     d30:	62 1f       	adc	r22, r18
     d32:	83 9f       	mul	r24, r19
     d34:	a0 0d       	add	r26, r0
     d36:	61 1d       	adc	r22, r1
     d38:	22 1f       	adc	r18, r18
     d3a:	74 9f       	mul	r23, r20
     d3c:	33 27       	eor	r19, r19
     d3e:	a0 0d       	add	r26, r0
     d40:	61 1d       	adc	r22, r1
     d42:	23 1f       	adc	r18, r19
     d44:	84 9f       	mul	r24, r20
     d46:	60 0d       	add	r22, r0
     d48:	21 1d       	adc	r18, r1
     d4a:	82 2f       	mov	r24, r18
     d4c:	76 2f       	mov	r23, r22
     d4e:	6a 2f       	mov	r22, r26
     d50:	11 24       	eor	r1, r1
     d52:	9f 57       	subi	r25, 0x7F	; 127
     d54:	50 40       	sbci	r21, 0x00	; 0
     d56:	8a f0       	brmi	.+34     	; 0xd7a <__mulsf3_pse+0x84>
     d58:	e1 f0       	breq	.+56     	; 0xd92 <__mulsf3_pse+0x9c>
     d5a:	88 23       	and	r24, r24
     d5c:	4a f0       	brmi	.+18     	; 0xd70 <__mulsf3_pse+0x7a>
     d5e:	ee 0f       	add	r30, r30
     d60:	ff 1f       	adc	r31, r31
     d62:	bb 1f       	adc	r27, r27
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	88 1f       	adc	r24, r24
     d6a:	91 50       	subi	r25, 0x01	; 1
     d6c:	50 40       	sbci	r21, 0x00	; 0
     d6e:	a9 f7       	brne	.-22     	; 0xd5a <__mulsf3_pse+0x64>
     d70:	9e 3f       	cpi	r25, 0xFE	; 254
     d72:	51 05       	cpc	r21, r1
     d74:	70 f0       	brcs	.+28     	; 0xd92 <__mulsf3_pse+0x9c>
     d76:	38 c0       	rjmp	.+112    	; 0xde8 <__fp_inf>
     d78:	a6 cf       	rjmp	.-180    	; 0xcc6 <__fp_szero>
     d7a:	5f 3f       	cpi	r21, 0xFF	; 255
     d7c:	ec f3       	brlt	.-6      	; 0xd78 <__mulsf3_pse+0x82>
     d7e:	98 3e       	cpi	r25, 0xE8	; 232
     d80:	dc f3       	brlt	.-10     	; 0xd78 <__mulsf3_pse+0x82>
     d82:	86 95       	lsr	r24
     d84:	77 95       	ror	r23
     d86:	67 95       	ror	r22
     d88:	b7 95       	ror	r27
     d8a:	f7 95       	ror	r31
     d8c:	e7 95       	ror	r30
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	c1 f7       	brne	.-16     	; 0xd82 <__mulsf3_pse+0x8c>
     d92:	fe 2b       	or	r31, r30
     d94:	88 0f       	add	r24, r24
     d96:	91 1d       	adc	r25, r1
     d98:	96 95       	lsr	r25
     d9a:	87 95       	ror	r24
     d9c:	97 f9       	bld	r25, 7
     d9e:	08 95       	ret

00000da0 <__fp_cmp>:
     da0:	99 0f       	add	r25, r25
     da2:	00 08       	sbc	r0, r0
     da4:	55 0f       	add	r21, r21
     da6:	aa 0b       	sbc	r26, r26
     da8:	e0 e8       	ldi	r30, 0x80	; 128
     daa:	fe ef       	ldi	r31, 0xFE	; 254
     dac:	16 16       	cp	r1, r22
     dae:	17 06       	cpc	r1, r23
     db0:	e8 07       	cpc	r30, r24
     db2:	f9 07       	cpc	r31, r25
     db4:	c0 f0       	brcs	.+48     	; 0xde6 <__fp_cmp+0x46>
     db6:	12 16       	cp	r1, r18
     db8:	13 06       	cpc	r1, r19
     dba:	e4 07       	cpc	r30, r20
     dbc:	f5 07       	cpc	r31, r21
     dbe:	98 f0       	brcs	.+38     	; 0xde6 <__fp_cmp+0x46>
     dc0:	62 1b       	sub	r22, r18
     dc2:	73 0b       	sbc	r23, r19
     dc4:	84 0b       	sbc	r24, r20
     dc6:	95 0b       	sbc	r25, r21
     dc8:	39 f4       	brne	.+14     	; 0xdd8 <__fp_cmp+0x38>
     dca:	0a 26       	eor	r0, r26
     dcc:	61 f0       	breq	.+24     	; 0xde6 <__fp_cmp+0x46>
     dce:	23 2b       	or	r18, r19
     dd0:	24 2b       	or	r18, r20
     dd2:	25 2b       	or	r18, r21
     dd4:	21 f4       	brne	.+8      	; 0xdde <__fp_cmp+0x3e>
     dd6:	08 95       	ret
     dd8:	0a 26       	eor	r0, r26
     dda:	09 f4       	brne	.+2      	; 0xdde <__fp_cmp+0x3e>
     ddc:	a1 40       	sbci	r26, 0x01	; 1
     dde:	a6 95       	lsr	r26
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	81 1d       	adc	r24, r1
     de4:	81 1d       	adc	r24, r1
     de6:	08 95       	ret

00000de8 <__fp_inf>:
     de8:	97 f9       	bld	r25, 7
     dea:	9f 67       	ori	r25, 0x7F	; 127
     dec:	80 e8       	ldi	r24, 0x80	; 128
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	60 e0       	ldi	r22, 0x00	; 0
     df2:	08 95       	ret

00000df4 <__fp_nan>:
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	80 ec       	ldi	r24, 0xC0	; 192
     df8:	08 95       	ret

00000dfa <__fp_pscA>:
     dfa:	00 24       	eor	r0, r0
     dfc:	0a 94       	dec	r0
     dfe:	16 16       	cp	r1, r22
     e00:	17 06       	cpc	r1, r23
     e02:	18 06       	cpc	r1, r24
     e04:	09 06       	cpc	r0, r25
     e06:	08 95       	ret

00000e08 <__fp_pscB>:
     e08:	00 24       	eor	r0, r0
     e0a:	0a 94       	dec	r0
     e0c:	12 16       	cp	r1, r18
     e0e:	13 06       	cpc	r1, r19
     e10:	14 06       	cpc	r1, r20
     e12:	05 06       	cpc	r0, r21
     e14:	08 95       	ret

00000e16 <__fp_round>:
     e16:	09 2e       	mov	r0, r25
     e18:	03 94       	inc	r0
     e1a:	00 0c       	add	r0, r0
     e1c:	11 f4       	brne	.+4      	; 0xe22 <__fp_round+0xc>
     e1e:	88 23       	and	r24, r24
     e20:	52 f0       	brmi	.+20     	; 0xe36 <__fp_round+0x20>
     e22:	bb 0f       	add	r27, r27
     e24:	40 f4       	brcc	.+16     	; 0xe36 <__fp_round+0x20>
     e26:	bf 2b       	or	r27, r31
     e28:	11 f4       	brne	.+4      	; 0xe2e <__fp_round+0x18>
     e2a:	60 ff       	sbrs	r22, 0
     e2c:	04 c0       	rjmp	.+8      	; 0xe36 <__fp_round+0x20>
     e2e:	6f 5f       	subi	r22, 0xFF	; 255
     e30:	7f 4f       	sbci	r23, 0xFF	; 255
     e32:	8f 4f       	sbci	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	08 95       	ret

00000e38 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     e38:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     e3a:	91 8d       	ldd	r25, Z+25	; 0x19
     e3c:	22 8d       	ldd	r18, Z+26	; 0x1a
     e3e:	89 2f       	mov	r24, r25
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	80 5c       	subi	r24, 0xC0	; 192
     e44:	9f 4f       	sbci	r25, 0xFF	; 255
     e46:	82 1b       	sub	r24, r18
     e48:	91 09       	sbc	r25, r1
}
     e4a:	8f 73       	andi	r24, 0x3F	; 63
     e4c:	99 27       	eor	r25, r25
     e4e:	08 95       	ret

00000e50 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     e50:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     e52:	91 8d       	ldd	r25, Z+25	; 0x19
     e54:	82 8d       	ldd	r24, Z+26	; 0x1a
     e56:	98 17       	cp	r25, r24
     e58:	31 f0       	breq	.+12     	; 0xe66 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     e5a:	82 8d       	ldd	r24, Z+26	; 0x1a
     e5c:	e8 0f       	add	r30, r24
     e5e:	f1 1d       	adc	r31, r1
     e60:	85 8d       	ldd	r24, Z+29	; 0x1d
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     e6a:	08 95       	ret

00000e6c <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     e6c:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     e6e:	91 8d       	ldd	r25, Z+25	; 0x19
     e70:	82 8d       	ldd	r24, Z+26	; 0x1a
     e72:	98 17       	cp	r25, r24
     e74:	61 f0       	breq	.+24     	; 0xe8e <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     e76:	82 8d       	ldd	r24, Z+26	; 0x1a
     e78:	df 01       	movw	r26, r30
     e7a:	a8 0f       	add	r26, r24
     e7c:	b1 1d       	adc	r27, r1
     e7e:	5d 96       	adiw	r26, 0x1d	; 29
     e80:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     e82:	92 8d       	ldd	r25, Z+26	; 0x1a
     e84:	9f 5f       	subi	r25, 0xFF	; 255
     e86:	9f 73       	andi	r25, 0x3F	; 63
     e88:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     e92:	08 95       	ret

00000e94 <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     e94:	fc 01       	movw	r30, r24
     e96:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     e98:	44 8d       	ldd	r20, Z+28	; 0x1c
     e9a:	25 2f       	mov	r18, r21
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	84 2f       	mov	r24, r20
     ea0:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     ea2:	82 1b       	sub	r24, r18
     ea4:	93 0b       	sbc	r25, r19
     ea6:	54 17       	cp	r21, r20
     ea8:	10 f0       	brcs	.+4      	; 0xeae <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     eaa:	cf 96       	adiw	r24, 0x3f	; 63
     eac:	08 95       	ret
  return tail - head - 1;
     eae:	01 97       	sbiw	r24, 0x01	; 1
}
     eb0:	08 95       	ret

00000eb2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     eb2:	8c ee       	ldi	r24, 0xEC	; 236
     eb4:	98 e0       	ldi	r25, 0x08	; 8
     eb6:	89 2b       	or	r24, r25
     eb8:	39 f0       	breq	.+14     	; 0xec8 <_Z14serialEventRunv+0x16>
     eba:	80 e0       	ldi	r24, 0x00	; 0
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	89 2b       	or	r24, r25
     ec0:	19 f0       	breq	.+6      	; 0xec8 <_Z14serialEventRunv+0x16>
     ec2:	8a d1       	rcall	.+788    	; 0x11d8 <_Z17Serial0_availablev>
     ec4:	81 11       	cpse	r24, r1
     ec6:	25 c0       	rjmp	.+74     	; 0xf12 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	89 2b       	or	r24, r25
     ece:	41 f0       	breq	.+16     	; 0xee0 <_Z14serialEventRunv+0x2e>
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	89 2b       	or	r24, r25
     ed6:	21 f0       	breq	.+8      	; 0xee0 <_Z14serialEventRunv+0x2e>
     ed8:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     edc:	81 11       	cpse	r24, r1
     ede:	1c c0       	rjmp	.+56     	; 0xf18 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	89 2b       	or	r24, r25
     ee6:	41 f0       	breq	.+16     	; 0xef8 <_Z14serialEventRunv+0x46>
     ee8:	80 e0       	ldi	r24, 0x00	; 0
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	89 2b       	or	r24, r25
     eee:	21 f0       	breq	.+8      	; 0xef8 <_Z14serialEventRunv+0x46>
     ef0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     ef4:	81 11       	cpse	r24, r1
     ef6:	13 c0       	rjmp	.+38     	; 0xf1e <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	89 2b       	or	r24, r25
     efe:	a1 f0       	breq	.+40     	; 0xf28 <_Z14serialEventRunv+0x76>
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	89 2b       	or	r24, r25
     f06:	81 f0       	breq	.+32     	; 0xf28 <_Z14serialEventRunv+0x76>
     f08:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f0c:	81 11       	cpse	r24, r1
     f0e:	0a c0       	rjmp	.+20     	; 0xf24 <_Z14serialEventRunv+0x72>
     f10:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     f12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f16:	d8 cf       	rjmp	.-80     	; 0xec8 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     f18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f1c:	e1 cf       	rjmp	.-62     	; 0xee0 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     f1e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     f22:	ea cf       	rjmp	.-44     	; 0xef8 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     f24:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     f28:	08 95       	ret

00000f2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     f2a:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     f2c:	84 8d       	ldd	r24, Z+28	; 0x1c
     f2e:	df 01       	movw	r26, r30
     f30:	a8 0f       	add	r26, r24
     f32:	b1 1d       	adc	r27, r1
     f34:	a3 5a       	subi	r26, 0xA3	; 163
     f36:	bf 4f       	sbci	r27, 0xFF	; 255
     f38:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     f3a:	84 8d       	ldd	r24, Z+28	; 0x1c
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	8f 73       	andi	r24, 0x3F	; 63
     f42:	99 27       	eor	r25, r25
     f44:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     f46:	a6 89       	ldd	r26, Z+22	; 0x16
     f48:	b7 89       	ldd	r27, Z+23	; 0x17
     f4a:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     f4c:	a0 89       	ldd	r26, Z+16	; 0x10
     f4e:	b1 89       	ldd	r27, Z+17	; 0x11
     f50:	8c 91       	ld	r24, X
     f52:	83 70       	andi	r24, 0x03	; 3
     f54:	80 64       	ori	r24, 0x40	; 64
     f56:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     f58:	93 8d       	ldd	r25, Z+27	; 0x1b
     f5a:	84 8d       	ldd	r24, Z+28	; 0x1c
     f5c:	98 13       	cpse	r25, r24
     f5e:	06 c0       	rjmp	.+12     	; 0xf6c <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     f60:	02 88       	ldd	r0, Z+18	; 0x12
     f62:	f3 89       	ldd	r31, Z+19	; 0x13
     f64:	e0 2d       	mov	r30, r0
     f66:	80 81       	ld	r24, Z
     f68:	8f 7d       	andi	r24, 0xDF	; 223
     f6a:	80 83       	st	Z, r24
     f6c:	08 95       	ret

00000f6e <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     f6e:	ef 92       	push	r14
     f70:	ff 92       	push	r15
     f72:	0f 93       	push	r16
     f74:	1f 93       	push	r17
     f76:	cf 93       	push	r28
     f78:	df 93       	push	r29
     f7a:	ec 01       	movw	r28, r24
  _written = true;
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     f80:	9b 8d       	ldd	r25, Y+27	; 0x1b
     f82:	8c 8d       	ldd	r24, Y+28	; 0x1c
     f84:	98 13       	cpse	r25, r24
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <_ZN14HardwareSerial5writeEh+0x24>
     f88:	e8 89       	ldd	r30, Y+16	; 0x10
     f8a:	f9 89       	ldd	r31, Y+17	; 0x11
     f8c:	80 81       	ld	r24, Z
     f8e:	85 fd       	sbrc	r24, 5
     f90:	25 c0       	rjmp	.+74     	; 0xfdc <_ZN14HardwareSerial5writeEh+0x6e>
     f92:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     f94:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f96:	10 e0       	ldi	r17, 0x00	; 0
     f98:	0f 5f       	subi	r16, 0xFF	; 255
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	0f 73       	andi	r16, 0x3F	; 63
     f9e:	11 27       	eor	r17, r17
     fa0:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     fa2:	8c 8d       	ldd	r24, Y+28	; 0x1c
     fa4:	e8 12       	cpse	r14, r24
     fa6:	0b c0       	rjmp	.+22     	; 0xfbe <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	07 fc       	sbrc	r0, 7
     fac:	fa cf       	rjmp	.-12     	; 0xfa2 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     fae:	e8 89       	ldd	r30, Y+16	; 0x10
     fb0:	f9 89       	ldd	r31, Y+17	; 0x11
     fb2:	80 81       	ld	r24, Z
     fb4:	85 ff       	sbrs	r24, 5
     fb6:	f5 cf       	rjmp	.-22     	; 0xfa2 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     fb8:	ce 01       	movw	r24, r28
     fba:	b7 df       	rcall	.-146    	; 0xf2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     fbc:	f2 cf       	rjmp	.-28     	; 0xfa2 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc0:	fe 01       	movw	r30, r28
     fc2:	e8 0f       	add	r30, r24
     fc4:	f1 1d       	adc	r31, r1
     fc6:	e3 5a       	subi	r30, 0xA3	; 163
     fc8:	ff 4f       	sbci	r31, 0xFF	; 255
     fca:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fcc:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     fce:	f8 94       	cli
    _tx_buffer_head = i;
     fd0:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     fd2:	ea 89       	ldd	r30, Y+18	; 0x12
     fd4:	fb 89       	ldd	r31, Y+19	; 0x13
     fd6:	80 81       	ld	r24, Z
     fd8:	80 62       	ori	r24, 0x20	; 32
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     fdc:	9f b7       	in	r25, 0x3f	; 63
     fde:	f8 94       	cli
      *_udr = c;
     fe0:	ee 89       	ldd	r30, Y+22	; 0x16
     fe2:	ff 89       	ldd	r31, Y+23	; 0x17
     fe4:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     fe6:	e8 89       	ldd	r30, Y+16	; 0x10
     fe8:	f9 89       	ldd	r31, Y+17	; 0x11
     fea:	80 81       	ld	r24, Z
     fec:	83 70       	andi	r24, 0x03	; 3
     fee:	80 64       	ori	r24, 0x40	; 64
     ff0:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     ff2:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	08 95       	ret

00001006 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    100c:	88 8d       	ldd	r24, Y+24	; 0x18
    100e:	88 23       	and	r24, r24
    1010:	c1 f0       	breq	.+48     	; 0x1042 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1012:	ea 89       	ldd	r30, Y+18	; 0x12
    1014:	fb 89       	ldd	r31, Y+19	; 0x13
    1016:	80 81       	ld	r24, Z
    1018:	85 fd       	sbrc	r24, 5
    101a:	05 c0       	rjmp	.+10     	; 0x1026 <_ZN14HardwareSerial5flushEv+0x20>
    101c:	a8 89       	ldd	r26, Y+16	; 0x10
    101e:	b9 89       	ldd	r27, Y+17	; 0x11
    1020:	8c 91       	ld	r24, X
    1022:	86 fd       	sbrc	r24, 6
    1024:	0e c0       	rjmp	.+28     	; 0x1042 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1026:	0f b6       	in	r0, 0x3f	; 63
    1028:	07 fc       	sbrc	r0, 7
    102a:	f5 cf       	rjmp	.-22     	; 0x1016 <_ZN14HardwareSerial5flushEv+0x10>
    102c:	80 81       	ld	r24, Z
    102e:	85 ff       	sbrs	r24, 5
    1030:	f2 cf       	rjmp	.-28     	; 0x1016 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    1032:	a8 89       	ldd	r26, Y+16	; 0x10
    1034:	b9 89       	ldd	r27, Y+17	; 0x11
    1036:	8c 91       	ld	r24, X
    1038:	85 ff       	sbrs	r24, 5
    103a:	ed cf       	rjmp	.-38     	; 0x1016 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    103c:	ce 01       	movw	r24, r28
    103e:	75 df       	rcall	.-278    	; 0xf2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1040:	e8 cf       	rjmp	.-48     	; 0x1012 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	08 95       	ret

00001048 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    1048:	cf 92       	push	r12
    104a:	df 92       	push	r13
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	ec 01       	movw	r28, r24
    1058:	6a 01       	movw	r12, r20
    105a:	7b 01       	movw	r14, r22
    105c:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    105e:	e8 89       	ldd	r30, Y+16	; 0x10
    1060:	f9 89       	ldd	r31, Y+17	; 0x11
    1062:	82 e0       	ldi	r24, 0x02	; 2
    1064:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1066:	41 15       	cp	r20, r1
    1068:	51 4e       	sbci	r21, 0xE1	; 225
    106a:	61 05       	cpc	r22, r1
    106c:	71 05       	cpc	r23, r1
    106e:	b1 f0       	breq	.+44     	; 0x109c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	79 e0       	ldi	r23, 0x09	; 9
    1074:	8d e3       	ldi	r24, 0x3D	; 61
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	a7 01       	movw	r20, r14
    107a:	96 01       	movw	r18, r12
    107c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__udivmodsi4>
    1080:	da 01       	movw	r26, r20
    1082:	c9 01       	movw	r24, r18
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	a1 09       	sbc	r26, r1
    1088:	b1 09       	sbc	r27, r1
    108a:	b6 95       	lsr	r27
    108c:	a7 95       	ror	r26
    108e:	97 95       	ror	r25
    1090:	87 95       	ror	r24
    1092:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1094:	21 15       	cp	r18, r1
    1096:	80 e1       	ldi	r24, 0x10	; 16
    1098:	38 07       	cpc	r19, r24
    109a:	a8 f0       	brcs	.+42     	; 0x10c6 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    109c:	e8 89       	ldd	r30, Y+16	; 0x10
    109e:	f9 89       	ldd	r31, Y+17	; 0x11
    10a0:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    10a2:	60 e8       	ldi	r22, 0x80	; 128
    10a4:	74 e8       	ldi	r23, 0x84	; 132
    10a6:	8e e1       	ldi	r24, 0x1E	; 30
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a7 01       	movw	r20, r14
    10ac:	96 01       	movw	r18, r12
    10ae:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <__udivmodsi4>
    10b2:	da 01       	movw	r26, r20
    10b4:	c9 01       	movw	r24, r18
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	a1 09       	sbc	r26, r1
    10ba:	b1 09       	sbc	r27, r1
    10bc:	b6 95       	lsr	r27
    10be:	a7 95       	ror	r26
    10c0:	97 95       	ror	r25
    10c2:	87 95       	ror	r24
    10c4:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    10c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    10c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    10ca:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    10cc:	ee 85       	ldd	r30, Y+14	; 0x0e
    10ce:	ff 85       	ldd	r31, Y+15	; 0x0f
    10d0:	20 83       	st	Z, r18

  _written = false;
    10d2:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    10d4:	ec 89       	ldd	r30, Y+20	; 0x14
    10d6:	fd 89       	ldd	r31, Y+21	; 0x15
    10d8:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    10da:	ea 89       	ldd	r30, Y+18	; 0x12
    10dc:	fb 89       	ldd	r31, Y+19	; 0x13
    10de:	80 81       	ld	r24, Z
    10e0:	80 61       	ori	r24, 0x10	; 16
    10e2:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    10e4:	ea 89       	ldd	r30, Y+18	; 0x12
    10e6:	fb 89       	ldd	r31, Y+19	; 0x13
    10e8:	80 81       	ld	r24, Z
    10ea:	88 60       	ori	r24, 0x08	; 8
    10ec:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    10ee:	ea 89       	ldd	r30, Y+18	; 0x12
    10f0:	fb 89       	ldd	r31, Y+19	; 0x13
    10f2:	80 81       	ld	r24, Z
    10f4:	80 68       	ori	r24, 0x80	; 128
    10f6:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    10f8:	ea 89       	ldd	r30, Y+18	; 0x12
    10fa:	fb 89       	ldd	r31, Y+19	; 0x13
    10fc:	80 81       	ld	r24, Z
    10fe:	8f 7d       	andi	r24, 0xDF	; 223
    1100:	80 83       	st	Z, r24
}
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	1f 91       	pop	r17
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	08 95       	ret

00001112 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
    1112:	80 e0       	ldi	r24, 0x00	; 0
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	08 95       	ret

00001118 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
    1118:	08 95       	ret

0000111a <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    111a:	1f 92       	push	r1
    111c:	0f 92       	push	r0
    111e:	0f b6       	in	r0, 0x3f	; 63
    1120:	0f 92       	push	r0
    1122:	11 24       	eor	r1, r1
    1124:	0b b6       	in	r0, 0x3b	; 59
    1126:	0f 92       	push	r0
    1128:	2f 93       	push	r18
    112a:	8f 93       	push	r24
    112c:	9f 93       	push	r25
    112e:	ef 93       	push	r30
    1130:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1132:	e0 91 b7 06 	lds	r30, 0x06B7	; 0x8006b7 <Serial+0x10>
    1136:	f0 91 b8 06 	lds	r31, 0x06B8	; 0x8006b8 <Serial+0x11>
    113a:	80 81       	ld	r24, Z
    113c:	e0 91 bd 06 	lds	r30, 0x06BD	; 0x8006bd <Serial+0x16>
    1140:	f0 91 be 06 	lds	r31, 0x06BE	; 0x8006be <Serial+0x17>
    1144:	82 fd       	sbrc	r24, 2
    1146:	12 c0       	rjmp	.+36     	; 0x116c <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    1148:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    114a:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <Serial+0x19>
    114e:	8f 5f       	subi	r24, 0xFF	; 255
    1150:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1152:	20 91 c1 06 	lds	r18, 0x06C1	; 0x8006c1 <Serial+0x1a>
    1156:	82 17       	cp	r24, r18
    1158:	51 f0       	breq	.+20     	; 0x116e <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
    115a:	e0 91 c0 06 	lds	r30, 0x06C0	; 0x8006c0 <Serial+0x19>
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	e9 55       	subi	r30, 0x59	; 89
    1162:	f9 4f       	sbci	r31, 0xF9	; 249
    1164:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    1166:	80 93 c0 06 	sts	0x06C0, r24	; 0x8006c0 <Serial+0x19>
    116a:	01 c0       	rjmp	.+2      	; 0x116e <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    116c:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
    116e:	ff 91       	pop	r31
    1170:	ef 91       	pop	r30
    1172:	9f 91       	pop	r25
    1174:	8f 91       	pop	r24
    1176:	2f 91       	pop	r18
    1178:	0f 90       	pop	r0
    117a:	0b be       	out	0x3b, r0	; 59
    117c:	0f 90       	pop	r0
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	0f 90       	pop	r0
    1182:	1f 90       	pop	r1
    1184:	18 95       	reti

00001186 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    1186:	1f 92       	push	r1
    1188:	0f 92       	push	r0
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	0f 92       	push	r0
    118e:	11 24       	eor	r1, r1
    1190:	0b b6       	in	r0, 0x3b	; 59
    1192:	0f 92       	push	r0
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
    11ac:	87 ea       	ldi	r24, 0xA7	; 167
    11ae:	96 e0       	ldi	r25, 0x06	; 6
    11b0:	bc de       	rcall	.-648    	; 0xf2a <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    11b2:	ff 91       	pop	r31
    11b4:	ef 91       	pop	r30
    11b6:	bf 91       	pop	r27
    11b8:	af 91       	pop	r26
    11ba:	9f 91       	pop	r25
    11bc:	8f 91       	pop	r24
    11be:	7f 91       	pop	r23
    11c0:	6f 91       	pop	r22
    11c2:	5f 91       	pop	r21
    11c4:	4f 91       	pop	r20
    11c6:	3f 91       	pop	r19
    11c8:	2f 91       	pop	r18
    11ca:	0f 90       	pop	r0
    11cc:	0b be       	out	0x3b, r0	; 59
    11ce:	0f 90       	pop	r0
    11d0:	0f be       	out	0x3f, r0	; 63
    11d2:	0f 90       	pop	r0
    11d4:	1f 90       	pop	r1
    11d6:	18 95       	reti

000011d8 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    11d8:	87 ea       	ldi	r24, 0xA7	; 167
    11da:	96 e0       	ldi	r25, 0x06	; 6
    11dc:	2d de       	rcall	.-934    	; 0xe38 <_ZN14HardwareSerial9availableEv>
    11de:	21 e0       	ldi	r18, 0x01	; 1
    11e0:	89 2b       	or	r24, r25
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <_Z17Serial0_availablev+0xe>
    11e4:	20 e0       	ldi	r18, 0x00	; 0
}
    11e6:	82 2f       	mov	r24, r18
    11e8:	08 95       	ret

000011ea <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    11ea:	e7 ea       	ldi	r30, 0xA7	; 167
    11ec:	f6 e0       	ldi	r31, 0x06	; 6
    11ee:	13 82       	std	Z+3, r1	; 0x03
    11f0:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    11f2:	88 ee       	ldi	r24, 0xE8	; 232
    11f4:	93 e0       	ldi	r25, 0x03	; 3
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	84 83       	std	Z+4, r24	; 0x04
    11fc:	95 83       	std	Z+5, r25	; 0x05
    11fe:	a6 83       	std	Z+6, r26	; 0x06
    1200:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1202:	83 e5       	ldi	r24, 0x53	; 83
    1204:	94 e0       	ldi	r25, 0x04	; 4
    1206:	91 83       	std	Z+1, r25	; 0x01
    1208:	80 83       	st	Z, r24
    120a:	85 ec       	ldi	r24, 0xC5	; 197
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	95 87       	std	Z+13, r25	; 0x0d
    1210:	84 87       	std	Z+12, r24	; 0x0c
    1212:	84 ec       	ldi	r24, 0xC4	; 196
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	97 87       	std	Z+15, r25	; 0x0f
    1218:	86 87       	std	Z+14, r24	; 0x0e
    121a:	80 ec       	ldi	r24, 0xC0	; 192
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	91 8b       	std	Z+17, r25	; 0x11
    1220:	80 8b       	std	Z+16, r24	; 0x10
    1222:	81 ec       	ldi	r24, 0xC1	; 193
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	93 8b       	std	Z+19, r25	; 0x13
    1228:	82 8b       	std	Z+18, r24	; 0x12
    122a:	82 ec       	ldi	r24, 0xC2	; 194
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	95 8b       	std	Z+21, r25	; 0x15
    1230:	84 8b       	std	Z+20, r24	; 0x14
    1232:	86 ec       	ldi	r24, 0xC6	; 198
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	97 8b       	std	Z+23, r25	; 0x17
    1238:	86 8b       	std	Z+22, r24	; 0x16
    123a:	11 8e       	std	Z+25, r1	; 0x19
    123c:	12 8e       	std	Z+26, r1	; 0x1a
    123e:	13 8e       	std	Z+27, r1	; 0x1b
    1240:	14 8e       	std	Z+28, r1	; 0x1c
    1242:	08 95       	ret

00001244 <initVariant>:
    1244:	08 95       	ret

00001246 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    1246:	43 d1       	rcall	.+646    	; 0x14ce <init>

	initVariant();
    1248:	fd df       	rcall	.-6      	; 0x1244 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    124a:	fc da       	rcall	.-2568   	; 0x844 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    124c:	c9 e5       	ldi	r28, 0x59	; 89
    124e:	d7 e0       	ldi	r29, 0x07	; 7
#endif
	
	setup();
    
	for (;;) {
		loop();
    1250:	0a db       	rcall	.-2540   	; 0x866 <loop>
		if (serialEventRun) serialEventRun();
    1252:	20 97       	sbiw	r28, 0x00	; 0
    1254:	e9 f3       	breq	.-6      	; 0x1250 <main+0xa>
    1256:	2d de       	rcall	.-934    	; 0xeb2 <_Z14serialEventRunv>
    1258:	fb cf       	rjmp	.-10     	; 0x1250 <main+0xa>

0000125a <_ZN5Print5writeEPKhj>:
    125a:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	6c 01       	movw	r12, r24
    126c:	7a 01       	movw	r14, r20
    126e:	8b 01       	movw	r16, r22
    1270:	c0 e0       	ldi	r28, 0x00	; 0
    1272:	d0 e0       	ldi	r29, 0x00	; 0
    1274:	ce 15       	cp	r28, r14
    1276:	df 05       	cpc	r29, r15
    1278:	81 f0       	breq	.+32     	; 0x129a <_ZN5Print5writeEPKhj+0x40>
    127a:	d8 01       	movw	r26, r16
    127c:	6d 91       	ld	r22, X+
    127e:	8d 01       	movw	r16, r26
    1280:	d6 01       	movw	r26, r12
    1282:	ed 91       	ld	r30, X+
    1284:	fc 91       	ld	r31, X
    1286:	01 90       	ld	r0, Z+
    1288:	f0 81       	ld	r31, Z
    128a:	e0 2d       	mov	r30, r0
    128c:	c6 01       	movw	r24, r12
    128e:	19 95       	eicall
    1290:	89 2b       	or	r24, r25
    1292:	11 f0       	breq	.+4      	; 0x1298 <_ZN5Print5writeEPKhj+0x3e>
    1294:	21 96       	adiw	r28, 0x01	; 1
    1296:	ee cf       	rjmp	.-36     	; 0x1274 <_ZN5Print5writeEPKhj+0x1a>
    1298:	7e 01       	movw	r14, r28
    129a:	c7 01       	movw	r24, r14
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	1f 91       	pop	r17
    12a2:	0f 91       	pop	r16
    12a4:	ff 90       	pop	r15
    12a6:	ef 90       	pop	r14
    12a8:	df 90       	pop	r13
    12aa:	cf 90       	pop	r12
    12ac:	08 95       	ret

000012ae <_ZN5Print5writeEPKc>:
    12ae:	61 15       	cp	r22, r1
    12b0:	71 05       	cpc	r23, r1
    12b2:	79 f0       	breq	.+30     	; 0x12d2 <_ZN5Print5writeEPKc+0x24>
    12b4:	fb 01       	movw	r30, r22
    12b6:	01 90       	ld	r0, Z+
    12b8:	00 20       	and	r0, r0
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <_ZN5Print5writeEPKc+0x8>
    12bc:	31 97       	sbiw	r30, 0x01	; 1
    12be:	af 01       	movw	r20, r30
    12c0:	46 1b       	sub	r20, r22
    12c2:	57 0b       	sbc	r21, r23
    12c4:	dc 01       	movw	r26, r24
    12c6:	ed 91       	ld	r30, X+
    12c8:	fc 91       	ld	r31, X
    12ca:	02 80       	ldd	r0, Z+2	; 0x02
    12cc:	f3 81       	ldd	r31, Z+3	; 0x03
    12ce:	e0 2d       	mov	r30, r0
    12d0:	19 94       	eijmp
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	08 95       	ret

000012d8 <_ZN5Print5printEPK19__FlashStringHelper>:
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	8c 01       	movw	r16, r24
    12e6:	7b 01       	movw	r14, r22
    12e8:	c0 e0       	ldi	r28, 0x00	; 0
    12ea:	d0 e0       	ldi	r29, 0x00	; 0
    12ec:	f7 01       	movw	r30, r14
    12ee:	ec 0f       	add	r30, r28
    12f0:	fd 1f       	adc	r31, r29
    12f2:	64 91       	lpm	r22, Z
    12f4:	66 23       	and	r22, r22
    12f6:	61 f0       	breq	.+24     	; 0x1310 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    12f8:	d8 01       	movw	r26, r16
    12fa:	ed 91       	ld	r30, X+
    12fc:	fc 91       	ld	r31, X
    12fe:	01 90       	ld	r0, Z+
    1300:	f0 81       	ld	r31, Z
    1302:	e0 2d       	mov	r30, r0
    1304:	c8 01       	movw	r24, r16
    1306:	19 95       	eicall
    1308:	89 2b       	or	r24, r25
    130a:	11 f0       	breq	.+4      	; 0x1310 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    130c:	21 96       	adiw	r28, 0x01	; 1
    130e:	ee cf       	rjmp	.-36     	; 0x12ec <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    1310:	ce 01       	movw	r24, r28
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	1f 91       	pop	r17
    1318:	0f 91       	pop	r16
    131a:	ff 90       	pop	r15
    131c:	ef 90       	pop	r14
    131e:	08 95       	ret

00001320 <_ZN5Print7printlnEv>:
    1320:	61 e6       	ldi	r22, 0x61	; 97
    1322:	74 e0       	ldi	r23, 0x04	; 4
    1324:	c4 cf       	rjmp	.-120    	; 0x12ae <_ZN5Print5writeEPKc>

00001326 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	ec 01       	movw	r28, r24
    1330:	d3 df       	rcall	.-90     	; 0x12d8 <_ZN5Print5printEPK19__FlashStringHelper>
    1332:	8c 01       	movw	r16, r24
    1334:	ce 01       	movw	r24, r28
    1336:	f4 df       	rcall	.-24     	; 0x1320 <_ZN5Print7printlnEv>
    1338:	80 0f       	add	r24, r16
    133a:	91 1f       	adc	r25, r17
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	08 95       	ret

00001346 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1350:	ae df       	rcall	.-164    	; 0x12ae <_ZN5Print5writeEPKc>
    1352:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1354:	ce 01       	movw	r24, r28
    1356:	e4 df       	rcall	.-56     	; 0x1320 <_ZN5Print7printlnEv>
  return n;
}
    1358:	80 0f       	add	r24, r16
    135a:	91 1f       	adc	r25, r17
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1366:	1f 92       	push	r1
    1368:	0f 92       	push	r0
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	0f 92       	push	r0
    136e:	11 24       	eor	r1, r1
    1370:	2f 93       	push	r18
    1372:	3f 93       	push	r19
    1374:	8f 93       	push	r24
    1376:	9f 93       	push	r25
    1378:	af 93       	push	r26
    137a:	bf 93       	push	r27
    137c:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <timer0_millis>
    1380:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <timer0_millis+0x1>
    1384:	a0 91 47 07 	lds	r26, 0x0747	; 0x800747 <timer0_millis+0x2>
    1388:	b0 91 48 07 	lds	r27, 0x0748	; 0x800748 <timer0_millis+0x3>
    138c:	30 91 44 07 	lds	r19, 0x0744	; 0x800744 <timer0_fract>
    1390:	23 e0       	ldi	r18, 0x03	; 3
    1392:	23 0f       	add	r18, r19
    1394:	2d 37       	cpi	r18, 0x7D	; 125
    1396:	20 f4       	brcc	.+8      	; 0x13a0 <__vector_23+0x3a>
    1398:	01 96       	adiw	r24, 0x01	; 1
    139a:	a1 1d       	adc	r26, r1
    139c:	b1 1d       	adc	r27, r1
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <__vector_23+0x44>
    13a0:	26 e8       	ldi	r18, 0x86	; 134
    13a2:	23 0f       	add	r18, r19
    13a4:	02 96       	adiw	r24, 0x02	; 2
    13a6:	a1 1d       	adc	r26, r1
    13a8:	b1 1d       	adc	r27, r1
    13aa:	20 93 44 07 	sts	0x0744, r18	; 0x800744 <timer0_fract>
    13ae:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <timer0_millis>
    13b2:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <timer0_millis+0x1>
    13b6:	a0 93 47 07 	sts	0x0747, r26	; 0x800747 <timer0_millis+0x2>
    13ba:	b0 93 48 07 	sts	0x0748, r27	; 0x800748 <timer0_millis+0x3>
    13be:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <timer0_overflow_count>
    13c2:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <timer0_overflow_count+0x1>
    13c6:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <timer0_overflow_count+0x2>
    13ca:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <timer0_overflow_count+0x3>
    13ce:	01 96       	adiw	r24, 0x01	; 1
    13d0:	a1 1d       	adc	r26, r1
    13d2:	b1 1d       	adc	r27, r1
    13d4:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <timer0_overflow_count>
    13d8:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <timer0_overflow_count+0x1>
    13dc:	a0 93 4b 07 	sts	0x074B, r26	; 0x80074b <timer0_overflow_count+0x2>
    13e0:	b0 93 4c 07 	sts	0x074C, r27	; 0x80074c <timer0_overflow_count+0x3>
    13e4:	bf 91       	pop	r27
    13e6:	af 91       	pop	r26
    13e8:	9f 91       	pop	r25
    13ea:	8f 91       	pop	r24
    13ec:	3f 91       	pop	r19
    13ee:	2f 91       	pop	r18
    13f0:	0f 90       	pop	r0
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	0f 90       	pop	r0
    13f6:	1f 90       	pop	r1
    13f8:	18 95       	reti

000013fa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    13fa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    13fc:	f8 94       	cli
	m = timer0_overflow_count;
    13fe:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <timer0_overflow_count>
    1402:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <timer0_overflow_count+0x1>
    1406:	a0 91 4b 07 	lds	r26, 0x074B	; 0x80074b <timer0_overflow_count+0x2>
    140a:	b0 91 4c 07 	lds	r27, 0x074C	; 0x80074c <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    140e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1410:	a8 9b       	sbis	0x15, 0	; 21
    1412:	05 c0       	rjmp	.+10     	; 0x141e <micros+0x24>
    1414:	2f 3f       	cpi	r18, 0xFF	; 255
    1416:	19 f0       	breq	.+6      	; 0x141e <micros+0x24>
		m++;
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	a1 1d       	adc	r26, r1
    141c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    141e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1420:	ba 2f       	mov	r27, r26
    1422:	a9 2f       	mov	r26, r25
    1424:	98 2f       	mov	r25, r24
    1426:	88 27       	eor	r24, r24
    1428:	82 0f       	add	r24, r18
    142a:	91 1d       	adc	r25, r1
    142c:	a1 1d       	adc	r26, r1
    142e:	b1 1d       	adc	r27, r1
    1430:	bc 01       	movw	r22, r24
    1432:	cd 01       	movw	r24, r26
    1434:	42 e0       	ldi	r20, 0x02	; 2
    1436:	66 0f       	add	r22, r22
    1438:	77 1f       	adc	r23, r23
    143a:	88 1f       	adc	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	4a 95       	dec	r20
    1440:	d1 f7       	brne	.-12     	; 0x1436 <micros+0x3c>
}
    1442:	08 95       	ret

00001444 <delay>:

void delay(unsigned long ms)
{
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	6b 01       	movw	r12, r22
    1456:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1458:	d0 df       	rcall	.-96     	; 0x13fa <micros>
    145a:	4b 01       	movw	r8, r22
    145c:	5c 01       	movw	r10, r24

	while (ms > 0) {
    145e:	c1 14       	cp	r12, r1
    1460:	d1 04       	cpc	r13, r1
    1462:	e1 04       	cpc	r14, r1
    1464:	f1 04       	cpc	r15, r1
    1466:	f9 f0       	breq	.+62     	; 0x14a6 <delay+0x62>
		yield();
    1468:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    146c:	c6 df       	rcall	.-116    	; 0x13fa <micros>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	88 19       	sub	r24, r8
    1474:	99 09       	sbc	r25, r9
    1476:	aa 09       	sbc	r26, r10
    1478:	bb 09       	sbc	r27, r11
    147a:	88 3e       	cpi	r24, 0xE8	; 232
    147c:	93 40       	sbci	r25, 0x03	; 3
    147e:	a1 05       	cpc	r26, r1
    1480:	b1 05       	cpc	r27, r1
    1482:	68 f3       	brcs	.-38     	; 0x145e <delay+0x1a>
			ms--;
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	c2 1a       	sub	r12, r18
    1488:	d1 08       	sbc	r13, r1
    148a:	e1 08       	sbc	r14, r1
    148c:	f1 08       	sbc	r15, r1
			start += 1000;
    148e:	88 ee       	ldi	r24, 0xE8	; 232
    1490:	88 0e       	add	r8, r24
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	98 1e       	adc	r9, r24
    1496:	a1 1c       	adc	r10, r1
    1498:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    149a:	c1 14       	cp	r12, r1
    149c:	d1 04       	cpc	r13, r1
    149e:	e1 04       	cpc	r14, r1
    14a0:	f1 04       	cpc	r15, r1
    14a2:	21 f7       	brne	.-56     	; 0x146c <delay+0x28>
    14a4:	dc cf       	rjmp	.-72     	; 0x145e <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    14a6:	ff 90       	pop	r15
    14a8:	ef 90       	pop	r14
    14aa:	df 90       	pop	r13
    14ac:	cf 90       	pop	r12
    14ae:	bf 90       	pop	r11
    14b0:	af 90       	pop	r10
    14b2:	9f 90       	pop	r9
    14b4:	8f 90       	pop	r8
    14b6:	08 95       	ret

000014b8 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    14b8:	82 30       	cpi	r24, 0x02	; 2
    14ba:	91 05       	cpc	r25, r1
    14bc:	38 f0       	brcs	.+14     	; 0x14cc <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    14be:	88 0f       	add	r24, r24
    14c0:	99 1f       	adc	r25, r25
    14c2:	88 0f       	add	r24, r24
    14c4:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    14c6:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	f1 f7       	brne	.-4      	; 0x14c8 <delayMicroseconds+0x10>
    14cc:	08 95       	ret

000014ce <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    14ce:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    14d0:	84 b5       	in	r24, 0x24	; 36
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    14d6:	84 b5       	in	r24, 0x24	; 36
    14d8:	81 60       	ori	r24, 0x01	; 1
    14da:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    14dc:	85 b5       	in	r24, 0x25	; 37
    14de:	82 60       	ori	r24, 0x02	; 2
    14e0:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    14e2:	85 b5       	in	r24, 0x25	; 37
    14e4:	81 60       	ori	r24, 0x01	; 1
    14e6:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    14e8:	ee e6       	ldi	r30, 0x6E	; 110
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    14f2:	e1 e8       	ldi	r30, 0x81	; 129
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    14f8:	80 81       	ld	r24, Z
    14fa:	82 60       	ori	r24, 0x02	; 2
    14fc:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    14fe:	80 81       	ld	r24, Z
    1500:	81 60       	ori	r24, 0x01	; 1
    1502:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1504:	e0 e8       	ldi	r30, 0x80	; 128
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	81 60       	ori	r24, 0x01	; 1
    150c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    150e:	e1 eb       	ldi	r30, 0xB1	; 177
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	84 60       	ori	r24, 0x04	; 4
    1516:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1518:	e0 eb       	ldi	r30, 0xB0	; 176
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	81 60       	ori	r24, 0x01	; 1
    1520:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1522:	e1 e9       	ldi	r30, 0x91	; 145
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	82 60       	ori	r24, 0x02	; 2
    152a:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    152c:	80 81       	ld	r24, Z
    152e:	81 60       	ori	r24, 0x01	; 1
    1530:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1532:	e0 e9       	ldi	r30, 0x90	; 144
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	81 60       	ori	r24, 0x01	; 1
    153a:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    153c:	e1 ea       	ldi	r30, 0xA1	; 161
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	82 60       	ori	r24, 0x02	; 2
    1544:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    1546:	80 81       	ld	r24, Z
    1548:	81 60       	ori	r24, 0x01	; 1
    154a:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    154c:	e0 ea       	ldi	r30, 0xA0	; 160
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	81 60       	ori	r24, 0x01	; 1
    1554:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    1556:	e1 e2       	ldi	r30, 0x21	; 33
    1558:	f1 e0       	ldi	r31, 0x01	; 1
    155a:	80 81       	ld	r24, Z
    155c:	82 60       	ori	r24, 0x02	; 2
    155e:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1560:	80 81       	ld	r24, Z
    1562:	81 60       	ori	r24, 0x01	; 1
    1564:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    1566:	e0 e2       	ldi	r30, 0x20	; 32
    1568:	f1 e0       	ldi	r31, 0x01	; 1
    156a:	80 81       	ld	r24, Z
    156c:	81 60       	ori	r24, 0x01	; 1
    156e:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1570:	ea e7       	ldi	r30, 0x7A	; 122
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	84 60       	ori	r24, 0x04	; 4
    1578:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    157a:	80 81       	ld	r24, Z
    157c:	82 60       	ori	r24, 0x02	; 2
    157e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1580:	80 81       	ld	r24, Z
    1582:	81 60       	ori	r24, 0x01	; 1
    1584:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1586:	80 81       	ld	r24, Z
    1588:	80 68       	ori	r24, 0x80	; 128
    158a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    158c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1590:	08 95       	ret

00001592 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	31 97       	sbiw	r30, 0x01	; 1
    1598:	e2 31       	cpi	r30, 0x12	; 18
    159a:	f1 05       	cpc	r31, r1
    159c:	08 f0       	brcs	.+2      	; 0x15a0 <turnOffPWM+0xe>
    159e:	4e c0       	rjmp	.+156    	; 0x163c <turnOffPWM+0xaa>
    15a0:	88 27       	eor	r24, r24
    15a2:	ee 58       	subi	r30, 0x8E	; 142
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	8f 4f       	sbci	r24, 0xFF	; 255
    15a8:	0c 94 28 21 	jmp	0x4250	; 0x4250 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    15ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15b0:	8f 77       	andi	r24, 0x7F	; 127
    15b2:	03 c0       	rjmp	.+6      	; 0x15ba <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    15b4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15b8:	8f 7d       	andi	r24, 0xDF	; 223
    15ba:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15be:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    15c0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    15c4:	87 7f       	andi	r24, 0xF7	; 247
    15c6:	f9 cf       	rjmp	.-14     	; 0x15ba <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    15c8:	84 b5       	in	r24, 0x24	; 36
    15ca:	8f 77       	andi	r24, 0x7F	; 127
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    15ce:	84 b5       	in	r24, 0x24	; 36
    15d0:	8f 7d       	andi	r24, 0xDF	; 223
    15d2:	84 bd       	out	0x24, r24	; 36
    15d4:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    15d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15da:	8f 77       	andi	r24, 0x7F	; 127
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    15de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15e2:	8f 7d       	andi	r24, 0xDF	; 223
    15e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    15e8:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    15ea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15ee:	8f 77       	andi	r24, 0x7F	; 127
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    15f2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15f6:	8f 7d       	andi	r24, 0xDF	; 223
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    15fa:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    15fe:	87 7f       	andi	r24, 0xF7	; 247
    1600:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1604:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1606:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    160a:	8f 77       	andi	r24, 0x7F	; 127
    160c:	07 c0       	rjmp	.+14     	; 0x161c <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    160e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1612:	8f 7d       	andi	r24, 0xDF	; 223
    1614:	03 c0       	rjmp	.+6      	; 0x161c <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1616:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    161a:	87 7f       	andi	r24, 0xF7	; 247
    161c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1620:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1622:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1626:	8f 77       	andi	r24, 0x7F	; 127
    1628:	07 c0       	rjmp	.+14     	; 0x1638 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    162a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    162e:	8f 7d       	andi	r24, 0xDF	; 223
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1632:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1636:	87 7f       	andi	r24, 0xF7	; 247
    1638:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    163c:	08 95       	ret

0000163e <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	fc 01       	movw	r30, r24
    1646:	ea 59       	subi	r30, 0x9A	; 154
    1648:	fe 4f       	sbci	r31, 0xFE	; 254
    164a:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    164c:	fc 01       	movw	r30, r24
    164e:	e4 55       	subi	r30, 0x54	; 84
    1650:	fe 4f       	sbci	r31, 0xFE	; 254
    1652:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    1654:	88 23       	and	r24, r24
    1656:	61 f1       	breq	.+88     	; 0x16b0 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	88 0f       	add	r24, r24
    165c:	99 1f       	adc	r25, r25
    165e:	fc 01       	movw	r30, r24
    1660:	ea 5d       	subi	r30, 0xDA	; 218
    1662:	fd 4f       	sbci	r31, 0xFD	; 253
    1664:	c5 91       	lpm	r28, Z+
    1666:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1668:	fc 01       	movw	r30, r24
    166a:	e4 5f       	subi	r30, 0xF4	; 244
    166c:	fd 4f       	sbci	r31, 0xFD	; 253
    166e:	a5 91       	lpm	r26, Z+
    1670:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1672:	61 11       	cpse	r22, r1
    1674:	09 c0       	rjmp	.+18     	; 0x1688 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    1676:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1678:	f8 94       	cli
		*reg &= ~bit;
    167a:	88 81       	ld	r24, Y
    167c:	20 95       	com	r18
    167e:	82 23       	and	r24, r18
    1680:	88 83       	st	Y, r24
		*out &= ~bit;
    1682:	ec 91       	ld	r30, X
    1684:	2e 23       	and	r18, r30
    1686:	0b c0       	rjmp	.+22     	; 0x169e <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1688:	62 30       	cpi	r22, 0x02	; 2
    168a:	61 f4       	brne	.+24     	; 0x16a4 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    168c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    168e:	f8 94       	cli
		*reg &= ~bit;
    1690:	88 81       	ld	r24, Y
    1692:	32 2f       	mov	r19, r18
    1694:	30 95       	com	r19
    1696:	83 23       	and	r24, r19
    1698:	88 83       	st	Y, r24
		*out |= bit;
    169a:	ec 91       	ld	r30, X
    169c:	2e 2b       	or	r18, r30
    169e:	2c 93       	st	X, r18
		SREG = oldSREG;
    16a0:	9f bf       	out	0x3f, r25	; 63
    16a2:	06 c0       	rjmp	.+12     	; 0x16b0 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    16a4:	8f b7       	in	r24, 0x3f	; 63
                cli();
    16a6:	f8 94       	cli
		*reg |= bit;
    16a8:	e8 81       	ld	r30, Y
    16aa:	2e 2b       	or	r18, r30
    16ac:	28 83       	st	Y, r18
		SREG = oldSREG;
    16ae:	8f bf       	out	0x3f, r24	; 63
	}
}
    16b0:	df 91       	pop	r29
    16b2:	cf 91       	pop	r28
    16b4:	08 95       	ret

000016b6 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	f9 01       	movw	r30, r18
    16c2:	e0 5e       	subi	r30, 0xE0	; 224
    16c4:	fe 4f       	sbci	r31, 0xFE	; 254
    16c6:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    16c8:	f9 01       	movw	r30, r18
    16ca:	ea 59       	subi	r30, 0x9A	; 154
    16cc:	fe 4f       	sbci	r31, 0xFE	; 254
    16ce:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    16d0:	f9 01       	movw	r30, r18
    16d2:	e4 55       	subi	r30, 0x54	; 84
    16d4:	fe 4f       	sbci	r31, 0xFE	; 254
    16d6:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    16d8:	cc 23       	and	r28, r28
    16da:	b9 f0       	breq	.+46     	; 0x170a <digitalWrite+0x54>
    16dc:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    16de:	81 11       	cpse	r24, r1
    16e0:	58 df       	rcall	.-336    	; 0x1592 <turnOffPWM>

	out = portOutputRegister(port);
    16e2:	ec 2f       	mov	r30, r28
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	ee 0f       	add	r30, r30
    16e8:	ff 1f       	adc	r31, r31
    16ea:	e4 5f       	subi	r30, 0xF4	; 244
    16ec:	fd 4f       	sbci	r31, 0xFD	; 253
    16ee:	a5 91       	lpm	r26, Z+
    16f0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    16f2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    16f4:	f8 94       	cli

	if (val == LOW) {
    16f6:	11 11       	cpse	r17, r1
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <digitalWrite+0x4c>
		*out &= ~bit;
    16fa:	8c 91       	ld	r24, X
    16fc:	d0 95       	com	r29
    16fe:	d8 23       	and	r29, r24
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1702:	ec 91       	ld	r30, X
    1704:	de 2b       	or	r29, r30
    1706:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1708:	9f bf       	out	0x3f, r25	; 63
}
    170a:	df 91       	pop	r29
    170c:	cf 91       	pop	r28
    170e:	1f 91       	pop	r17
    1710:	08 95       	ret

00001712 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	f9 01       	movw	r30, r18
    171c:	e0 5e       	subi	r30, 0xE0	; 224
    171e:	fe 4f       	sbci	r31, 0xFE	; 254
    1720:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1722:	f9 01       	movw	r30, r18
    1724:	ea 59       	subi	r30, 0x9A	; 154
    1726:	fe 4f       	sbci	r31, 0xFE	; 254
    1728:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    172a:	f9 01       	movw	r30, r18
    172c:	e4 55       	subi	r30, 0x54	; 84
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1732:	cc 23       	and	r28, r28
    1734:	89 f0       	breq	.+34     	; 0x1758 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1736:	81 11       	cpse	r24, r1
    1738:	2c df       	rcall	.-424    	; 0x1592 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    173a:	ec 2f       	mov	r30, r28
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	ee 0f       	add	r30, r30
    1740:	ff 1f       	adc	r31, r31
    1742:	ee 50       	subi	r30, 0x0E	; 14
    1744:	fe 4f       	sbci	r31, 0xFE	; 254
    1746:	a5 91       	lpm	r26, Z+
    1748:	b4 91       	lpm	r27, Z
    174a:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    174c:	ed 23       	and	r30, r29
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	21 f4       	brne	.+8      	; 0x175c <digitalRead+0x4a>
    1754:	80 e0       	ldi	r24, 0x00	; 0
    1756:	02 c0       	rjmp	.+4      	; 0x175c <digitalRead+0x4a>
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	08 95       	ret

00001762 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    1762:	4f 92       	push	r4
    1764:	5f 92       	push	r5
    1766:	6f 92       	push	r6
    1768:	7f 92       	push	r7
    176a:	af 92       	push	r10
    176c:	bf 92       	push	r11
    176e:	cf 92       	push	r12
    1770:	df 92       	push	r13
    1772:	ef 92       	push	r14
    1774:	ff 92       	push	r15
    1776:	0f 93       	push	r16
    1778:	1f 93       	push	r17
    177a:	cf 93       	push	r28
    177c:	df 93       	push	r29
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62
    1782:	29 01       	movw	r4, r18
    1784:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    1786:	9b 01       	movw	r18, r22
    1788:	ac 01       	movw	r20, r24
    178a:	24 19       	sub	r18, r4
    178c:	35 09       	sbc	r19, r5
    178e:	46 09       	sbc	r20, r6
    1790:	57 09       	sbc	r21, r7
    1792:	8a 89       	ldd	r24, Y+18	; 0x12
    1794:	9b 89       	ldd	r25, Y+19	; 0x13
    1796:	ac 89       	ldd	r26, Y+20	; 0x14
    1798:	bd 89       	ldd	r27, Y+21	; 0x15
    179a:	bc 01       	movw	r22, r24
    179c:	cd 01       	movw	r24, r26
    179e:	6a 19       	sub	r22, r10
    17a0:	7b 09       	sbc	r23, r11
    17a2:	8c 09       	sbc	r24, r12
    17a4:	9d 09       	sbc	r25, r13
    17a6:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__mulsi3>
    17aa:	a8 01       	movw	r20, r16
    17ac:	97 01       	movw	r18, r14
    17ae:	24 19       	sub	r18, r4
    17b0:	35 09       	sbc	r19, r5
    17b2:	46 09       	sbc	r20, r6
    17b4:	57 09       	sbc	r21, r7
    17b6:	0e 94 0c 21 	call	0x4218	; 0x4218 <__divmodsi4>
    17ba:	ca 01       	movw	r24, r20
    17bc:	b9 01       	movw	r22, r18
    17be:	6a 0d       	add	r22, r10
    17c0:	7b 1d       	adc	r23, r11
    17c2:	8c 1d       	adc	r24, r12
    17c4:	9d 1d       	adc	r25, r13
}
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	7f 90       	pop	r7
    17dc:	6f 90       	pop	r6
    17de:	5f 90       	pop	r5
    17e0:	4f 90       	pop	r4
    17e2:	08 95       	ret

000017e4 <_ZN16Adafruit_AMG88xx5writeEhPhh>:
	uint8_t raw[2];
	this->read(AMG88xx_TTHL, raw, 2);
	uint16_t recast = ((uint16_t)raw[1] << 8) | ((uint16_t)raw[0]);

	return signedMag12ToFloat(recast) * AMG88xx_THERMISTOR_CONVERSION;
}
    17e4:	ef 92       	push	r14
    17e6:	ff 92       	push	r15
    17e8:	0f 93       	push	r16
    17ea:	1f 93       	push	r17
    17ec:	cf 93       	push	r28
    17ee:	df 93       	push	r29
    17f0:	c6 2f       	mov	r28, r22
    17f2:	7a 01       	movw	r14, r20
    17f4:	02 2f       	mov	r16, r18
    17f6:	fc 01       	movw	r30, r24
    17f8:	60 81       	ld	r22, Z
    17fa:	82 e5       	ldi	r24, 0x52	; 82
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7TwoWire17beginTransmissionEh>
    1802:	6c 2f       	mov	r22, r28
    1804:	82 e5       	ldi	r24, 0x52	; 82
    1806:	97 e0       	ldi	r25, 0x07	; 7
    1808:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN7TwoWire5writeEh>
    180c:	e7 01       	movw	r28, r14
    180e:	10 e0       	ldi	r17, 0x00	; 0
    1810:	ce 01       	movw	r24, r28
    1812:	8e 19       	sub	r24, r14
    1814:	9f 09       	sbc	r25, r15
    1816:	80 17       	cp	r24, r16
    1818:	91 07       	cpc	r25, r17
    181a:	34 f4       	brge	.+12     	; 0x1828 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x44>
    181c:	69 91       	ld	r22, Y+
    181e:	82 e5       	ldi	r24, 0x52	; 82
    1820:	97 e0       	ldi	r25, 0x07	; 7
    1822:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN7TwoWire5writeEh>
    1826:	f4 cf       	rjmp	.-24     	; 0x1810 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x2c>
    1828:	82 e5       	ldi	r24, 0x52	; 82
    182a:	97 e0       	ldi	r25, 0x07	; 7
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	0c 94 a8 1e 	jmp	0x3d50	; 0x3d50 <_ZN7TwoWire15endTransmissionEv>

0000183c <_ZN16Adafruit_AMG88xx6write8Ehh>:
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	1f 92       	push	r1
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	49 83       	std	Y+1, r20	; 0x01
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	ae 01       	movw	r20, r28
    184c:	4f 5f       	subi	r20, 0xFF	; 255
    184e:	5f 4f       	sbci	r21, 0xFF	; 255
    1850:	c9 df       	rcall	.-110    	; 0x17e4 <_ZN16Adafruit_AMG88xx5writeEhPhh>
    1852:	0f 90       	pop	r0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	08 95       	ret

0000185a <_ZN16Adafruit_AMG88xx16disableInterruptEv>:
    185a:	fc 01       	movw	r30, r24
    185c:	24 81       	ldd	r18, Z+4	; 0x04
    185e:	2e 7f       	andi	r18, 0xFE	; 254
    1860:	24 83       	std	Z+4, r18	; 0x04
    1862:	21 fb       	bst	r18, 1
    1864:	44 27       	eor	r20, r20
    1866:	40 f9       	bld	r20, 0
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	44 0f       	add	r20, r20
    186c:	55 1f       	adc	r21, r21
    186e:	63 e0       	ldi	r22, 0x03	; 3
    1870:	e5 cf       	rjmp	.-54     	; 0x183c <_ZN16Adafruit_AMG88xx6write8Ehh>

00001872 <_ZN16Adafruit_AMG88xx5beginEh>:
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	68 83       	st	Y, r22
    187a:	82 e5       	ldi	r24, 0x52	; 82
    187c:	97 e0       	ldi	r25, 0x07	; 7
    187e:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <_ZN7TwoWire5beginEv>
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	40 e0       	ldi	r20, 0x00	; 0
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	ce 01       	movw	r24, r28
    188a:	d8 df       	rcall	.-80     	; 0x183c <_ZN16Adafruit_AMG88xx6write8Ehh>
    188c:	8f e3       	ldi	r24, 0x3F	; 63
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	4f e3       	ldi	r20, 0x3F	; 63
    1892:	61 e0       	ldi	r22, 0x01	; 1
    1894:	ce 01       	movw	r24, r28
    1896:	d2 df       	rcall	.-92     	; 0x183c <_ZN16Adafruit_AMG88xx6write8Ehh>
    1898:	ce 01       	movw	r24, r28
    189a:	df df       	rcall	.-66     	; 0x185a <_ZN16Adafruit_AMG88xx16disableInterruptEv>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	8e 7f       	andi	r24, 0xFE	; 254
    18a0:	8b 83       	std	Y+3, r24	; 0x03
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	62 e0       	ldi	r22, 0x02	; 2
    18a6:	ce 01       	movw	r24, r28
    18a8:	c9 df       	rcall	.-110    	; 0x183c <_ZN16Adafruit_AMG88xx6write8Ehh>
    18aa:	64 e6       	ldi	r22, 0x64	; 100
    18ac:	70 e0       	ldi	r23, 0x00	; 0
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	c8 dd       	rcall	.-1136   	; 0x1444 <delay>
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	08 95       	ret

000018bc <_ZN16Adafruit_AMG88xx4readEhPhh>:
    18bc:	6f 92       	push	r6
    18be:	7f 92       	push	r7
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	8c 01       	movw	r16, r24
    18da:	66 2e       	mov	r6, r22
    18dc:	6a 01       	movw	r12, r20
    18de:	72 2e       	mov	r7, r18
    18e0:	c0 e0       	ldi	r28, 0x00	; 0
    18e2:	c7 15       	cp	r28, r7
    18e4:	a0 f5       	brcc	.+104    	; 0x194e <_ZN16Adafruit_AMG88xx4readEhPhh+0x92>
    18e6:	d7 2d       	mov	r29, r7
    18e8:	dc 1b       	sub	r29, r28
    18ea:	d1 32       	cpi	r29, 0x21	; 33
    18ec:	08 f0       	brcs	.+2      	; 0x18f0 <_ZN16Adafruit_AMG88xx4readEhPhh+0x34>
    18ee:	d0 e2       	ldi	r29, 0x20	; 32
    18f0:	f8 01       	movw	r30, r16
    18f2:	60 81       	ld	r22, Z
    18f4:	82 e5       	ldi	r24, 0x52	; 82
    18f6:	97 e0       	ldi	r25, 0x07	; 7
    18f8:	0e 94 2a 1e 	call	0x3c54	; 0x3c54 <_ZN7TwoWire17beginTransmissionEh>
    18fc:	6c 2f       	mov	r22, r28
    18fe:	66 0d       	add	r22, r6
    1900:	82 e5       	ldi	r24, 0x52	; 82
    1902:	97 e0       	ldi	r25, 0x07	; 7
    1904:	0e 94 dd 1d 	call	0x3bba	; 0x3bba <_ZN7TwoWire5writeEh>
    1908:	82 e5       	ldi	r24, 0x52	; 82
    190a:	97 e0       	ldi	r25, 0x07	; 7
    190c:	0e 94 a8 1e 	call	0x3d50	; 0x3d50 <_ZN7TwoWire15endTransmissionEv>
    1910:	4d 2f       	mov	r20, r29
    1912:	f8 01       	movw	r30, r16
    1914:	60 81       	ld	r22, Z
    1916:	82 e5       	ldi	r24, 0x52	; 82
    1918:	97 e0       	ldi	r25, 0x07	; 7
    191a:	0e 94 a6 1e 	call	0x3d4c	; 0x3d4c <_ZN7TwoWire11requestFromEhh>
    191e:	81 2c       	mov	r8, r1
    1920:	91 2c       	mov	r9, r1
    1922:	ad 2e       	mov	r10, r29
    1924:	b1 2c       	mov	r11, r1
    1926:	8c 2f       	mov	r24, r28
    1928:	88 0d       	add	r24, r8
    192a:	8a 14       	cp	r8, r10
    192c:	9b 04       	cpc	r9, r11
    192e:	14 f0       	brlt	.+4      	; 0x1934 <_ZN16Adafruit_AMG88xx4readEhPhh+0x78>
    1930:	cd 0f       	add	r28, r29
    1932:	d7 cf       	rjmp	.-82     	; 0x18e2 <_ZN16Adafruit_AMG88xx4readEhPhh+0x26>
    1934:	76 01       	movw	r14, r12
    1936:	e8 0e       	add	r14, r24
    1938:	f1 1c       	adc	r15, r1
    193a:	82 e5       	ldi	r24, 0x52	; 82
    193c:	97 e0       	ldi	r25, 0x07	; 7
    193e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <_ZN7TwoWire4readEv>
    1942:	f7 01       	movw	r30, r14
    1944:	80 83       	st	Z, r24
    1946:	ff ef       	ldi	r31, 0xFF	; 255
    1948:	8f 1a       	sub	r8, r31
    194a:	9f 0a       	sbc	r9, r31
    194c:	ec cf       	rjmp	.-40     	; 0x1926 <_ZN16Adafruit_AMG88xx4readEhPhh+0x6a>
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	ef 90       	pop	r14
    195a:	df 90       	pop	r13
    195c:	cf 90       	pop	r12
    195e:	bf 90       	pop	r11
    1960:	af 90       	pop	r10
    1962:	9f 90       	pop	r9
    1964:	8f 90       	pop	r8
    1966:	7f 90       	pop	r7
    1968:	6f 90       	pop	r6
    196a:	08 95       	ret

0000196c <_ZN16Adafruit_AMG88xx10readPixelsEPfh>:
    @param  size Optionsl number of bytes to read (up to 64). Default is 64 bytes.
    @return up to 64 bytes of pixel data in buf
*/
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
    196c:	8f 92       	push	r8
    196e:	9f 92       	push	r9
    1970:	af 92       	push	r10
    1972:	bf 92       	push	r11
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	f6 2e       	mov	r15, r22
    198a:	17 2f       	mov	r17, r23
    198c:	04 2f       	mov	r16, r20
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    198e:	8d b6       	in	r8, 0x3d	; 61
    1990:	9e b6       	in	r9, 0x3e	; 62
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
	uint16_t recast;
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
    1992:	24 2f       	mov	r18, r20
    1994:	22 0f       	add	r18, r18
    1996:	46 fd       	sbrc	r20, 6
    1998:	20 e8       	ldi	r18, 0x80	; 128
	uint8_t rawArray[bytesToRead];
    199a:	4d b7       	in	r20, 0x3d	; 61
    199c:	5e b7       	in	r21, 0x3e	; 62
    199e:	42 1b       	sub	r20, r18
    19a0:	51 09       	sbc	r21, r1
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	5e bf       	out	0x3e, r21	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	4d bf       	out	0x3d, r20	; 61
    19ac:	ed b7       	in	r30, 0x3d	; 61
    19ae:	fe b7       	in	r31, 0x3e	; 62
    19b0:	31 96       	adiw	r30, 0x01	; 1
    19b2:	5f 01       	movw	r10, r30
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
    19b4:	af 01       	movw	r20, r30
    19b6:	60 e8       	ldi	r22, 0x80	; 128
    19b8:	81 df       	rcall	.-254    	; 0x18bc <_ZN16Adafruit_AMG88xx4readEhPhh>
    19ba:	cf 2c       	mov	r12, r15
    19bc:	d1 2e       	mov	r13, r17
	
	for(int i=0; i<size; i++){
    19be:	e1 2c       	mov	r14, r1
    19c0:	f1 2c       	mov	r15, r1
    19c2:	10 e0       	ldi	r17, 0x00	; 0
    19c4:	e0 16       	cp	r14, r16
    19c6:	f1 06       	cpc	r15, r17
    19c8:	4c f5       	brge	.+82     	; 0x1a1c <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0xb0>
		uint8_t pos = i << 1;
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
    19ca:	8e 2d       	mov	r24, r14
    19cc:	88 0f       	add	r24, r24
    19ce:	f5 01       	movw	r30, r10
    19d0:	e8 0f       	add	r30, r24
    19d2:	f1 1d       	adc	r31, r1
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
    19d4:	61 81       	ldd	r22, Z+1	; 0x01
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	76 2f       	mov	r23, r22
    19da:	66 27       	eor	r22, r22
    19dc:	80 81       	ld	r24, Z
    19de:	68 2b       	or	r22, r24
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	9a 95       	dec	r25
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x76>
    19ea:	24 e0       	ldi	r18, 0x04	; 4
    19ec:	75 95       	asr	r23
    19ee:	67 95       	ror	r22
    19f0:	2a 95       	dec	r18
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x80>
    19f4:	07 2e       	mov	r0, r23
    19f6:	00 0c       	add	r0, r0
    19f8:	88 0b       	sbc	r24, r24
    19fa:	99 0b       	sbc	r25, r25
    19fc:	b3 d8       	rcall	.-3738   	; 0xb64 <__floatsisf>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	40 e8       	ldi	r20, 0x80	; 128
    1a04:	5e e3       	ldi	r21, 0x3E	; 62
    1a06:	69 d9       	rcall	.-3374   	; 0xcda <__mulsf3>
    1a08:	f6 01       	movw	r30, r12
    1a0a:	61 93       	st	Z+, r22
    1a0c:	71 93       	st	Z+, r23
    1a0e:	81 93       	st	Z+, r24
    1a10:	91 93       	st	Z+, r25
    1a12:	6f 01       	movw	r12, r30
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
	uint8_t rawArray[bytesToRead];
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
	
	for(int i=0; i<size; i++){
    1a14:	ff ef       	ldi	r31, 0xFF	; 255
    1a16:	ef 1a       	sub	r14, r31
    1a18:	ff 0a       	sbc	r15, r31
    1a1a:	d4 cf       	rjmp	.-88     	; 0x19c4 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x58>
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    1a1c:	0f b6       	in	r0, 0x3f	; 63
    1a1e:	f8 94       	cli
    1a20:	9e be       	out	0x3e, r9	; 62
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	8d be       	out	0x3d, r8	; 61
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	1f 91       	pop	r17
    1a2c:	0f 91       	pop	r16
    1a2e:	ff 90       	pop	r15
    1a30:	ef 90       	pop	r14
    1a32:	df 90       	pop	r13
    1a34:	cf 90       	pop	r12
    1a36:	bf 90       	pop	r11
    1a38:	af 90       	pop	r10
    1a3a:	9f 90       	pop	r9
    1a3c:	8f 90       	pop	r8
    1a3e:	08 95       	ret

00001a40 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1a40:	2f 92       	push	r2
    1a42:	3f 92       	push	r3
    1a44:	4f 92       	push	r4
    1a46:	5f 92       	push	r5
    1a48:	6f 92       	push	r6
    1a4a:	7f 92       	push	r7
    1a4c:	8f 92       	push	r8
    1a4e:	9f 92       	push	r9
    1a50:	af 92       	push	r10
    1a52:	bf 92       	push	r11
    1a54:	cf 92       	push	r12
    1a56:	df 92       	push	r13
    1a58:	ef 92       	push	r14
    1a5a:	ff 92       	push	r15
    1a5c:	0f 93       	push	r16
    1a5e:	1f 93       	push	r17
    1a60:	cf 93       	push	r28
    1a62:	df 93       	push	r29
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    1a66:	00 d0       	rcall	.+0      	; 0x1a68 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	2c 01       	movw	r4, r24
    1a6e:	7e 83       	std	Y+6, r23	; 0x06
    1a70:	6d 83       	std	Y+5, r22	; 0x05
    1a72:	6a 01       	movw	r12, r20
    1a74:	59 01       	movw	r10, r18
    1a76:	c8 01       	movw	r24, r16
    1a78:	fc 82       	std	Y+4, r15	; 0x04
    1a7a:	eb 82       	std	Y+3, r14	; 0x03
    1a7c:	48 01       	movw	r8, r16
    1a7e:	84 1a       	sub	r8, r20
    1a80:	95 0a       	sbc	r9, r21
    1a82:	97 fe       	sbrs	r9, 7
    1a84:	03 c0       	rjmp	.+6      	; 0x1a8c <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    1a86:	91 94       	neg	r9
    1a88:	81 94       	neg	r8
    1a8a:	91 08       	sbc	r9, r1
    1a8c:	35 01       	movw	r6, r10
    1a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a90:	3e 81       	ldd	r19, Y+6	; 0x06
    1a92:	62 1a       	sub	r6, r18
    1a94:	73 0a       	sbc	r7, r19
    1a96:	77 fe       	sbrs	r7, 7
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    1a9a:	71 94       	neg	r7
    1a9c:	61 94       	neg	r6
    1a9e:	71 08       	sbc	r7, r1
    1aa0:	68 14       	cp	r6, r8
    1aa2:	79 04       	cpc	r7, r9
    1aa4:	5c f4       	brge	.+22     	; 0x1abc <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    1aa6:	3a 2d       	mov	r19, r10
    1aa8:	2b 2d       	mov	r18, r11
    1aaa:	5c 01       	movw	r10, r24
    1aac:	83 2f       	mov	r24, r19
    1aae:	92 2f       	mov	r25, r18
    1ab0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ab4:	de 82       	std	Y+6, r13	; 0x06
    1ab6:	cd 82       	std	Y+5, r12	; 0x05
    1ab8:	c3 2e       	mov	r12, r19
    1aba:	d2 2e       	mov	r13, r18
    1abc:	ad 81       	ldd	r26, Y+5	; 0x05
    1abe:	be 81       	ldd	r27, Y+6	; 0x06
    1ac0:	aa 16       	cp	r10, r26
    1ac2:	bb 06       	cpc	r11, r27
    1ac4:	5c f4       	brge	.+22     	; 0x1adc <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    1ac6:	3c 2d       	mov	r19, r12
    1ac8:	2d 2d       	mov	r18, r13
    1aca:	6c 01       	movw	r12, r24
    1acc:	83 2f       	mov	r24, r19
    1ace:	92 2f       	mov	r25, r18
    1ad0:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad2:	2e 81       	ldd	r18, Y+6	; 0x06
    1ad4:	be 82       	std	Y+6, r11	; 0x06
    1ad6:	ad 82       	std	Y+5, r10	; 0x05
    1ad8:	a3 2e       	mov	r10, r19
    1ada:	b2 2e       	mov	r11, r18
    1adc:	85 01       	movw	r16, r10
    1ade:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae2:	02 1b       	sub	r16, r18
    1ae4:	13 0b       	sbc	r17, r19
    1ae6:	1c 01       	movw	r2, r24
    1ae8:	2c 18       	sub	r2, r12
    1aea:	3d 08       	sbc	r3, r13
    1aec:	37 fe       	sbrs	r3, 7
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    1af0:	31 94       	neg	r3
    1af2:	21 94       	neg	r2
    1af4:	31 08       	sbc	r3, r1
    1af6:	78 01       	movw	r14, r16
    1af8:	17 ff       	sbrs	r17, 7
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1afc:	3f ef       	ldi	r19, 0xFF	; 255
    1afe:	e3 1a       	sub	r14, r19
    1b00:	f3 0a       	sbc	r15, r19
    1b02:	f5 94       	asr	r15
    1b04:	e7 94       	ror	r14
    1b06:	c8 16       	cp	r12, r24
    1b08:	d9 06       	cpc	r13, r25
    1b0a:	2c f0       	brlt	.+10     	; 0x1b16 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	9f ef       	ldi	r25, 0xFF	; 255
    1b10:	9a 83       	std	Y+2, r25	; 0x02
    1b12:	89 83       	std	Y+1, r24	; 0x01
    1b14:	04 c0       	rjmp	.+8      	; 0x1b1e <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1b16:	a1 e0       	ldi	r26, 0x01	; 1
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	ba 83       	std	Y+2, r27	; 0x02
    1b1c:	a9 83       	std	Y+1, r26	; 0x01
    1b1e:	2d 81       	ldd	r18, Y+5	; 0x05
    1b20:	3e 81       	ldd	r19, Y+6	; 0x06
    1b22:	a2 16       	cp	r10, r18
    1b24:	b3 06       	cpc	r11, r19
    1b26:	24 f1       	brlt	.+72     	; 0x1b70 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    1b28:	d2 01       	movw	r26, r4
    1b2a:	ed 91       	ld	r30, X+
    1b2c:	fc 91       	ld	r31, X
    1b2e:	04 84       	ldd	r0, Z+12	; 0x0c
    1b30:	f5 85       	ldd	r31, Z+13	; 0x0d
    1b32:	e0 2d       	mov	r30, r0
    1b34:	2b 81       	ldd	r18, Y+3	; 0x03
    1b36:	3c 81       	ldd	r19, Y+4	; 0x04
    1b38:	68 14       	cp	r6, r8
    1b3a:	79 04       	cpc	r7, r9
    1b3c:	24 f4       	brge	.+8      	; 0x1b46 <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1b3e:	4d 81       	ldd	r20, Y+5	; 0x05
    1b40:	5e 81       	ldd	r21, Y+6	; 0x06
    1b42:	b6 01       	movw	r22, r12
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    1b46:	a6 01       	movw	r20, r12
    1b48:	6d 81       	ldd	r22, Y+5	; 0x05
    1b4a:	7e 81       	ldd	r23, Y+6	; 0x06
    1b4c:	c2 01       	movw	r24, r4
    1b4e:	19 95       	eicall
    1b50:	e2 18       	sub	r14, r2
    1b52:	f3 08       	sbc	r15, r3
    1b54:	f7 fe       	sbrs	r15, 7
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    1b58:	29 81       	ldd	r18, Y+1	; 0x01
    1b5a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b5c:	c2 0e       	add	r12, r18
    1b5e:	d3 1e       	adc	r13, r19
    1b60:	e0 0e       	add	r14, r16
    1b62:	f1 1e       	adc	r15, r17
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	01 96       	adiw	r24, 0x01	; 1
    1b6a:	9e 83       	std	Y+6, r25	; 0x06
    1b6c:	8d 83       	std	Y+5, r24	; 0x05
    1b6e:	d7 cf       	rjmp	.-82     	; 0x1b1e <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1b70:	26 96       	adiw	r28, 0x06	; 6
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	ff 90       	pop	r15
    1b86:	ef 90       	pop	r14
    1b88:	df 90       	pop	r13
    1b8a:	cf 90       	pop	r12
    1b8c:	bf 90       	pop	r11
    1b8e:	af 90       	pop	r10
    1b90:	9f 90       	pop	r9
    1b92:	8f 90       	pop	r8
    1b94:	7f 90       	pop	r7
    1b96:	6f 90       	pop	r6
    1b98:	5f 90       	pop	r5
    1b9a:	4f 90       	pop	r4
    1b9c:	3f 90       	pop	r3
    1b9e:	2f 90       	pop	r2
    1ba0:	08 95       	ret

00001ba2 <_ZN12Adafruit_GFX10writePixelEiij>:
    1ba2:	dc 01       	movw	r26, r24
    1ba4:	ed 91       	ld	r30, X+
    1ba6:	fc 91       	ld	r31, X
    1ba8:	00 84       	ldd	r0, Z+8	; 0x08
    1baa:	f1 85       	ldd	r31, Z+9	; 0x09
    1bac:	e0 2d       	mov	r30, r0
    1bae:	19 94       	eijmp

00001bb0 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	ed 91       	ld	r30, X+
    1bb8:	fc 91       	ld	r31, X
    1bba:	04 8c       	ldd	r0, Z+28	; 0x1c
    1bbc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1bbe:	e0 2d       	mov	r30, r0
    1bc0:	19 95       	eicall
    1bc2:	1f 91       	pop	r17
    1bc4:	0f 91       	pop	r16
    1bc6:	08 95       	ret

00001bc8 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17
    1bcc:	dc 01       	movw	r26, r24
    1bce:	ed 91       	ld	r30, X+
    1bd0:	fc 91       	ld	r31, X
    1bd2:	06 8c       	ldd	r0, Z+30	; 0x1e
    1bd4:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1bd6:	e0 2d       	mov	r30, r0
    1bd8:	19 95       	eicall
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	dc 01       	movw	r26, r24
    1bea:	ed 91       	ld	r30, X+
    1bec:	fc 91       	ld	r31, X
    1bee:	00 a0       	ldd	r0, Z+32	; 0x20
    1bf0:	f1 a1       	ldd	r31, Z+33	; 0x21
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	19 95       	eicall
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	ef 90       	pop	r14
    1bfe:	08 95       	ret

00001c00 <_ZN12Adafruit_GFX10startWriteEv>:
    1c00:	08 95       	ret

00001c02 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1c02:	8f 92       	push	r8
    1c04:	9f 92       	push	r9
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	5b 01       	movw	r10, r22
    1c1e:	4a 01       	movw	r8, r20
    1c20:	69 01       	movw	r12, r18
    1c22:	78 01       	movw	r14, r16
    1c24:	e8 81       	ld	r30, Y
    1c26:	f9 81       	ldd	r31, Y+1	; 0x01
    1c28:	02 84       	ldd	r0, Z+10	; 0x0a
    1c2a:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c2c:	e0 2d       	mov	r30, r0
    1c2e:	19 95       	eicall
    1c30:	c8 0c       	add	r12, r8
    1c32:	d9 1c       	adc	r13, r9
    1c34:	86 01       	movw	r16, r12
    1c36:	01 50       	subi	r16, 0x01	; 1
    1c38:	11 09       	sbc	r17, r1
    1c3a:	e8 81       	ld	r30, Y
    1c3c:	f9 81       	ldd	r31, Y+1	; 0x01
    1c3e:	04 88       	ldd	r0, Z+20	; 0x14
    1c40:	f5 89       	ldd	r31, Z+21	; 0x15
    1c42:	e0 2d       	mov	r30, r0
    1c44:	95 01       	movw	r18, r10
    1c46:	a4 01       	movw	r20, r8
    1c48:	b5 01       	movw	r22, r10
    1c4a:	ce 01       	movw	r24, r28
    1c4c:	19 95       	eicall
    1c4e:	e8 81       	ld	r30, Y
    1c50:	f9 81       	ldd	r31, Y+1	; 0x01
    1c52:	06 88       	ldd	r0, Z+22	; 0x16
    1c54:	f7 89       	ldd	r31, Z+23	; 0x17
    1c56:	e0 2d       	mov	r30, r0
    1c58:	ce 01       	movw	r24, r28
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	0f 91       	pop	r16
    1c62:	ff 90       	pop	r15
    1c64:	ef 90       	pop	r14
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	bf 90       	pop	r11
    1c6c:	af 90       	pop	r10
    1c6e:	9f 90       	pop	r9
    1c70:	8f 90       	pop	r8
    1c72:	19 94       	eijmp

00001c74 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    1c74:	8f 92       	push	r8
    1c76:	9f 92       	push	r9
    1c78:	af 92       	push	r10
    1c7a:	bf 92       	push	r11
    1c7c:	cf 92       	push	r12
    1c7e:	df 92       	push	r13
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	cf 93       	push	r28
    1c8a:	df 93       	push	r29
    1c8c:	ec 01       	movw	r28, r24
    1c8e:	5b 01       	movw	r10, r22
    1c90:	4a 01       	movw	r8, r20
    1c92:	69 01       	movw	r12, r18
    1c94:	e8 81       	ld	r30, Y
    1c96:	f9 81       	ldd	r31, Y+1	; 0x01
    1c98:	02 84       	ldd	r0, Z+10	; 0x0a
    1c9a:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c9c:	e0 2d       	mov	r30, r0
    1c9e:	19 95       	eicall
    1ca0:	95 01       	movw	r18, r10
    1ca2:	2c 0d       	add	r18, r12
    1ca4:	3d 1d       	adc	r19, r13
    1ca6:	21 50       	subi	r18, 0x01	; 1
    1ca8:	31 09       	sbc	r19, r1
    1caa:	e8 81       	ld	r30, Y
    1cac:	f9 81       	ldd	r31, Y+1	; 0x01
    1cae:	04 88       	ldd	r0, Z+20	; 0x14
    1cb0:	f5 89       	ldd	r31, Z+21	; 0x15
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	78 01       	movw	r14, r16
    1cb6:	84 01       	movw	r16, r8
    1cb8:	a4 01       	movw	r20, r8
    1cba:	b5 01       	movw	r22, r10
    1cbc:	ce 01       	movw	r24, r28
    1cbe:	19 95       	eicall
    1cc0:	e8 81       	ld	r30, Y
    1cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    1cc4:	06 88       	ldd	r0, Z+22	; 0x16
    1cc6:	f7 89       	ldd	r31, Z+23	; 0x17
    1cc8:	e0 2d       	mov	r30, r0
    1cca:	ce 01       	movw	r24, r28
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	ff 90       	pop	r15
    1cd6:	ef 90       	pop	r14
    1cd8:	df 90       	pop	r13
    1cda:	cf 90       	pop	r12
    1cdc:	bf 90       	pop	r11
    1cde:	af 90       	pop	r10
    1ce0:	9f 90       	pop	r9
    1ce2:	8f 90       	pop	r8
    1ce4:	19 94       	eijmp

00001ce6 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    1ce6:	4f 92       	push	r4
    1ce8:	5f 92       	push	r5
    1cea:	6f 92       	push	r6
    1cec:	7f 92       	push	r7
    1cee:	8f 92       	push	r8
    1cf0:	9f 92       	push	r9
    1cf2:	af 92       	push	r10
    1cf4:	bf 92       	push	r11
    1cf6:	cf 92       	push	r12
    1cf8:	df 92       	push	r13
    1cfa:	ef 92       	push	r14
    1cfc:	ff 92       	push	r15
    1cfe:	0f 93       	push	r16
    1d00:	1f 93       	push	r17
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	6c 01       	movw	r12, r24
    1d08:	2b 01       	movw	r4, r22
    1d0a:	5a 01       	movw	r10, r20
    1d0c:	39 01       	movw	r6, r18
    1d0e:	48 01       	movw	r8, r16
    1d10:	dc 01       	movw	r26, r24
    1d12:	ed 91       	ld	r30, X+
    1d14:	fc 91       	ld	r31, X
    1d16:	02 84       	ldd	r0, Z+10	; 0x0a
    1d18:	f3 85       	ldd	r31, Z+11	; 0x0b
    1d1a:	e0 2d       	mov	r30, r0
    1d1c:	19 95       	eicall
    1d1e:	e2 01       	movw	r28, r4
    1d20:	64 0c       	add	r6, r4
    1d22:	75 1c       	adc	r7, r5
    1d24:	d6 01       	movw	r26, r12
    1d26:	ed 91       	ld	r30, X+
    1d28:	fc 91       	ld	r31, X
    1d2a:	c6 15       	cp	r28, r6
    1d2c:	d7 05       	cpc	r29, r7
    1d2e:	5c f4       	brge	.+22     	; 0x1d46 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    1d30:	00 88       	ldd	r0, Z+16	; 0x10
    1d32:	f1 89       	ldd	r31, Z+17	; 0x11
    1d34:	e0 2d       	mov	r30, r0
    1d36:	87 01       	movw	r16, r14
    1d38:	94 01       	movw	r18, r8
    1d3a:	a5 01       	movw	r20, r10
    1d3c:	be 01       	movw	r22, r28
    1d3e:	c6 01       	movw	r24, r12
    1d40:	19 95       	eicall
    1d42:	21 96       	adiw	r28, 0x01	; 1
    1d44:	ef cf       	rjmp	.-34     	; 0x1d24 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    1d46:	06 88       	ldd	r0, Z+22	; 0x16
    1d48:	f7 89       	ldd	r31, Z+23	; 0x17
    1d4a:	e0 2d       	mov	r30, r0
    1d4c:	c6 01       	movw	r24, r12
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	ff 90       	pop	r15
    1d58:	ef 90       	pop	r14
    1d5a:	df 90       	pop	r13
    1d5c:	cf 90       	pop	r12
    1d5e:	bf 90       	pop	r11
    1d60:	af 90       	pop	r10
    1d62:	9f 90       	pop	r9
    1d64:	8f 90       	pop	r8
    1d66:	7f 90       	pop	r7
    1d68:	6f 90       	pop	r6
    1d6a:	5f 90       	pop	r5
    1d6c:	4f 90       	pop	r4
    1d6e:	19 94       	eijmp

00001d70 <_ZN12Adafruit_GFX10fillScreenEj>:
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	dc 01       	movw	r26, r24
    1d7a:	1a 96       	adiw	r26, 0x0a	; 10
    1d7c:	0d 91       	ld	r16, X+
    1d7e:	1c 91       	ld	r17, X
    1d80:	1b 97       	sbiw	r26, 0x0b	; 11
    1d82:	18 96       	adiw	r26, 0x08	; 8
    1d84:	2d 91       	ld	r18, X+
    1d86:	3c 91       	ld	r19, X
    1d88:	19 97       	sbiw	r26, 0x09	; 9
    1d8a:	ed 91       	ld	r30, X+
    1d8c:	fc 91       	ld	r31, X
    1d8e:	00 a0       	ldd	r0, Z+32	; 0x20
    1d90:	f1 a1       	ldd	r31, Z+33	; 0x21
    1d92:	e0 2d       	mov	r30, r0
    1d94:	7b 01       	movw	r14, r22
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	50 e0       	ldi	r21, 0x00	; 0
    1d9a:	60 e0       	ldi	r22, 0x00	; 0
    1d9c:	70 e0       	ldi	r23, 0x00	; 0
    1d9e:	19 95       	eicall
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	08 95       	ret

00001daa <_ZN12Adafruit_GFX8drawLineEiiiij>:
    1daa:	8f 92       	push	r8
    1dac:	9f 92       	push	r9
    1dae:	af 92       	push	r10
    1db0:	bf 92       	push	r11
    1db2:	cf 92       	push	r12
    1db4:	df 92       	push	r13
    1db6:	ef 92       	push	r14
    1db8:	ff 92       	push	r15
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	4c 01       	movw	r8, r24
    1dc4:	6b 01       	movw	r12, r22
    1dc6:	5a 01       	movw	r10, r20
    1dc8:	e9 01       	movw	r28, r18
    1dca:	dc 01       	movw	r26, r24
    1dcc:	ed 91       	ld	r30, X+
    1dce:	fc 91       	ld	r31, X
    1dd0:	62 17       	cp	r22, r18
    1dd2:	73 07       	cpc	r23, r19
    1dd4:	81 f4       	brne	.+32     	; 0x1df6 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    1dd6:	04 17       	cp	r16, r20
    1dd8:	15 07       	cpc	r17, r21
    1dda:	24 f4       	brge	.+8      	; 0x1de4 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    1ddc:	8b 2d       	mov	r24, r11
    1dde:	58 01       	movw	r10, r16
    1de0:	04 2f       	mov	r16, r20
    1de2:	18 2f       	mov	r17, r24
    1de4:	0a 19       	sub	r16, r10
    1de6:	1b 09       	sbc	r17, r11
    1de8:	98 01       	movw	r18, r16
    1dea:	2f 5f       	subi	r18, 0xFF	; 255
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	04 8c       	ldd	r0, Z+28	; 0x1c
    1df0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1df2:	e0 2d       	mov	r30, r0
    1df4:	12 c0       	rjmp	.+36     	; 0x1e1a <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    1df6:	40 17       	cp	r20, r16
    1df8:	51 07       	cpc	r21, r17
    1dfa:	09 f5       	brne	.+66     	; 0x1e3e <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    1dfc:	26 17       	cp	r18, r22
    1dfe:	37 07       	cpc	r19, r23
    1e00:	24 f4       	brge	.+8      	; 0x1e0a <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    1e02:	8d 2d       	mov	r24, r13
    1e04:	69 01       	movw	r12, r18
    1e06:	c6 2f       	mov	r28, r22
    1e08:	d8 2f       	mov	r29, r24
    1e0a:	9e 01       	movw	r18, r28
    1e0c:	2c 19       	sub	r18, r12
    1e0e:	3d 09       	sbc	r19, r13
    1e10:	2f 5f       	subi	r18, 0xFF	; 255
    1e12:	3f 4f       	sbci	r19, 0xFF	; 255
    1e14:	06 8c       	ldd	r0, Z+30	; 0x1e
    1e16:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1e18:	e0 2d       	mov	r30, r0
    1e1a:	87 01       	movw	r16, r14
    1e1c:	a5 01       	movw	r20, r10
    1e1e:	b6 01       	movw	r22, r12
    1e20:	c4 01       	movw	r24, r8
    1e22:	19 95       	eicall
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	1f 91       	pop	r17
    1e2a:	0f 91       	pop	r16
    1e2c:	ff 90       	pop	r15
    1e2e:	ef 90       	pop	r14
    1e30:	df 90       	pop	r13
    1e32:	cf 90       	pop	r12
    1e34:	bf 90       	pop	r11
    1e36:	af 90       	pop	r10
    1e38:	9f 90       	pop	r9
    1e3a:	8f 90       	pop	r8
    1e3c:	08 95       	ret
    1e3e:	02 84       	ldd	r0, Z+10	; 0x0a
    1e40:	f3 85       	ldd	r31, Z+11	; 0x0b
    1e42:	e0 2d       	mov	r30, r0
    1e44:	19 95       	eicall
    1e46:	d4 01       	movw	r26, r8
    1e48:	ed 91       	ld	r30, X+
    1e4a:	fc 91       	ld	r31, X
    1e4c:	04 88       	ldd	r0, Z+20	; 0x14
    1e4e:	f5 89       	ldd	r31, Z+21	; 0x15
    1e50:	e0 2d       	mov	r30, r0
    1e52:	9e 01       	movw	r18, r28
    1e54:	a5 01       	movw	r20, r10
    1e56:	b6 01       	movw	r22, r12
    1e58:	c4 01       	movw	r24, r8
    1e5a:	19 95       	eicall
    1e5c:	d4 01       	movw	r26, r8
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	06 88       	ldd	r0, Z+22	; 0x16
    1e64:	f7 89       	ldd	r31, Z+23	; 0x17
    1e66:	e0 2d       	mov	r30, r0
    1e68:	c4 01       	movw	r24, r8
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	df 90       	pop	r13
    1e78:	cf 90       	pop	r12
    1e7a:	bf 90       	pop	r11
    1e7c:	af 90       	pop	r10
    1e7e:	9f 90       	pop	r9
    1e80:	8f 90       	pop	r8
    1e82:	19 94       	eijmp

00001e84 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    1e84:	6f 92       	push	r6
    1e86:	7f 92       	push	r7
    1e88:	8f 92       	push	r8
    1e8a:	9f 92       	push	r9
    1e8c:	af 92       	push	r10
    1e8e:	bf 92       	push	r11
    1e90:	cf 92       	push	r12
    1e92:	df 92       	push	r13
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	ec 01       	movw	r28, r24
    1ea2:	4b 01       	movw	r8, r22
    1ea4:	5a 01       	movw	r10, r20
    1ea6:	69 01       	movw	r12, r18
    1ea8:	38 01       	movw	r6, r16
    1eaa:	e8 81       	ld	r30, Y
    1eac:	f9 81       	ldd	r31, Y+1	; 0x01
    1eae:	02 84       	ldd	r0, Z+10	; 0x0a
    1eb0:	f3 85       	ldd	r31, Z+11	; 0x0b
    1eb2:	e0 2d       	mov	r30, r0
    1eb4:	19 95       	eicall
    1eb6:	e8 81       	ld	r30, Y
    1eb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eba:	02 88       	ldd	r0, Z+18	; 0x12
    1ebc:	f3 89       	ldd	r31, Z+19	; 0x13
    1ebe:	e0 2d       	mov	r30, r0
    1ec0:	87 01       	movw	r16, r14
    1ec2:	96 01       	movw	r18, r12
    1ec4:	a5 01       	movw	r20, r10
    1ec6:	b4 01       	movw	r22, r8
    1ec8:	ce 01       	movw	r24, r28
    1eca:	19 95       	eicall
    1ecc:	a5 01       	movw	r20, r10
    1ece:	46 0d       	add	r20, r6
    1ed0:	57 1d       	adc	r21, r7
    1ed2:	41 50       	subi	r20, 0x01	; 1
    1ed4:	51 09       	sbc	r21, r1
    1ed6:	e8 81       	ld	r30, Y
    1ed8:	f9 81       	ldd	r31, Y+1	; 0x01
    1eda:	02 88       	ldd	r0, Z+18	; 0x12
    1edc:	f3 89       	ldd	r31, Z+19	; 0x13
    1ede:	e0 2d       	mov	r30, r0
    1ee0:	96 01       	movw	r18, r12
    1ee2:	b4 01       	movw	r22, r8
    1ee4:	ce 01       	movw	r24, r28
    1ee6:	19 95       	eicall
    1ee8:	e8 81       	ld	r30, Y
    1eea:	f9 81       	ldd	r31, Y+1	; 0x01
    1eec:	00 88       	ldd	r0, Z+16	; 0x10
    1eee:	f1 89       	ldd	r31, Z+17	; 0x11
    1ef0:	e0 2d       	mov	r30, r0
    1ef2:	93 01       	movw	r18, r6
    1ef4:	a5 01       	movw	r20, r10
    1ef6:	b4 01       	movw	r22, r8
    1ef8:	ce 01       	movw	r24, r28
    1efa:	19 95       	eicall
    1efc:	c8 0c       	add	r12, r8
    1efe:	d9 1c       	adc	r13, r9
    1f00:	b6 01       	movw	r22, r12
    1f02:	61 50       	subi	r22, 0x01	; 1
    1f04:	71 09       	sbc	r23, r1
    1f06:	e8 81       	ld	r30, Y
    1f08:	f9 81       	ldd	r31, Y+1	; 0x01
    1f0a:	00 88       	ldd	r0, Z+16	; 0x10
    1f0c:	f1 89       	ldd	r31, Z+17	; 0x11
    1f0e:	e0 2d       	mov	r30, r0
    1f10:	93 01       	movw	r18, r6
    1f12:	a5 01       	movw	r20, r10
    1f14:	ce 01       	movw	r24, r28
    1f16:	19 95       	eicall
    1f18:	e8 81       	ld	r30, Y
    1f1a:	f9 81       	ldd	r31, Y+1	; 0x01
    1f1c:	06 88       	ldd	r0, Z+22	; 0x16
    1f1e:	f7 89       	ldd	r31, Z+23	; 0x17
    1f20:	e0 2d       	mov	r30, r0
    1f22:	ce 01       	movw	r24, r28
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	df 90       	pop	r13
    1f32:	cf 90       	pop	r12
    1f34:	bf 90       	pop	r11
    1f36:	af 90       	pop	r10
    1f38:	9f 90       	pop	r9
    1f3a:	8f 90       	pop	r8
    1f3c:	7f 90       	pop	r7
    1f3e:	6f 90       	pop	r6
    1f40:	19 94       	eijmp

00001f42 <_ZN12Adafruit_GFX13invertDisplayEb>:
    1f42:	08 95       	ret

00001f44 <_ZN12Adafruit_GFX11setRotationEh>:
    1f44:	fc 01       	movw	r30, r24
    1f46:	63 70       	andi	r22, 0x03	; 3
    1f48:	66 8b       	std	Z+22, r22	; 0x16
    1f4a:	84 81       	ldd	r24, Z+4	; 0x04
    1f4c:	95 81       	ldd	r25, Z+5	; 0x05
    1f4e:	26 81       	ldd	r18, Z+6	; 0x06
    1f50:	37 81       	ldd	r19, Z+7	; 0x07
    1f52:	61 30       	cpi	r22, 0x01	; 1
    1f54:	39 f0       	breq	.+14     	; 0x1f64 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1f56:	63 30       	cpi	r22, 0x03	; 3
    1f58:	29 f0       	breq	.+10     	; 0x1f64 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    1f5a:	91 87       	std	Z+9, r25	; 0x09
    1f5c:	80 87       	std	Z+8, r24	; 0x08
    1f5e:	33 87       	std	Z+11, r19	; 0x0b
    1f60:	22 87       	std	Z+10, r18	; 0x0a
    1f62:	08 95       	ret
    1f64:	31 87       	std	Z+9, r19	; 0x09
    1f66:	20 87       	std	Z+8, r18	; 0x08
    1f68:	93 87       	std	Z+11, r25	; 0x0b
    1f6a:	82 87       	std	Z+10, r24	; 0x0a
    1f6c:	08 95       	ret

00001f6e <_ZN12Adafruit_GFXC1Eii>:
    1f6e:	fc 01       	movw	r30, r24
    1f70:	13 82       	std	Z+3, r1	; 0x03
    1f72:	12 82       	std	Z+2, r1	; 0x02
    1f74:	84 e7       	ldi	r24, 0x74	; 116
    1f76:	94 e0       	ldi	r25, 0x04	; 4
    1f78:	91 83       	std	Z+1, r25	; 0x01
    1f7a:	80 83       	st	Z, r24
    1f7c:	75 83       	std	Z+5, r23	; 0x05
    1f7e:	64 83       	std	Z+4, r22	; 0x04
    1f80:	57 83       	std	Z+7, r21	; 0x07
    1f82:	46 83       	std	Z+6, r20	; 0x06
    1f84:	71 87       	std	Z+9, r23	; 0x09
    1f86:	60 87       	std	Z+8, r22	; 0x08
    1f88:	53 87       	std	Z+11, r21	; 0x0b
    1f8a:	42 87       	std	Z+10, r20	; 0x0a
    1f8c:	16 8a       	std	Z+22, r1	; 0x16
    1f8e:	15 86       	std	Z+13, r1	; 0x0d
    1f90:	14 86       	std	Z+12, r1	; 0x0c
    1f92:	17 86       	std	Z+15, r1	; 0x0f
    1f94:	16 86       	std	Z+14, r1	; 0x0e
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	85 8b       	std	Z+21, r24	; 0x15
    1f9a:	84 8b       	std	Z+20, r24	; 0x14
    1f9c:	2f ef       	ldi	r18, 0xFF	; 255
    1f9e:	3f ef       	ldi	r19, 0xFF	; 255
    1fa0:	33 8b       	std	Z+19, r19	; 0x13
    1fa2:	22 8b       	std	Z+18, r18	; 0x12
    1fa4:	31 8b       	std	Z+17, r19	; 0x11
    1fa6:	20 8b       	std	Z+16, r18	; 0x10
    1fa8:	87 8b       	std	Z+23, r24	; 0x17
    1faa:	10 8e       	std	Z+24, r1	; 0x18
    1fac:	12 8e       	std	Z+26, r1	; 0x1a
    1fae:	11 8e       	std	Z+25, r1	; 0x19
    1fb0:	08 95       	ret

00001fb2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    1fb2:	2f 92       	push	r2
    1fb4:	3f 92       	push	r3
    1fb6:	4f 92       	push	r4
    1fb8:	5f 92       	push	r5
    1fba:	6f 92       	push	r6
    1fbc:	7f 92       	push	r7
    1fbe:	8f 92       	push	r8
    1fc0:	9f 92       	push	r9
    1fc2:	af 92       	push	r10
    1fc4:	bf 92       	push	r11
    1fc6:	cf 92       	push	r12
    1fc8:	df 92       	push	r13
    1fca:	ef 92       	push	r14
    1fcc:	ff 92       	push	r15
    1fce:	0f 93       	push	r16
    1fd0:	1f 93       	push	r17
    1fd2:	cf 93       	push	r28
    1fd4:	df 93       	push	r29
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	6b 97       	sbiw	r28, 0x1b	; 27
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	9b 8f       	std	Y+27, r25	; 0x1b
    1fe8:	8a 8f       	std	Y+26, r24	; 0x1a
    1fea:	2b 01       	movw	r4, r22
    1fec:	5a 83       	std	Y+2, r21	; 0x02
    1fee:	49 83       	std	Y+1, r20	; 0x01
    1ff0:	d2 2e       	mov	r13, r18
    1ff2:	19 87       	std	Y+9, r17	; 0x09
    1ff4:	08 87       	std	Y+8, r16	; 0x08
    1ff6:	47 01       	movw	r8, r14
    1ff8:	ab 82       	std	Y+3, r10	; 0x03
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	59 96       	adiw	r26, 0x19	; 25
    1ffe:	2d 91       	ld	r18, X+
    2000:	3c 91       	ld	r19, X
    2002:	5a 97       	sbiw	r26, 0x1a	; 26
    2004:	21 15       	cp	r18, r1
    2006:	31 05       	cpc	r19, r1
    2008:	09 f0       	breq	.+2      	; 0x200c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    200a:	00 c1       	rjmp	.+512    	; 0x220c <__stack+0xd>
    200c:	18 96       	adiw	r26, 0x08	; 8
    200e:	8d 91       	ld	r24, X+
    2010:	9c 91       	ld	r25, X
    2012:	19 97       	sbiw	r26, 0x09	; 9
    2014:	68 17       	cp	r22, r24
    2016:	79 07       	cpc	r23, r25
    2018:	0c f0       	brlt	.+2      	; 0x201c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    201a:	e7 c1       	rjmp	.+974    	; 0x23ea <__stack+0x1eb>
    201c:	1a 96       	adiw	r26, 0x0a	; 10
    201e:	8d 91       	ld	r24, X+
    2020:	9c 91       	ld	r25, X
    2022:	1b 97       	sbiw	r26, 0x0b	; 11
    2024:	48 17       	cp	r20, r24
    2026:	59 07       	cpc	r21, r25
    2028:	0c f0       	brlt	.+2      	; 0x202c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    202a:	df c1       	rjmp	.+958    	; 0x23ea <__stack+0x1eb>
    202c:	2c 2c       	mov	r2, r12
    202e:	31 2c       	mov	r3, r1
    2030:	fb 01       	movw	r30, r22
    2032:	26 e0       	ldi	r18, 0x06	; 6
    2034:	c2 9e       	mul	r12, r18
    2036:	e0 0d       	add	r30, r0
    2038:	f1 1d       	adc	r31, r1
    203a:	11 24       	eor	r1, r1
    203c:	fd 87       	std	Y+13, r31	; 0x0d
    203e:	ec 87       	std	Y+12, r30	; 0x0c
    2040:	1e 16       	cp	r1, r30
    2042:	1f 06       	cpc	r1, r31
    2044:	0c f0       	brlt	.+2      	; 0x2048 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    2046:	d1 c1       	rjmp	.+930    	; 0x23ea <__stack+0x1eb>
    2048:	4a 2d       	mov	r20, r10
    204a:	50 e0       	ldi	r21, 0x00	; 0
    204c:	5b 87       	std	Y+11, r21	; 0x0b
    204e:	4a 87       	std	Y+10, r20	; 0x0a
    2050:	83 e0       	ldi	r24, 0x03	; 3
    2052:	44 0f       	add	r20, r20
    2054:	55 1f       	adc	r21, r21
    2056:	8a 95       	dec	r24
    2058:	e1 f7       	brne	.-8      	; 0x2052 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    205a:	5f 87       	std	Y+15, r21	; 0x0f
    205c:	4e 87       	std	Y+14, r20	; 0x0e
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	9a 81       	ldd	r25, Y+2	; 0x02
    2062:	84 0f       	add	r24, r20
    2064:	95 1f       	adc	r25, r21
    2066:	18 16       	cp	r1, r24
    2068:	19 06       	cpc	r1, r25
    206a:	0c f0       	brlt	.+2      	; 0x206e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    206c:	be c1       	rjmp	.+892    	; 0x23ea <__stack+0x1eb>
    206e:	58 96       	adiw	r26, 0x18	; 24
    2070:	8c 91       	ld	r24, X
    2072:	81 11       	cpse	r24, r1
    2074:	04 c0       	rjmp	.+8      	; 0x207e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    2076:	6f ea       	ldi	r22, 0xAF	; 175
    2078:	6d 15       	cp	r22, r13
    207a:	08 f4       	brcc	.+2      	; 0x207e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    207c:	d3 94       	inc	r13
    207e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2080:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2082:	ed 91       	ld	r30, X+
    2084:	fc 91       	ld	r31, X
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	02 84       	ldd	r0, Z+10	; 0x0a
    208a:	f3 85       	ldd	r31, Z+11	; 0x0b
    208c:	e0 2d       	mov	r30, r0
    208e:	cd 01       	movw	r24, r26
    2090:	19 95       	eicall
    2092:	b5 e0       	ldi	r27, 0x05	; 5
    2094:	db 9e       	mul	r13, r27
    2096:	c0 01       	movw	r24, r0
    2098:	11 24       	eor	r1, r1
    209a:	ec 2d       	mov	r30, r12
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	f9 8b       	std	Y+17, r31	; 0x11
    20a0:	e8 8b       	std	Y+16, r30	; 0x10
    20a2:	92 01       	movw	r18, r4
    20a4:	2b 5f       	subi	r18, 0xFB	; 251
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	3b 8b       	std	Y+19, r19	; 0x13
    20aa:	2a 8b       	std	Y+18, r18	; 0x12
    20ac:	32 01       	movw	r6, r4
    20ae:	5d 82       	std	Y+5, r5	; 0x05
    20b0:	4c 82       	std	Y+4, r4	; 0x04
    20b2:	ac 01       	movw	r20, r24
    20b4:	44 19       	sub	r20, r4
    20b6:	55 09       	sbc	r21, r5
    20b8:	5d 8b       	std	Y+21, r21	; 0x15
    20ba:	4c 8b       	std	Y+20, r20	; 0x14
    20bc:	7b 81       	ldd	r23, Y+3	; 0x03
    20be:	67 2f       	mov	r22, r23
    20c0:	70 e0       	ldi	r23, 0x00	; 0
    20c2:	7f 8b       	std	Y+23, r23	; 0x17
    20c4:	6e 8b       	std	Y+22, r22	; 0x16
    20c6:	89 81       	ldd	r24, Y+1	; 0x01
    20c8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ca:	08 96       	adiw	r24, 0x08	; 8
    20cc:	99 8f       	std	Y+25, r25	; 0x19
    20ce:	88 8f       	std	Y+24, r24	; 0x18
    20d0:	ec 89       	ldd	r30, Y+20	; 0x14
    20d2:	fd 89       	ldd	r31, Y+21	; 0x15
    20d4:	e6 0d       	add	r30, r6
    20d6:	f7 1d       	adc	r31, r7
    20d8:	e0 5c       	subi	r30, 0xC0	; 192
    20da:	fd 4f       	sbci	r31, 0xFD	; 253
    20dc:	d4 90       	lpm	r13, Z
    20de:	a9 81       	ldd	r26, Y+1	; 0x01
    20e0:	ba 81       	ldd	r27, Y+2	; 0x02
    20e2:	bf 83       	std	Y+7, r27	; 0x07
    20e4:	ae 83       	std	Y+6, r26	; 0x06
    20e6:	5d 01       	movw	r10, r26
    20e8:	d0 fe       	sbrs	r13, 0
    20ea:	16 c0       	rjmp	.+44     	; 0x2118 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    20ec:	aa 8d       	ldd	r26, Y+26	; 0x1a
    20ee:	bb 8d       	ldd	r27, Y+27	; 0x1b
    20f0:	ed 91       	ld	r30, X+
    20f2:	fc 91       	ld	r31, X
    20f4:	b1 e0       	ldi	r27, 0x01	; 1
    20f6:	cb 12       	cpse	r12, r27
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    20fa:	2b 81       	ldd	r18, Y+3	; 0x03
    20fc:	21 30       	cpi	r18, 0x01	; 1
    20fe:	31 f4       	brne	.+12     	; 0x210c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2100:	04 84       	ldd	r0, Z+12	; 0x0c
    2102:	f5 85       	ldd	r31, Z+13	; 0x0d
    2104:	e0 2d       	mov	r30, r0
    2106:	28 85       	ldd	r18, Y+8	; 0x08
    2108:	39 85       	ldd	r19, Y+9	; 0x09
    210a:	19 c0       	rjmp	.+50     	; 0x213e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    210c:	06 84       	ldd	r0, Z+14	; 0x0e
    210e:	f7 85       	ldd	r31, Z+15	; 0x0f
    2110:	e0 2d       	mov	r30, r0
    2112:	e8 84       	ldd	r14, Y+8	; 0x08
    2114:	f9 84       	ldd	r15, Y+9	; 0x09
    2116:	1d c0       	rjmp	.+58     	; 0x2152 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    2118:	48 85       	ldd	r20, Y+8	; 0x08
    211a:	59 85       	ldd	r21, Y+9	; 0x09
    211c:	48 15       	cp	r20, r8
    211e:	59 05       	cpc	r21, r9
    2120:	11 f1       	breq	.+68     	; 0x2166 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2122:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2124:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2126:	ed 91       	ld	r30, X+
    2128:	fc 91       	ld	r31, X
    212a:	b1 e0       	ldi	r27, 0x01	; 1
    212c:	cb 12       	cpse	r12, r27
    212e:	0d c0       	rjmp	.+26     	; 0x214a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2130:	2b 81       	ldd	r18, Y+3	; 0x03
    2132:	21 30       	cpi	r18, 0x01	; 1
    2134:	51 f4       	brne	.+20     	; 0x214a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2136:	04 84       	ldd	r0, Z+12	; 0x0c
    2138:	f5 85       	ldd	r31, Z+13	; 0x0d
    213a:	e0 2d       	mov	r30, r0
    213c:	94 01       	movw	r18, r8
    213e:	a5 01       	movw	r20, r10
    2140:	b3 01       	movw	r22, r6
    2142:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2144:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2146:	19 95       	eicall
    2148:	0e c0       	rjmp	.+28     	; 0x2166 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    214a:	06 84       	ldd	r0, Z+14	; 0x0e
    214c:	f7 85       	ldd	r31, Z+15	; 0x0f
    214e:	e0 2d       	mov	r30, r0
    2150:	74 01       	movw	r14, r8
    2152:	0a 85       	ldd	r16, Y+10	; 0x0a
    2154:	1b 85       	ldd	r17, Y+11	; 0x0b
    2156:	91 01       	movw	r18, r2
    2158:	4e 81       	ldd	r20, Y+6	; 0x06
    215a:	5f 81       	ldd	r21, Y+7	; 0x07
    215c:	6c 81       	ldd	r22, Y+4	; 0x04
    215e:	7d 81       	ldd	r23, Y+5	; 0x05
    2160:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2162:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2164:	19 95       	eicall
    2166:	d6 94       	lsr	r13
    2168:	4e 81       	ldd	r20, Y+6	; 0x06
    216a:	5f 81       	ldd	r21, Y+7	; 0x07
    216c:	6e 89       	ldd	r22, Y+22	; 0x16
    216e:	7f 89       	ldd	r23, Y+23	; 0x17
    2170:	46 0f       	add	r20, r22
    2172:	57 1f       	adc	r21, r23
    2174:	5f 83       	std	Y+7, r21	; 0x07
    2176:	4e 83       	std	Y+6, r20	; 0x06
    2178:	7f ef       	ldi	r23, 0xFF	; 255
    217a:	a7 1a       	sub	r10, r23
    217c:	b7 0a       	sbc	r11, r23
    217e:	88 8d       	ldd	r24, Y+24	; 0x18
    2180:	99 8d       	ldd	r25, Y+25	; 0x19
    2182:	a8 16       	cp	r10, r24
    2184:	b9 06       	cpc	r11, r25
    2186:	09 f0       	breq	.+2      	; 0x218a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    2188:	af cf       	rjmp	.-162    	; 0x20e8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    218a:	ac 81       	ldd	r26, Y+4	; 0x04
    218c:	bd 81       	ldd	r27, Y+5	; 0x05
    218e:	e8 89       	ldd	r30, Y+16	; 0x10
    2190:	f9 89       	ldd	r31, Y+17	; 0x11
    2192:	ae 0f       	add	r26, r30
    2194:	bf 1f       	adc	r27, r31
    2196:	bd 83       	std	Y+5, r27	; 0x05
    2198:	ac 83       	std	Y+4, r26	; 0x04
    219a:	ff ef       	ldi	r31, 0xFF	; 255
    219c:	6f 1a       	sub	r6, r31
    219e:	7f 0a       	sbc	r7, r31
    21a0:	2a 89       	ldd	r18, Y+18	; 0x12
    21a2:	3b 89       	ldd	r19, Y+19	; 0x13
    21a4:	62 16       	cp	r6, r18
    21a6:	73 06       	cpc	r7, r19
    21a8:	09 f0       	breq	.+2      	; 0x21ac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    21aa:	92 cf       	rjmp	.-220    	; 0x20d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    21ac:	48 85       	ldd	r20, Y+8	; 0x08
    21ae:	59 85       	ldd	r21, Y+9	; 0x09
    21b0:	48 15       	cp	r20, r8
    21b2:	59 05       	cpc	r21, r9
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    21b6:	f7 c0       	rjmp	.+494    	; 0x23a6 <__stack+0x1a7>
    21b8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    21ba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    21bc:	ed 91       	ld	r30, X+
    21be:	fc 91       	ld	r31, X
    21c0:	b1 e0       	ldi	r27, 0x01	; 1
    21c2:	cb 12       	cpse	r12, r27
    21c4:	12 c0       	rjmp	.+36     	; 0x21ea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    21c6:	2b 81       	ldd	r18, Y+3	; 0x03
    21c8:	21 30       	cpi	r18, 0x01	; 1
    21ca:	79 f4       	brne	.+30     	; 0x21ea <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    21cc:	b2 01       	movw	r22, r4
    21ce:	6b 5f       	subi	r22, 0xFB	; 251
    21d0:	7f 4f       	sbci	r23, 0xFF	; 255
    21d2:	00 88       	ldd	r0, Z+16	; 0x10
    21d4:	f1 89       	ldd	r31, Z+17	; 0x11
    21d6:	e0 2d       	mov	r30, r0
    21d8:	84 01       	movw	r16, r8
    21da:	28 e0       	ldi	r18, 0x08	; 8
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	49 81       	ldd	r20, Y+1	; 0x01
    21e0:	5a 81       	ldd	r21, Y+2	; 0x02
    21e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    21e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    21e6:	19 95       	eicall
    21e8:	de c0       	rjmp	.+444    	; 0x23a6 <__stack+0x1a7>
    21ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    21ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    21ee:	62 19       	sub	r22, r2
    21f0:	73 09       	sbc	r23, r3
    21f2:	06 84       	ldd	r0, Z+14	; 0x0e
    21f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    21f6:	e0 2d       	mov	r30, r0
    21f8:	74 01       	movw	r14, r8
    21fa:	0e 85       	ldd	r16, Y+14	; 0x0e
    21fc:	1f 85       	ldd	r17, Y+15	; 0x0f
    21fe:	91 01       	movw	r18, r2
    2200:	49 81       	ldd	r20, Y+1	; 0x01
    2202:	5a 81       	ldd	r21, Y+2	; 0x02
    2204:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2206:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2208:	19 95       	eicall
    220a:	cd c0       	rjmp	.+410    	; 0x23a6 <__stack+0x1a7>
    220c:	f9 01       	movw	r30, r18
    220e:	34 96       	adiw	r30, 0x04	; 4
    2210:	e4 91       	lpm	r30, Z
    2212:	de 1a       	sub	r13, r30
    2214:	f9 01       	movw	r30, r18
    2216:	32 96       	adiw	r30, 0x02	; 2
    2218:	85 91       	lpm	r24, Z+
    221a:	94 91       	lpm	r25, Z
    221c:	b7 e0       	ldi	r27, 0x07	; 7
    221e:	db 9e       	mul	r13, r27
    2220:	80 0d       	add	r24, r0
    2222:	91 1d       	adc	r25, r1
    2224:	11 24       	eor	r1, r1
    2226:	f9 01       	movw	r30, r18
    2228:	25 91       	lpm	r18, Z+
    222a:	34 91       	lpm	r19, Z
    222c:	39 8b       	std	Y+17, r19	; 0x11
    222e:	28 8b       	std	Y+16, r18	; 0x10
    2230:	fc 01       	movw	r30, r24
    2232:	25 90       	lpm	r2, Z+
    2234:	34 90       	lpm	r3, Z
    2236:	fc 01       	movw	r30, r24
    2238:	32 96       	adiw	r30, 0x02	; 2
    223a:	74 90       	lpm	r7, Z
    223c:	31 96       	adiw	r30, 0x01	; 1
    223e:	a4 90       	lpm	r10, Z
    2240:	32 96       	adiw	r30, 0x02	; 2
    2242:	94 90       	lpm	r9, Z
    2244:	31 96       	adiw	r30, 0x01	; 1
    2246:	b4 90       	lpm	r11, Z
    2248:	31 e0       	ldi	r19, 0x01	; 1
    224a:	3c 15       	cp	r19, r12
    224c:	18 f0       	brcs	.+6      	; 0x2254 <__stack+0x55>
    224e:	4b 81       	ldd	r20, Y+3	; 0x03
    2250:	42 30       	cpi	r20, 0x02	; 2
    2252:	68 f0       	brcs	.+26     	; 0x226e <__stack+0x6f>
    2254:	69 2d       	mov	r22, r9
    2256:	09 2c       	mov	r0, r9
    2258:	00 0c       	add	r0, r0
    225a:	77 0b       	sbc	r23, r23
    225c:	7d 83       	std	Y+5, r23	; 0x05
    225e:	6c 83       	std	Y+4, r22	; 0x04
    2260:	8b 2d       	mov	r24, r11
    2262:	0b 2c       	mov	r0, r11
    2264:	00 0c       	add	r0, r0
    2266:	99 0b       	sbc	r25, r25
    2268:	9f 83       	std	Y+7, r25	; 0x07
    226a:	8e 83       	std	Y+6, r24	; 0x06
    226c:	04 c0       	rjmp	.+8      	; 0x2276 <__stack+0x77>
    226e:	1f 82       	std	Y+7, r1	; 0x07
    2270:	1e 82       	std	Y+6, r1	; 0x06
    2272:	1d 82       	std	Y+5, r1	; 0x05
    2274:	1c 82       	std	Y+4, r1	; 0x04
    2276:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2278:	bb 8d       	ldd	r27, Y+27	; 0x1b
    227a:	ed 91       	ld	r30, X+
    227c:	fc 91       	ld	r31, X
    227e:	11 97       	sbiw	r26, 0x01	; 1
    2280:	02 84       	ldd	r0, Z+10	; 0x0a
    2282:	f3 85       	ldd	r31, Z+11	; 0x0b
    2284:	e0 2d       	mov	r30, r0
    2286:	cd 01       	movw	r24, r26
    2288:	19 95       	eicall
    228a:	61 2c       	mov	r6, r1
    228c:	d1 2c       	mov	r13, r1
    228e:	81 2c       	mov	r8, r1
    2290:	fb 81       	ldd	r31, Y+3	; 0x03
    2292:	ef 2f       	mov	r30, r31
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	fb 87       	std	Y+11, r31	; 0x0b
    2298:	ea 87       	std	Y+10, r30	; 0x0a
    229a:	2c 2d       	mov	r18, r12
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	3d 87       	std	Y+13, r19	; 0x0d
    22a0:	2c 87       	std	Y+12, r18	; 0x0c
    22a2:	49 81       	ldd	r20, Y+1	; 0x01
    22a4:	5a 81       	ldd	r21, Y+2	; 0x02
    22a6:	4b 0d       	add	r20, r11
    22a8:	51 1d       	adc	r21, r1
    22aa:	b7 fc       	sbrc	r11, 7
    22ac:	5a 95       	dec	r21
    22ae:	5d 8b       	std	Y+21, r21	; 0x15
    22b0:	4c 8b       	std	Y+20, r20	; 0x14
    22b2:	b2 01       	movw	r22, r4
    22b4:	69 0d       	add	r22, r9
    22b6:	71 1d       	adc	r23, r1
    22b8:	97 fc       	sbrc	r9, 7
    22ba:	7a 95       	dec	r23
    22bc:	7f 8b       	std	Y+23, r23	; 0x17
    22be:	6e 8b       	std	Y+22, r22	; 0x16
    22c0:	8a 14       	cp	r8, r10
    22c2:	08 f0       	brcs	.+2      	; 0x22c6 <__stack+0xc7>
    22c4:	70 c0       	rjmp	.+224    	; 0x23a6 <__stack+0x1a7>
    22c6:	28 2d       	mov	r18, r8
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4e 81       	ldd	r20, Y+6	; 0x06
    22cc:	5f 81       	ldd	r21, Y+7	; 0x07
    22ce:	42 0f       	add	r20, r18
    22d0:	53 1f       	adc	r21, r19
    22d2:	aa 85       	ldd	r26, Y+10	; 0x0a
    22d4:	bb 85       	ldd	r27, Y+11	; 0x0b
    22d6:	a4 9f       	mul	r26, r20
    22d8:	c0 01       	movw	r24, r0
    22da:	a5 9f       	mul	r26, r21
    22dc:	90 0d       	add	r25, r0
    22de:	b4 9f       	mul	r27, r20
    22e0:	90 0d       	add	r25, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	e9 81       	ldd	r30, Y+1	; 0x01
    22e6:	fa 81       	ldd	r31, Y+2	; 0x02
    22e8:	e8 0f       	add	r30, r24
    22ea:	f9 1f       	adc	r31, r25
    22ec:	ff 87       	std	Y+15, r31	; 0x0f
    22ee:	ee 87       	std	Y+14, r30	; 0x0e
    22f0:	86 2d       	mov	r24, r6
    22f2:	91 2c       	mov	r9, r1
    22f4:	4c 89       	ldd	r20, Y+20	; 0x14
    22f6:	5d 89       	ldd	r21, Y+21	; 0x15
    22f8:	42 0f       	add	r20, r18
    22fa:	53 1f       	adc	r21, r19
    22fc:	5b 8b       	std	Y+19, r21	; 0x13
    22fe:	4a 8b       	std	Y+18, r20	; 0x12
    2300:	97 14       	cp	r9, r7
    2302:	08 f0       	brcs	.+2      	; 0x2306 <__stack+0x107>
    2304:	4d c0       	rjmp	.+154    	; 0x23a0 <__stack+0x1a1>
    2306:	bb 24       	eor	r11, r11
    2308:	b3 94       	inc	r11
    230a:	b8 0e       	add	r11, r24
    230c:	87 70       	andi	r24, 0x07	; 7
    230e:	41 f4       	brne	.+16     	; 0x2320 <__stack+0x121>
    2310:	c1 01       	movw	r24, r2
    2312:	01 96       	adiw	r24, 0x01	; 1
    2314:	e8 89       	ldd	r30, Y+16	; 0x10
    2316:	f9 89       	ldd	r31, Y+17	; 0x11
    2318:	e2 0d       	add	r30, r2
    231a:	f3 1d       	adc	r31, r3
    231c:	d4 90       	lpm	r13, Z
    231e:	1c 01       	movw	r2, r24
    2320:	d7 fe       	sbrs	r13, 7
    2322:	3a c0       	rjmp	.+116    	; 0x2398 <__stack+0x199>
    2324:	51 e0       	ldi	r21, 0x01	; 1
    2326:	c5 12       	cpse	r12, r21
    2328:	16 c0       	rjmp	.+44     	; 0x2356 <__stack+0x157>
    232a:	6b 81       	ldd	r22, Y+3	; 0x03
    232c:	61 30       	cpi	r22, 0x01	; 1
    232e:	99 f4       	brne	.+38     	; 0x2356 <__stack+0x157>
    2330:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2332:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2334:	ed 91       	ld	r30, X+
    2336:	fc 91       	ld	r31, X
    2338:	11 97       	sbiw	r26, 0x01	; 1
    233a:	04 84       	ldd	r0, Z+12	; 0x0c
    233c:	f5 85       	ldd	r31, Z+13	; 0x0d
    233e:	e0 2d       	mov	r30, r0
    2340:	28 85       	ldd	r18, Y+8	; 0x08
    2342:	39 85       	ldd	r19, Y+9	; 0x09
    2344:	4a 89       	ldd	r20, Y+18	; 0x12
    2346:	5b 89       	ldd	r21, Y+19	; 0x13
    2348:	6e 89       	ldd	r22, Y+22	; 0x16
    234a:	7f 89       	ldd	r23, Y+23	; 0x17
    234c:	69 0d       	add	r22, r9
    234e:	71 1d       	adc	r23, r1
    2350:	cd 01       	movw	r24, r26
    2352:	19 95       	eicall
    2354:	21 c0       	rjmp	.+66     	; 0x2398 <__stack+0x199>
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	9d 81       	ldd	r25, Y+5	; 0x05
    235a:	89 0d       	add	r24, r9
    235c:	91 1d       	adc	r25, r1
    235e:	ec 85       	ldd	r30, Y+12	; 0x0c
    2360:	fd 85       	ldd	r31, Y+13	; 0x0d
    2362:	8e 9f       	mul	r24, r30
    2364:	b0 01       	movw	r22, r0
    2366:	8f 9f       	mul	r24, r31
    2368:	70 0d       	add	r23, r0
    236a:	9e 9f       	mul	r25, r30
    236c:	70 0d       	add	r23, r0
    236e:	11 24       	eor	r1, r1
    2370:	64 0d       	add	r22, r4
    2372:	75 1d       	adc	r23, r5
    2374:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2376:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2378:	ed 91       	ld	r30, X+
    237a:	fc 91       	ld	r31, X
    237c:	11 97       	sbiw	r26, 0x01	; 1
    237e:	06 84       	ldd	r0, Z+14	; 0x0e
    2380:	f7 85       	ldd	r31, Z+15	; 0x0f
    2382:	e0 2d       	mov	r30, r0
    2384:	e8 84       	ldd	r14, Y+8	; 0x08
    2386:	f9 84       	ldd	r15, Y+9	; 0x09
    2388:	0a 85       	ldd	r16, Y+10	; 0x0a
    238a:	1b 85       	ldd	r17, Y+11	; 0x0b
    238c:	2c 85       	ldd	r18, Y+12	; 0x0c
    238e:	3d 85       	ldd	r19, Y+13	; 0x0d
    2390:	4e 85       	ldd	r20, Y+14	; 0x0e
    2392:	5f 85       	ldd	r21, Y+15	; 0x0f
    2394:	cd 01       	movw	r24, r26
    2396:	19 95       	eicall
    2398:	dd 0c       	add	r13, r13
    239a:	93 94       	inc	r9
    239c:	8b 2d       	mov	r24, r11
    239e:	b0 cf       	rjmp	.-160    	; 0x2300 <__stack+0x101>
    23a0:	67 0c       	add	r6, r7
    23a2:	83 94       	inc	r8
    23a4:	8d cf       	rjmp	.-230    	; 0x22c0 <__stack+0xc1>
    23a6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    23a8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    23aa:	ed 91       	ld	r30, X+
    23ac:	fc 91       	ld	r31, X
    23ae:	11 97       	sbiw	r26, 0x01	; 1
    23b0:	06 88       	ldd	r0, Z+22	; 0x16
    23b2:	f7 89       	ldd	r31, Z+23	; 0x17
    23b4:	e0 2d       	mov	r30, r0
    23b6:	cd 01       	movw	r24, r26
    23b8:	6b 96       	adiw	r28, 0x1b	; 27
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	ff 90       	pop	r15
    23ce:	ef 90       	pop	r14
    23d0:	df 90       	pop	r13
    23d2:	cf 90       	pop	r12
    23d4:	bf 90       	pop	r11
    23d6:	af 90       	pop	r10
    23d8:	9f 90       	pop	r9
    23da:	8f 90       	pop	r8
    23dc:	7f 90       	pop	r7
    23de:	6f 90       	pop	r6
    23e0:	5f 90       	pop	r5
    23e2:	4f 90       	pop	r4
    23e4:	3f 90       	pop	r3
    23e6:	2f 90       	pop	r2
    23e8:	19 94       	eijmp
    23ea:	6b 96       	adiw	r28, 0x1b	; 27
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	df 91       	pop	r29
    23f8:	cf 91       	pop	r28
    23fa:	1f 91       	pop	r17
    23fc:	0f 91       	pop	r16
    23fe:	ff 90       	pop	r15
    2400:	ef 90       	pop	r14
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	7f 90       	pop	r7
    2410:	6f 90       	pop	r6
    2412:	5f 90       	pop	r5
    2414:	4f 90       	pop	r4
    2416:	3f 90       	pop	r3
    2418:	2f 90       	pop	r2
    241a:	08 95       	ret

0000241c <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    241c:	8f 92       	push	r8
    241e:	9f 92       	push	r9
    2420:	af 92       	push	r10
    2422:	cf 92       	push	r12
    2424:	ef 92       	push	r14
    2426:	ff 92       	push	r15
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	ec 01       	movw	r28, r24
    2432:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    2434:	89 8d       	ldd	r24, Y+25	; 0x19
    2436:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	09 f0       	breq	.+2      	; 0x243e <_ZN12Adafruit_GFX5writeEh+0x22>
    243c:	41 c0       	rjmp	.+130    	; 0x24c0 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    243e:	6a 30       	cpi	r22, 0x0A	; 10
    2440:	59 f4       	brne	.+22     	; 0x2458 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    2442:	1d 86       	std	Y+13, r1	; 0x0d
    2444:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    2446:	2d 89       	ldd	r18, Y+21	; 0x15
    2448:	8e 85       	ldd	r24, Y+14	; 0x0e
    244a:	9f 85       	ldd	r25, Y+15	; 0x0f
    244c:	38 e0       	ldi	r19, 0x08	; 8
    244e:	23 9f       	mul	r18, r19
    2450:	80 0d       	add	r24, r0
    2452:	91 1d       	adc	r25, r1
    2454:	11 24       	eor	r1, r1
    2456:	42 c0       	rjmp	.+132    	; 0x24dc <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    2458:	6d 30       	cpi	r22, 0x0D	; 13
    245a:	09 f4       	brne	.+2      	; 0x245e <_ZN12Adafruit_GFX5writeEh+0x42>
    245c:	a8 c0       	rjmp	.+336    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    245e:	8f 89       	ldd	r24, Y+23	; 0x17
    2460:	88 23       	and	r24, r24
    2462:	c9 f0       	breq	.+50     	; 0x2496 <_ZN12Adafruit_GFX5writeEh+0x7a>
    2464:	3c 89       	ldd	r19, Y+20	; 0x14
    2466:	8c 85       	ldd	r24, Y+12	; 0x0c
    2468:	9d 85       	ldd	r25, Y+13	; 0x0d
    246a:	46 e0       	ldi	r20, 0x06	; 6
    246c:	34 9f       	mul	r19, r20
    246e:	80 0d       	add	r24, r0
    2470:	91 1d       	adc	r25, r1
    2472:	11 24       	eor	r1, r1
    2474:	48 85       	ldd	r20, Y+8	; 0x08
    2476:	59 85       	ldd	r21, Y+9	; 0x09
    2478:	48 17       	cp	r20, r24
    247a:	59 07       	cpc	r21, r25
    247c:	64 f4       	brge	.+24     	; 0x2496 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    247e:	1d 86       	std	Y+13, r1	; 0x0d
    2480:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    2482:	3d 89       	ldd	r19, Y+21	; 0x15
    2484:	8e 85       	ldd	r24, Y+14	; 0x0e
    2486:	9f 85       	ldd	r25, Y+15	; 0x0f
    2488:	48 e0       	ldi	r20, 0x08	; 8
    248a:	34 9f       	mul	r19, r20
    248c:	80 0d       	add	r24, r0
    248e:	91 1d       	adc	r25, r1
    2490:	11 24       	eor	r1, r1
    2492:	9f 87       	std	Y+15, r25	; 0x0f
    2494:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    2496:	ea 88       	ldd	r14, Y+18	; 0x12
    2498:	fb 88       	ldd	r15, Y+19	; 0x13
    249a:	08 89       	ldd	r16, Y+16	; 0x10
    249c:	19 89       	ldd	r17, Y+17	; 0x11
    249e:	4e 85       	ldd	r20, Y+14	; 0x0e
    24a0:	5f 85       	ldd	r21, Y+15	; 0x0f
    24a2:	6c 85       	ldd	r22, Y+12	; 0x0c
    24a4:	7d 85       	ldd	r23, Y+13	; 0x0d
    24a6:	ad 88       	ldd	r10, Y+21	; 0x15
    24a8:	cc 88       	ldd	r12, Y+20	; 0x14
    24aa:	ce 01       	movw	r24, r28
    24ac:	82 dd       	rcall	.-1276   	; 0x1fb2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    24ae:	2c 89       	ldd	r18, Y+20	; 0x14
    24b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    24b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    24b4:	36 e0       	ldi	r19, 0x06	; 6
    24b6:	23 9f       	mul	r18, r19
    24b8:	80 0d       	add	r24, r0
    24ba:	91 1d       	adc	r25, r1
    24bc:	11 24       	eor	r1, r1
    24be:	3e c0       	rjmp	.+124    	; 0x253c <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    24c0:	6a 30       	cpi	r22, 0x0A	; 10
    24c2:	79 f4       	brne	.+30     	; 0x24e2 <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    24c4:	1d 86       	std	Y+13, r1	; 0x0d
    24c6:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    24c8:	2d 89       	ldd	r18, Y+21	; 0x15
    24ca:	fc 01       	movw	r30, r24
    24cc:	36 96       	adiw	r30, 0x06	; 6
    24ce:	e4 91       	lpm	r30, Z
    24d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    24d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    24d4:	2e 9f       	mul	r18, r30
    24d6:	80 0d       	add	r24, r0
    24d8:	91 1d       	adc	r25, r1
    24da:	11 24       	eor	r1, r1
    24dc:	9f 87       	std	Y+15, r25	; 0x0f
    24de:	8e 87       	std	Y+14, r24	; 0x0e
    24e0:	66 c0       	rjmp	.+204    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    24e2:	6d 30       	cpi	r22, 0x0D	; 13
    24e4:	09 f4       	brne	.+2      	; 0x24e8 <_ZN12Adafruit_GFX5writeEh+0xcc>
    24e6:	63 c0       	rjmp	.+198    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    24e8:	fc 01       	movw	r30, r24
    24ea:	34 96       	adiw	r30, 0x04	; 4
    24ec:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    24ee:	63 17       	cp	r22, r19
    24f0:	08 f4       	brcc	.+2      	; 0x24f4 <_ZN12Adafruit_GFX5writeEh+0xd8>
    24f2:	5d c0       	rjmp	.+186    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
    24f4:	31 96       	adiw	r30, 0x01	; 1
    24f6:	e4 91       	lpm	r30, Z
    24f8:	e6 17       	cp	r30, r22
    24fa:	08 f4       	brcc	.+2      	; 0x24fe <_ZN12Adafruit_GFX5writeEh+0xe2>
    24fc:	58 c0       	rjmp	.+176    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    24fe:	46 2f       	mov	r20, r22
    2500:	43 1b       	sub	r20, r19
    2502:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    2504:	fc 01       	movw	r30, r24
    2506:	32 96       	adiw	r30, 0x02	; 2
    2508:	85 90       	lpm	r8, Z+
    250a:	94 90       	lpm	r9, Z
    250c:	47 e0       	ldi	r20, 0x07	; 7
    250e:	34 9f       	mul	r19, r20
    2510:	80 0c       	add	r8, r0
    2512:	91 1c       	adc	r9, r1
    2514:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    2516:	f4 01       	movw	r30, r8
    2518:	32 96       	adiw	r30, 0x02	; 2
    251a:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    251c:	31 96       	adiw	r30, 0x01	; 1
    251e:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2520:	33 23       	and	r19, r19
    2522:	11 f0       	breq	.+4      	; 0x2528 <_ZN12Adafruit_GFX5writeEh+0x10c>
    2524:	e1 11       	cpse	r30, r1
    2526:	0d c0       	rjmp	.+26     	; 0x2542 <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2528:	f4 01       	movw	r30, r8
    252a:	34 96       	adiw	r30, 0x04	; 4
    252c:	e4 91       	lpm	r30, Z
    252e:	2c 89       	ldd	r18, Y+20	; 0x14
    2530:	8c 85       	ldd	r24, Y+12	; 0x0c
    2532:	9d 85       	ldd	r25, Y+13	; 0x0d
    2534:	e2 9f       	mul	r30, r18
    2536:	80 0d       	add	r24, r0
    2538:	91 1d       	adc	r25, r1
    253a:	11 24       	eor	r1, r1
    253c:	9d 87       	std	Y+13, r25	; 0x0d
    253e:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2540:	36 c0       	rjmp	.+108    	; 0x25ae <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    2542:	f4 01       	movw	r30, r8
    2544:	35 96       	adiw	r30, 0x05	; 5
    2546:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2548:	5f 89       	ldd	r21, Y+23	; 0x17
    254a:	55 23       	and	r21, r21
    254c:	19 f1       	breq	.+70     	; 0x2594 <_ZN12Adafruit_GFX5writeEh+0x178>
    254e:	5c 89       	ldd	r21, Y+20	; 0x14
    2550:	e3 2f       	mov	r30, r19
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	e4 0f       	add	r30, r20
    2556:	f1 1d       	adc	r31, r1
    2558:	47 fd       	sbrc	r20, 7
    255a:	fa 95       	dec	r31
    255c:	5e 9f       	mul	r21, r30
    255e:	b0 01       	movw	r22, r0
    2560:	5f 9f       	mul	r21, r31
    2562:	70 0d       	add	r23, r0
    2564:	11 24       	eor	r1, r1
    2566:	4c 85       	ldd	r20, Y+12	; 0x0c
    2568:	5d 85       	ldd	r21, Y+13	; 0x0d
    256a:	46 0f       	add	r20, r22
    256c:	57 1f       	adc	r21, r23
    256e:	68 85       	ldd	r22, Y+8	; 0x08
    2570:	79 85       	ldd	r23, Y+9	; 0x09
    2572:	64 17       	cp	r22, r20
    2574:	75 07       	cpc	r23, r21
    2576:	74 f4       	brge	.+28     	; 0x2594 <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    2578:	1d 86       	std	Y+13, r1	; 0x0d
    257a:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    257c:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    257e:	fc 01       	movw	r30, r24
    2580:	36 96       	adiw	r30, 0x06	; 6
    2582:	e4 91       	lpm	r30, Z
    2584:	8e 85       	ldd	r24, Y+14	; 0x0e
    2586:	9f 85       	ldd	r25, Y+15	; 0x0f
    2588:	3e 9f       	mul	r19, r30
    258a:	80 0d       	add	r24, r0
    258c:	91 1d       	adc	r25, r1
    258e:	11 24       	eor	r1, r1
    2590:	9f 87       	std	Y+15, r25	; 0x0f
    2592:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    2594:	ea 88       	ldd	r14, Y+18	; 0x12
    2596:	fb 88       	ldd	r15, Y+19	; 0x13
    2598:	08 89       	ldd	r16, Y+16	; 0x10
    259a:	19 89       	ldd	r17, Y+17	; 0x11
    259c:	4e 85       	ldd	r20, Y+14	; 0x0e
    259e:	5f 85       	ldd	r21, Y+15	; 0x0f
    25a0:	6c 85       	ldd	r22, Y+12	; 0x0c
    25a2:	7d 85       	ldd	r23, Y+13	; 0x0d
    25a4:	ad 88       	ldd	r10, Y+21	; 0x15
    25a6:	cc 88       	ldd	r12, Y+20	; 0x14
    25a8:	ce 01       	movw	r24, r28
    25aa:	03 dd       	rcall	.-1530   	; 0x1fb2 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    25ac:	bd cf       	rjmp	.-134    	; 0x2528 <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    25b6:	1f 91       	pop	r17
    25b8:	0f 91       	pop	r16
    25ba:	ff 90       	pop	r15
    25bc:	ef 90       	pop	r14
    25be:	cf 90       	pop	r12
    25c0:	af 90       	pop	r10
    25c2:	9f 90       	pop	r9
    25c4:	8f 90       	pop	r8
    25c6:	08 95       	ret

000025c8 <_ZN11SPISettingsC1Emhh>:
    @param  cmd  16-bit command to write.
*/
void Adafruit_SPITFT::writeCommand16(uint16_t cmd) {
  SPI_DC_LOW();
  write16(cmd);
  SPI_DC_HIGH();
    25c8:	0f 93       	push	r16
    25ca:	fc 01       	movw	r30, r24
    25cc:	80 e0       	ldi	r24, 0x00	; 0
    25ce:	92 e1       	ldi	r25, 0x12	; 18
    25d0:	aa e7       	ldi	r26, 0x7A	; 122
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	48 17       	cp	r20, r24
    25d8:	59 07       	cpc	r21, r25
    25da:	6a 07       	cpc	r22, r26
    25dc:	7b 07       	cpc	r23, r27
    25de:	40 f4       	brcc	.+16     	; 0x25f0 <_ZN11SPISettingsC1Emhh+0x28>
    25e0:	b6 95       	lsr	r27
    25e2:	a7 95       	ror	r26
    25e4:	97 95       	ror	r25
    25e6:	87 95       	ror	r24
    25e8:	3f 5f       	subi	r19, 0xFF	; 255
    25ea:	36 30       	cpi	r19, 0x06	; 6
    25ec:	a1 f7       	brne	.-24     	; 0x25d6 <_ZN11SPISettingsC1Emhh+0xe>
    25ee:	37 e0       	ldi	r19, 0x07	; 7
    25f0:	91 e0       	ldi	r25, 0x01	; 1
    25f2:	93 27       	eor	r25, r19
    25f4:	22 23       	and	r18, r18
    25f6:	11 f0       	breq	.+4      	; 0x25fc <_ZN11SPISettingsC1Emhh+0x34>
    25f8:	20 e5       	ldi	r18, 0x50	; 80
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <_ZN11SPISettingsC1Emhh+0x36>
    25fc:	20 e7       	ldi	r18, 0x70	; 112
    25fe:	0c 70       	andi	r16, 0x0C	; 12
    2600:	89 2f       	mov	r24, r25
    2602:	86 95       	lsr	r24
    2604:	08 2b       	or	r16, r24
    2606:	02 2b       	or	r16, r18
    2608:	00 83       	st	Z, r16
    260a:	91 70       	andi	r25, 0x01	; 1
    260c:	91 83       	std	Z+1, r25	; 0x01
    260e:	0f 91       	pop	r16
    2610:	08 95       	ret

00002612 <_ZN8SPIClass14endTransactionEv>:
    2612:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN8SPIClass13interruptModeE>
    2616:	88 23       	and	r24, r24
    2618:	61 f0       	breq	.+24     	; 0x2632 <_ZN8SPIClass14endTransactionEv+0x20>
    261a:	9f b7       	in	r25, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	20 91 4f 07 	lds	r18, 0x074F	; 0x80074f <_ZN8SPIClass13interruptModeE>
    2622:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <_ZN8SPIClass13interruptSaveE>
    2626:	21 30       	cpi	r18, 0x01	; 1
    2628:	19 f4       	brne	.+6      	; 0x2630 <_ZN8SPIClass14endTransactionEv+0x1e>
    262a:	8d bb       	out	0x1d, r24	; 29
    262c:	9f bf       	out	0x3f, r25	; 63
    262e:	08 95       	ret
    2630:	8f bf       	out	0x3f, r24	; 63
    2632:	08 95       	ret

00002634 <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>:
    2634:	dc 01       	movw	r26, r24
    2636:	5b 96       	adiw	r26, 0x1b	; 27
    2638:	ed 91       	ld	r30, X+
    263a:	fc 91       	ld	r31, X
    263c:	5c 97       	sbiw	r26, 0x1c	; 28
    263e:	90 81       	ld	r25, Z
    2640:	d1 96       	adiw	r26, 0x31	; 49
    2642:	8c 91       	ld	r24, X
    2644:	89 2b       	or	r24, r25
    2646:	80 83       	st	Z, r24
    2648:	08 95       	ret

0000264a <_ZN15Adafruit_SPITFT8endWriteEv>:
    264a:	cf 93       	push	r28
    264c:	df 93       	push	r29
    264e:	ec 01       	movw	r28, r24
    2650:	8f a9       	ldd	r24, Y+55	; 0x37
    2652:	87 fd       	sbrc	r24, 7
    2654:	02 c0       	rjmp	.+4      	; 0x265a <_ZN15Adafruit_SPITFT8endWriteEv+0x10>
    2656:	ce 01       	movw	r24, r28
    2658:	ed df       	rcall	.-38     	; 0x2634 <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
    265a:	8d a9       	ldd	r24, Y+53	; 0x35
    265c:	81 11       	cpse	r24, r1
    265e:	03 c0       	rjmp	.+6      	; 0x2666 <_ZN15Adafruit_SPITFT8endWriteEv+0x1c>
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	d6 cf       	rjmp	.-84     	; 0x2612 <_ZN8SPIClass14endTransactionEv>
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	08 95       	ret

0000266c <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>:
    266c:	dc 01       	movw	r26, r24
    266e:	5b 96       	adiw	r26, 0x1b	; 27
    2670:	ed 91       	ld	r30, X+
    2672:	fc 91       	ld	r31, X
    2674:	5c 97       	sbiw	r26, 0x1c	; 28
    2676:	90 81       	ld	r25, Z
    2678:	d2 96       	adiw	r26, 0x32	; 50
    267a:	8c 91       	ld	r24, X
    267c:	89 23       	and	r24, r25
    267e:	80 83       	st	Z, r24
    2680:	08 95       	ret

00002682 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>:
    2682:	dc 01       	movw	r26, r24
    2684:	5d 96       	adiw	r26, 0x1d	; 29
    2686:	ed 91       	ld	r30, X+
    2688:	fc 91       	ld	r31, X
    268a:	5e 97       	sbiw	r26, 0x1e	; 30
    268c:	90 81       	ld	r25, Z
    268e:	d3 96       	adiw	r26, 0x33	; 51
    2690:	8c 91       	ld	r24, X
    2692:	89 2b       	or	r24, r25
    2694:	80 83       	st	Z, r24
    2696:	08 95       	ret

00002698 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>:
    2698:	dc 01       	movw	r26, r24
    269a:	5d 96       	adiw	r26, 0x1d	; 29
    269c:	ed 91       	ld	r30, X+
    269e:	fc 91       	ld	r31, X
    26a0:	5e 97       	sbiw	r26, 0x1e	; 30
    26a2:	90 81       	ld	r25, Z
    26a4:	d4 96       	adiw	r26, 0x34	; 52
    26a6:	8c 91       	ld	r24, X
    26a8:	89 23       	and	r24, r25
    26aa:	80 83       	st	Z, r24
    26ac:	08 95       	ret

000026ae <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa>:
    26ae:	af 92       	push	r10
    26b0:	bf 92       	push	r11
    26b2:	cf 92       	push	r12
    26b4:	ef 92       	push	r14
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
    26be:	ec 01       	movw	r28, r24
    26c0:	59 01       	movw	r10, r18
    26c2:	55 dc       	rcall	.-1878   	; 0x1f6e <_ZN12Adafruit_GFXC1Eii>
    26c4:	80 ea       	ldi	r24, 0xA0	; 160
    26c6:	94 e0       	ldi	r25, 0x04	; 4
    26c8:	99 83       	std	Y+1, r25	; 0x01
    26ca:	88 83       	st	Y, r24
    26cc:	1d aa       	std	Y+53, r1	; 0x35
    26ce:	ce aa       	std	Y+54, r12	; 0x36
    26d0:	0f ab       	std	Y+55, r16	; 0x37
    26d2:	e8 ae       	std	Y+56, r14	; 0x38
    26d4:	1a ae       	std	Y+58, r1	; 0x3a
    26d6:	19 ae       	std	Y+57, r1	; 0x39
    26d8:	1c ae       	std	Y+60, r1	; 0x3c
    26da:	1b ae       	std	Y+59, r1	; 0x3b
    26dc:	1d ae       	std	Y+61, r1	; 0x3d
    26de:	1e ae       	std	Y+62, r1	; 0x3e
    26e0:	fe 01       	movw	r30, r28
    26e2:	ff 96       	adiw	r30, 0x3f	; 63
    26e4:	10 82       	st	Z, r1
    26e6:	11 82       	std	Z+1, r1	; 0x01
    26e8:	12 82       	std	Z+2, r1	; 0x02
    26ea:	13 82       	std	Z+3, r1	; 0x03
    26ec:	b8 a2       	std	Y+32, r11	; 0x20
    26ee:	af 8e       	std	Y+31, r10	; 0x1f
    26f0:	8e 2d       	mov	r24, r14
    26f2:	ee 0c       	add	r14, r14
    26f4:	99 0b       	sbc	r25, r25
    26f6:	fc 01       	movw	r30, r24
    26f8:	e4 55       	subi	r30, 0x54	; 84
    26fa:	fe 4f       	sbci	r31, 0xFE	; 254
    26fc:	e4 91       	lpm	r30, Z
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	ee 0f       	add	r30, r30
    2702:	ff 1f       	adc	r31, r31
    2704:	e4 5f       	subi	r30, 0xF4	; 244
    2706:	fd 4f       	sbci	r31, 0xFD	; 253
    2708:	25 91       	lpm	r18, Z+
    270a:	34 91       	lpm	r19, Z
    270c:	3e 8f       	std	Y+30, r19	; 0x1e
    270e:	2d 8f       	std	Y+29, r18	; 0x1d
    2710:	fc 01       	movw	r30, r24
    2712:	ea 59       	subi	r30, 0x9A	; 154
    2714:	fe 4f       	sbci	r31, 0xFE	; 254
    2716:	84 91       	lpm	r24, Z
    2718:	8b ab       	std	Y+51, r24	; 0x33
    271a:	07 fd       	sbrc	r16, 7
    271c:	16 c0       	rjmp	.+44     	; 0x274a <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa+0x9c>
    271e:	00 2e       	mov	r0, r16
    2720:	00 0c       	add	r0, r0
    2722:	11 0b       	sbc	r17, r17
    2724:	f8 01       	movw	r30, r16
    2726:	e4 55       	subi	r30, 0x54	; 84
    2728:	fe 4f       	sbci	r31, 0xFE	; 254
    272a:	e4 91       	lpm	r30, Z
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	ee 0f       	add	r30, r30
    2730:	ff 1f       	adc	r31, r31
    2732:	e4 5f       	subi	r30, 0xF4	; 244
    2734:	fd 4f       	sbci	r31, 0xFD	; 253
    2736:	25 91       	lpm	r18, Z+
    2738:	34 91       	lpm	r19, Z
    273a:	3c 8f       	std	Y+28, r19	; 0x1c
    273c:	2b 8f       	std	Y+27, r18	; 0x1b
    273e:	f8 01       	movw	r30, r16
    2740:	ea 59       	subi	r30, 0x9A	; 154
    2742:	fe 4f       	sbci	r31, 0xFE	; 254
    2744:	04 91       	lpm	r16, Z
    2746:	09 ab       	std	Y+49, r16	; 0x31
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa+0xa2>
    274a:	3c 8f       	std	Y+28, r19	; 0x1c
    274c:	2b 8f       	std	Y+27, r18	; 0x1b
    274e:	19 aa       	std	Y+49, r1	; 0x31
    2750:	99 a9       	ldd	r25, Y+49	; 0x31
    2752:	90 95       	com	r25
    2754:	9a ab       	std	Y+50, r25	; 0x32
    2756:	80 95       	com	r24
    2758:	8c ab       	std	Y+52, r24	; 0x34
    275a:	df 91       	pop	r29
    275c:	cf 91       	pop	r28
    275e:	1f 91       	pop	r17
    2760:	0f 91       	pop	r16
    2762:	ef 90       	pop	r14
    2764:	cf 90       	pop	r12
    2766:	bf 90       	pop	r11
    2768:	af 90       	pop	r10
    276a:	08 95       	ret

0000276c <_ZN15Adafruit_SPITFTC1Ejjaaa>:
    276c:	cf 92       	push	r12
    276e:	ef 92       	push	r14
    2770:	0f 93       	push	r16
    2772:	ce 2c       	mov	r12, r14
    2774:	e0 2e       	mov	r14, r16
    2776:	02 2f       	mov	r16, r18
    2778:	21 e5       	ldi	r18, 0x51	; 81
    277a:	37 e0       	ldi	r19, 0x07	; 7
    277c:	98 df       	rcall	.-208    	; 0x26ae <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa>
    277e:	0f 91       	pop	r16
    2780:	ef 90       	pop	r14
    2782:	cf 90       	pop	r12
    2784:	08 95       	ret

00002786 <_ZN15Adafruit_SPITFT7initSPIEmh>:
    2786:	8f 92       	push	r8
    2788:	9f 92       	push	r9
    278a:	af 92       	push	r10
    278c:	bf 92       	push	r11
    278e:	df 92       	push	r13
    2790:	ef 92       	push	r14
    2792:	ff 92       	push	r15
    2794:	0f 93       	push	r16
    2796:	1f 93       	push	r17
    2798:	cf 93       	push	r28
    279a:	df 93       	push	r29
    279c:	1f 92       	push	r1
    279e:	1f 92       	push	r1
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	7c 01       	movw	r14, r24
    27a6:	4a 01       	movw	r8, r20
    27a8:	5b 01       	movw	r10, r22
    27aa:	12 2f       	mov	r17, r18
    27ac:	45 2b       	or	r20, r21
    27ae:	46 2b       	or	r20, r22
    27b0:	47 2b       	or	r20, r23
    27b2:	31 f4       	brne	.+12     	; 0x27c0 <_ZN15Adafruit_SPITFT7initSPIEmh+0x3a>
    27b4:	81 2c       	mov	r8, r1
    27b6:	92 e1       	ldi	r25, 0x12	; 18
    27b8:	99 2e       	mov	r9, r25
    27ba:	9a e7       	ldi	r25, 0x7A	; 122
    27bc:	a9 2e       	mov	r10, r25
    27be:	b1 2c       	mov	r11, r1
    27c0:	f7 01       	movw	r30, r14
    27c2:	87 a9       	ldd	r24, Z+55	; 0x37
    27c4:	87 fd       	sbrc	r24, 7
    27c6:	08 c0       	rjmp	.+16     	; 0x27d8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x52>
    27c8:	61 e0       	ldi	r22, 0x01	; 1
    27ca:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	f7 01       	movw	r30, r14
    27d2:	87 a9       	ldd	r24, Z+55	; 0x37
    27d4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    27d8:	61 e0       	ldi	r22, 0x01	; 1
    27da:	f7 01       	movw	r30, r14
    27dc:	80 ad       	ldd	r24, Z+56	; 0x38
    27de:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	f7 01       	movw	r30, r14
    27e6:	80 ad       	ldd	r24, Z+56	; 0x38
    27e8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    27ec:	f7 01       	movw	r30, r14
    27ee:	85 a9       	ldd	r24, Z+53	; 0x35
    27f0:	81 11       	cpse	r24, r1
    27f2:	17 c0       	rjmp	.+46     	; 0x2822 <_ZN15Adafruit_SPITFT7initSPIEmh+0x9c>
    27f4:	01 2f       	mov	r16, r17
    27f6:	21 e0       	ldi	r18, 0x01	; 1
    27f8:	b5 01       	movw	r22, r10
    27fa:	a4 01       	movw	r20, r8
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	e3 de       	rcall	.-570    	; 0x25c8 <_ZN11SPISettingsC1Emhh>
    2802:	89 81       	ldd	r24, Y+1	; 0x01
    2804:	9a 81       	ldd	r25, Y+2	; 0x02
    2806:	f7 01       	movw	r30, r14
    2808:	92 a3       	std	Z+34, r25	; 0x22
    280a:	81 a3       	std	Z+33, r24	; 0x21
    280c:	01 2f       	mov	r16, r17
    280e:	10 e0       	ldi	r17, 0x00	; 0
    2810:	20 e0       	ldi	r18, 0x00	; 0
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	03 a3       	std	Z+35, r16	; 0x23
    2816:	14 a3       	std	Z+36, r17	; 0x24
    2818:	25 a3       	std	Z+37, r18	; 0x25
    281a:	36 a3       	std	Z+38, r19	; 0x26
    281c:	0e 94 19 1d 	call	0x3a32	; 0x3a32 <_ZN8SPIClass5beginEv>
    2820:	55 c0       	rjmp	.+170    	; 0x28cc <_ZN15Adafruit_SPITFT7initSPIEmh+0x146>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	e1 f4       	brne	.+56     	; 0x285e <_ZN15Adafruit_SPITFT7initSPIEmh+0xd8>
    2826:	61 e0       	ldi	r22, 0x01	; 1
    2828:	f7 01       	movw	r30, r14
    282a:	82 a5       	ldd	r24, Z+42	; 0x2a
    282c:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	f7 01       	movw	r30, r14
    2834:	82 a5       	ldd	r24, Z+42	; 0x2a
    2836:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	f7 01       	movw	r30, r14
    283e:	84 a5       	ldd	r24, Z+44	; 0x2c
    2840:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    2844:	60 e0       	ldi	r22, 0x00	; 0
    2846:	f7 01       	movw	r30, r14
    2848:	84 a5       	ldd	r24, Z+44	; 0x2c
    284a:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    284e:	f7 01       	movw	r30, r14
    2850:	83 a5       	ldd	r24, Z+43	; 0x2b
    2852:	87 fd       	sbrc	r24, 7
    2854:	3b c0       	rjmp	.+118    	; 0x28cc <_ZN15Adafruit_SPITFT7initSPIEmh+0x146>
    2856:	60 e0       	ldi	r22, 0x00	; 0
    2858:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    285c:	37 c0       	rjmp	.+110    	; 0x28cc <_ZN15Adafruit_SPITFT7initSPIEmh+0x146>
    285e:	0c ea       	ldi	r16, 0xAC	; 172
    2860:	11 e0       	ldi	r17, 0x01	; 1
    2862:	d1 2c       	mov	r13, r1
    2864:	f8 01       	movw	r30, r16
    2866:	84 91       	lpm	r24, Z
    2868:	e8 2f       	mov	r30, r24
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	e4 5f       	subi	r30, 0xF4	; 244
    2872:	fd 4f       	sbci	r31, 0xFD	; 253
    2874:	85 91       	lpm	r24, Z+
    2876:	94 91       	lpm	r25, Z
    2878:	f7 01       	movw	r30, r14
    287a:	27 8d       	ldd	r18, Z+31	; 0x1f
    287c:	30 a1       	ldd	r19, Z+32	; 0x20
    287e:	28 17       	cp	r18, r24
    2880:	39 07       	cpc	r19, r25
    2882:	41 f4       	brne	.+16     	; 0x2894 <_ZN15Adafruit_SPITFT7initSPIEmh+0x10e>
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	8d 2d       	mov	r24, r13
    2888:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    288c:	60 e0       	ldi	r22, 0x00	; 0
    288e:	8d 2d       	mov	r24, r13
    2890:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    2894:	d3 94       	inc	r13
    2896:	0f 5f       	subi	r16, 0xFF	; 255
    2898:	1f 4f       	sbci	r17, 0xFF	; 255
    289a:	f6 e4       	ldi	r31, 0x46	; 70
    289c:	df 12       	cpse	r13, r31
    289e:	e2 cf       	rjmp	.-60     	; 0x2864 <_ZN15Adafruit_SPITFT7initSPIEmh+0xde>
    28a0:	61 e0       	ldi	r22, 0x01	; 1
    28a2:	f7 01       	movw	r30, r14
    28a4:	86 a5       	ldd	r24, Z+46	; 0x2e
    28a6:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    28aa:	61 e0       	ldi	r22, 0x01	; 1
    28ac:	f7 01       	movw	r30, r14
    28ae:	86 a5       	ldd	r24, Z+46	; 0x2e
    28b0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    28b4:	f7 01       	movw	r30, r14
    28b6:	87 a5       	ldd	r24, Z+47	; 0x2f
    28b8:	87 fd       	sbrc	r24, 7
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <_ZN15Adafruit_SPITFT7initSPIEmh+0x146>
    28bc:	61 e0       	ldi	r22, 0x01	; 1
    28be:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    28c2:	61 e0       	ldi	r22, 0x01	; 1
    28c4:	f7 01       	movw	r30, r14
    28c6:	87 a5       	ldd	r24, Z+47	; 0x2f
    28c8:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    28cc:	f7 01       	movw	r30, r14
    28ce:	86 a9       	ldd	r24, Z+54	; 0x36
    28d0:	87 fd       	sbrc	r24, 7
    28d2:	24 c0       	rjmp	.+72     	; 0x291c <_ZN15Adafruit_SPITFT7initSPIEmh+0x196>
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    28da:	61 e0       	ldi	r22, 0x01	; 1
    28dc:	f7 01       	movw	r30, r14
    28de:	86 a9       	ldd	r24, Z+54	; 0x36
    28e0:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    28e4:	64 e6       	ldi	r22, 0x64	; 100
    28e6:	70 e0       	ldi	r23, 0x00	; 0
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	0e 94 22 0a 	call	0x1444	; 0x1444 <delay>
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	f7 01       	movw	r30, r14
    28f4:	86 a9       	ldd	r24, Z+54	; 0x36
    28f6:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    28fa:	64 e6       	ldi	r22, 0x64	; 100
    28fc:	70 e0       	ldi	r23, 0x00	; 0
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 22 0a 	call	0x1444	; 0x1444 <delay>
    2906:	61 e0       	ldi	r22, 0x01	; 1
    2908:	f7 01       	movw	r30, r14
    290a:	86 a9       	ldd	r24, Z+54	; 0x36
    290c:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    2910:	68 ec       	ldi	r22, 0xC8	; 200
    2912:	70 e0       	ldi	r23, 0x00	; 0
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	90 e0       	ldi	r25, 0x00	; 0
    2918:	0e 94 22 0a 	call	0x1444	; 0x1444 <delay>
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	bf 90       	pop	r11
    2930:	af 90       	pop	r10
    2932:	9f 90       	pop	r9
    2934:	8f 90       	pop	r8
    2936:	08 95       	ret

00002938 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    2938:	fc 01       	movw	r30, r24
    293a:	85 a9       	ldd	r24, Z+53	; 0x35
    293c:	81 11       	cpse	r24, r1
    293e:	1b c0       	rjmp	.+54     	; 0x2976 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3e>
    2940:	41 a1       	ldd	r20, Z+33	; 0x21
    2942:	32 a1       	ldd	r19, Z+34	; 0x22
    2944:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN8SPIClass13interruptModeE>
    2948:	88 23       	and	r24, r24
    294a:	99 f0       	breq	.+38     	; 0x2972 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3a>
    294c:	2f b7       	in	r18, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <_ZN8SPIClass13interruptModeE>
    2954:	81 30       	cpi	r24, 0x01	; 1
    2956:	59 f4       	brne	.+22     	; 0x296e <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x36>
    2958:	8d b3       	in	r24, 0x1d	; 29
    295a:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <_ZN8SPIClass13interruptSaveE>
    295e:	9d b3       	in	r25, 0x1d	; 29
    2960:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <_ZN8SPIClass13interruptMaskE>
    2964:	80 95       	com	r24
    2966:	89 23       	and	r24, r25
    2968:	8d bb       	out	0x1d, r24	; 29
    296a:	2f bf       	out	0x3f, r18	; 63
    296c:	02 c0       	rjmp	.+4      	; 0x2972 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3a>
    296e:	20 93 4d 07 	sts	0x074D, r18	; 0x80074d <_ZN8SPIClass13interruptSaveE>
    2972:	4c bd       	out	0x2c, r20	; 44
    2974:	3d bd       	out	0x2d, r19	; 45
    2976:	08 95       	ret

00002978 <_ZN15Adafruit_SPITFT10startWriteEv>:
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	ec 01       	movw	r28, r24
    297e:	dc df       	rcall	.-72     	; 0x2938 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    2980:	8f a9       	ldd	r24, Y+55	; 0x37
    2982:	87 fd       	sbrc	r24, 7
    2984:	04 c0       	rjmp	.+8      	; 0x298e <_ZN15Adafruit_SPITFT10startWriteEv+0x16>
    2986:	ce 01       	movw	r24, r28
    2988:	df 91       	pop	r29
    298a:	cf 91       	pop	r28
    298c:	6f ce       	rjmp	.-802    	; 0x266c <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>:
    2994:	dc 01       	movw	r26, r24
    2996:	91 96       	adiw	r26, 0x21	; 33
    2998:	ed 91       	ld	r30, X+
    299a:	fc 91       	ld	r31, X
    299c:	92 97       	sbiw	r26, 0x22	; 34
    299e:	90 81       	ld	r25, Z
    29a0:	95 96       	adiw	r26, 0x25	; 37
    29a2:	8c 91       	ld	r24, X
    29a4:	89 2b       	or	r24, r25
    29a6:	80 83       	st	Z, r24
    29a8:	08 95       	ret

000029aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>:
    29aa:	dc 01       	movw	r26, r24
    29ac:	91 96       	adiw	r26, 0x21	; 33
    29ae:	ed 91       	ld	r30, X+
    29b0:	fc 91       	ld	r31, X
    29b2:	92 97       	sbiw	r26, 0x22	; 34
    29b4:	90 81       	ld	r25, Z
    29b6:	96 96       	adiw	r26, 0x26	; 38
    29b8:	8c 91       	ld	r24, X
    29ba:	89 23       	and	r24, r25
    29bc:	80 83       	st	Z, r24
    29be:	08 95       	ret

000029c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>:
    29c0:	dc 01       	movw	r26, r24
    29c2:	93 96       	adiw	r26, 0x23	; 35
    29c4:	ed 91       	ld	r30, X+
    29c6:	fc 91       	ld	r31, X
    29c8:	94 97       	sbiw	r26, 0x24	; 36
    29ca:	90 81       	ld	r25, Z
    29cc:	97 96       	adiw	r26, 0x27	; 39
    29ce:	8c 91       	ld	r24, X
    29d0:	89 2b       	or	r24, r25
    29d2:	80 83       	st	Z, r24
    29d4:	08 95       	ret

000029d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>:
    29d6:	dc 01       	movw	r26, r24
    29d8:	93 96       	adiw	r26, 0x23	; 35
    29da:	ed 91       	ld	r30, X+
    29dc:	fc 91       	ld	r31, X
    29de:	94 97       	sbiw	r26, 0x24	; 36
    29e0:	90 81       	ld	r25, Z
    29e2:	98 96       	adiw	r26, 0x28	; 40
    29e4:	8c 91       	ld	r24, X
    29e6:	89 23       	and	r24, r25
    29e8:	80 83       	st	Z, r24
    29ea:	08 95       	ret

000029ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:
    29ec:	fc 01       	movw	r30, r24
    29ee:	a5 a1       	ldd	r26, Z+37	; 0x25
    29f0:	b6 a1       	ldd	r27, Z+38	; 0x26
    29f2:	9c 91       	ld	r25, X
    29f4:	82 a5       	ldd	r24, Z+42	; 0x2a
    29f6:	89 23       	and	r24, r25
    29f8:	8c 93       	st	X, r24
    29fa:	a5 a1       	ldd	r26, Z+37	; 0x25
    29fc:	b6 a1       	ldd	r27, Z+38	; 0x26
    29fe:	9c 91       	ld	r25, X
    2a00:	81 a5       	ldd	r24, Z+41	; 0x29
    2a02:	89 2b       	or	r24, r25
    2a04:	8c 93       	st	X, r24
    2a06:	08 95       	ret

00002a08 <_ZN15Adafruit_SPITFT8spiWriteEh>:
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	cf 93       	push	r28
    2a0e:	df 93       	push	r29
    2a10:	ec 01       	movw	r28, r24
    2a12:	16 2f       	mov	r17, r22
    2a14:	8d a9       	ldd	r24, Y+53	; 0x35
    2a16:	81 11       	cpse	r24, r1
    2a18:	05 c0       	rjmp	.+10     	; 0x2a24 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
    2a1a:	6e bd       	out	0x2e, r22	; 46
    2a1c:	0d b4       	in	r0, 0x2d	; 45
    2a1e:	07 fe       	sbrs	r0, 7
    2a20:	fd cf       	rjmp	.-6      	; 0x2a1c <_ZN15Adafruit_SPITFT8spiWriteEh+0x14>
    2a22:	1a c0       	rjmp	.+52     	; 0x2a58 <_ZN15Adafruit_SPITFT8spiWriteEh+0x50>
    2a24:	81 30       	cpi	r24, 0x01	; 1
    2a26:	79 f4       	brne	.+30     	; 0x2a46 <_ZN15Adafruit_SPITFT8spiWriteEh+0x3e>
    2a28:	08 e0       	ldi	r16, 0x08	; 8
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	17 ff       	sbrs	r17, 7
    2a2e:	02 c0       	rjmp	.+4      	; 0x2a34 <_ZN15Adafruit_SPITFT8spiWriteEh+0x2c>
    2a30:	b1 df       	rcall	.-158    	; 0x2994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2a32:	01 c0       	rjmp	.+2      	; 0x2a36 <_ZN15Adafruit_SPITFT8spiWriteEh+0x2e>
    2a34:	ba df       	rcall	.-140    	; 0x29aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    2a36:	ce 01       	movw	r24, r28
    2a38:	c3 df       	rcall	.-122    	; 0x29c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2a3a:	11 0f       	add	r17, r17
    2a3c:	ce 01       	movw	r24, r28
    2a3e:	cb df       	rcall	.-106    	; 0x29d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2a40:	01 50       	subi	r16, 0x01	; 1
    2a42:	99 f7       	brne	.-26     	; 0x2a2a <_ZN15Adafruit_SPITFT8spiWriteEh+0x22>
    2a44:	09 c0       	rjmp	.+18     	; 0x2a58 <_ZN15Adafruit_SPITFT8spiWriteEh+0x50>
    2a46:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2a48:	f8 a1       	ldd	r31, Y+32	; 0x20
    2a4a:	60 83       	st	Z, r22
    2a4c:	ce 01       	movw	r24, r28
    2a4e:	df 91       	pop	r29
    2a50:	cf 91       	pop	r28
    2a52:	1f 91       	pop	r17
    2a54:	0f 91       	pop	r16
    2a56:	ca cf       	rjmp	.-108    	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	08 95       	ret

00002a62 <_ZN15Adafruit_SPITFT12writeCommandEh>:
    2a62:	1f 93       	push	r17
    2a64:	cf 93       	push	r28
    2a66:	df 93       	push	r29
    2a68:	ec 01       	movw	r28, r24
    2a6a:	16 2f       	mov	r17, r22
    2a6c:	15 de       	rcall	.-982    	; 0x2698 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
    2a6e:	61 2f       	mov	r22, r17
    2a70:	ce 01       	movw	r24, r28
    2a72:	ca df       	rcall	.-108    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2a74:	ce 01       	movw	r24, r28
    2a76:	df 91       	pop	r29
    2a78:	cf 91       	pop	r28
    2a7a:	1f 91       	pop	r17
    2a7c:	02 ce       	rjmp	.-1020   	; 0x2682 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>

00002a7e <_ZN15Adafruit_SPITFT13invertDisplayEb>:
    2a7e:	1f 93       	push	r17
    2a80:	cf 93       	push	r28
    2a82:	df 93       	push	r29
    2a84:	ec 01       	movw	r28, r24
    2a86:	16 2f       	mov	r17, r22
    2a88:	e8 81       	ld	r30, Y
    2a8a:	f9 81       	ldd	r31, Y+1	; 0x01
    2a8c:	02 84       	ldd	r0, Z+10	; 0x0a
    2a8e:	f3 85       	ldd	r31, Z+11	; 0x0b
    2a90:	e0 2d       	mov	r30, r0
    2a92:	19 95       	eicall
    2a94:	11 23       	and	r17, r17
    2a96:	11 f0       	breq	.+4      	; 0x2a9c <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1e>
    2a98:	6d ad       	ldd	r22, Y+61	; 0x3d
    2a9a:	01 c0       	rjmp	.+2      	; 0x2a9e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x20>
    2a9c:	6e ad       	ldd	r22, Y+62	; 0x3e
    2a9e:	ce 01       	movw	r24, r28
    2aa0:	e0 df       	rcall	.-64     	; 0x2a62 <_ZN15Adafruit_SPITFT12writeCommandEh>
    2aa2:	e8 81       	ld	r30, Y
    2aa4:	f9 81       	ldd	r31, Y+1	; 0x01
    2aa6:	06 88       	ldd	r0, Z+22	; 0x16
    2aa8:	f7 89       	ldd	r31, Z+23	; 0x17
    2aaa:	e0 2d       	mov	r30, r0
    2aac:	ce 01       	movw	r24, r28
    2aae:	df 91       	pop	r29
    2ab0:	cf 91       	pop	r28
    2ab2:	1f 91       	pop	r17
    2ab4:	19 94       	eijmp

00002ab6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>:
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	ec 01       	movw	r28, r24
    2ac2:	8b 01       	movw	r16, r22
    2ac4:	8d a9       	ldd	r24, Y+53	; 0x35
    2ac6:	81 11       	cpse	r24, r1
    2ac8:	09 c0       	rjmp	.+18     	; 0x2adc <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x26>
    2aca:	1e bd       	out	0x2e, r17	; 46
    2acc:	0d b4       	in	r0, 0x2d	; 45
    2ace:	07 fe       	sbrs	r0, 7
    2ad0:	fd cf       	rjmp	.-6      	; 0x2acc <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x16>
    2ad2:	0e bd       	out	0x2e, r16	; 46
    2ad4:	0d b4       	in	r0, 0x2d	; 45
    2ad6:	07 fe       	sbrs	r0, 7
    2ad8:	fd cf       	rjmp	.-6      	; 0x2ad4 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x1e>
    2ada:	23 c0       	rjmp	.+70     	; 0x2b22 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x6c>
    2adc:	81 30       	cpi	r24, 0x01	; 1
    2ade:	91 f4       	brne	.+36     	; 0x2b04 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x4e>
    2ae0:	90 e1       	ldi	r25, 0x10	; 16
    2ae2:	f9 2e       	mov	r15, r25
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	17 ff       	sbrs	r17, 7
    2ae8:	02 c0       	rjmp	.+4      	; 0x2aee <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x38>
    2aea:	54 df       	rcall	.-344    	; 0x2994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2aec:	01 c0       	rjmp	.+2      	; 0x2af0 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x3a>
    2aee:	5d df       	rcall	.-326    	; 0x29aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    2af0:	ce 01       	movw	r24, r28
    2af2:	66 df       	rcall	.-308    	; 0x29c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2af4:	ce 01       	movw	r24, r28
    2af6:	6f df       	rcall	.-290    	; 0x29d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2af8:	00 0f       	add	r16, r16
    2afa:	11 1f       	adc	r17, r17
    2afc:	fa 94       	dec	r15
    2afe:	f1 10       	cpse	r15, r1
    2b00:	f1 cf       	rjmp	.-30     	; 0x2ae4 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x2e>
    2b02:	0f c0       	rjmp	.+30     	; 0x2b22 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x6c>
    2b04:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2b06:	f8 a1       	ldd	r31, Y+32	; 0x20
    2b08:	10 83       	st	Z, r17
    2b0a:	ce 01       	movw	r24, r28
    2b0c:	6f df       	rcall	.-290    	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2b0e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2b10:	f8 a1       	ldd	r31, Y+32	; 0x20
    2b12:	00 83       	st	Z, r16
    2b14:	ce 01       	movw	r24, r28
    2b16:	df 91       	pop	r29
    2b18:	cf 91       	pop	r28
    2b1a:	1f 91       	pop	r17
    2b1c:	0f 91       	pop	r16
    2b1e:	ff 90       	pop	r15
    2b20:	65 cf       	rjmp	.-310    	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	08 95       	ret

00002b2e <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
    2b2e:	cf 92       	push	r12
    2b30:	df 92       	push	r13
    2b32:	ef 92       	push	r14
    2b34:	ff 92       	push	r15
    2b36:	0f 93       	push	r16
    2b38:	1f 93       	push	r17
    2b3a:	cf 93       	push	r28
    2b3c:	df 93       	push	r29
    2b3e:	ec 01       	movw	r28, r24
    2b40:	f6 2e       	mov	r15, r22
    2b42:	8a 01       	movw	r16, r20
    2b44:	c2 2e       	mov	r12, r18
    2b46:	f8 de       	rcall	.-528    	; 0x2938 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    2b48:	8f a9       	ldd	r24, Y+55	; 0x37
    2b4a:	87 fd       	sbrc	r24, 7
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x24>
    2b4e:	ce 01       	movw	r24, r28
    2b50:	8d dd       	rcall	.-1254   	; 0x266c <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
    2b52:	ce 01       	movw	r24, r28
    2b54:	a1 dd       	rcall	.-1214   	; 0x2698 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
    2b56:	6f 2d       	mov	r22, r15
    2b58:	ce 01       	movw	r24, r28
    2b5a:	56 df       	rcall	.-340    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	91 dd       	rcall	.-1246   	; 0x2682 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>
    2b60:	e1 2c       	mov	r14, r1
    2b62:	f1 2c       	mov	r15, r1
    2b64:	d1 2c       	mov	r13, r1
    2b66:	ec 14       	cp	r14, r12
    2b68:	fd 04       	cpc	r15, r13
    2b6a:	dc f4       	brge	.+54     	; 0x2ba2 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x74>
    2b6c:	f8 01       	movw	r30, r16
    2b6e:	60 81       	ld	r22, Z
    2b70:	ce 01       	movw	r24, r28
    2b72:	4a df       	rcall	.-364    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2b74:	8d a9       	ldd	r24, Y+53	; 0x35
    2b76:	f8 01       	movw	r30, r16
    2b78:	82 30       	cpi	r24, 0x02	; 2
    2b7a:	51 f4       	brne	.+20     	; 0x2b90 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x62>
    2b7c:	88 a9       	ldd	r24, Y+48	; 0x30
    2b7e:	88 23       	and	r24, r24
    2b80:	39 f0       	breq	.+14     	; 0x2b90 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x62>
    2b82:	61 81       	ldd	r22, Z+1	; 0x01
    2b84:	72 81       	ldd	r23, Z+2	; 0x02
    2b86:	ce 01       	movw	r24, r28
    2b88:	96 df       	rcall	.-212    	; 0x2ab6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2b8a:	0d 5f       	subi	r16, 0xFD	; 253
    2b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8e:	05 c0       	rjmp	.+10     	; 0x2b9a <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x6c>
    2b90:	61 81       	ldd	r22, Z+1	; 0x01
    2b92:	ce 01       	movw	r24, r28
    2b94:	39 df       	rcall	.-398    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2b96:	0e 5f       	subi	r16, 0xFE	; 254
    2b98:	1f 4f       	sbci	r17, 0xFF	; 255
    2b9a:	ff ef       	ldi	r31, 0xFF	; 255
    2b9c:	ef 1a       	sub	r14, r31
    2b9e:	ff 0a       	sbc	r15, r31
    2ba0:	e2 cf       	rjmp	.-60     	; 0x2b66 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x38>
    2ba2:	8f a9       	ldd	r24, Y+55	; 0x37
    2ba4:	87 fd       	sbrc	r24, 7
    2ba6:	02 c0       	rjmp	.+4      	; 0x2bac <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x7e>
    2ba8:	ce 01       	movw	r24, r28
    2baa:	44 dd       	rcall	.-1400   	; 0x2634 <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
    2bac:	8d a9       	ldd	r24, Y+53	; 0x35
    2bae:	81 11       	cpse	r24, r1
    2bb0:	09 c0       	rjmp	.+18     	; 0x2bc4 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x96>
    2bb2:	df 91       	pop	r29
    2bb4:	cf 91       	pop	r28
    2bb6:	1f 91       	pop	r17
    2bb8:	0f 91       	pop	r16
    2bba:	ff 90       	pop	r15
    2bbc:	ef 90       	pop	r14
    2bbe:	df 90       	pop	r13
    2bc0:	cf 90       	pop	r12
    2bc2:	27 cd       	rjmp	.-1458   	; 0x2612 <_ZN8SPIClass14endTransactionEv>
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	df 90       	pop	r13
    2bd2:	cf 90       	pop	r12
    2bd4:	08 95       	ret

00002bd6 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>:
    2bd6:	af 92       	push	r10
    2bd8:	bf 92       	push	r11
    2bda:	cf 92       	push	r12
    2bdc:	df 92       	push	r13
    2bde:	ef 92       	push	r14
    2be0:	ff 92       	push	r15
    2be2:	0f 93       	push	r16
    2be4:	1f 93       	push	r17
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	ec 01       	movw	r28, r24
    2bec:	f6 2e       	mov	r15, r22
    2bee:	8a 01       	movw	r16, r20
    2bf0:	a2 2e       	mov	r10, r18
    2bf2:	a2 de       	rcall	.-700    	; 0x2938 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    2bf4:	8f a9       	ldd	r24, Y+55	; 0x37
    2bf6:	87 fd       	sbrc	r24, 7
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x28>
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	37 dd       	rcall	.-1426   	; 0x266c <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
    2bfe:	ce 01       	movw	r24, r28
    2c00:	4b dd       	rcall	.-1386   	; 0x2698 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
    2c02:	6f 2d       	mov	r22, r15
    2c04:	ce 01       	movw	r24, r28
    2c06:	00 df       	rcall	.-512    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2c08:	ce 01       	movw	r24, r28
    2c0a:	3b dd       	rcall	.-1418   	; 0x2682 <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>
    2c0c:	c1 2c       	mov	r12, r1
    2c0e:	d1 2c       	mov	r13, r1
    2c10:	b1 2c       	mov	r11, r1
    2c12:	ca 14       	cp	r12, r10
    2c14:	db 04       	cpc	r13, r11
    2c16:	d4 f4       	brge	.+52     	; 0x2c4c <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x76>
    2c18:	8d a9       	ldd	r24, Y+53	; 0x35
    2c1a:	78 01       	movw	r14, r16
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	51 f4       	brne	.+20     	; 0x2c34 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x5e>
    2c20:	88 a9       	ldd	r24, Y+48	; 0x30
    2c22:	88 23       	and	r24, r24
    2c24:	39 f0       	breq	.+14     	; 0x2c34 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x5e>
    2c26:	f8 01       	movw	r30, r16
    2c28:	61 91       	ld	r22, Z+
    2c2a:	71 91       	ld	r23, Z+
    2c2c:	7f 01       	movw	r14, r30
    2c2e:	ce 01       	movw	r24, r28
    2c30:	42 df       	rcall	.-380    	; 0x2ab6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2c32:	07 c0       	rjmp	.+14     	; 0x2c42 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x6c>
    2c34:	ff ef       	ldi	r31, 0xFF	; 255
    2c36:	ef 1a       	sub	r14, r31
    2c38:	ff 0a       	sbc	r15, r31
    2c3a:	f8 01       	movw	r30, r16
    2c3c:	64 91       	lpm	r22, Z
    2c3e:	ce 01       	movw	r24, r28
    2c40:	e3 de       	rcall	.-570    	; 0x2a08 <_ZN15Adafruit_SPITFT8spiWriteEh>
    2c42:	ff ef       	ldi	r31, 0xFF	; 255
    2c44:	cf 1a       	sub	r12, r31
    2c46:	df 0a       	sbc	r13, r31
    2c48:	87 01       	movw	r16, r14
    2c4a:	e3 cf       	rjmp	.-58     	; 0x2c12 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x3c>
    2c4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4e:	87 fd       	sbrc	r24, 7
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x80>
    2c52:	ce 01       	movw	r24, r28
    2c54:	ef dc       	rcall	.-1570   	; 0x2634 <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
    2c56:	8d a9       	ldd	r24, Y+53	; 0x35
    2c58:	81 11       	cpse	r24, r1
    2c5a:	0b c0       	rjmp	.+22     	; 0x2c72 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh+0x9c>
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	ff 90       	pop	r15
    2c66:	ef 90       	pop	r14
    2c68:	df 90       	pop	r13
    2c6a:	cf 90       	pop	r12
    2c6c:	bf 90       	pop	r11
    2c6e:	af 90       	pop	r10
    2c70:	d0 cc       	rjmp	.-1632   	; 0x2612 <_ZN8SPIClass14endTransactionEv>
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	bf 90       	pop	r11
    2c84:	af 90       	pop	r10
    2c86:	08 95       	ret

00002c88 <_ZN15Adafruit_SPITFT9drawPixelEiij>:
    2c88:	af 92       	push	r10
    2c8a:	bf 92       	push	r11
    2c8c:	cf 92       	push	r12
    2c8e:	df 92       	push	r13
    2c90:	ef 92       	push	r14
    2c92:	ff 92       	push	r15
    2c94:	0f 93       	push	r16
    2c96:	1f 93       	push	r17
    2c98:	cf 93       	push	r28
    2c9a:	df 93       	push	r29
    2c9c:	ec 01       	movw	r28, r24
    2c9e:	77 fd       	sbrc	r23, 7
    2ca0:	37 c0       	rjmp	.+110    	; 0x2d10 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2ca2:	88 85       	ldd	r24, Y+8	; 0x08
    2ca4:	99 85       	ldd	r25, Y+9	; 0x09
    2ca6:	68 17       	cp	r22, r24
    2ca8:	79 07       	cpc	r23, r25
    2caa:	94 f5       	brge	.+100    	; 0x2d10 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2cac:	57 fd       	sbrc	r21, 7
    2cae:	30 c0       	rjmp	.+96     	; 0x2d10 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2cb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cb4:	48 17       	cp	r20, r24
    2cb6:	59 07       	cpc	r21, r25
    2cb8:	5c f5       	brge	.+86     	; 0x2d10 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2cba:	69 01       	movw	r12, r18
    2cbc:	7a 01       	movw	r14, r20
    2cbe:	5b 01       	movw	r10, r22
    2cc0:	e8 81       	ld	r30, Y
    2cc2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cc4:	02 84       	ldd	r0, Z+10	; 0x0a
    2cc6:	f3 85       	ldd	r31, Z+11	; 0x0b
    2cc8:	e0 2d       	mov	r30, r0
    2cca:	ce 01       	movw	r24, r28
    2ccc:	19 95       	eicall
    2cce:	e8 81       	ld	r30, Y
    2cd0:	f9 81       	ldd	r31, Y+1	; 0x01
    2cd2:	02 a4       	ldd	r0, Z+42	; 0x2a
    2cd4:	f3 a5       	ldd	r31, Z+43	; 0x2b
    2cd6:	e0 2d       	mov	r30, r0
    2cd8:	01 e0       	ldi	r16, 0x01	; 1
    2cda:	10 e0       	ldi	r17, 0x00	; 0
    2cdc:	21 e0       	ldi	r18, 0x01	; 1
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	a7 01       	movw	r20, r14
    2ce2:	b5 01       	movw	r22, r10
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	19 95       	eicall
    2ce8:	b6 01       	movw	r22, r12
    2cea:	ce 01       	movw	r24, r28
    2cec:	e4 de       	rcall	.-568    	; 0x2ab6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2cee:	e8 81       	ld	r30, Y
    2cf0:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf2:	06 88       	ldd	r0, Z+22	; 0x16
    2cf4:	f7 89       	ldd	r31, Z+23	; 0x17
    2cf6:	e0 2d       	mov	r30, r0
    2cf8:	ce 01       	movw	r24, r28
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	1f 91       	pop	r17
    2d00:	0f 91       	pop	r16
    2d02:	ff 90       	pop	r15
    2d04:	ef 90       	pop	r14
    2d06:	df 90       	pop	r13
    2d08:	cf 90       	pop	r12
    2d0a:	bf 90       	pop	r11
    2d0c:	af 90       	pop	r10
    2d0e:	19 94       	eijmp
    2d10:	df 91       	pop	r29
    2d12:	cf 91       	pop	r28
    2d14:	1f 91       	pop	r17
    2d16:	0f 91       	pop	r16
    2d18:	ff 90       	pop	r15
    2d1a:	ef 90       	pop	r14
    2d1c:	df 90       	pop	r13
    2d1e:	cf 90       	pop	r12
    2d20:	bf 90       	pop	r11
    2d22:	af 90       	pop	r10
    2d24:	08 95       	ret

00002d26 <_ZN15Adafruit_SPITFT10writePixelEiij>:
    2d26:	ef 92       	push	r14
    2d28:	ff 92       	push	r15
    2d2a:	0f 93       	push	r16
    2d2c:	1f 93       	push	r17
    2d2e:	cf 93       	push	r28
    2d30:	df 93       	push	r29
    2d32:	ec 01       	movw	r28, r24
    2d34:	77 fd       	sbrc	r23, 7
    2d36:	21 c0       	rjmp	.+66     	; 0x2d7a <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2d38:	88 85       	ldd	r24, Y+8	; 0x08
    2d3a:	99 85       	ldd	r25, Y+9	; 0x09
    2d3c:	68 17       	cp	r22, r24
    2d3e:	79 07       	cpc	r23, r25
    2d40:	e4 f4       	brge	.+56     	; 0x2d7a <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2d42:	57 fd       	sbrc	r21, 7
    2d44:	1a c0       	rjmp	.+52     	; 0x2d7a <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2d46:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d48:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d4a:	48 17       	cp	r20, r24
    2d4c:	59 07       	cpc	r21, r25
    2d4e:	ac f4       	brge	.+42     	; 0x2d7a <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2d50:	79 01       	movw	r14, r18
    2d52:	e8 81       	ld	r30, Y
    2d54:	f9 81       	ldd	r31, Y+1	; 0x01
    2d56:	02 a4       	ldd	r0, Z+42	; 0x2a
    2d58:	f3 a5       	ldd	r31, Z+43	; 0x2b
    2d5a:	e0 2d       	mov	r30, r0
    2d5c:	01 e0       	ldi	r16, 0x01	; 1
    2d5e:	10 e0       	ldi	r17, 0x00	; 0
    2d60:	21 e0       	ldi	r18, 0x01	; 1
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	ce 01       	movw	r24, r28
    2d66:	19 95       	eicall
    2d68:	b7 01       	movw	r22, r14
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	df 91       	pop	r29
    2d6e:	cf 91       	pop	r28
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	ff 90       	pop	r15
    2d76:	ef 90       	pop	r14
    2d78:	9e ce       	rjmp	.-708    	; 0x2ab6 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	ff 90       	pop	r15
    2d84:	ef 90       	pop	r14
    2d86:	08 95       	ret

00002d88 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
    2d88:	cf 92       	push	r12
    2d8a:	df 92       	push	r13
    2d8c:	ef 92       	push	r14
    2d8e:	ff 92       	push	r15
    2d90:	1f 93       	push	r17
    2d92:	cf 93       	push	r28
    2d94:	df 93       	push	r29
    2d96:	ec 01       	movw	r28, r24
    2d98:	6a 01       	movw	r12, r20
    2d9a:	7b 01       	movw	r14, r22
    2d9c:	8d a9       	ldd	r24, Y+53	; 0x35
    2d9e:	81 11       	cpse	r24, r1
    2da0:	1c c0       	rjmp	.+56     	; 0x2dda <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x52>
    2da2:	8f 2d       	mov	r24, r15
    2da4:	99 27       	eor	r25, r25
    2da6:	aa 27       	eor	r26, r26
    2da8:	bb 27       	eor	r27, r27
    2daa:	8e bd       	out	0x2e, r24	; 46
    2dac:	0d b4       	in	r0, 0x2d	; 45
    2dae:	07 fe       	sbrs	r0, 7
    2db0:	fd cf       	rjmp	.-6      	; 0x2dac <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x24>
    2db2:	c7 01       	movw	r24, r14
    2db4:	aa 27       	eor	r26, r26
    2db6:	bb 27       	eor	r27, r27
    2db8:	8e bd       	out	0x2e, r24	; 46
    2dba:	0d b4       	in	r0, 0x2d	; 45
    2dbc:	07 fe       	sbrs	r0, 7
    2dbe:	fd cf       	rjmp	.-6      	; 0x2dba <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x32>
    2dc0:	bb 27       	eor	r27, r27
    2dc2:	af 2d       	mov	r26, r15
    2dc4:	9e 2d       	mov	r25, r14
    2dc6:	8d 2d       	mov	r24, r13
    2dc8:	8e bd       	out	0x2e, r24	; 46
    2dca:	0d b4       	in	r0, 0x2d	; 45
    2dcc:	07 fe       	sbrs	r0, 7
    2dce:	fd cf       	rjmp	.-6      	; 0x2dca <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x42>
    2dd0:	ce bc       	out	0x2e, r12	; 46
    2dd2:	0d b4       	in	r0, 0x2d	; 45
    2dd4:	07 fe       	sbrs	r0, 7
    2dd6:	fd cf       	rjmp	.-6      	; 0x2dd2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x4a>
    2dd8:	3a c0       	rjmp	.+116    	; 0x2e4e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0xc6>
    2dda:	81 30       	cpi	r24, 0x01	; 1
    2ddc:	91 f4       	brne	.+36     	; 0x2e02 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x7a>
    2dde:	10 e2       	ldi	r17, 0x20	; 32
    2de0:	ce 01       	movw	r24, r28
    2de2:	f7 fe       	sbrs	r15, 7
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>
    2de6:	d6 dd       	rcall	.-1108   	; 0x2994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2de8:	01 c0       	rjmp	.+2      	; 0x2dec <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
    2dea:	df dd       	rcall	.-1090   	; 0x29aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    2dec:	ce 01       	movw	r24, r28
    2dee:	e8 dd       	rcall	.-1072   	; 0x29c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2df0:	ce 01       	movw	r24, r28
    2df2:	f1 dd       	rcall	.-1054   	; 0x29d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2df4:	cc 0c       	add	r12, r12
    2df6:	dd 1c       	adc	r13, r13
    2df8:	ee 1c       	adc	r14, r14
    2dfa:	ff 1c       	adc	r15, r15
    2dfc:	11 50       	subi	r17, 0x01	; 1
    2dfe:	81 f7       	brne	.-32     	; 0x2de0 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x58>
    2e00:	26 c0       	rjmp	.+76     	; 0x2e4e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0xc6>
    2e02:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e04:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e06:	87 2f       	mov	r24, r23
    2e08:	99 27       	eor	r25, r25
    2e0a:	aa 27       	eor	r26, r26
    2e0c:	bb 27       	eor	r27, r27
    2e0e:	80 83       	st	Z, r24
    2e10:	ce 01       	movw	r24, r28
    2e12:	ec dd       	rcall	.-1064   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e14:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e16:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e18:	c7 01       	movw	r24, r14
    2e1a:	aa 27       	eor	r26, r26
    2e1c:	bb 27       	eor	r27, r27
    2e1e:	80 83       	st	Z, r24
    2e20:	ce 01       	movw	r24, r28
    2e22:	e4 dd       	rcall	.-1080   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e24:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e26:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e28:	bb 27       	eor	r27, r27
    2e2a:	af 2d       	mov	r26, r15
    2e2c:	9e 2d       	mov	r25, r14
    2e2e:	8d 2d       	mov	r24, r13
    2e30:	80 83       	st	Z, r24
    2e32:	ce 01       	movw	r24, r28
    2e34:	db dd       	rcall	.-1098   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e36:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e38:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e3a:	c0 82       	st	Z, r12
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	cf cd       	rjmp	.-1122   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	1f 91       	pop	r17
    2e54:	ff 90       	pop	r15
    2e56:	ef 90       	pop	r14
    2e58:	df 90       	pop	r13
    2e5a:	cf 90       	pop	r12
    2e5c:	08 95       	ret

00002e5e <_ZN15Adafruit_SPITFT10writeColorEjm>:
    @brief  Issue a series of pixels, all the same color. Not self-
            contained; should follow startWrite() and setAddrWindow() calls.
    @param  color  16-bit pixel color in '565' RGB format.
    @param  len    Number of pixels to draw.
*/
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
    2e5e:	af 92       	push	r10
    2e60:	bf 92       	push	r11
    2e62:	cf 92       	push	r12
    2e64:	df 92       	push	r13
    2e66:	ef 92       	push	r14
    2e68:	ff 92       	push	r15
    2e6a:	0f 93       	push	r16
    2e6c:	1f 93       	push	r17
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	ec 01       	movw	r28, r24
    2e74:	8b 01       	movw	r16, r22

  if (!len)
    2e76:	21 15       	cp	r18, r1
    2e78:	31 05       	cpc	r19, r1
    2e7a:	41 05       	cpc	r20, r1
    2e7c:	51 05       	cpc	r21, r1
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <_ZN15Adafruit_SPITFT10writeColorEjm+0x24>
    2e80:	69 c0       	rjmp	.+210    	; 0x2f54 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
#endif // end USE_SPI_DMA
#endif // end !ESP32

  // All other cases (non-DMA hard SPI, bitbang SPI, parallel)...

  if (connection == TFT_HARD_SPI) {
    2e82:	8d a9       	ldd	r24, Y+53	; 0x35
    2e84:	81 11       	cpse	r24, r1
    2e86:	0f c0       	rjmp	.+30     	; 0x2ea6 <_ZN15Adafruit_SPITFT10writeColorEjm+0x48>
        hwspi._spi->write(hi);
        hwspi._spi->write(lo);
      }
    } while (len);
#else // !ESP8266
    while (len--) {
    2e88:	21 50       	subi	r18, 0x01	; 1
    2e8a:	31 09       	sbc	r19, r1
    2e8c:	41 09       	sbc	r20, r1
    2e8e:	51 09       	sbc	r21, r1
    2e90:	08 f4       	brcc	.+2      	; 0x2e94 <_ZN15Adafruit_SPITFT10writeColorEjm+0x36>
    2e92:	60 c0       	rjmp	.+192    	; 0x2f54 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
#if defined(__AVR__)
      AVR_WRITESPI(hi);
    2e94:	1e bd       	out	0x2e, r17	; 46
    2e96:	0d b4       	in	r0, 0x2d	; 45
    2e98:	07 fe       	sbrs	r0, 7
    2e9a:	fd cf       	rjmp	.-6      	; 0x2e96 <_ZN15Adafruit_SPITFT10writeColorEjm+0x38>
      AVR_WRITESPI(lo);
    2e9c:	0e bd       	out	0x2e, r16	; 46
    2e9e:	0d b4       	in	r0, 0x2d	; 45
    2ea0:	07 fe       	sbrs	r0, 7
    2ea2:	fd cf       	rjmp	.-6      	; 0x2e9e <_ZN15Adafruit_SPITFT10writeColorEjm+0x40>
    2ea4:	f1 cf       	rjmp	.-30     	; 0x2e88 <_ZN15Adafruit_SPITFT10writeColorEjm+0x2a>
      hwspi._spi->transfer(hi);
      hwspi._spi->transfer(lo);
#endif
    }
#endif // end !ESP8266
  } else if (connection == TFT_SOFT_SPI) {
    2ea6:	81 30       	cpi	r24, 0x01	; 1
    2ea8:	59 f5       	brne	.+86     	; 0x2f00 <_ZN15Adafruit_SPITFT10writeColorEjm+0xa2>
    2eaa:	69 01       	movw	r12, r18
    2eac:	7a 01       	movw	r14, r20
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {

  if (!len)
    return; // Avoid 0-byte transfers

  uint8_t hi = color >> 8, lo = color;
    2eae:	a1 2e       	mov	r10, r17
    2eb0:	28 e0       	ldi	r18, 0x08	; 8
    2eb2:	b2 2e       	mov	r11, r18
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
        if (x & 0x80)
          SPI_MOSI_HIGH();
    2eb4:	ce 01       	movw	r24, r28
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
        if (x & 0x80)
    2eb6:	a7 fe       	sbrs	r10, 7
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <_ZN15Adafruit_SPITFT10writeColorEjm+0x60>
          SPI_MOSI_HIGH();
    2eba:	6c dd       	rcall	.-1320   	; 0x2994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <_ZN15Adafruit_SPITFT10writeColorEjm+0x62>
        else
          SPI_MOSI_LOW();
    2ebe:	75 dd       	rcall	.-1302   	; 0x29aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
        SPI_SCK_HIGH();
    2ec0:	ce 01       	movw	r24, r28
    2ec2:	7e dd       	rcall	.-1284   	; 0x29c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
        SPI_SCK_LOW();
    2ec4:	ce 01       	movw	r24, r28
    2ec6:	87 dd       	rcall	.-1266   	; 0x29d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2ec8:	aa 0c       	add	r10, r10
        x <<= 1;
    2eca:	ba 94       	dec	r11
    2ecc:	b1 10       	cpse	r11, r1
      }
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
    2ece:	f2 cf       	rjmp	.-28     	; 0x2eb4 <_ZN15Adafruit_SPITFT10writeColorEjm+0x56>
    2ed0:	a0 2e       	mov	r10, r16
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {

  if (!len)
    return; // Avoid 0-byte transfers

  uint8_t hi = color >> 8, lo = color;
    2ed2:	98 e0       	ldi	r25, 0x08	; 8
      }
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
    2ed4:	b9 2e       	mov	r11, r25
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
        if (x & 0x80)
          SPI_MOSI_HIGH();
    2ed6:	ce 01       	movw	r24, r28
        SPI_SCK_HIGH();
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
        if (x & 0x80)
    2ed8:	a7 fe       	sbrs	r10, 7
          SPI_MOSI_HIGH();
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <_ZN15Adafruit_SPITFT10writeColorEjm+0x82>
    2edc:	5b dd       	rcall	.-1354   	; 0x2994 <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
        else
          SPI_MOSI_LOW();
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <_ZN15Adafruit_SPITFT10writeColorEjm+0x84>
    2ee0:	64 dd       	rcall	.-1336   	; 0x29aa <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
        SPI_SCK_HIGH();
    2ee2:	ce 01       	movw	r24, r28
    2ee4:	6d dd       	rcall	.-1318   	; 0x29c0 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2ee6:	ce 01       	movw	r24, r28
        SPI_SCK_LOW();
    2ee8:	76 dd       	rcall	.-1300   	; 0x29d6 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2eea:	aa 0c       	add	r10, r10
    2eec:	ba 94       	dec	r11
        x <<= 1;
    2eee:	b1 10       	cpse	r11, r1
    2ef0:	f2 cf       	rjmp	.-28     	; 0x2ed6 <_ZN15Adafruit_SPITFT10writeColorEjm+0x78>
          SPI_MOSI_LOW();
        SPI_SCK_HIGH();
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	c8 1a       	sub	r12, r24
    2ef6:	d1 08       	sbc	r13, r1
    2ef8:	e1 08       	sbc	r14, r1
    2efa:	f1 08       	sbc	r15, r1
    2efc:	c1 f6       	brne	.-80     	; 0x2eae <_ZN15Adafruit_SPITFT10writeColorEjm+0x50>
    2efe:	2a c0       	rjmp	.+84     	; 0x2f54 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
          x <<= 1;
        }
      }
    } while (len);
#else // !ESP8266
    while (len--) {
    2f00:	16 13       	cpse	r17, r22
    2f02:	16 c0       	rjmp	.+44     	; 0x2f30 <_ZN15Adafruit_SPITFT10writeColorEjm+0xd2>
      }
#endif     // end !__AVR__
    }
#endif     // end !ESP8266
  } else { // PARALLEL
    if (hi == lo) {
    2f04:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2f06:	f8 a1       	ldd	r31, Y+32	; 0x20
#if defined(__AVR__)
      len *= 2;
      *tft8.writePort = hi;
    2f08:	10 83       	st	Z, r17
    2f0a:	69 01       	movw	r12, r18
    2f0c:	7a 01       	movw	r14, r20
    2f0e:	cc 0c       	add	r12, r12
    2f10:	dd 1c       	adc	r13, r13
    2f12:	ee 1c       	adc	r14, r14
    2f14:	ff 1c       	adc	r15, r15
    2f16:	c1 14       	cp	r12, r1
      while (len--) {
    2f18:	d1 04       	cpc	r13, r1
    2f1a:	e1 04       	cpc	r14, r1
    2f1c:	f1 04       	cpc	r15, r1
    2f1e:	d1 f0       	breq	.+52     	; 0x2f54 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
    2f20:	ce 01       	movw	r24, r28
        TFT_WR_STROBE();
    2f22:	64 dd       	rcall	.-1336   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	c8 1a       	sub	r12, r24
    2f28:	d1 08       	sbc	r13, r1
    2f2a:	e1 08       	sbc	r14, r1
    2f2c:	f1 08       	sbc	r15, r1
    2f2e:	f3 cf       	rjmp	.-26     	; 0x2f16 <_ZN15Adafruit_SPITFT10writeColorEjm+0xb8>
    2f30:	69 01       	movw	r12, r18
      }
#endif     // end !__AVR__
    }
#endif     // end !ESP8266
  } else { // PARALLEL
    if (hi == lo) {
    2f32:	7a 01       	movw	r14, r20
    2f34:	ef 8d       	ldd	r30, Y+31	; 0x1f
      }
#endif
    } else {
      while (len--) {
#if defined(__AVR__)
        *tft8.writePort = hi;
    2f36:	f8 a1       	ldd	r31, Y+32	; 0x20
    2f38:	10 83       	st	Z, r17
        TFT_WR_STROBE();
    2f3a:	ce 01       	movw	r24, r28
    2f3c:	57 dd       	rcall	.-1362   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2f3e:	ef 8d       	ldd	r30, Y+31	; 0x1f
        *tft8.writePort = lo;
    2f40:	f8 a1       	ldd	r31, Y+32	; 0x20
    2f42:	00 83       	st	Z, r16
    2f44:	ce 01       	movw	r24, r28
          *tft8.writePort = lo;
        } else {
          *(volatile uint16_t *)tft8.writePort = color;
        }
#endif
        TFT_WR_STROBE();
    2f46:	52 dd       	rcall	.-1372   	; 0x29ec <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2f48:	81 e0       	ldi	r24, 0x01	; 1
    2f4a:	c8 1a       	sub	r12, r24
    2f4c:	d1 08       	sbc	r13, r1
    2f4e:	e1 08       	sbc	r14, r1
    2f50:	f1 08       	sbc	r15, r1
    2f52:	81 f7       	brne	.-32     	; 0x2f34 <_ZN15Adafruit_SPITFT10writeColorEjm+0xd6>
    2f54:	df 91       	pop	r29
      while (len--) {
        TFT_WR_STROBE();
      }
#endif
    } else {
      while (len--) {
    2f56:	cf 91       	pop	r28
#endif
        TFT_WR_STROBE();
      }
    }
  }
}
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	ff 90       	pop	r15
    2f5e:	ef 90       	pop	r14
    2f60:	df 90       	pop	r13
    2f62:	cf 90       	pop	r12
    2f64:	bf 90       	pop	r11
    2f66:	af 90       	pop	r10
    2f68:	08 95       	ret

00002f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>:
    2f6a:	af 92       	push	r10
    2f6c:	bf 92       	push	r11
    @note   This is a new function, no graphics primitives besides rects
            and horizontal/vertical lines are written to best use this yet.
*/
inline void Adafruit_SPITFT::writeFillRectPreclipped(int16_t x, int16_t y,
                                                     int16_t w, int16_t h,
                                                     uint16_t color) {
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	ec 01       	movw	r28, r24
    2f80:	59 01       	movw	r10, r18
  setAddrWindow(x, y, w, h);
    2f82:	e8 81       	ld	r30, Y
    2f84:	f9 81       	ldd	r31, Y+1	; 0x01
    2f86:	02 a4       	ldd	r0, Z+42	; 0x2a
    2f88:	f3 a5       	ldd	r31, Z+43	; 0x2b
    2f8a:	e0 2d       	mov	r30, r0
    2f8c:	19 95       	eicall
  writeColor(color, (uint32_t)w * h);
    2f8e:	95 01       	movw	r18, r10
    2f90:	d8 01       	movw	r26, r16
    2f92:	0e 94 30 21 	call	0x4260	; 0x4260 <__mulhisi3>
    2f96:	9b 01       	movw	r18, r22
    2f98:	ac 01       	movw	r20, r24
    2f9a:	b7 01       	movw	r22, r14
    2f9c:	ce 01       	movw	r24, r28
}
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	1f 91       	pop	r17
    2fa4:	0f 91       	pop	r16
    2fa6:	ff 90       	pop	r15
    2fa8:	ef 90       	pop	r14
    2faa:	df 90       	pop	r13
    2fac:	cf 90       	pop	r12
    2fae:	bf 90       	pop	r11
    2fb0:	af 90       	pop	r10
*/
inline void Adafruit_SPITFT::writeFillRectPreclipped(int16_t x, int16_t y,
                                                     int16_t w, int16_t h,
                                                     uint16_t color) {
  setAddrWindow(x, y, w, h);
  writeColor(color, (uint32_t)w * h);
    2fb2:	55 cf       	rjmp	.-342    	; 0x2e5e <_ZN15Adafruit_SPITFT10writeColorEjm>

00002fb4 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij>:
    @param  h      Line height in pixels (positive = below first point,
                   negative = above first point).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                            uint16_t color) {
    2fb4:	ef 92       	push	r14
    2fb6:	ff 92       	push	r15
    2fb8:	0f 93       	push	r16
    2fba:	1f 93       	push	r17
    2fbc:	cf 93       	push	r28
    2fbe:	df 93       	push	r29
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
    2fc0:	77 fd       	sbrc	r23, 7
    2fc2:	33 c0       	rjmp	.+102    	; 0x302a <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    2fc4:	dc 01       	movw	r26, r24
    2fc6:	18 96       	adiw	r26, 0x08	; 8
    2fc8:	ed 91       	ld	r30, X+
    2fca:	fc 91       	ld	r31, X
    2fcc:	19 97       	sbiw	r26, 0x09	; 9
    2fce:	6e 17       	cp	r22, r30
    2fd0:	7f 07       	cpc	r23, r31
    2fd2:	5c f5       	brge	.+86     	; 0x302a <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    2fd4:	21 15       	cp	r18, r1
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	41 f1       	breq	.+80     	; 0x302a <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    if (h < 0) {                       // If negative height...
    2fda:	37 ff       	sbrs	r19, 7
    2fdc:	07 c0       	rjmp	.+14     	; 0x2fec <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x38>
      y += h + 1;                      //   Move Y to top edge
    2fde:	f9 01       	movw	r30, r18
    2fe0:	31 96       	adiw	r30, 0x01	; 1
    2fe2:	4e 0f       	add	r20, r30
    2fe4:	5f 1f       	adc	r21, r31
      h = -h;                          //   Use positive height
    2fe6:	31 95       	neg	r19
    2fe8:	21 95       	neg	r18
    2fea:	31 09       	sbc	r19, r1
    }
    if (y < _height) { // Not off bottom
    2fec:	dc 01       	movw	r26, r24
    2fee:	1a 96       	adiw	r26, 0x0a	; 10
    2ff0:	ed 91       	ld	r30, X+
    2ff2:	fc 91       	ld	r31, X
    2ff4:	1b 97       	sbiw	r26, 0x0b	; 11
    2ff6:	4e 17       	cp	r20, r30
    2ff8:	5f 07       	cpc	r21, r31
    2ffa:	bc f4       	brge	.+46     	; 0x302a <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
      int16_t y2 = y + h - 1;
    2ffc:	ea 01       	movw	r28, r20
    2ffe:	c2 0f       	add	r28, r18
    3000:	d3 1f       	adc	r29, r19
    3002:	de 01       	movw	r26, r28
    3004:	11 97       	sbiw	r26, 0x01	; 1
      if (y2 >= 0) { // Not off top
    3006:	b7 fd       	sbrc	r27, 7
    3008:	10 c0       	rjmp	.+32     	; 0x302a <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
        // Line partly or fully overlaps screen
        if (y < 0) {
    300a:	57 ff       	sbrs	r21, 7
    300c:	03 c0       	rjmp	.+6      	; 0x3014 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x60>
          y = 0;
          h = y2 + 1;
    300e:	9e 01       	movw	r18, r28
    if (y < _height) { // Not off bottom
      int16_t y2 = y + h - 1;
      if (y2 >= 0) { // Not off top
        // Line partly or fully overlaps screen
        if (y < 0) {
          y = 0;
    3010:	40 e0       	ldi	r20, 0x00	; 0
    3012:	50 e0       	ldi	r21, 0x00	; 0
          h = y2 + 1;
        } // Clip top
        if (y2 >= _height) {
    3014:	ae 17       	cp	r26, r30
    3016:	bf 07       	cpc	r27, r31
    3018:	1c f0       	brlt	.+6      	; 0x3020 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x6c>
          h = _height - y;
    301a:	9f 01       	movw	r18, r30
    301c:	24 1b       	sub	r18, r20
    301e:	35 0b       	sbc	r19, r21
        } // Clip bottom
        writeFillRectPreclipped(x, y, 1, h, color);
    3020:	78 01       	movw	r14, r16
    3022:	89 01       	movw	r16, r18
    3024:	21 e0       	ldi	r18, 0x01	; 1
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	a0 df       	rcall	.-192    	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
      }
    }
  }
}
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	ff 90       	pop	r15
    3034:	ef 90       	pop	r14
    3036:	08 95       	ret

00003038 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij>:
    @param  w      Line width in pixels (positive = right of first point,
                   negative = point of first corner).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                            uint16_t color) {
    3038:	ef 92       	push	r14
    303a:	ff 92       	push	r15
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	cf 93       	push	r28
    3042:	df 93       	push	r29
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
    3044:	57 fd       	sbrc	r21, 7
    3046:	32 c0       	rjmp	.+100    	; 0x30ac <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    3048:	dc 01       	movw	r26, r24
    304a:	1a 96       	adiw	r26, 0x0a	; 10
    304c:	ed 91       	ld	r30, X+
    304e:	fc 91       	ld	r31, X
    3050:	1b 97       	sbiw	r26, 0x0b	; 11
    3052:	4e 17       	cp	r20, r30
    3054:	5f 07       	cpc	r21, r31
    3056:	54 f5       	brge	.+84     	; 0x30ac <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    3058:	21 15       	cp	r18, r1
    305a:	31 05       	cpc	r19, r1
    305c:	39 f1       	breq	.+78     	; 0x30ac <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    if (w < 0) {                        // If negative width...
    305e:	37 ff       	sbrs	r19, 7
    3060:	07 c0       	rjmp	.+14     	; 0x3070 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x38>
      x += w + 1;                       //   Move X to left edge
    3062:	f9 01       	movw	r30, r18
    3064:	31 96       	adiw	r30, 0x01	; 1
    3066:	6e 0f       	add	r22, r30
    3068:	7f 1f       	adc	r23, r31
      w = -w;                           //   Use positive width
    306a:	31 95       	neg	r19
    306c:	21 95       	neg	r18
    306e:	31 09       	sbc	r19, r1
    }
    if (x < _width) { // Not off right
    3070:	dc 01       	movw	r26, r24
    3072:	18 96       	adiw	r26, 0x08	; 8
    3074:	ed 91       	ld	r30, X+
    3076:	fc 91       	ld	r31, X
    3078:	19 97       	sbiw	r26, 0x09	; 9
    307a:	6e 17       	cp	r22, r30
    307c:	7f 07       	cpc	r23, r31
    307e:	b4 f4       	brge	.+44     	; 0x30ac <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
      int16_t x2 = x + w - 1;
    3080:	eb 01       	movw	r28, r22
    3082:	c2 0f       	add	r28, r18
    3084:	d3 1f       	adc	r29, r19
    3086:	de 01       	movw	r26, r28
    3088:	11 97       	sbiw	r26, 0x01	; 1
      if (x2 >= 0) { // Not off left
    308a:	b7 fd       	sbrc	r27, 7
    308c:	0f c0       	rjmp	.+30     	; 0x30ac <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
        // Line partly or fully overlaps screen
        if (x < 0) {
    308e:	77 ff       	sbrs	r23, 7
    3090:	03 c0       	rjmp	.+6      	; 0x3098 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x60>
          x = 0;
          w = x2 + 1;
    3092:	9e 01       	movw	r18, r28
    if (x < _width) { // Not off right
      int16_t x2 = x + w - 1;
      if (x2 >= 0) { // Not off left
        // Line partly or fully overlaps screen
        if (x < 0) {
          x = 0;
    3094:	60 e0       	ldi	r22, 0x00	; 0
    3096:	70 e0       	ldi	r23, 0x00	; 0
          w = x2 + 1;
        } // Clip left
        if (x2 >= _width) {
    3098:	ae 17       	cp	r26, r30
    309a:	bf 07       	cpc	r27, r31
    309c:	1c f0       	brlt	.+6      	; 0x30a4 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x6c>
          w = _width - x;
    309e:	9f 01       	movw	r18, r30
    30a0:	26 1b       	sub	r18, r22
    30a2:	37 0b       	sbc	r19, r23
        } // Clip right
        writeFillRectPreclipped(x, y, w, 1, color);
    30a4:	78 01       	movw	r14, r16
    30a6:	01 e0       	ldi	r16, 0x01	; 1
    30a8:	10 e0       	ldi	r17, 0x00	; 0
    30aa:	5f df       	rcall	.-322    	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
      }
    }
  }
}
    30ac:	df 91       	pop	r29
    30ae:	cf 91       	pop	r28
    30b0:	1f 91       	pop	r17
    30b2:	0f 91       	pop	r16
    30b4:	ff 90       	pop	r15
    30b6:	ef 90       	pop	r14
    30b8:	08 95       	ret

000030ba <_ZN15Adafruit_SPITFT13drawFastVLineEiiij>:
            done this way (rather than starting the transaction and calling
            writeFastVLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                    uint16_t color) {
    30ba:	8f 92       	push	r8
    30bc:	9f 92       	push	r9
    30be:	af 92       	push	r10
    30c0:	bf 92       	push	r11
    30c2:	cf 92       	push	r12
    30c4:	df 92       	push	r13
    30c6:	ef 92       	push	r14
    30c8:	ff 92       	push	r15
    30ca:	0f 93       	push	r16
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	5c 01       	movw	r10, r24
    30d4:	4b 01       	movw	r8, r22
    30d6:	6a 01       	movw	r12, r20
    30d8:	e9 01       	movw	r28, r18
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
    30da:	77 fd       	sbrc	r23, 7
    30dc:	52 c0       	rjmp	.+164    	; 0x3182 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    30de:	dc 01       	movw	r26, r24
    30e0:	18 96       	adiw	r26, 0x08	; 8
    30e2:	8d 91       	ld	r24, X+
    30e4:	9c 91       	ld	r25, X
    30e6:	19 97       	sbiw	r26, 0x09	; 9
    30e8:	68 17       	cp	r22, r24
    30ea:	79 07       	cpc	r23, r25
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x36>
    30ee:	49 c0       	rjmp	.+146    	; 0x3182 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    30f0:	20 97       	sbiw	r28, 0x00	; 0
    30f2:	09 f4       	brne	.+2      	; 0x30f6 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x3c>
    30f4:	46 c0       	rjmp	.+140    	; 0x3182 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    if (h < 0) {                       // If negative height...
    30f6:	37 ff       	sbrs	r19, 7
    30f8:	07 c0       	rjmp	.+14     	; 0x3108 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x4e>
      y += h + 1;                      //   Move Y to top edge
    30fa:	c9 01       	movw	r24, r18
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	c8 0e       	add	r12, r24
    3100:	d9 1e       	adc	r13, r25
      h = -h;                          //   Use positive height
    3102:	d1 95       	neg	r29
    3104:	c1 95       	neg	r28
    3106:	d1 09       	sbc	r29, r1
    }
    if (y < _height) { // Not off bottom
    3108:	f5 01       	movw	r30, r10
    310a:	82 85       	ldd	r24, Z+10	; 0x0a
    310c:	93 85       	ldd	r25, Z+11	; 0x0b
    310e:	c8 16       	cp	r12, r24
    3110:	d9 06       	cpc	r13, r25
    3112:	bc f5       	brge	.+110    	; 0x3182 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
      int16_t y2 = y + h - 1;
    3114:	a6 01       	movw	r20, r12
    3116:	4c 0f       	add	r20, r28
    3118:	5d 1f       	adc	r21, r29
    311a:	9a 01       	movw	r18, r20
    311c:	21 50       	subi	r18, 0x01	; 1
    311e:	31 09       	sbc	r19, r1
      if (y2 >= 0) { // Not off top
    3120:	37 fd       	sbrc	r19, 7
    3122:	2f c0       	rjmp	.+94     	; 0x3182 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
        // Line partly or fully overlaps screen
        if (y < 0) {
    3124:	d7 fe       	sbrs	r13, 7
    3126:	03 c0       	rjmp	.+6      	; 0x312e <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x74>
          y = 0;
          h = y2 + 1;
    3128:	ea 01       	movw	r28, r20
    if (y < _height) { // Not off bottom
      int16_t y2 = y + h - 1;
      if (y2 >= 0) { // Not off top
        // Line partly or fully overlaps screen
        if (y < 0) {
          y = 0;
    312a:	c1 2c       	mov	r12, r1
    312c:	d1 2c       	mov	r13, r1
          h = y2 + 1;
        } // Clip top
        if (y2 >= _height) {
    312e:	28 17       	cp	r18, r24
    3130:	39 07       	cpc	r19, r25
    3132:	1c f0       	brlt	.+6      	; 0x313a <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x80>
          h = _height - y;
    3134:	ec 01       	movw	r28, r24
    3136:	cc 19       	sub	r28, r12
    3138:	dd 09       	sbc	r29, r13
        } // Clip bottom
        startWrite();
    313a:	d5 01       	movw	r26, r10
    313c:	ed 91       	ld	r30, X+
    313e:	fc 91       	ld	r31, X
    3140:	02 84       	ldd	r0, Z+10	; 0x0a
    3142:	f3 85       	ldd	r31, Z+11	; 0x0b
    3144:	e0 2d       	mov	r30, r0
    3146:	c5 01       	movw	r24, r10
    3148:	19 95       	eicall
        writeFillRectPreclipped(x, y, 1, h, color);
    314a:	78 01       	movw	r14, r16
    314c:	8e 01       	movw	r16, r28
    314e:	21 e0       	ldi	r18, 0x01	; 1
    3150:	30 e0       	ldi	r19, 0x00	; 0
    3152:	a6 01       	movw	r20, r12
    3154:	b4 01       	movw	r22, r8
    3156:	c5 01       	movw	r24, r10
    3158:	08 df       	rcall	.-496    	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
        endWrite();
    315a:	d5 01       	movw	r26, r10
    315c:	ed 91       	ld	r30, X+
    315e:	fc 91       	ld	r31, X
    3160:	06 88       	ldd	r0, Z+22	; 0x16
    3162:	f7 89       	ldd	r31, Z+23	; 0x17
    3164:	e0 2d       	mov	r30, r0
    3166:	c5 01       	movw	r24, r10
      }
    }
  }
}
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
        if (y2 >= _height) {
          h = _height - y;
        } // Clip bottom
        startWrite();
        writeFillRectPreclipped(x, y, 1, h, color);
        endWrite();
    3180:	19 94       	eijmp
      }
    }
  }
}
    3182:	df 91       	pop	r29
    3184:	cf 91       	pop	r28
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	ff 90       	pop	r15
    318c:	ef 90       	pop	r14
    318e:	df 90       	pop	r13
    3190:	cf 90       	pop	r12
    3192:	bf 90       	pop	r11
    3194:	af 90       	pop	r10
    3196:	9f 90       	pop	r9
    3198:	8f 90       	pop	r8
    319a:	08 95       	ret

0000319c <_ZN15Adafruit_SPITFT13drawFastHLineEiiij>:
            done this way (rather than starting the transaction and calling
            writeFastHLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                    uint16_t color) {
    319c:	8f 92       	push	r8
    319e:	9f 92       	push	r9
    31a0:	af 92       	push	r10
    31a2:	bf 92       	push	r11
    31a4:	cf 92       	push	r12
    31a6:	df 92       	push	r13
    31a8:	ef 92       	push	r14
    31aa:	ff 92       	push	r15
    31ac:	0f 93       	push	r16
    31ae:	1f 93       	push	r17
    31b0:	cf 93       	push	r28
    31b2:	df 93       	push	r29
    31b4:	5c 01       	movw	r10, r24
    31b6:	6b 01       	movw	r12, r22
    31b8:	4a 01       	movw	r8, r20
    31ba:	e9 01       	movw	r28, r18
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
    31bc:	57 fd       	sbrc	r21, 7
    31be:	52 c0       	rjmp	.+164    	; 0x3264 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    31c0:	dc 01       	movw	r26, r24
    31c2:	1a 96       	adiw	r26, 0x0a	; 10
    31c4:	8d 91       	ld	r24, X+
    31c6:	9c 91       	ld	r25, X
    31c8:	1b 97       	sbiw	r26, 0x0b	; 11
    31ca:	48 17       	cp	r20, r24
    31cc:	59 07       	cpc	r21, r25
    31ce:	0c f0       	brlt	.+2      	; 0x31d2 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x36>
    31d0:	49 c0       	rjmp	.+146    	; 0x3264 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    31d2:	20 97       	sbiw	r28, 0x00	; 0
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x3c>
    31d6:	46 c0       	rjmp	.+140    	; 0x3264 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    if (w < 0) {                        // If negative width...
    31d8:	37 ff       	sbrs	r19, 7
    31da:	07 c0       	rjmp	.+14     	; 0x31ea <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x4e>
      x += w + 1;                       //   Move X to left edge
    31dc:	c9 01       	movw	r24, r18
    31de:	01 96       	adiw	r24, 0x01	; 1
    31e0:	c8 0e       	add	r12, r24
    31e2:	d9 1e       	adc	r13, r25
      w = -w;                           //   Use positive width
    31e4:	d1 95       	neg	r29
    31e6:	c1 95       	neg	r28
    31e8:	d1 09       	sbc	r29, r1
    }
    if (x < _width) { // Not off right
    31ea:	f5 01       	movw	r30, r10
    31ec:	80 85       	ldd	r24, Z+8	; 0x08
    31ee:	91 85       	ldd	r25, Z+9	; 0x09
    31f0:	c8 16       	cp	r12, r24
    31f2:	d9 06       	cpc	r13, r25
    31f4:	bc f5       	brge	.+110    	; 0x3264 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
      int16_t x2 = x + w - 1;
    31f6:	a6 01       	movw	r20, r12
    31f8:	4c 0f       	add	r20, r28
    31fa:	5d 1f       	adc	r21, r29
    31fc:	9a 01       	movw	r18, r20
    31fe:	21 50       	subi	r18, 0x01	; 1
    3200:	31 09       	sbc	r19, r1
      if (x2 >= 0) { // Not off left
    3202:	37 fd       	sbrc	r19, 7
    3204:	2f c0       	rjmp	.+94     	; 0x3264 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
        // Line partly or fully overlaps screen
        if (x < 0) {
    3206:	d7 fe       	sbrs	r13, 7
    3208:	03 c0       	rjmp	.+6      	; 0x3210 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x74>
          x = 0;
          w = x2 + 1;
    320a:	ea 01       	movw	r28, r20
    if (x < _width) { // Not off right
      int16_t x2 = x + w - 1;
      if (x2 >= 0) { // Not off left
        // Line partly or fully overlaps screen
        if (x < 0) {
          x = 0;
    320c:	c1 2c       	mov	r12, r1
    320e:	d1 2c       	mov	r13, r1
          w = x2 + 1;
        } // Clip left
        if (x2 >= _width) {
    3210:	28 17       	cp	r18, r24
    3212:	39 07       	cpc	r19, r25
    3214:	1c f0       	brlt	.+6      	; 0x321c <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x80>
          w = _width - x;
    3216:	ec 01       	movw	r28, r24
    3218:	cc 19       	sub	r28, r12
    321a:	dd 09       	sbc	r29, r13
        } // Clip right
        startWrite();
    321c:	d5 01       	movw	r26, r10
    321e:	ed 91       	ld	r30, X+
    3220:	fc 91       	ld	r31, X
    3222:	02 84       	ldd	r0, Z+10	; 0x0a
    3224:	f3 85       	ldd	r31, Z+11	; 0x0b
    3226:	e0 2d       	mov	r30, r0
    3228:	c5 01       	movw	r24, r10
    322a:	19 95       	eicall
        writeFillRectPreclipped(x, y, w, 1, color);
    322c:	78 01       	movw	r14, r16
    322e:	01 e0       	ldi	r16, 0x01	; 1
    3230:	10 e0       	ldi	r17, 0x00	; 0
    3232:	9e 01       	movw	r18, r28
    3234:	a4 01       	movw	r20, r8
    3236:	b6 01       	movw	r22, r12
    3238:	c5 01       	movw	r24, r10
    323a:	97 de       	rcall	.-722    	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
        endWrite();
    323c:	d5 01       	movw	r26, r10
    323e:	ed 91       	ld	r30, X+
    3240:	fc 91       	ld	r31, X
    3242:	06 88       	ldd	r0, Z+22	; 0x16
    3244:	f7 89       	ldd	r31, Z+23	; 0x17
    3246:	e0 2d       	mov	r30, r0
    3248:	c5 01       	movw	r24, r10
      }
    }
  }
}
    324a:	df 91       	pop	r29
    324c:	cf 91       	pop	r28
    324e:	1f 91       	pop	r17
    3250:	0f 91       	pop	r16
    3252:	ff 90       	pop	r15
    3254:	ef 90       	pop	r14
    3256:	df 90       	pop	r13
    3258:	cf 90       	pop	r12
    325a:	bf 90       	pop	r11
    325c:	af 90       	pop	r10
    325e:	9f 90       	pop	r9
    3260:	8f 90       	pop	r8
        if (x2 >= _width) {
          w = _width - x;
        } // Clip right
        startWrite();
        writeFillRectPreclipped(x, y, w, 1, color);
        endWrite();
    3262:	19 94       	eijmp
      }
    }
  }
}
    3264:	df 91       	pop	r29
    3266:	cf 91       	pop	r28
    3268:	1f 91       	pop	r17
    326a:	0f 91       	pop	r16
    326c:	ff 90       	pop	r15
    326e:	ef 90       	pop	r14
    3270:	df 90       	pop	r13
    3272:	cf 90       	pop	r12
    3274:	bf 90       	pop	r11
    3276:	af 90       	pop	r10
    3278:	9f 90       	pop	r9
    327a:	8f 90       	pop	r8
    327c:	08 95       	ret

0000327e <_ZN15Adafruit_SPITFT8fillRectEiiiij>:
            to handle clipping and so forth) so that the transaction isn't
            performed at all if the rectangle is rejected. It's really not
            that much code.
*/
void Adafruit_SPITFT::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                               uint16_t color) {
    327e:	8f 92       	push	r8
    3280:	9f 92       	push	r9
    3282:	af 92       	push	r10
    3284:	bf 92       	push	r11
    3286:	cf 92       	push	r12
    3288:	df 92       	push	r13
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	4c 01       	movw	r8, r24
    3298:	6b 01       	movw	r12, r22
    329a:	5a 01       	movw	r10, r20
    329c:	e9 01       	movw	r28, r18
  if (w && h) {   // Nonzero width and height?
    329e:	20 97       	sbiw	r28, 0x00	; 0
    32a0:	09 f4       	brne	.+2      	; 0x32a4 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x26>
    32a2:	6b c0       	rjmp	.+214    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
    32a4:	01 15       	cp	r16, r1
    32a6:	11 05       	cpc	r17, r1
    32a8:	09 f4       	brne	.+2      	; 0x32ac <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x2e>
    32aa:	67 c0       	rjmp	.+206    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
    if (w < 0) {  // If negative width...
    32ac:	37 ff       	sbrs	r19, 7
    32ae:	07 c0       	rjmp	.+14     	; 0x32be <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x40>
      x += w + 1; //   Move X to left edge
    32b0:	c9 01       	movw	r24, r18
    32b2:	01 96       	adiw	r24, 0x01	; 1
    32b4:	c8 0e       	add	r12, r24
    32b6:	d9 1e       	adc	r13, r25
      w = -w;     //   Use positive width
    32b8:	d1 95       	neg	r29
    32ba:	c1 95       	neg	r28
    32bc:	d1 09       	sbc	r29, r1
    }
    if (x < _width) { // Not off right
    32be:	f4 01       	movw	r30, r8
    32c0:	a0 85       	ldd	r26, Z+8	; 0x08
    32c2:	b1 85       	ldd	r27, Z+9	; 0x09
    32c4:	ca 16       	cp	r12, r26
    32c6:	db 06       	cpc	r13, r27
    32c8:	0c f0       	brlt	.+2      	; 0x32cc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x4e>
    32ca:	57 c0       	rjmp	.+174    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
      if (h < 0) {    // If negative height...
    32cc:	17 ff       	sbrs	r17, 7
    32ce:	07 c0       	rjmp	.+14     	; 0x32de <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x60>
        y += h + 1;   //   Move Y to top edge
    32d0:	c8 01       	movw	r24, r16
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	a8 0e       	add	r10, r24
    32d6:	b9 1e       	adc	r11, r25
        h = -h;       //   Use positive height
    32d8:	11 95       	neg	r17
    32da:	01 95       	neg	r16
    32dc:	11 09       	sbc	r17, r1
      }
      if (y < _height) { // Not off bottom
    32de:	f4 01       	movw	r30, r8
    32e0:	82 85       	ldd	r24, Z+10	; 0x0a
    32e2:	93 85       	ldd	r25, Z+11	; 0x0b
    32e4:	a8 16       	cp	r10, r24
    32e6:	b9 06       	cpc	r11, r25
    32e8:	0c f0       	brlt	.+2      	; 0x32ec <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x6e>
    32ea:	47 c0       	rjmp	.+142    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
        int16_t x2 = x + w - 1;
    32ec:	f6 01       	movw	r30, r12
    32ee:	ec 0f       	add	r30, r28
    32f0:	fd 1f       	adc	r31, r29
    32f2:	af 01       	movw	r20, r30
    32f4:	41 50       	subi	r20, 0x01	; 1
    32f6:	51 09       	sbc	r21, r1
        if (x2 >= 0) { // Not off left
    32f8:	57 fd       	sbrc	r21, 7
    32fa:	3f c0       	rjmp	.+126    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
          int16_t y2 = y + h - 1;
    32fc:	b5 01       	movw	r22, r10
    32fe:	60 0f       	add	r22, r16
    3300:	71 1f       	adc	r23, r17
    3302:	9b 01       	movw	r18, r22
    3304:	21 50       	subi	r18, 0x01	; 1
    3306:	31 09       	sbc	r19, r1
          if (y2 >= 0) { // Not off top
    3308:	37 fd       	sbrc	r19, 7
    330a:	37 c0       	rjmp	.+110    	; 0x337a <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
    330c:	d7 fe       	sbrs	r13, 7
    330e:	03 c0       	rjmp	.+6      	; 0x3316 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x98>
              x = 0;
              w = x2 + 1;
    3310:	ef 01       	movw	r28, r30
        if (x2 >= 0) { // Not off left
          int16_t y2 = y + h - 1;
          if (y2 >= 0) { // Not off top
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
              x = 0;
    3312:	c1 2c       	mov	r12, r1
    3314:	d1 2c       	mov	r13, r1
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
    3316:	b7 fe       	sbrs	r11, 7
    3318:	03 c0       	rjmp	.+6      	; 0x3320 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xa2>
              y = 0;
              h = y2 + 1;
    331a:	8b 01       	movw	r16, r22
            if (x < 0) {
              x = 0;
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
              y = 0;
    331c:	a1 2c       	mov	r10, r1
    331e:	b1 2c       	mov	r11, r1
              h = y2 + 1;
            } // Clip top
            if (x2 >= _width) {
    3320:	4a 17       	cp	r20, r26
    3322:	5b 07       	cpc	r21, r27
    3324:	1c f0       	brlt	.+6      	; 0x332c <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xae>
              w = _width - x;
    3326:	ed 01       	movw	r28, r26
    3328:	cc 19       	sub	r28, r12
    332a:	dd 09       	sbc	r29, r13
            } // Clip right
            if (y2 >= _height) {
    332c:	28 17       	cp	r18, r24
    332e:	39 07       	cpc	r19, r25
    3330:	1c f0       	brlt	.+6      	; 0x3338 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xba>
              h = _height - y;
    3332:	8c 01       	movw	r16, r24
    3334:	0a 19       	sub	r16, r10
    3336:	1b 09       	sbc	r17, r11
            } // Clip bottom
            startWrite();
    3338:	d4 01       	movw	r26, r8
    333a:	ed 91       	ld	r30, X+
    333c:	fc 91       	ld	r31, X
    333e:	02 84       	ldd	r0, Z+10	; 0x0a
    3340:	f3 85       	ldd	r31, Z+11	; 0x0b
    3342:	e0 2d       	mov	r30, r0
    3344:	c4 01       	movw	r24, r8
    3346:	19 95       	eicall
            writeFillRectPreclipped(x, y, w, h, color);
    3348:	9e 01       	movw	r18, r28
    334a:	a5 01       	movw	r20, r10
    334c:	b6 01       	movw	r22, r12
    334e:	c4 01       	movw	r24, r8
    3350:	0c de       	rcall	.-1000   	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
            endWrite();
    3352:	d4 01       	movw	r26, r8
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	06 88       	ldd	r0, Z+22	; 0x16
    335a:	f7 89       	ldd	r31, Z+23	; 0x17
    335c:	e0 2d       	mov	r30, r0
    335e:	c4 01       	movw	r24, r8
          }
        }
      }
    }
  }
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	1f 91       	pop	r17
    3366:	0f 91       	pop	r16
    3368:	ff 90       	pop	r15
    336a:	ef 90       	pop	r14
    336c:	df 90       	pop	r13
    336e:	cf 90       	pop	r12
    3370:	bf 90       	pop	r11
    3372:	af 90       	pop	r10
    3374:	9f 90       	pop	r9
    3376:	8f 90       	pop	r8
            if (y2 >= _height) {
              h = _height - y;
            } // Clip bottom
            startWrite();
            writeFillRectPreclipped(x, y, w, h, color);
            endWrite();
    3378:	19 94       	eijmp
          }
        }
      }
    }
  }
}
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	1f 91       	pop	r17
    3380:	0f 91       	pop	r16
    3382:	ff 90       	pop	r15
    3384:	ef 90       	pop	r14
    3386:	df 90       	pop	r13
    3388:	cf 90       	pop	r12
    338a:	bf 90       	pop	r11
    338c:	af 90       	pop	r10
    338e:	9f 90       	pop	r9
    3390:	8f 90       	pop	r8
    3392:	08 95       	ret

00003394 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij>:
    @note   Written in this deep-nested way because C by definition will
            optimize for the 'if' case, not the 'else' -- avoids branches
            and rejects clipped rectangles at the least-work possibility.
*/
void Adafruit_SPITFT::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                    uint16_t color) {
    3394:	8f 92       	push	r8
    3396:	9f 92       	push	r9
    3398:	af 92       	push	r10
    339a:	bf 92       	push	r11
    339c:	cf 92       	push	r12
    339e:	df 92       	push	r13
    33a0:	ef 92       	push	r14
    33a2:	ff 92       	push	r15
    33a4:	0f 93       	push	r16
    33a6:	1f 93       	push	r17
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	47 01       	movw	r8, r14
  if (w && h) {   // Nonzero width and height?
    33ae:	21 15       	cp	r18, r1
    33b0:	31 05       	cpc	r19, r1
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x22>
    33b4:	4c c0       	rjmp	.+152    	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
    33b6:	01 15       	cp	r16, r1
    33b8:	11 05       	cpc	r17, r1
    33ba:	09 f4       	brne	.+2      	; 0x33be <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x2a>
    33bc:	48 c0       	rjmp	.+144    	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
    if (w < 0) {  // If negative width...
    33be:	37 ff       	sbrs	r19, 7
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x3c>
      x += w + 1; //   Move X to left edge
    33c2:	f9 01       	movw	r30, r18
    33c4:	31 96       	adiw	r30, 0x01	; 1
    33c6:	6e 0f       	add	r22, r30
    33c8:	7f 1f       	adc	r23, r31
      w = -w;     //   Use positive width
    33ca:	31 95       	neg	r19
    33cc:	21 95       	neg	r18
    33ce:	31 09       	sbc	r19, r1
    }
    if (x < _width) { // Not off right
    33d0:	dc 01       	movw	r26, r24
    33d2:	18 96       	adiw	r26, 0x08	; 8
    33d4:	ad 90       	ld	r10, X+
    33d6:	bc 90       	ld	r11, X
    33d8:	19 97       	sbiw	r26, 0x09	; 9
    33da:	6a 15       	cp	r22, r10
    33dc:	7b 05       	cpc	r23, r11
    33de:	bc f5       	brge	.+110    	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
      if (h < 0) {    // If negative height...
    33e0:	17 ff       	sbrs	r17, 7
    33e2:	07 c0       	rjmp	.+14     	; 0x33f2 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x5e>
        y += h + 1;   //   Move Y to top edge
    33e4:	f8 01       	movw	r30, r16
    33e6:	31 96       	adiw	r30, 0x01	; 1
    33e8:	4e 0f       	add	r20, r30
    33ea:	5f 1f       	adc	r21, r31
        h = -h;       //   Use positive height
    33ec:	11 95       	neg	r17
    33ee:	01 95       	neg	r16
    33f0:	11 09       	sbc	r17, r1
      }
      if (y < _height) { // Not off bottom
    33f2:	dc 01       	movw	r26, r24
    33f4:	1a 96       	adiw	r26, 0x0a	; 10
    33f6:	ed 91       	ld	r30, X+
    33f8:	fc 91       	ld	r31, X
    33fa:	1b 97       	sbiw	r26, 0x0b	; 11
    33fc:	4e 17       	cp	r20, r30
    33fe:	5f 07       	cpc	r21, r31
    3400:	34 f5       	brge	.+76     	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
        int16_t x2 = x + w - 1;
    3402:	6b 01       	movw	r12, r22
    3404:	c2 0e       	add	r12, r18
    3406:	d3 1e       	adc	r13, r19
    3408:	e6 01       	movw	r28, r12
    340a:	21 97       	sbiw	r28, 0x01	; 1
        if (x2 >= 0) { // Not off left
    340c:	d7 fd       	sbrc	r29, 7
    340e:	1f c0       	rjmp	.+62     	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
          int16_t y2 = y + h - 1;
    3410:	7a 01       	movw	r14, r20
    3412:	e0 0e       	add	r14, r16
    3414:	f1 1e       	adc	r15, r17
    3416:	d7 01       	movw	r26, r14
    3418:	11 97       	sbiw	r26, 0x01	; 1
          if (y2 >= 0) { // Not off top
    341a:	b7 fd       	sbrc	r27, 7
    341c:	18 c0       	rjmp	.+48     	; 0x344e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
    341e:	77 ff       	sbrs	r23, 7
    3420:	03 c0       	rjmp	.+6      	; 0x3428 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x94>
              x = 0;
              w = x2 + 1;
    3422:	96 01       	movw	r18, r12
        if (x2 >= 0) { // Not off left
          int16_t y2 = y + h - 1;
          if (y2 >= 0) { // Not off top
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
              x = 0;
    3424:	60 e0       	ldi	r22, 0x00	; 0
    3426:	70 e0       	ldi	r23, 0x00	; 0
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
    3428:	57 ff       	sbrs	r21, 7
    342a:	03 c0       	rjmp	.+6      	; 0x3432 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x9e>
              y = 0;
              h = y2 + 1;
    342c:	87 01       	movw	r16, r14
            if (x < 0) {
              x = 0;
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
              y = 0;
    342e:	40 e0       	ldi	r20, 0x00	; 0
    3430:	50 e0       	ldi	r21, 0x00	; 0
              h = y2 + 1;
            } // Clip top
            if (x2 >= _width) {
    3432:	ca 15       	cp	r28, r10
    3434:	db 05       	cpc	r29, r11
    3436:	1c f0       	brlt	.+6      	; 0x343e <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xaa>
              w = _width - x;
    3438:	95 01       	movw	r18, r10
    343a:	26 1b       	sub	r18, r22
    343c:	37 0b       	sbc	r19, r23
            } // Clip right
            if (y2 >= _height) {
    343e:	ae 17       	cp	r26, r30
    3440:	bf 07       	cpc	r27, r31
    3442:	1c f0       	brlt	.+6      	; 0x344a <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xb6>
              h = _height - y;
    3444:	8f 01       	movw	r16, r30
    3446:	04 1b       	sub	r16, r20
    3448:	15 0b       	sbc	r17, r21
            } // Clip bottom
            writeFillRectPreclipped(x, y, w, h, color);
    344a:	74 01       	movw	r14, r8
    344c:	8e dd       	rcall	.-1252   	; 0x2f6a <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
          }
        }
      }
    }
  }
}
    344e:	df 91       	pop	r29
    3450:	cf 91       	pop	r28
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	08 95       	ret

00003468 <_ZN15Adafruit_ST773511setRotationEh>:
    @brief  Initialization code common to all ST7735B displays
*/
/**************************************************************************/
void Adafruit_ST7735::initB(void) {
  commonInit(Bcmd);
  setRotation(0);
    3468:	cf 93       	push	r28
    346a:	df 93       	push	r29
    346c:	1f 92       	push	r1
    346e:	cd b7       	in	r28, 0x3d	; 61
    3470:	de b7       	in	r29, 0x3e	; 62
    3472:	fc 01       	movw	r30, r24
    3474:	19 82       	std	Y+1, r1	; 0x01
    3476:	63 70       	andi	r22, 0x03	; 3
    3478:	66 8b       	std	Z+22, r22	; 0x16
    347a:	dc 01       	movw	r26, r24
    347c:	aa 5b       	subi	r26, 0xBA	; 186
    347e:	bf 4f       	sbci	r27, 0xFF	; 255
    3480:	8c 91       	ld	r24, X
    3482:	98 2f       	mov	r25, r24
    3484:	9b 7f       	andi	r25, 0xFB	; 251
    3486:	af 01       	movw	r20, r30
    3488:	4c 5b       	subi	r20, 0xBC	; 188
    348a:	5f 4f       	sbci	r21, 0xFF	; 255
    348c:	91 30       	cpi	r25, 0x01	; 1
    348e:	29 f4       	brne	.+10     	; 0x349a <_ZN15Adafruit_ST773511setRotationEh+0x32>
    3490:	62 30       	cpi	r22, 0x02	; 2
    3492:	08 f4       	brcc	.+2      	; 0x3496 <_ZN15Adafruit_ST773511setRotationEh+0x2e>
    3494:	93 e0       	ldi	r25, 0x03	; 3
    3496:	da 01       	movw	r26, r20
    3498:	9c 93       	st	X, r25
    349a:	9f 01       	movw	r18, r30
    349c:	2d 5b       	subi	r18, 0xBD	; 189
    349e:	3f 4f       	sbci	r19, 0xFF	; 255
    34a0:	62 30       	cpi	r22, 0x02	; 2
    34a2:	d9 f0       	breq	.+54     	; 0x34da <_ZN15Adafruit_ST773511setRotationEh+0x72>
    34a4:	63 30       	cpi	r22, 0x03	; 3
    34a6:	09 f4       	brne	.+2      	; 0x34aa <_ZN15Adafruit_ST773511setRotationEh+0x42>
    34a8:	3f c0       	rjmp	.+126    	; 0x3528 <_ZN15Adafruit_ST773511setRotationEh+0xc0>
    34aa:	61 30       	cpi	r22, 0x01	; 1
    34ac:	71 f0       	breq	.+28     	; 0x34ca <_ZN15Adafruit_ST773511setRotationEh+0x62>
    34ae:	82 30       	cpi	r24, 0x02	; 2
    34b0:	11 f0       	breq	.+4      	; 0x34b6 <_ZN15Adafruit_ST773511setRotationEh+0x4e>
    34b2:	84 30       	cpi	r24, 0x04	; 4
    34b4:	29 f4       	brne	.+10     	; 0x34c0 <_ZN15Adafruit_ST773511setRotationEh+0x58>
    34b6:	90 ec       	ldi	r25, 0xC0	; 192
    34b8:	99 83       	std	Y+1, r25	; 0x01
    34ba:	81 30       	cpi	r24, 0x01	; 1
    34bc:	19 f4       	brne	.+6      	; 0x34c4 <_ZN15Adafruit_ST773511setRotationEh+0x5c>
    34be:	15 c0       	rjmp	.+42     	; 0x34ea <_ZN15Adafruit_ST773511setRotationEh+0x82>
    34c0:	98 ec       	ldi	r25, 0xC8	; 200
    34c2:	10 c0       	rjmp	.+32     	; 0x34e4 <_ZN15Adafruit_ST773511setRotationEh+0x7c>
    34c4:	84 30       	cpi	r24, 0x04	; 4
    34c6:	b1 f0       	breq	.+44     	; 0x34f4 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
    34c8:	1c c0       	rjmp	.+56     	; 0x3502 <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    34ca:	82 30       	cpi	r24, 0x02	; 2
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <_ZN15Adafruit_ST773511setRotationEh+0x6a>
    34ce:	84 30       	cpi	r24, 0x04	; 4
    34d0:	11 f4       	brne	.+4      	; 0x34d6 <_ZN15Adafruit_ST773511setRotationEh+0x6e>
    34d2:	90 ea       	ldi	r25, 0xA0	; 160
    34d4:	2e c0       	rjmp	.+92     	; 0x3532 <_ZN15Adafruit_ST773511setRotationEh+0xca>
    34d6:	98 ea       	ldi	r25, 0xA8	; 168
    34d8:	35 c0       	rjmp	.+106    	; 0x3544 <_ZN15Adafruit_ST773511setRotationEh+0xdc>
    34da:	82 30       	cpi	r24, 0x02	; 2
    34dc:	91 f0       	breq	.+36     	; 0x3502 <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    34de:	84 30       	cpi	r24, 0x04	; 4
    34e0:	49 f0       	breq	.+18     	; 0x34f4 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
    34e2:	98 e0       	ldi	r25, 0x08	; 8
    34e4:	99 83       	std	Y+1, r25	; 0x01
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	61 f4       	brne	.+24     	; 0x3502 <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    34ea:	80 e8       	ldi	r24, 0x80	; 128
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	93 87       	std	Z+11, r25	; 0x0b
    34f0:	82 87       	std	Z+10, r24	; 0x0a
    34f2:	0d c0       	rjmp	.+26     	; 0x350e <_ZN15Adafruit_ST773511setRotationEh+0xa6>
    34f4:	80 ea       	ldi	r24, 0xA0	; 160
    34f6:	90 e0       	ldi	r25, 0x00	; 0
    34f8:	93 87       	std	Z+11, r25	; 0x0b
    34fa:	82 87       	std	Z+10, r24	; 0x0a
    34fc:	80 e5       	ldi	r24, 0x50	; 80
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	06 c0       	rjmp	.+12     	; 0x350e <_ZN15Adafruit_ST773511setRotationEh+0xa6>
    3502:	80 ea       	ldi	r24, 0xA0	; 160
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	93 87       	std	Z+11, r25	; 0x0b
    3508:	82 87       	std	Z+10, r24	; 0x0a
    350a:	80 e8       	ldi	r24, 0x80	; 128
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	91 87       	std	Z+9, r25	; 0x09
    3510:	80 87       	std	Z+8, r24	; 0x08
    3512:	d9 01       	movw	r26, r18
    3514:	8c 91       	ld	r24, X
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	92 af       	std	Z+58, r25	; 0x3a
    351a:	81 af       	std	Z+57, r24	; 0x39
    351c:	da 01       	movw	r26, r20
    351e:	8c 91       	ld	r24, X
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	94 af       	std	Z+60, r25	; 0x3c
    3524:	83 af       	std	Z+59, r24	; 0x3b
    3526:	2d c0       	rjmp	.+90     	; 0x3582 <_ZN15Adafruit_ST773511setRotationEh+0x11a>
    3528:	82 30       	cpi	r24, 0x02	; 2
    352a:	11 f0       	breq	.+4      	; 0x3530 <_ZN15Adafruit_ST773511setRotationEh+0xc8>
    352c:	84 30       	cpi	r24, 0x04	; 4
    352e:	49 f4       	brne	.+18     	; 0x3542 <_ZN15Adafruit_ST773511setRotationEh+0xda>
    3530:	90 e6       	ldi	r25, 0x60	; 96
    3532:	99 83       	std	Y+1, r25	; 0x01
    3534:	81 30       	cpi	r24, 0x01	; 1
    3536:	51 f4       	brne	.+20     	; 0x354c <_ZN15Adafruit_ST773511setRotationEh+0xe4>
    3538:	80 e8       	ldi	r24, 0x80	; 128
    353a:	90 e0       	ldi	r25, 0x00	; 0
    353c:	91 87       	std	Z+9, r25	; 0x09
    353e:	80 87       	std	Z+8, r24	; 0x08
    3540:	14 c0       	rjmp	.+40     	; 0x356a <_ZN15Adafruit_ST773511setRotationEh+0x102>
    3542:	98 e6       	ldi	r25, 0x68	; 104
    3544:	99 83       	std	Y+1, r25	; 0x01
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	51 f4       	brne	.+20     	; 0x355e <_ZN15Adafruit_ST773511setRotationEh+0xf6>
    354a:	f6 cf       	rjmp	.-20     	; 0x3538 <_ZN15Adafruit_ST773511setRotationEh+0xd0>
    354c:	84 30       	cpi	r24, 0x04	; 4
    354e:	39 f4       	brne	.+14     	; 0x355e <_ZN15Adafruit_ST773511setRotationEh+0xf6>
    3550:	80 ea       	ldi	r24, 0xA0	; 160
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	91 87       	std	Z+9, r25	; 0x09
    3556:	80 87       	std	Z+8, r24	; 0x08
    3558:	80 e5       	ldi	r24, 0x50	; 80
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	06 c0       	rjmp	.+12     	; 0x356a <_ZN15Adafruit_ST773511setRotationEh+0x102>
    355e:	80 ea       	ldi	r24, 0xA0	; 160
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	91 87       	std	Z+9, r25	; 0x09
    3564:	80 87       	std	Z+8, r24	; 0x08
    3566:	80 e8       	ldi	r24, 0x80	; 128
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	93 87       	std	Z+11, r25	; 0x0b
    356c:	82 87       	std	Z+10, r24	; 0x0a
    356e:	d9 01       	movw	r26, r18
    3570:	8c 91       	ld	r24, X
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	94 af       	std	Z+60, r25	; 0x3c
    3576:	83 af       	std	Z+59, r24	; 0x3b
    3578:	da 01       	movw	r26, r20
    357a:	8c 91       	ld	r24, X
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	92 af       	std	Z+58, r25	; 0x3a
    3580:	81 af       	std	Z+57, r24	; 0x39
    3582:	21 e0       	ldi	r18, 0x01	; 1
    3584:	ae 01       	movw	r20, r28
    3586:	4f 5f       	subi	r20, 0xFF	; 255
    3588:	5f 4f       	sbci	r21, 0xFF	; 255
    358a:	66 e3       	ldi	r22, 0x36	; 54
    358c:	cf 01       	movw	r24, r30
    358e:	cf da       	rcall	.-2658   	; 0x2b2e <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
    3590:	0f 90       	pop	r0
    3592:	df 91       	pop	r29
    3594:	cf 91       	pop	r28
    3596:	08 95       	ret

00003598 <_ZN15Adafruit_ST7735C1Eaaa>:
    3598:	ef 92       	push	r14
    359a:	0f 93       	push	r16
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	ec 01       	movw	r28, r24
    35a2:	e2 2e       	mov	r14, r18
    35a4:	04 2f       	mov	r16, r20
    35a6:	26 2f       	mov	r18, r22
    35a8:	40 ea       	ldi	r20, 0xA0	; 160
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	60 e8       	ldi	r22, 0x80	; 128
    35ae:	70 e0       	ldi	r23, 0x00	; 0
    35b0:	36 d1       	rcall	.+620    	; 0x381e <_ZN15Adafruit_ST77xxC1Ejjaaa>
    35b2:	80 ed       	ldi	r24, 0xD0	; 208
    35b4:	94 e0       	ldi	r25, 0x04	; 4
    35b6:	99 83       	std	Y+1, r25	; 0x01
    35b8:	88 83       	st	Y, r24
    35ba:	df 91       	pop	r29
    35bc:	cf 91       	pop	r28
    35be:	0f 91       	pop	r16
    35c0:	ef 90       	pop	r14
    35c2:	08 95       	ret

000035c4 <_ZN15Adafruit_ST77355initREh>:
/*!
    @brief  Initialization code common to all ST7735R displays
    @param  options  Tab color from adafruit purchase
*/
/**************************************************************************/
void Adafruit_ST7735::initR(uint8_t options) {
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	df 93       	push	r29
    35ce:	1f 92       	push	r1
    35d0:	cd b7       	in	r28, 0x3d	; 61
    35d2:	de b7       	in	r29, 0x3e	; 62
    35d4:	8c 01       	movw	r16, r24
    35d6:	f6 2e       	mov	r15, r22
  commonInit(Rcmd1);
    35d8:	6f e9       	ldi	r22, 0x9F	; 159
    35da:	77 e0       	ldi	r23, 0x07	; 7
    35dc:	75 d1       	rcall	.+746    	; 0x38c8 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  if (options == INITR_GREENTAB) {
    35de:	f1 10       	cpse	r15, r1
    35e0:	0b c0       	rjmp	.+22     	; 0x35f8 <_ZN15Adafruit_ST77355initREh+0x34>
    displayInit(Rcmd2green);
    35e2:	62 e9       	ldi	r22, 0x92	; 146
    35e4:	77 e0       	ldi	r23, 0x07	; 7
    35e6:	c8 01       	movw	r24, r16
    35e8:	33 d1       	rcall	.+614    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>
    _colstart = 2;
    35ea:	82 e0       	ldi	r24, 0x02	; 2
    35ec:	f8 01       	movw	r30, r16
    35ee:	ed 5b       	subi	r30, 0xBD	; 189
    35f0:	ff 4f       	sbci	r31, 0xFF	; 255
    35f2:	80 83       	st	Z, r24
    _rowstart = 1;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	19 c0       	rjmp	.+50     	; 0x362a <_ZN15Adafruit_ST77355initREh+0x66>
  } else if ((options == INITR_144GREENTAB) || (options == INITR_HALLOWING)) {
    35f8:	8f 2d       	mov	r24, r15
    35fa:	8b 7f       	andi	r24, 0xFB	; 251
    35fc:	81 30       	cpi	r24, 0x01	; 1
    35fe:	c1 f4       	brne	.+48     	; 0x3630 <_ZN15Adafruit_ST77355initREh+0x6c>
    _height = ST7735_TFTHEIGHT_128;
    3600:	80 e8       	ldi	r24, 0x80	; 128
    3602:	90 e0       	ldi	r25, 0x00	; 0
    3604:	d8 01       	movw	r26, r16
    3606:	1b 96       	adiw	r26, 0x0b	; 11
    3608:	9c 93       	st	X, r25
    360a:	8e 93       	st	-X, r24
    360c:	1a 97       	sbiw	r26, 0x0a	; 10
    _width = ST7735_TFTWIDTH_128;
    360e:	19 96       	adiw	r26, 0x09	; 9
    3610:	9c 93       	st	X, r25
    3612:	8e 93       	st	-X, r24
    3614:	18 97       	sbiw	r26, 0x08	; 8
    displayInit(Rcmd2green144);
    3616:	68 e7       	ldi	r22, 0x78	; 120
    3618:	77 e0       	ldi	r23, 0x07	; 7
    361a:	c8 01       	movw	r24, r16
    361c:	19 d1       	rcall	.+562    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>
    _colstart = 2;
    361e:	82 e0       	ldi	r24, 0x02	; 2
    3620:	f8 01       	movw	r30, r16
    3622:	ed 5b       	subi	r30, 0xBD	; 189
    3624:	ff 4f       	sbci	r31, 0xFF	; 255
    3626:	80 83       	st	Z, r24
    _rowstart = 3; // For default rotation 0
    3628:	83 e0       	ldi	r24, 0x03	; 3
    362a:	31 96       	adiw	r30, 0x01	; 1
    362c:	80 83       	st	Z, r24
    362e:	1c c0       	rjmp	.+56     	; 0x3668 <_ZN15Adafruit_ST77355initREh+0xa4>
  } else if (options == INITR_MINI160x80) {
    3630:	b4 e0       	ldi	r27, 0x04	; 4
    3632:	fb 12       	cpse	r15, r27
    3634:	15 c0       	rjmp	.+42     	; 0x3660 <_ZN15Adafruit_ST77355initREh+0x9c>
    _height = ST7735_TFTWIDTH_80;
    3636:	80 e5       	ldi	r24, 0x50	; 80
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	f8 01       	movw	r30, r16
    363c:	93 87       	std	Z+11, r25	; 0x0b
    363e:	82 87       	std	Z+10, r24	; 0x0a
    _width = ST7735_TFTHEIGHT_160;
    3640:	80 ea       	ldi	r24, 0xA0	; 160
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	91 87       	std	Z+9, r25	; 0x09
    3646:	80 87       	std	Z+8, r24	; 0x08
    displayInit(Rcmd2green160x80);
    3648:	6b e6       	ldi	r22, 0x6B	; 107
    364a:	77 e0       	ldi	r23, 0x07	; 7
    364c:	c8 01       	movw	r24, r16
    364e:	00 d1       	rcall	.+512    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>
    _colstart = 24;
    3650:	88 e1       	ldi	r24, 0x18	; 24
    3652:	f8 01       	movw	r30, r16
    3654:	ed 5b       	subi	r30, 0xBD	; 189
    3656:	ff 4f       	sbci	r31, 0xFF	; 255
    3658:	80 83       	st	Z, r24
    _rowstart = 0;
    365a:	31 96       	adiw	r30, 0x01	; 1
    365c:	10 82       	st	Z, r1
  } else {
    // colstart, rowstart left at default '0' values
    displayInit(Rcmd2red);
    365e:	04 c0       	rjmp	.+8      	; 0x3668 <_ZN15Adafruit_ST77355initREh+0xa4>
    3660:	65 e8       	ldi	r22, 0x85	; 133
    3662:	77 e0       	ldi	r23, 0x07	; 7
    3664:	c8 01       	movw	r24, r16
  }
  displayInit(Rcmd3);
    3666:	f4 d0       	rcall	.+488    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>
    3668:	60 e4       	ldi	r22, 0x40	; 64
    366a:	77 e0       	ldi	r23, 0x07	; 7
    366c:	c8 01       	movw	r24, r16
    366e:	f0 d0       	rcall	.+480    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>

  // Black tab, change MADCTL color filter
  if ((options == INITR_BLACKTAB) || (options == INITR_MINI160x80)) {
    3670:	f2 e0       	ldi	r31, 0x02	; 2
    3672:	ff 16       	cp	r15, r31
    3674:	19 f0       	breq	.+6      	; 0x367c <_ZN15Adafruit_ST77355initREh+0xb8>
    3676:	84 e0       	ldi	r24, 0x04	; 4
    3678:	f8 12       	cpse	r15, r24
    367a:	09 c0       	rjmp	.+18     	; 0x368e <_ZN15Adafruit_ST77355initREh+0xca>
    uint8_t data = 0xC0;
    367c:	80 ec       	ldi	r24, 0xC0	; 192
    367e:	89 83       	std	Y+1, r24	; 0x01
    sendCommand(ST77XX_MADCTL, &data, 1);
    3680:	21 e0       	ldi	r18, 0x01	; 1
    3682:	ae 01       	movw	r20, r28
    3684:	4f 5f       	subi	r20, 0xFF	; 255
    3686:	5f 4f       	sbci	r21, 0xFF	; 255
    3688:	66 e3       	ldi	r22, 0x36	; 54
    368a:	c8 01       	movw	r24, r16
    368c:	50 da       	rcall	.-2912   	; 0x2b2e <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
    368e:	f8 01       	movw	r30, r16
    3690:	ea 5b       	subi	r30, 0xBA	; 186
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
  }

  if (options == INITR_HALLOWING) {
    3694:	a5 e0       	ldi	r26, 0x05	; 5
    3696:	fa 12       	cpse	r15, r26
    3698:	0a c0       	rjmp	.+20     	; 0x36ae <_ZN15Adafruit_ST77355initREh+0xea>
    // Hallowing is simply a 1.44" green tab upside-down:
    tabcolor = INITR_144GREENTAB;
    369a:	81 e0       	ldi	r24, 0x01	; 1
    369c:	80 83       	st	Z, r24
    setRotation(2);
    369e:	d8 01       	movw	r26, r16
    36a0:	ed 91       	ld	r30, X+
    36a2:	fc 91       	ld	r31, X
    36a4:	00 8c       	ldd	r0, Z+24	; 0x18
    36a6:	f1 8d       	ldd	r31, Z+25	; 0x19
    36a8:	e0 2d       	mov	r30, r0
    36aa:	62 e0       	ldi	r22, 0x02	; 2
    36ac:	08 c0       	rjmp	.+16     	; 0x36be <_ZN15Adafruit_ST77355initREh+0xfa>
  } else {
    tabcolor = options;
    36ae:	f0 82       	st	Z, r15
    setRotation(0);
    36b0:	d8 01       	movw	r26, r16
    36b2:	ed 91       	ld	r30, X+
    36b4:	fc 91       	ld	r31, X
    36b6:	00 8c       	ldd	r0, Z+24	; 0x18
    36b8:	f1 8d       	ldd	r31, Z+25	; 0x19
    36ba:	e0 2d       	mov	r30, r0
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	c8 01       	movw	r24, r16
    36c0:	19 95       	eicall
  }
}
    36c2:	0f 90       	pop	r0
    36c4:	df 91       	pop	r29
    36c6:	cf 91       	pop	r28
    36c8:	1f 91       	pop	r17
    36ca:	0f 91       	pop	r16
    36cc:	ff 90       	pop	r15
    36ce:	08 95       	ret

000036d0 <_ZN15Adafruit_ST77xx5beginEm>:
    @param  rst   Reset pin # (optional, pass -1 if unused)
*/
/**************************************************************************/
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, SPIClass *spiClass,
                                 int8_t cs, int8_t dc, int8_t rst)
    : Adafruit_SPITFT(w, h, spiClass, cs, dc, rst) {}
    36d0:	41 15       	cp	r20, r1
    36d2:	51 05       	cpc	r21, r1
    36d4:	61 05       	cpc	r22, r1
    36d6:	71 05       	cpc	r23, r1
    36d8:	21 f4       	brne	.+8      	; 0x36e2 <_ZN15Adafruit_ST77xx5beginEm+0x12>
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	58 e4       	ldi	r21, 0x48	; 72
    36de:	68 ee       	ldi	r22, 0xE8	; 232
    36e0:	71 e0       	ldi	r23, 0x01	; 1
    36e2:	fc 01       	movw	r30, r24
    36e4:	ff 96       	adiw	r30, 0x3f	; 63
    36e6:	40 83       	st	Z, r20
    36e8:	51 83       	std	Z+1, r21	; 0x01
    36ea:	62 83       	std	Z+2, r22	; 0x02
    36ec:	73 83       	std	Z+3, r23	; 0x03
    36ee:	21 e2       	ldi	r18, 0x21	; 33
    36f0:	fc 01       	movw	r30, r24
    36f2:	25 af       	std	Z+61, r18	; 0x3d
    36f4:	20 e2       	ldi	r18, 0x20	; 32
    36f6:	26 af       	std	Z+62, r18	; 0x3e
    36f8:	eb 5b       	subi	r30, 0xBB	; 187
    36fa:	ff 4f       	sbci	r31, 0xFF	; 255
    36fc:	20 81       	ld	r18, Z
    36fe:	43 c8       	rjmp	.-3962   	; 0x2786 <_ZN15Adafruit_SPITFT7initSPIEmh>

00003700 <_ZN15Adafruit_ST77xx13setAddrWindowEjjjj>:
    3700:	8f 92       	push	r8
    3702:	9f 92       	push	r9
    3704:	af 92       	push	r10
    3706:	bf 92       	push	r11
    3708:	cf 92       	push	r12
    370a:	df 92       	push	r13
    370c:	ef 92       	push	r14
    370e:	ff 92       	push	r15
    3710:	0f 93       	push	r16
    3712:	1f 93       	push	r17
    3714:	cf 93       	push	r28
    3716:	df 93       	push	r29
    3718:	ec 01       	movw	r28, r24
    371a:	89 ad       	ldd	r24, Y+57	; 0x39
    371c:	9a ad       	ldd	r25, Y+58	; 0x3a
    371e:	4b 01       	movw	r8, r22
    3720:	88 0e       	add	r8, r24
    3722:	99 1e       	adc	r9, r25
    3724:	8b ad       	ldd	r24, Y+59	; 0x3b
    3726:	9c ad       	ldd	r25, Y+60	; 0x3c
    3728:	48 0f       	add	r20, r24
    372a:	59 1f       	adc	r21, r25
    372c:	c9 01       	movw	r24, r18
    372e:	01 97       	sbiw	r24, 0x01	; 1
    3730:	88 0d       	add	r24, r8
    3732:	99 1d       	adc	r25, r9
    3734:	a0 e0       	ldi	r26, 0x00	; 0
    3736:	b0 e0       	ldi	r27, 0x00	; 0
    3738:	a1 2c       	mov	r10, r1
    373a:	b1 2c       	mov	r11, r1
    373c:	54 01       	movw	r10, r8
    373e:	99 24       	eor	r9, r9
    3740:	88 24       	eor	r8, r8
    3742:	88 2a       	or	r8, r24
    3744:	99 2a       	or	r9, r25
    3746:	aa 2a       	or	r10, r26
    3748:	bb 2a       	or	r11, r27
    374a:	01 50       	subi	r16, 0x01	; 1
    374c:	11 09       	sbc	r17, r1
    374e:	68 01       	movw	r12, r16
    3750:	c4 0e       	add	r12, r20
    3752:	d5 1e       	adc	r13, r21
    3754:	86 01       	movw	r16, r12
    3756:	20 e0       	ldi	r18, 0x00	; 0
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	6a 01       	movw	r12, r20
    375c:	e1 2c       	mov	r14, r1
    375e:	f1 2c       	mov	r15, r1
    3760:	76 01       	movw	r14, r12
    3762:	dd 24       	eor	r13, r13
    3764:	cc 24       	eor	r12, r12
    3766:	c0 2a       	or	r12, r16
    3768:	d1 2a       	or	r13, r17
    376a:	e2 2a       	or	r14, r18
    376c:	f3 2a       	or	r15, r19
    376e:	6a e2       	ldi	r22, 0x2A	; 42
    3770:	ce 01       	movw	r24, r28
    3772:	77 d9       	rcall	.-3346   	; 0x2a62 <_ZN15Adafruit_SPITFT12writeCommandEh>
    3774:	b5 01       	movw	r22, r10
    3776:	a4 01       	movw	r20, r8
    3778:	ce 01       	movw	r24, r28
    377a:	06 db       	rcall	.-2548   	; 0x2d88 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    377c:	6b e2       	ldi	r22, 0x2B	; 43
    377e:	ce 01       	movw	r24, r28
    3780:	70 d9       	rcall	.-3360   	; 0x2a62 <_ZN15Adafruit_SPITFT12writeCommandEh>
    3782:	b7 01       	movw	r22, r14
    3784:	a6 01       	movw	r20, r12
    3786:	ce 01       	movw	r24, r28
    3788:	ff da       	rcall	.-2562   	; 0x2d88 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    378a:	6c e2       	ldi	r22, 0x2C	; 44
    378c:	ce 01       	movw	r24, r28
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	bf 90       	pop	r11
    37a0:	af 90       	pop	r10
    37a2:	9f 90       	pop	r9
    37a4:	8f 90       	pop	r8
    37a6:	5d c9       	rjmp	.-3398   	; 0x2a62 <_ZN15Adafruit_SPITFT12writeCommandEh>

000037a8 <_ZN15Adafruit_ST77xx11setRotationEh>:
    37a8:	cf 93       	push	r28
    37aa:	df 93       	push	r29
    37ac:	1f 92       	push	r1
    37ae:	cd b7       	in	r28, 0x3d	; 61
    37b0:	de b7       	in	r29, 0x3e	; 62
    37b2:	fc 01       	movw	r30, r24
    37b4:	19 82       	std	Y+1, r1	; 0x01
    37b6:	63 70       	andi	r22, 0x03	; 3
    37b8:	66 8b       	std	Z+22, r22	; 0x16
    37ba:	8d 5b       	subi	r24, 0xBD	; 189
    37bc:	9f 4f       	sbci	r25, 0xFF	; 255
    37be:	af 01       	movw	r20, r30
    37c0:	4c 5b       	subi	r20, 0xBC	; 188
    37c2:	5f 4f       	sbci	r21, 0xFF	; 255
    37c4:	62 30       	cpi	r22, 0x02	; 2
    37c6:	49 f0       	breq	.+18     	; 0x37da <_ZN15Adafruit_ST77xx11setRotationEh+0x32>
    37c8:	63 30       	cpi	r22, 0x03	; 3
    37ca:	91 f0       	breq	.+36     	; 0x37f0 <_ZN15Adafruit_ST77xx11setRotationEh+0x48>
    37cc:	61 30       	cpi	r22, 0x01	; 1
    37ce:	19 f0       	breq	.+6      	; 0x37d6 <_ZN15Adafruit_ST77xx11setRotationEh+0x2e>
    37d0:	20 ec       	ldi	r18, 0xC0	; 192
    37d2:	29 83       	std	Y+1, r18	; 0x01
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <_ZN15Adafruit_ST77xx11setRotationEh+0x32>
    37d6:	20 ea       	ldi	r18, 0xA0	; 160
    37d8:	0c c0       	rjmp	.+24     	; 0x37f2 <_ZN15Adafruit_ST77xx11setRotationEh+0x4a>
    37da:	dc 01       	movw	r26, r24
    37dc:	8c 91       	ld	r24, X
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	92 af       	std	Z+58, r25	; 0x3a
    37e2:	81 af       	std	Z+57, r24	; 0x39
    37e4:	da 01       	movw	r26, r20
    37e6:	8c 91       	ld	r24, X
    37e8:	90 e0       	ldi	r25, 0x00	; 0
    37ea:	94 af       	std	Z+60, r25	; 0x3c
    37ec:	83 af       	std	Z+59, r24	; 0x3b
    37ee:	0c c0       	rjmp	.+24     	; 0x3808 <_ZN15Adafruit_ST77xx11setRotationEh+0x60>
    37f0:	20 e6       	ldi	r18, 0x60	; 96
    37f2:	29 83       	std	Y+1, r18	; 0x01
    37f4:	dc 01       	movw	r26, r24
    37f6:	8c 91       	ld	r24, X
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	94 af       	std	Z+60, r25	; 0x3c
    37fc:	83 af       	std	Z+59, r24	; 0x3b
    37fe:	da 01       	movw	r26, r20
    3800:	8c 91       	ld	r24, X
    3802:	90 e0       	ldi	r25, 0x00	; 0
    3804:	92 af       	std	Z+58, r25	; 0x3a
    3806:	81 af       	std	Z+57, r24	; 0x39
    3808:	21 e0       	ldi	r18, 0x01	; 1
    380a:	ae 01       	movw	r20, r28
    380c:	4f 5f       	subi	r20, 0xFF	; 255
    380e:	5f 4f       	sbci	r21, 0xFF	; 255
    3810:	66 e3       	ldi	r22, 0x36	; 54
    3812:	cf 01       	movw	r24, r30
    3814:	8c d9       	rcall	.-3304   	; 0x2b2e <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
    3816:	0f 90       	pop	r0
    3818:	df 91       	pop	r29
    381a:	cf 91       	pop	r28
    381c:	08 95       	ret

0000381e <_ZN15Adafruit_ST77xxC1Ejjaaa>:
    381e:	ef 92       	push	r14
    3820:	0f 93       	push	r16
    3822:	cf 93       	push	r28
    3824:	df 93       	push	r29
    3826:	ec 01       	movw	r28, r24
    3828:	0e 94 b6 13 	call	0x276c	; 0x276c <_ZN15Adafruit_SPITFTC1Ejjaaa>
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	95 e0       	ldi	r25, 0x05	; 5
    3830:	99 83       	std	Y+1, r25	; 0x01
    3832:	88 83       	st	Y, r24
    3834:	fe 01       	movw	r30, r28
    3836:	ed 5b       	subi	r30, 0xBD	; 189
    3838:	ff 4f       	sbci	r31, 0xFF	; 255
    383a:	10 82       	st	Z, r1
    383c:	31 96       	adiw	r30, 0x01	; 1
    383e:	10 82       	st	Z, r1
    3840:	cb 5b       	subi	r28, 0xBB	; 187
    3842:	df 4f       	sbci	r29, 0xFF	; 255
    3844:	18 82       	st	Y, r1
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	0f 91       	pop	r16
    384c:	ef 90       	pop	r14
    384e:	08 95       	ret

00003850 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
    @brief  Companion code to the initiliazation tables. Reads and issues
            a series of LCD commands stored in PROGMEM byte array.
    @param  addr  Flash memory array with commands and data to send
*/
/**************************************************************************/
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
    3850:	cf 92       	push	r12
    3852:	df 92       	push	r13
    3854:	ff 92       	push	r15
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	8c 01       	movw	r16, r24

  uint8_t numCommands, cmd, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++); // Number of commands to follow
    3860:	cb 01       	movw	r24, r22
    3862:	01 96       	adiw	r24, 0x01	; 1
    3864:	fb 01       	movw	r30, r22
    3866:	f4 90       	lpm	r15, Z
  while (numCommands--) {              // For each command...
    3868:	ff 20       	and	r15, r15
    386a:	31 f1       	breq	.+76     	; 0x38b8 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x68>
    cmd = pgm_read_byte(addr++);       // Read command
    386c:	fc 01       	movw	r30, r24
    386e:	64 91       	lpm	r22, Z
    numArgs = pgm_read_byte(addr++);   // Number of args to follow
    3870:	6c 01       	movw	r12, r24
    3872:	f2 e0       	ldi	r31, 0x02	; 2
    3874:	cf 0e       	add	r12, r31
    3876:	d1 1c       	adc	r13, r1
    3878:	fc 01       	movw	r30, r24
    387a:	31 96       	adiw	r30, 0x01	; 1
    387c:	c4 91       	lpm	r28, Z
    ms = numArgs & ST_CMD_DELAY;       // If hibit set, delay follows args
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
    387e:	dc 2f       	mov	r29, r28
    3880:	df 77       	andi	r29, 0x7F	; 127
    sendCommand(cmd, addr, numArgs);
    3882:	2d 2f       	mov	r18, r29
    3884:	a6 01       	movw	r20, r12
    3886:	c8 01       	movw	r24, r16
    3888:	a6 d9       	rcall	.-3252   	; 0x2bd6 <_ZN15Adafruit_SPITFT11sendCommandEhPKhh>
    addr += numArgs;
    388a:	c6 01       	movw	r24, r12
    388c:	8d 0f       	add	r24, r29
    388e:	91 1d       	adc	r25, r1

    if (ms) {
    3890:	c7 fd       	sbrc	r28, 7
    3892:	02 c0       	rjmp	.+4      	; 0x3898 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x48>
    3894:	fa 94       	dec	r15
    3896:	e8 cf       	rjmp	.-48     	; 0x3868 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x18>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
    3898:	ec 01       	movw	r28, r24
    389a:	21 96       	adiw	r28, 0x01	; 1
    389c:	fc 01       	movw	r30, r24
    389e:	64 91       	lpm	r22, Z
    38a0:	70 e0       	ldi	r23, 0x00	; 0
      if (ms == 255)
    38a2:	6f 3f       	cpi	r22, 0xFF	; 255
    38a4:	71 05       	cpc	r23, r1
    38a6:	11 f4       	brne	.+4      	; 0x38ac <_ZN15Adafruit_ST77xx11displayInitEPKh+0x5c>
        ms = 500; // If 255, delay for 500 ms
    38a8:	64 ef       	ldi	r22, 0xF4	; 244
    38aa:	71 e0       	ldi	r23, 0x01	; 1
      delay(ms);
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 22 0a 	call	0x1444	; 0x1444 <delay>
    numArgs &= ~ST_CMD_DELAY;          // Mask out delay bit
    sendCommand(cmd, addr, numArgs);
    addr += numArgs;

    if (ms) {
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
    38b4:	ce 01       	movw	r24, r28
    38b6:	ee cf       	rjmp	.-36     	; 0x3894 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x44>
      if (ms == 255)
        ms = 500; // If 255, delay for 500 ms
      delay(ms);
    }
  }
}
    38b8:	df 91       	pop	r29
    38ba:	cf 91       	pop	r28
    38bc:	1f 91       	pop	r17
    38be:	0f 91       	pop	r16
    38c0:	ff 90       	pop	r15
    38c2:	df 90       	pop	r13
    38c4:	cf 90       	pop	r12
    38c6:	08 95       	ret

000038c8 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
/*!
    @brief  Initialization code common to all ST77XX displays
    @param  cmdList  Flash memory array with commands and data to send
*/
/**************************************************************************/
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
    38c8:	0f 93       	push	r16
    38ca:	1f 93       	push	r17
    38cc:	cf 93       	push	r28
    38ce:	df 93       	push	r29
    38d0:	ec 01       	movw	r28, r24
    38d2:	8b 01       	movw	r16, r22
  begin();
    38d4:	e8 81       	ld	r30, Y
    38d6:	f9 81       	ldd	r31, Y+1	; 0x01
    38d8:	00 a4       	ldd	r0, Z+40	; 0x28
    38da:	f1 a5       	ldd	r31, Z+41	; 0x29
    38dc:	e0 2d       	mov	r30, r0
    38de:	40 e0       	ldi	r20, 0x00	; 0
    38e0:	50 e0       	ldi	r21, 0x00	; 0
    38e2:	ba 01       	movw	r22, r20
    38e4:	19 95       	eicall

  if (cmdList) {
    38e6:	01 15       	cp	r16, r1
    38e8:	11 05       	cpc	r17, r1
    38ea:	39 f0       	breq	.+14     	; 0x38fa <_ZN15Adafruit_ST77xx10commonInitEPKh+0x32>
    displayInit(cmdList);
    38ec:	b8 01       	movw	r22, r16
    38ee:	ce 01       	movw	r24, r28
  }
}
    38f0:	df 91       	pop	r29
    38f2:	cf 91       	pop	r28
    38f4:	1f 91       	pop	r17
    38f6:	0f 91       	pop	r16
/**************************************************************************/
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
  begin();

  if (cmdList) {
    displayInit(cmdList);
    38f8:	ab cf       	rjmp	.-170    	; 0x3850 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  }
}
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	08 95       	ret

00003904 <_ZN6HCSR04C1Eiiii>:
    pinMode(echo, INPUT);
    _trigger = trigger;
    _echo = echo;
}

HCSR04::HCSR04(int trigger, int echo, int minRange, int maxRange)
    3904:	af 92       	push	r10
    3906:	bf 92       	push	r11
    3908:	cf 92       	push	r12
    390a:	df 92       	push	r13
    390c:	ef 92       	push	r14
    390e:	ff 92       	push	r15
    3910:	0f 93       	push	r16
    3912:	1f 93       	push	r17
    3914:	cf 93       	push	r28
    3916:	df 93       	push	r29
    3918:	ec 01       	movw	r28, r24
    391a:	e6 2e       	mov	r14, r22
    391c:	a7 2e       	mov	r10, r23
    391e:	f4 2e       	mov	r15, r20
    3920:	b5 2e       	mov	r11, r21
    3922:	69 01       	movw	r12, r18
    3924:	8f ef       	ldi	r24, 0xFF	; 255
    3926:	9f ef       	ldi	r25, 0xFF	; 255
    3928:	9d 83       	std	Y+5, r25	; 0x05
    392a:	8c 83       	std	Y+4, r24	; 0x04
    392c:	9f 83       	std	Y+7, r25	; 0x07
    392e:	8e 83       	std	Y+6, r24	; 0x06
{
    pinMode(trigger, OUTPUT);
    3930:	61 e0       	ldi	r22, 0x01	; 1
    3932:	8e 2d       	mov	r24, r14
    3934:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    pinMode(echo, INPUT);
    3938:	60 e0       	ldi	r22, 0x00	; 0
    393a:	8f 2d       	mov	r24, r15
    393c:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    _trigger = trigger;
    3940:	e8 82       	st	Y, r14
    3942:	a9 82       	std	Y+1, r10	; 0x01
    _echo = echo;
    3944:	fa 82       	std	Y+2, r15	; 0x02
    3946:	bb 82       	std	Y+3, r11	; 0x03
	_minRange = minRange;
    3948:	dd 82       	std	Y+5, r13	; 0x05
    394a:	cc 82       	std	Y+4, r12	; 0x04
    _maxRange = maxRange;
    394c:	1f 83       	std	Y+7, r17	; 0x07
    394e:	0e 83       	std	Y+6, r16	; 0x06
}
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	ff 90       	pop	r15
    395a:	ef 90       	pop	r14
    395c:	df 90       	pop	r13
    395e:	cf 90       	pop	r12
    3960:	bf 90       	pop	r11
    3962:	af 90       	pop	r10
    3964:	08 95       	ret

00003966 <_ZN6HCSR0418echoInMicrosecondsEv>:

unsigned int HCSR04::echoInMicroseconds()
{
    3966:	cf 92       	push	r12
    3968:	df 92       	push	r13
    396a:	ef 92       	push	r14
    396c:	ff 92       	push	r15
    396e:	cf 93       	push	r28
    3970:	df 93       	push	r29
    3972:	ec 01       	movw	r28, r24
    digitalWrite(_trigger, LOW);
    3974:	60 e0       	ldi	r22, 0x00	; 0
    3976:	88 81       	ld	r24, Y
    3978:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    delayMicroseconds(5);
    397c:	85 e0       	ldi	r24, 0x05	; 5
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delayMicroseconds>
    digitalWrite(_trigger, HIGH);
    3984:	61 e0       	ldi	r22, 0x01	; 1
    3986:	88 81       	ld	r24, Y
    3988:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    delayMicroseconds(10);
    398c:	8a e0       	ldi	r24, 0x0A	; 10
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <delayMicroseconds>
    digitalWrite(_trigger, LOW);  
    3994:	60 e0       	ldi	r22, 0x00	; 0
    3996:	88 81       	ld	r24, Y
    3998:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    // Why don't I just use? "return pulseIn(_echo, HIGH);"
	// Arduino Primo doesn't have access to pulseIn.
    while(digitalRead(_echo) == LOW);
    399c:	8a 81       	ldd	r24, Y+2	; 0x02
    399e:	0e 94 89 0b 	call	0x1712	; 0x1712 <digitalRead>
    39a2:	89 2b       	or	r24, r25
    39a4:	d9 f3       	breq	.-10     	; 0x399c <_ZN6HCSR0418echoInMicrosecondsEv+0x36>

    int pulseStart = micros();
    39a6:	0e 94 fd 09 	call	0x13fa	; 0x13fa <micros>
    39aa:	6b 01       	movw	r12, r22
    39ac:	7c 01       	movw	r14, r24

    while(digitalRead(_echo) == HIGH);
    39ae:	8a 81       	ldd	r24, Y+2	; 0x02
    39b0:	0e 94 89 0b 	call	0x1712	; 0x1712 <digitalRead>
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	d9 f3       	breq	.-10     	; 0x39ae <_ZN6HCSR0418echoInMicrosecondsEv+0x48>

    return micros() - pulseStart;
    39b8:	0e 94 fd 09 	call	0x13fa	; 0x13fa <micros>
}
    39bc:	cb 01       	movw	r24, r22
    39be:	8c 19       	sub	r24, r12
    39c0:	9d 09       	sbc	r25, r13
    39c2:	df 91       	pop	r29
    39c4:	cf 91       	pop	r28
    39c6:	ff 90       	pop	r15
    39c8:	ef 90       	pop	r14
    39ca:	df 90       	pop	r13
    39cc:	cf 90       	pop	r12
    39ce:	08 95       	ret

000039d0 <_ZN6HCSR0421distanceInMillimetersEv>:

int HCSR04::distanceInMillimeters()
{
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	ec 01       	movw	r28, r24
    int duration = echoInMicroseconds();
    39d6:	c7 df       	rcall	.-114    	; 0x3966 <_ZN6HCSR0418echoInMicrosecondsEv>
    
    // Given the speed of sound in air is 332m/s = 3320cm/s = 0.0332cm/us).
    int distance = (duration / 2) * 0.332;
    39d8:	97 fd       	sbrc	r25, 7
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	bc 01       	movw	r22, r24
    39de:	75 95       	asr	r23
    39e0:	67 95       	ror	r22
    39e2:	07 2e       	mov	r0, r23
    39e4:	00 0c       	add	r0, r0
    39e6:	88 0b       	sbc	r24, r24
    39e8:	99 0b       	sbc	r25, r25
    39ea:	0e 94 b2 05 	call	0xb64	; 0xb64 <__floatsisf>
    39ee:	27 ee       	ldi	r18, 0xE7	; 231
    39f0:	3b ef       	ldi	r19, 0xFB	; 251
    39f2:	49 ea       	ldi	r20, 0xA9	; 169
    39f4:	5e e3       	ldi	r21, 0x3E	; 62
    39f6:	0e 94 6d 06 	call	0xcda	; 0xcda <__mulsf3>
    39fa:	0e 94 7f 05 	call	0xafe	; 0xafe <__fixsfsi>
    39fe:	9b 01       	movw	r18, r22
	
	if (_minRange == -1 && _maxRange == -1)
    3a00:	4c 81       	ldd	r20, Y+4	; 0x04
    3a02:	5d 81       	ldd	r21, Y+5	; 0x05
    3a04:	4f 3f       	cpi	r20, 0xFF	; 255
    3a06:	af ef       	ldi	r26, 0xFF	; 255
    3a08:	5a 07       	cpc	r21, r26
    3a0a:	21 f4       	brne	.+8      	; 0x3a14 <_ZN6HCSR0421distanceInMillimetersEv+0x44>
    3a0c:	ee 81       	ldd	r30, Y+6	; 0x06
    3a0e:	ff 81       	ldd	r31, Y+7	; 0x07
    3a10:	31 96       	adiw	r30, 0x01	; 1
    3a12:	59 f0       	breq	.+22     	; 0x3a2a <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
	{
		return distance;
	}
	
	if (distance > _minRange && distance < _maxRange)
    3a14:	42 17       	cp	r20, r18
    3a16:	53 07       	cpc	r21, r19
    3a18:	2c f4       	brge	.+10     	; 0x3a24 <_ZN6HCSR0421distanceInMillimetersEv+0x54>
    3a1a:	4e 81       	ldd	r20, Y+6	; 0x06
    3a1c:	5f 81       	ldd	r21, Y+7	; 0x07
    3a1e:	24 17       	cp	r18, r20
    3a20:	35 07       	cpc	r19, r21
    3a22:	1c f0       	brlt	.+6      	; 0x3a2a <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
	{
		return distance;
	}	
	
	return -1;
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
    3a26:	9f ef       	ldi	r25, 0xFF	; 255
    3a28:	01 c0       	rjmp	.+2      	; 0x3a2c <_ZN6HCSR0421distanceInMillimetersEv+0x5c>
    3a2a:	cb 01       	movw	r24, r22
}
    3a2c:	df 91       	pop	r29
    3a2e:	cf 91       	pop	r28
    3a30:	08 95       	ret

00003a32 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    3a32:	cf 93       	push	r28
  uint8_t sreg = SREG;
    3a34:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    3a36:	f8 94       	cli
  if (!initialized) {
    3a38:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZN8SPIClass11initializedE>
    3a3c:	81 11       	cpse	r24, r1
    3a3e:	27 c0       	rjmp	.+78     	; 0x3a8e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    3a40:	e1 ee       	ldi	r30, 0xE1	; 225
    3a42:	f1 e0       	ldi	r31, 0x01	; 1
    3a44:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    3a46:	eb e9       	ldi	r30, 0x9B	; 155
    3a48:	f1 e0       	ldi	r31, 0x01	; 1
    3a4a:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3a4c:	e8 2f       	mov	r30, r24
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	ee 0f       	add	r30, r30
    3a52:	ff 1f       	adc	r31, r31
    3a54:	ea 5d       	subi	r30, 0xDA	; 218
    3a56:	fd 4f       	sbci	r31, 0xFD	; 253
    3a58:	a5 91       	lpm	r26, Z+
    3a5a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3a5c:	ec 91       	ld	r30, X
    3a5e:	e9 23       	and	r30, r25
    3a60:	21 f4       	brne	.+8      	; 0x3a6a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    3a62:	61 e0       	ldi	r22, 0x01	; 1
    3a64:	85 e3       	ldi	r24, 0x35	; 53
    3a66:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3a6a:	61 e0       	ldi	r22, 0x01	; 1
    3a6c:	85 e3       	ldi	r24, 0x35	; 53
    3a6e:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    3a72:	8c b5       	in	r24, 0x2c	; 44
    3a74:	80 61       	ori	r24, 0x10	; 16
    3a76:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3a78:	8c b5       	in	r24, 0x2c	; 44
    3a7a:	80 64       	ori	r24, 0x40	; 64
    3a7c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	84 e3       	ldi	r24, 0x34	; 52
    3a82:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
    pinMode(MOSI, OUTPUT);
    3a86:	61 e0       	ldi	r22, 0x01	; 1
    3a88:	83 e3       	ldi	r24, 0x33	; 51
    3a8a:	0e 94 1f 0b 	call	0x163e	; 0x163e <pinMode>
  }
  initialized++; // reference count
    3a8e:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <_ZN8SPIClass11initializedE>
    3a92:	8f 5f       	subi	r24, 0xFF	; 255
    3a94:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3a98:	cf bf       	out	0x3f, r28	; 63
}
    3a9a:	cf 91       	pop	r28
    3a9c:	08 95       	ret

00003a9e <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    3a9e:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3aa2:	90 e0       	ldi	r25, 0x00	; 0
    3aa4:	20 91 87 07 	lds	r18, 0x0787	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3aa8:	82 1b       	sub	r24, r18
    3aaa:	91 09       	sbc	r25, r1
    3aac:	08 95       	ret

00003aae <_ZN7TwoWire4readEv>:
    3aae:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3ab2:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3ab6:	98 17       	cp	r25, r24
    3ab8:	50 f4       	brcc	.+20     	; 0x3ace <_ZN7TwoWire4readEv+0x20>
    3aba:	e9 2f       	mov	r30, r25
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	e8 57       	subi	r30, 0x78	; 120
    3ac0:	f8 4f       	sbci	r31, 0xF8	; 248
    3ac2:	20 81       	ld	r18, Z
    3ac4:	30 e0       	ldi	r19, 0x00	; 0
    3ac6:	9f 5f       	subi	r25, 0xFF	; 255
    3ac8:	90 93 87 07 	sts	0x0787, r25	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3acc:	02 c0       	rjmp	.+4      	; 0x3ad2 <_ZN7TwoWire4readEv+0x24>
    3ace:	2f ef       	ldi	r18, 0xFF	; 255
    3ad0:	3f ef       	ldi	r19, 0xFF	; 255
    3ad2:	c9 01       	movw	r24, r18
    3ad4:	08 95       	ret

00003ad6 <_ZN7TwoWire4peekEv>:
    3ad6:	e0 91 87 07 	lds	r30, 0x0787	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3ada:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3ade:	e8 17       	cp	r30, r24
    3ae0:	30 f4       	brcc	.+12     	; 0x3aee <_ZN7TwoWire4peekEv+0x18>
    3ae2:	f0 e0       	ldi	r31, 0x00	; 0
    3ae4:	e8 57       	subi	r30, 0x78	; 120
    3ae6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ae8:	80 81       	ld	r24, Z
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	08 95       	ret
    3aee:	8f ef       	ldi	r24, 0xFF	; 255
    3af0:	9f ef       	ldi	r25, 0xFF	; 255
    3af2:	08 95       	ret

00003af4 <_ZN7TwoWire5flushEv>:
    3af4:	08 95       	ret

00003af6 <_ZN7TwoWire16onReceiveServiceEPhi>:
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	ec 01       	movw	r28, r24
    3afc:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <_ZN7TwoWire14user_onReceiveE>
    3b00:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <_ZN7TwoWire14user_onReceiveE+0x1>
    3b04:	30 97       	sbiw	r30, 0x00	; 0
    3b06:	f1 f0       	breq	.+60     	; 0x3b44 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b08:	90 91 87 07 	lds	r25, 0x0787	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3b0c:	80 91 86 07 	lds	r24, 0x0786	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3b10:	98 17       	cp	r25, r24
    3b12:	c0 f0       	brcs	.+48     	; 0x3b44 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	29 2f       	mov	r18, r25
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	26 17       	cp	r18, r22
    3b1c:	37 07       	cpc	r19, r23
    3b1e:	54 f4       	brge	.+20     	; 0x3b34 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    3b20:	de 01       	movw	r26, r28
    3b22:	a2 0f       	add	r26, r18
    3b24:	b3 1f       	adc	r27, r19
    3b26:	4c 91       	ld	r20, X
    3b28:	d9 01       	movw	r26, r18
    3b2a:	a8 57       	subi	r26, 0x78	; 120
    3b2c:	b8 4f       	sbci	r27, 0xF8	; 248
    3b2e:	4c 93       	st	X, r20
    3b30:	9f 5f       	subi	r25, 0xFF	; 255
    3b32:	f1 cf       	rjmp	.-30     	; 0x3b16 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    3b34:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3b38:	60 93 86 07 	sts	0x0786, r22	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	df 91       	pop	r29
    3b40:	cf 91       	pop	r28
    3b42:	19 94       	eijmp
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	08 95       	ret

00003b4a <_ZN7TwoWire16onRequestServiceEv>:
    3b4a:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <_ZN7TwoWire14user_onRequestE>
    3b4e:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <_ZN7TwoWire14user_onRequestE+0x1>
    3b52:	30 97       	sbiw	r30, 0x00	; 0
    3b54:	29 f0       	breq	.+10     	; 0x3b60 <_ZN7TwoWire16onRequestServiceEv+0x16>
    3b56:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3b5a:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3b5e:	19 94       	eijmp
    3b60:	08 95       	ret

00003b62 <_ZN7TwoWire5writeEPKhj>:
    3b62:	cf 92       	push	r12
    3b64:	df 92       	push	r13
    3b66:	ef 92       	push	r14
    3b68:	ff 92       	push	r15
    3b6a:	0f 93       	push	r16
    3b6c:	1f 93       	push	r17
    3b6e:	cf 93       	push	r28
    3b70:	df 93       	push	r29
    3b72:	7c 01       	movw	r14, r24
    3b74:	cb 01       	movw	r24, r22
    3b76:	8a 01       	movw	r16, r20
    3b78:	20 91 62 07 	lds	r18, 0x0762	; 0x800762 <_ZN7TwoWire12transmittingE>
    3b7c:	22 23       	and	r18, r18
    3b7e:	89 f0       	breq	.+34     	; 0x3ba2 <_ZN7TwoWire5writeEPKhj+0x40>
    3b80:	eb 01       	movw	r28, r22
    3b82:	6b 01       	movw	r12, r22
    3b84:	c4 0e       	add	r12, r20
    3b86:	d5 1e       	adc	r13, r21
    3b88:	cc 15       	cp	r28, r12
    3b8a:	dd 05       	cpc	r29, r13
    3b8c:	61 f0       	breq	.+24     	; 0x3ba6 <_ZN7TwoWire5writeEPKhj+0x44>
    3b8e:	69 91       	ld	r22, Y+
    3b90:	d7 01       	movw	r26, r14
    3b92:	ed 91       	ld	r30, X+
    3b94:	fc 91       	ld	r31, X
    3b96:	01 90       	ld	r0, Z+
    3b98:	f0 81       	ld	r31, Z
    3b9a:	e0 2d       	mov	r30, r0
    3b9c:	c7 01       	movw	r24, r14
    3b9e:	19 95       	eicall
    3ba0:	f3 cf       	rjmp	.-26     	; 0x3b88 <_ZN7TwoWire5writeEPKhj+0x26>
    3ba2:	64 2f       	mov	r22, r20
    3ba4:	98 d1       	rcall	.+816    	; 0x3ed6 <twi_transmit>
    3ba6:	c8 01       	movw	r24, r16
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	ff 90       	pop	r15
    3bb2:	ef 90       	pop	r14
    3bb4:	df 90       	pop	r13
    3bb6:	cf 90       	pop	r12
    3bb8:	08 95       	ret

00003bba <_ZN7TwoWire5writeEh>:
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	1f 92       	push	r1
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	69 83       	std	Y+1, r22	; 0x01
    3bc6:	20 91 62 07 	lds	r18, 0x0762	; 0x800762 <_ZN7TwoWire12transmittingE>
    3bca:	22 23       	and	r18, r18
    3bcc:	d1 f0       	breq	.+52     	; 0x3c02 <_ZN7TwoWire5writeEh+0x48>
    3bce:	20 91 63 07 	lds	r18, 0x0763	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3bd2:	20 32       	cpi	r18, 0x20	; 32
    3bd4:	40 f0       	brcs	.+16     	; 0x3be6 <_ZN7TwoWire5writeEh+0x2c>
    3bd6:	21 e0       	ldi	r18, 0x01	; 1
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	fc 01       	movw	r30, r24
    3bdc:	33 83       	std	Z+3, r19	; 0x03
    3bde:	22 83       	std	Z+2, r18	; 0x02
    3be0:	80 e0       	ldi	r24, 0x00	; 0
    3be2:	90 e0       	ldi	r25, 0x00	; 0
    3be4:	14 c0       	rjmp	.+40     	; 0x3c0e <_ZN7TwoWire5writeEh+0x54>
    3be6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3bea:	e8 2f       	mov	r30, r24
    3bec:	f0 e0       	ldi	r31, 0x00	; 0
    3bee:	eb 59       	subi	r30, 0x9B	; 155
    3bf0:	f8 4f       	sbci	r31, 0xF8	; 248
    3bf2:	99 81       	ldd	r25, Y+1	; 0x01
    3bf4:	90 83       	st	Z, r25
    3bf6:	8f 5f       	subi	r24, 0xFF	; 255
    3bf8:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3bfc:	80 93 63 07 	sts	0x0763, r24	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3c00:	04 c0       	rjmp	.+8      	; 0x3c0a <_ZN7TwoWire5writeEh+0x50>
    3c02:	61 e0       	ldi	r22, 0x01	; 1
    3c04:	ce 01       	movw	r24, r28
    3c06:	01 96       	adiw	r24, 0x01	; 1
    3c08:	66 d1       	rcall	.+716    	; 0x3ed6 <twi_transmit>
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0f 90       	pop	r0
    3c10:	df 91       	pop	r29
    3c12:	cf 91       	pop	r28
    3c14:	08 95       	ret

00003c16 <_ZN7TwoWireC1Ev>:
    3c16:	fc 01       	movw	r30, r24
    3c18:	13 82       	std	Z+3, r1	; 0x03
    3c1a:	12 82       	std	Z+2, r1	; 0x02
    3c1c:	88 ee       	ldi	r24, 0xE8	; 232
    3c1e:	93 e0       	ldi	r25, 0x03	; 3
    3c20:	a0 e0       	ldi	r26, 0x00	; 0
    3c22:	b0 e0       	ldi	r27, 0x00	; 0
    3c24:	84 83       	std	Z+4, r24	; 0x04
    3c26:	95 83       	std	Z+5, r25	; 0x05
    3c28:	a6 83       	std	Z+6, r26	; 0x06
    3c2a:	b7 83       	std	Z+7, r27	; 0x07
    3c2c:	80 e3       	ldi	r24, 0x30	; 48
    3c2e:	95 e0       	ldi	r25, 0x05	; 5
    3c30:	91 83       	std	Z+1, r25	; 0x01
    3c32:	80 83       	st	Z, r24
    3c34:	08 95       	ret

00003c36 <_ZN7TwoWire5beginEv>:
    3c36:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3c3a:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3c3e:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3c42:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3c46:	8b d0       	rcall	.+278    	; 0x3d5e <twi_init>
    3c48:	85 ea       	ldi	r24, 0xA5	; 165
    3c4a:	9d e1       	ldi	r25, 0x1D	; 29
    3c4c:	71 d1       	rcall	.+738    	; 0x3f30 <twi_attachSlaveTxEvent>
    3c4e:	8b e7       	ldi	r24, 0x7B	; 123
    3c50:	9d e1       	ldi	r25, 0x1D	; 29
    3c52:	69 c1       	rjmp	.+722    	; 0x3f26 <twi_attachSlaveRxEvent>

00003c54 <_ZN7TwoWire17beginTransmissionEh>:
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <_ZN7TwoWire12transmittingE>
    3c5a:	60 93 85 07 	sts	0x0785, r22	; 0x800785 <_ZN7TwoWire9txAddressE>
    3c5e:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3c62:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3c66:	08 95       	ret

00003c68 <_ZN7TwoWire15endTransmissionEh>:
    3c68:	0f 93       	push	r16
    3c6a:	06 2f       	mov	r16, r22
    3c6c:	21 e0       	ldi	r18, 0x01	; 1
    3c6e:	40 91 63 07 	lds	r20, 0x0763	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3c72:	65 e6       	ldi	r22, 0x65	; 101
    3c74:	77 e0       	ldi	r23, 0x07	; 7
    3c76:	80 91 85 07 	lds	r24, 0x0785	; 0x800785 <_ZN7TwoWire9txAddressE>
    3c7a:	d7 d0       	rcall	.+430    	; 0x3e2a <twi_writeTo>
    3c7c:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <_ZN7TwoWire13txBufferIndexE>
    3c80:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <_ZN7TwoWire14txBufferLengthE>
    3c84:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <_ZN7TwoWire12transmittingE>
    3c88:	0f 91       	pop	r16
    3c8a:	08 95       	ret

00003c8c <_ZN7TwoWire11requestFromEhhmhh>:
    3c8c:	4f 92       	push	r4
    3c8e:	5f 92       	push	r5
    3c90:	6f 92       	push	r6
    3c92:	7f 92       	push	r7
    3c94:	af 92       	push	r10
    3c96:	bf 92       	push	r11
    3c98:	cf 92       	push	r12
    3c9a:	ef 92       	push	r14
    3c9c:	ff 92       	push	r15
    3c9e:	0f 93       	push	r16
    3ca0:	1f 93       	push	r17
    3ca2:	cf 93       	push	r28
    3ca4:	df 93       	push	r29
    3ca6:	5c 01       	movw	r10, r24
    3ca8:	f6 2e       	mov	r15, r22
    3caa:	d4 2f       	mov	r29, r20
    3cac:	28 01       	movw	r4, r16
    3cae:	39 01       	movw	r6, r18
    3cb0:	ee 20       	and	r14, r14
    3cb2:	11 f1       	breq	.+68     	; 0x3cf8 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    3cb4:	cf df       	rcall	.-98     	; 0x3c54 <_ZN7TwoWire17beginTransmissionEh>
    3cb6:	ce 2d       	mov	r28, r14
    3cb8:	c4 30       	cpi	r28, 0x04	; 4
    3cba:	08 f0       	brcs	.+2      	; 0x3cbe <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3cbc:	c3 e0       	ldi	r28, 0x03	; 3
    3cbe:	c1 50       	subi	r28, 0x01	; 1
    3cc0:	c0 f0       	brcs	.+48     	; 0x3cf2 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    3cc2:	28 e0       	ldi	r18, 0x08	; 8
    3cc4:	c2 9f       	mul	r28, r18
    3cc6:	c0 01       	movw	r24, r0
    3cc8:	11 24       	eor	r1, r1
    3cca:	a3 01       	movw	r20, r6
    3ccc:	92 01       	movw	r18, r4
    3cce:	04 c0       	rjmp	.+8      	; 0x3cd8 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    3cd0:	56 95       	lsr	r21
    3cd2:	47 95       	ror	r20
    3cd4:	37 95       	ror	r19
    3cd6:	27 95       	ror	r18
    3cd8:	8a 95       	dec	r24
    3cda:	d2 f7       	brpl	.-12     	; 0x3cd0 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    3cdc:	ca 01       	movw	r24, r20
    3cde:	b9 01       	movw	r22, r18
    3ce0:	d5 01       	movw	r26, r10
    3ce2:	ed 91       	ld	r30, X+
    3ce4:	fc 91       	ld	r31, X
    3ce6:	01 90       	ld	r0, Z+
    3ce8:	f0 81       	ld	r31, Z
    3cea:	e0 2d       	mov	r30, r0
    3cec:	c5 01       	movw	r24, r10
    3cee:	19 95       	eicall
    3cf0:	e6 cf       	rjmp	.-52     	; 0x3cbe <_ZN7TwoWire11requestFromEhhmhh+0x32>
    3cf2:	60 e0       	ldi	r22, 0x00	; 0
    3cf4:	c5 01       	movw	r24, r10
    3cf6:	b8 df       	rcall	.-144    	; 0x3c68 <_ZN7TwoWire15endTransmissionEh>
    3cf8:	4d 2f       	mov	r20, r29
    3cfa:	d1 32       	cpi	r29, 0x21	; 33
    3cfc:	08 f0       	brcs	.+2      	; 0x3d00 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    3cfe:	40 e2       	ldi	r20, 0x20	; 32
    3d00:	2c 2d       	mov	r18, r12
    3d02:	68 e8       	ldi	r22, 0x88	; 136
    3d04:	77 e0       	ldi	r23, 0x07	; 7
    3d06:	8f 2d       	mov	r24, r15
    3d08:	48 d0       	rcall	.+144    	; 0x3d9a <twi_readFrom>
    3d0a:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <_ZN7TwoWire13rxBufferIndexE>
    3d0e:	80 93 86 07 	sts	0x0786, r24	; 0x800786 <_ZN7TwoWire14rxBufferLengthE>
    3d12:	df 91       	pop	r29
    3d14:	cf 91       	pop	r28
    3d16:	1f 91       	pop	r17
    3d18:	0f 91       	pop	r16
    3d1a:	ff 90       	pop	r15
    3d1c:	ef 90       	pop	r14
    3d1e:	cf 90       	pop	r12
    3d20:	bf 90       	pop	r11
    3d22:	af 90       	pop	r10
    3d24:	7f 90       	pop	r7
    3d26:	6f 90       	pop	r6
    3d28:	5f 90       	pop	r5
    3d2a:	4f 90       	pop	r4
    3d2c:	08 95       	ret

00003d2e <_ZN7TwoWire11requestFromEhhh>:
    3d2e:	cf 92       	push	r12
    3d30:	ef 92       	push	r14
    3d32:	0f 93       	push	r16
    3d34:	1f 93       	push	r17
    3d36:	c2 2e       	mov	r12, r18
    3d38:	e1 2c       	mov	r14, r1
    3d3a:	00 e0       	ldi	r16, 0x00	; 0
    3d3c:	10 e0       	ldi	r17, 0x00	; 0
    3d3e:	98 01       	movw	r18, r16
    3d40:	a5 df       	rcall	.-182    	; 0x3c8c <_ZN7TwoWire11requestFromEhhmhh>
    3d42:	1f 91       	pop	r17
    3d44:	0f 91       	pop	r16
    3d46:	ef 90       	pop	r14
    3d48:	cf 90       	pop	r12
    3d4a:	08 95       	ret

00003d4c <_ZN7TwoWire11requestFromEhh>:
    3d4c:	21 e0       	ldi	r18, 0x01	; 1
    3d4e:	ef cf       	rjmp	.-34     	; 0x3d2e <_ZN7TwoWire11requestFromEhhh>

00003d50 <_ZN7TwoWire15endTransmissionEv>:
    3d50:	61 e0       	ldi	r22, 0x01	; 1
    3d52:	8a cf       	rjmp	.-236    	; 0x3c68 <_ZN7TwoWire15endTransmissionEh>

00003d54 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    3d54:	82 e5       	ldi	r24, 0x52	; 82
    3d56:	97 e0       	ldi	r25, 0x07	; 7
    3d58:	5e cf       	rjmp	.-324    	; 0x3c16 <_ZN7TwoWireC1Ev>

00003d5a <__cxa_pure_virtual>:
    3d5a:	a7 d2       	rcall	.+1358   	; 0x42aa <abort>

00003d5c <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    3d5c:	08 95       	ret

00003d5e <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3d5e:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <twi_state>
    3d62:	81 e0       	ldi	r24, 0x01	; 1
    3d64:	80 93 13 08 	sts	0x0813, r24	; 0x800813 <twi_sendStop>
    3d68:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <twi_inRepStart>
    3d6c:	61 e0       	ldi	r22, 0x01	; 1
    3d6e:	84 e1       	ldi	r24, 0x14	; 20
    3d70:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    3d74:	61 e0       	ldi	r22, 0x01	; 1
    3d76:	85 e1       	ldi	r24, 0x15	; 21
    3d78:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <digitalWrite>
    3d7c:	e9 eb       	ldi	r30, 0xB9	; 185
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	80 81       	ld	r24, Z
    3d82:	8e 7f       	andi	r24, 0xFE	; 254
    3d84:	80 83       	st	Z, r24
    3d86:	80 81       	ld	r24, Z
    3d88:	8d 7f       	andi	r24, 0xFD	; 253
    3d8a:	80 83       	st	Z, r24
    3d8c:	88 e4       	ldi	r24, 0x48	; 72
    3d8e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    3d92:	85 e4       	ldi	r24, 0x45	; 69
    3d94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d98:	08 95       	ret

00003d9a <twi_readFrom>:
    3d9a:	41 32       	cpi	r20, 0x21	; 33
    3d9c:	08 f0       	brcs	.+2      	; 0x3da0 <twi_readFrom+0x6>
    3d9e:	43 c0       	rjmp	.+134    	; 0x3e26 <twi_readFrom+0x8c>
    3da0:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <twi_state>
    3da4:	91 11       	cpse	r25, r1
    3da6:	fc cf       	rjmp	.-8      	; 0x3da0 <twi_readFrom+0x6>
    3da8:	91 e0       	ldi	r25, 0x01	; 1
    3daa:	90 93 15 08 	sts	0x0815, r25	; 0x800815 <twi_state>
    3dae:	20 93 13 08 	sts	0x0813, r18	; 0x800813 <twi_sendStop>
    3db2:	2f ef       	ldi	r18, 0xFF	; 255
    3db4:	20 93 a8 07 	sts	0x07A8, r18	; 0x8007a8 <twi_error>
    3db8:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <twi_masterBufferIndex>
    3dbc:	24 0f       	add	r18, r20
    3dbe:	20 93 ec 07 	sts	0x07EC, r18	; 0x8007ec <twi_masterBufferLength>
    3dc2:	90 93 14 08 	sts	0x0814, r25	; 0x800814 <twi_slarw>
    3dc6:	90 91 14 08 	lds	r25, 0x0814	; 0x800814 <twi_slarw>
    3dca:	88 0f       	add	r24, r24
    3dcc:	89 2b       	or	r24, r25
    3dce:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <twi_slarw>
    3dd2:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <twi_inRepStart>
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	61 f4       	brne	.+24     	; 0x3df2 <twi_readFrom+0x58>
    3dda:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <twi_inRepStart>
    3dde:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <twi_slarw>
    3de2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3de6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3dea:	83 fd       	sbrc	r24, 3
    3dec:	f8 cf       	rjmp	.-16     	; 0x3dde <twi_readFrom+0x44>
    3dee:	85 ec       	ldi	r24, 0xC5	; 197
    3df0:	01 c0       	rjmp	.+2      	; 0x3df4 <twi_readFrom+0x5a>
    3df2:	85 ee       	ldi	r24, 0xE5	; 229
    3df4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3df8:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <twi_state>
    3dfc:	81 30       	cpi	r24, 0x01	; 1
    3dfe:	e1 f3       	breq	.-8      	; 0x3df8 <twi_readFrom+0x5e>
    3e00:	80 91 ed 07 	lds	r24, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    3e04:	84 17       	cp	r24, r20
    3e06:	10 f4       	brcc	.+4      	; 0x3e0c <twi_readFrom+0x72>
    3e08:	40 91 ed 07 	lds	r20, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    3e0c:	ae ee       	ldi	r26, 0xEE	; 238
    3e0e:	b7 e0       	ldi	r27, 0x07	; 7
    3e10:	96 2f       	mov	r25, r22
    3e12:	fb 01       	movw	r30, r22
    3e14:	8e 2f       	mov	r24, r30
    3e16:	89 1b       	sub	r24, r25
    3e18:	84 17       	cp	r24, r20
    3e1a:	18 f4       	brcc	.+6      	; 0x3e22 <twi_readFrom+0x88>
    3e1c:	8d 91       	ld	r24, X+
    3e1e:	81 93       	st	Z+, r24
    3e20:	f9 cf       	rjmp	.-14     	; 0x3e14 <twi_readFrom+0x7a>
    3e22:	84 2f       	mov	r24, r20
    3e24:	08 95       	ret
    3e26:	80 e0       	ldi	r24, 0x00	; 0
    3e28:	08 95       	ret

00003e2a <twi_writeTo>:
    3e2a:	0f 93       	push	r16
    3e2c:	41 32       	cpi	r20, 0x21	; 33
    3e2e:	08 f0       	brcs	.+2      	; 0x3e32 <twi_writeTo+0x8>
    3e30:	4a c0       	rjmp	.+148    	; 0x3ec6 <twi_writeTo+0x9c>
    3e32:	90 91 15 08 	lds	r25, 0x0815	; 0x800815 <twi_state>
    3e36:	91 11       	cpse	r25, r1
    3e38:	fc cf       	rjmp	.-8      	; 0x3e32 <twi_writeTo+0x8>
    3e3a:	32 e0       	ldi	r19, 0x02	; 2
    3e3c:	30 93 15 08 	sts	0x0815, r19	; 0x800815 <twi_state>
    3e40:	00 93 13 08 	sts	0x0813, r16	; 0x800813 <twi_sendStop>
    3e44:	3f ef       	ldi	r19, 0xFF	; 255
    3e46:	30 93 a8 07 	sts	0x07A8, r19	; 0x8007a8 <twi_error>
    3e4a:	10 92 ed 07 	sts	0x07ED, r1	; 0x8007ed <twi_masterBufferIndex>
    3e4e:	40 93 ec 07 	sts	0x07EC, r20	; 0x8007ec <twi_masterBufferLength>
    3e52:	56 2f       	mov	r21, r22
    3e54:	ae ee       	ldi	r26, 0xEE	; 238
    3e56:	b7 e0       	ldi	r27, 0x07	; 7
    3e58:	fb 01       	movw	r30, r22
    3e5a:	3e 2f       	mov	r19, r30
    3e5c:	35 1b       	sub	r19, r21
    3e5e:	34 17       	cp	r19, r20
    3e60:	18 f4       	brcc	.+6      	; 0x3e68 <twi_writeTo+0x3e>
    3e62:	31 91       	ld	r19, Z+
    3e64:	3d 93       	st	X+, r19
    3e66:	f9 cf       	rjmp	.-14     	; 0x3e5a <twi_writeTo+0x30>
    3e68:	10 92 14 08 	sts	0x0814, r1	; 0x800814 <twi_slarw>
    3e6c:	30 91 14 08 	lds	r19, 0x0814	; 0x800814 <twi_slarw>
    3e70:	88 0f       	add	r24, r24
    3e72:	83 2b       	or	r24, r19
    3e74:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <twi_slarw>
    3e78:	80 91 12 08 	lds	r24, 0x0812	; 0x800812 <twi_inRepStart>
    3e7c:	81 30       	cpi	r24, 0x01	; 1
    3e7e:	61 f4       	brne	.+24     	; 0x3e98 <twi_writeTo+0x6e>
    3e80:	10 92 12 08 	sts	0x0812, r1	; 0x800812 <twi_inRepStart>
    3e84:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <twi_slarw>
    3e88:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3e8c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3e90:	83 fd       	sbrc	r24, 3
    3e92:	f8 cf       	rjmp	.-16     	; 0x3e84 <twi_writeTo+0x5a>
    3e94:	85 ec       	ldi	r24, 0xC5	; 197
    3e96:	01 c0       	rjmp	.+2      	; 0x3e9a <twi_writeTo+0x70>
    3e98:	85 ee       	ldi	r24, 0xE5	; 229
    3e9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3e9e:	22 23       	and	r18, r18
    3ea0:	21 f0       	breq	.+8      	; 0x3eaa <twi_writeTo+0x80>
    3ea2:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <twi_state>
    3ea6:	82 30       	cpi	r24, 0x02	; 2
    3ea8:	d1 f3       	breq	.-12     	; 0x3e9e <twi_writeTo+0x74>
    3eaa:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <twi_error>
    3eae:	8f 3f       	cpi	r24, 0xFF	; 255
    3eb0:	79 f0       	breq	.+30     	; 0x3ed0 <twi_writeTo+0xa6>
    3eb2:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <twi_error>
    3eb6:	80 32       	cpi	r24, 0x20	; 32
    3eb8:	41 f0       	breq	.+16     	; 0x3eca <twi_writeTo+0xa0>
    3eba:	80 91 a8 07 	lds	r24, 0x07A8	; 0x8007a8 <twi_error>
    3ebe:	80 33       	cpi	r24, 0x30	; 48
    3ec0:	31 f0       	breq	.+12     	; 0x3ece <twi_writeTo+0xa4>
    3ec2:	94 e0       	ldi	r25, 0x04	; 4
    3ec4:	05 c0       	rjmp	.+10     	; 0x3ed0 <twi_writeTo+0xa6>
    3ec6:	91 e0       	ldi	r25, 0x01	; 1
    3ec8:	03 c0       	rjmp	.+6      	; 0x3ed0 <twi_writeTo+0xa6>
    3eca:	92 e0       	ldi	r25, 0x02	; 2
    3ecc:	01 c0       	rjmp	.+2      	; 0x3ed0 <twi_writeTo+0xa6>
    3ece:	93 e0       	ldi	r25, 0x03	; 3
    3ed0:	89 2f       	mov	r24, r25
    3ed2:	0f 91       	pop	r16
    3ed4:	08 95       	ret

00003ed6 <twi_transmit>:
    3ed6:	40 91 ca 07 	lds	r20, 0x07CA	; 0x8007ca <twi_txBufferLength>
    3eda:	26 2f       	mov	r18, r22
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	24 0f       	add	r18, r20
    3ee0:	31 1d       	adc	r19, r1
    3ee2:	21 32       	cpi	r18, 0x21	; 33
    3ee4:	31 05       	cpc	r19, r1
    3ee6:	dc f4       	brge	.+54     	; 0x3f1e <twi_transmit+0x48>
    3ee8:	20 91 15 08 	lds	r18, 0x0815	; 0x800815 <twi_state>
    3eec:	24 30       	cpi	r18, 0x04	; 4
    3eee:	c9 f4       	brne	.+50     	; 0x3f22 <twi_transmit+0x4c>
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	90 e0       	ldi	r25, 0x00	; 0
    3ef6:	86 17       	cp	r24, r22
    3ef8:	58 f4       	brcc	.+22     	; 0x3f10 <twi_transmit+0x3a>
    3efa:	30 91 ca 07 	lds	r19, 0x07CA	; 0x8007ca <twi_txBufferLength>
    3efe:	21 91       	ld	r18, Z+
    3f00:	dc 01       	movw	r26, r24
    3f02:	a4 53       	subi	r26, 0x34	; 52
    3f04:	b8 4f       	sbci	r27, 0xF8	; 248
    3f06:	a3 0f       	add	r26, r19
    3f08:	b1 1d       	adc	r27, r1
    3f0a:	2c 93       	st	X, r18
    3f0c:	01 96       	adiw	r24, 0x01	; 1
    3f0e:	f3 cf       	rjmp	.-26     	; 0x3ef6 <twi_transmit+0x20>
    3f10:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <twi_txBufferLength>
    3f14:	68 0f       	add	r22, r24
    3f16:	60 93 ca 07 	sts	0x07CA, r22	; 0x8007ca <twi_txBufferLength>
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	08 95       	ret
    3f1e:	81 e0       	ldi	r24, 0x01	; 1
    3f20:	08 95       	ret
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	08 95       	ret

00003f26 <twi_attachSlaveRxEvent>:
    3f26:	90 93 0f 08 	sts	0x080F, r25	; 0x80080f <twi_onSlaveReceive+0x1>
    3f2a:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <twi_onSlaveReceive>
    3f2e:	08 95       	ret

00003f30 <twi_attachSlaveTxEvent>:
    3f30:	90 93 11 08 	sts	0x0811, r25	; 0x800811 <twi_onSlaveTransmit+0x1>
    3f34:	80 93 10 08 	sts	0x0810, r24	; 0x800810 <twi_onSlaveTransmit>
    3f38:	08 95       	ret

00003f3a <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3f3a:	85 ed       	ldi	r24, 0xD5	; 213
    3f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3f40:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3f44:	84 fd       	sbrc	r24, 4
    3f46:	fc cf       	rjmp	.-8      	; 0x3f40 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3f48:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <twi_state>
    3f4c:	08 95       	ret

00003f4e <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3f4e:	85 ec       	ldi	r24, 0xC5	; 197
    3f50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    3f54:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <twi_state>
    3f58:	08 95       	ret

00003f5a <__vector_39>:
}

ISR(TWI_vect)
{
    3f5a:	1f 92       	push	r1
    3f5c:	0f 92       	push	r0
    3f5e:	0f b6       	in	r0, 0x3f	; 63
    3f60:	0f 92       	push	r0
    3f62:	11 24       	eor	r1, r1
    3f64:	0b b6       	in	r0, 0x3b	; 59
    3f66:	0f 92       	push	r0
    3f68:	2f 93       	push	r18
    3f6a:	3f 93       	push	r19
    3f6c:	4f 93       	push	r20
    3f6e:	5f 93       	push	r21
    3f70:	6f 93       	push	r22
    3f72:	7f 93       	push	r23
    3f74:	8f 93       	push	r24
    3f76:	9f 93       	push	r25
    3f78:	af 93       	push	r26
    3f7a:	bf 93       	push	r27
    3f7c:	ef 93       	push	r30
    3f7e:	ff 93       	push	r31
  switch(TW_STATUS){
    3f80:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3f84:	88 7f       	andi	r24, 0xF8	; 248
    3f86:	80 36       	cpi	r24, 0x60	; 96
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <__vector_39+0x32>
    3f8a:	9d c0       	rjmp	.+314    	; 0x40c6 <__vector_39+0x16c>
    3f8c:	70 f5       	brcc	.+92     	; 0x3fea <__vector_39+0x90>
    3f8e:	88 32       	cpi	r24, 0x28	; 40
    3f90:	09 f4       	brne	.+2      	; 0x3f94 <__vector_39+0x3a>
    3f92:	5c c0       	rjmp	.+184    	; 0x404c <__vector_39+0xf2>
    3f94:	90 f4       	brcc	.+36     	; 0x3fba <__vector_39+0x60>
    3f96:	80 31       	cpi	r24, 0x10	; 16
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <__vector_39+0x42>
    3f9a:	55 c0       	rjmp	.+170    	; 0x4046 <__vector_39+0xec>
    3f9c:	38 f4       	brcc	.+14     	; 0x3fac <__vector_39+0x52>
    3f9e:	88 23       	and	r24, r24
    3fa0:	09 f4       	brne	.+2      	; 0x3fa4 <__vector_39+0x4a>
    3fa2:	f3 c0       	rjmp	.+486    	; 0x418a <__vector_39+0x230>
    3fa4:	88 30       	cpi	r24, 0x08	; 8
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <__vector_39+0x50>
    3fa8:	4e c0       	rjmp	.+156    	; 0x4046 <__vector_39+0xec>
    3faa:	f2 c0       	rjmp	.+484    	; 0x4190 <__vector_39+0x236>
    3fac:	88 31       	cpi	r24, 0x18	; 24
    3fae:	09 f4       	brne	.+2      	; 0x3fb2 <__vector_39+0x58>
    3fb0:	4d c0       	rjmp	.+154    	; 0x404c <__vector_39+0xf2>
    3fb2:	80 32       	cpi	r24, 0x20	; 32
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <__vector_39+0x5e>
    3fb6:	5e c0       	rjmp	.+188    	; 0x4074 <__vector_39+0x11a>
    3fb8:	eb c0       	rjmp	.+470    	; 0x4190 <__vector_39+0x236>
    3fba:	80 34       	cpi	r24, 0x40	; 64
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <__vector_39+0x66>
    3fbe:	69 c0       	rjmp	.+210    	; 0x4092 <__vector_39+0x138>
    3fc0:	50 f4       	brcc	.+20     	; 0x3fd6 <__vector_39+0x7c>
    3fc2:	80 33       	cpi	r24, 0x30	; 48
    3fc4:	09 f4       	brne	.+2      	; 0x3fc8 <__vector_39+0x6e>
    3fc6:	56 c0       	rjmp	.+172    	; 0x4074 <__vector_39+0x11a>
    3fc8:	88 33       	cpi	r24, 0x38	; 56
    3fca:	09 f0       	breq	.+2      	; 0x3fce <__vector_39+0x74>
    3fcc:	e1 c0       	rjmp	.+450    	; 0x4190 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    3fce:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <twi_error>
      twi_releaseBus();
    3fd2:	bd df       	rcall	.-134    	; 0x3f4e <twi_releaseBus>
      break;
    3fd4:	dd c0       	rjmp	.+442    	; 0x4190 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3fd6:	80 35       	cpi	r24, 0x50	; 80
    3fd8:	09 f4       	brne	.+2      	; 0x3fdc <__vector_39+0x82>
    3fda:	4f c0       	rjmp	.+158    	; 0x407a <__vector_39+0x120>
    3fdc:	88 35       	cpi	r24, 0x58	; 88
    3fde:	09 f4       	brne	.+2      	; 0x3fe2 <__vector_39+0x88>
    3fe0:	5d c0       	rjmp	.+186    	; 0x409c <__vector_39+0x142>
    3fe2:	88 34       	cpi	r24, 0x48	; 72
    3fe4:	09 f0       	breq	.+2      	; 0x3fe8 <__vector_39+0x8e>
    3fe6:	d4 c0       	rjmp	.+424    	; 0x4190 <__vector_39+0x236>
    3fe8:	d2 c0       	rjmp	.+420    	; 0x418e <__vector_39+0x234>
    3fea:	88 39       	cpi	r24, 0x98	; 152
    3fec:	09 f4       	brne	.+2      	; 0x3ff0 <__vector_39+0x96>
    3fee:	c3 c0       	rjmp	.+390    	; 0x4176 <__vector_39+0x21c>
    3ff0:	a8 f4       	brcc	.+42     	; 0x401c <__vector_39+0xc2>
    3ff2:	88 37       	cpi	r24, 0x78	; 120
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <__vector_39+0x9e>
    3ff6:	67 c0       	rjmp	.+206    	; 0x40c6 <__vector_39+0x16c>
    3ff8:	38 f4       	brcc	.+14     	; 0x4008 <__vector_39+0xae>
    3ffa:	88 36       	cpi	r24, 0x68	; 104
    3ffc:	09 f4       	brne	.+2      	; 0x4000 <__vector_39+0xa6>
    3ffe:	63 c0       	rjmp	.+198    	; 0x40c6 <__vector_39+0x16c>
    4000:	80 37       	cpi	r24, 0x70	; 112
    4002:	09 f4       	brne	.+2      	; 0x4006 <__vector_39+0xac>
    4004:	60 c0       	rjmp	.+192    	; 0x40c6 <__vector_39+0x16c>
    4006:	c4 c0       	rjmp	.+392    	; 0x4190 <__vector_39+0x236>
    4008:	88 38       	cpi	r24, 0x88	; 136
    400a:	09 f4       	brne	.+2      	; 0x400e <__vector_39+0xb4>
    400c:	b4 c0       	rjmp	.+360    	; 0x4176 <__vector_39+0x21c>
    400e:	80 39       	cpi	r24, 0x90	; 144
    4010:	09 f4       	brne	.+2      	; 0x4014 <__vector_39+0xba>
    4012:	5f c0       	rjmp	.+190    	; 0x40d2 <__vector_39+0x178>
    4014:	80 38       	cpi	r24, 0x80	; 128
    4016:	09 f0       	breq	.+2      	; 0x401a <__vector_39+0xc0>
    4018:	bb c0       	rjmp	.+374    	; 0x4190 <__vector_39+0x236>
    401a:	5b c0       	rjmp	.+182    	; 0x40d2 <__vector_39+0x178>
    401c:	80 3b       	cpi	r24, 0xB0	; 176
    401e:	09 f4       	brne	.+2      	; 0x4022 <__vector_39+0xc8>
    4020:	82 c0       	rjmp	.+260    	; 0x4126 <__vector_39+0x1cc>
    4022:	38 f4       	brcc	.+14     	; 0x4032 <__vector_39+0xd8>
    4024:	80 3a       	cpi	r24, 0xA0	; 160
    4026:	09 f4       	brne	.+2      	; 0x402a <__vector_39+0xd0>
    4028:	66 c0       	rjmp	.+204    	; 0x40f6 <__vector_39+0x19c>
    402a:	88 3a       	cpi	r24, 0xA8	; 168
    402c:	09 f4       	brne	.+2      	; 0x4030 <__vector_39+0xd6>
    402e:	7b c0       	rjmp	.+246    	; 0x4126 <__vector_39+0x1cc>
    4030:	af c0       	rjmp	.+350    	; 0x4190 <__vector_39+0x236>
    4032:	80 3c       	cpi	r24, 0xC0	; 192
    4034:	09 f4       	brne	.+2      	; 0x4038 <__vector_39+0xde>
    4036:	a3 c0       	rjmp	.+326    	; 0x417e <__vector_39+0x224>
    4038:	88 3c       	cpi	r24, 0xC8	; 200
    403a:	09 f4       	brne	.+2      	; 0x403e <__vector_39+0xe4>
    403c:	a0 c0       	rjmp	.+320    	; 0x417e <__vector_39+0x224>
    403e:	88 3b       	cpi	r24, 0xB8	; 184
    4040:	09 f4       	brne	.+2      	; 0x4044 <__vector_39+0xea>
    4042:	86 c0       	rjmp	.+268    	; 0x4150 <__vector_39+0x1f6>
    4044:	a5 c0       	rjmp	.+330    	; 0x4190 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    4046:	80 91 14 08 	lds	r24, 0x0814	; 0x800814 <twi_slarw>
    404a:	10 c0       	rjmp	.+32     	; 0x406c <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    404c:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    4050:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <twi_masterBufferLength>
    4054:	98 17       	cp	r25, r24
    4056:	70 f5       	brcc	.+92     	; 0x40b4 <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    4058:	e0 91 ed 07 	lds	r30, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    405c:	81 e0       	ldi	r24, 0x01	; 1
    405e:	8e 0f       	add	r24, r30
    4060:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <twi_masterBufferIndex>
    4064:	f0 e0       	ldi	r31, 0x00	; 0
    4066:	e2 51       	subi	r30, 0x12	; 18
    4068:	f8 4f       	sbci	r31, 0xF8	; 248
    406a:	80 81       	ld	r24, Z
    406c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    4070:	85 ec       	ldi	r24, 0xC5	; 197
    4072:	82 c0       	rjmp	.+260    	; 0x4178 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    4074:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <twi_error>
    4078:	8a c0       	rjmp	.+276    	; 0x418e <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    407a:	e0 91 ed 07 	lds	r30, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    407e:	81 e0       	ldi	r24, 0x01	; 1
    4080:	8e 0f       	add	r24, r30
    4082:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <twi_masterBufferIndex>
    4086:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    408a:	f0 e0       	ldi	r31, 0x00	; 0
    408c:	e2 51       	subi	r30, 0x12	; 18
    408e:	f8 4f       	sbci	r31, 0xF8	; 248
    4090:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    4092:	90 91 ed 07 	lds	r25, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    4096:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <twi_masterBufferLength>
    409a:	6a c0       	rjmp	.+212    	; 0x4170 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    409c:	e0 91 ed 07 	lds	r30, 0x07ED	; 0x8007ed <twi_masterBufferIndex>
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	8e 0f       	add	r24, r30
    40a4:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <twi_masterBufferIndex>
    40a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	e2 51       	subi	r30, 0x12	; 18
    40b0:	f8 4f       	sbci	r31, 0xF8	; 248
    40b2:	80 83       	st	Z, r24
	if (twi_sendStop)
    40b4:	80 91 13 08 	lds	r24, 0x0813	; 0x800813 <twi_sendStop>
    40b8:	81 11       	cpse	r24, r1
    40ba:	69 c0       	rjmp	.+210    	; 0x418e <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	80 93 12 08 	sts	0x0812, r24	; 0x800812 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    40c2:	84 ea       	ldi	r24, 0xA4	; 164
    40c4:	5d c0       	rjmp	.+186    	; 0x4180 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    40c6:	83 e0       	ldi	r24, 0x03	; 3
    40c8:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    40cc:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <twi_rxBufferIndex>
    40d0:	cf cf       	rjmp	.-98     	; 0x4070 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    40d2:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <twi_rxBufferIndex>
    40d6:	80 32       	cpi	r24, 0x20	; 32
    40d8:	08 f0       	brcs	.+2      	; 0x40dc <__vector_39+0x182>
    40da:	4d c0       	rjmp	.+154    	; 0x4176 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    40dc:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <twi_rxBufferIndex>
    40e0:	81 e0       	ldi	r24, 0x01	; 1
    40e2:	8e 0f       	add	r24, r30
    40e4:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <twi_rxBufferIndex>
    40e8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	e6 55       	subi	r30, 0x56	; 86
    40f0:	f8 4f       	sbci	r31, 0xF8	; 248
    40f2:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    40f4:	bd cf       	rjmp	.-134    	; 0x4070 <__vector_39+0x116>
    40f6:	2b df       	rcall	.-426    	; 0x3f4e <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    40f8:	80 91 a9 07 	lds	r24, 0x07A9	; 0x8007a9 <twi_rxBufferIndex>
    40fc:	80 32       	cpi	r24, 0x20	; 32
    40fe:	30 f4       	brcc	.+12     	; 0x410c <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    4100:	e0 91 a9 07 	lds	r30, 0x07A9	; 0x8007a9 <twi_rxBufferIndex>
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	e6 55       	subi	r30, 0x56	; 86
    4108:	f8 4f       	sbci	r31, 0xF8	; 248
    410a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    410c:	60 91 a9 07 	lds	r22, 0x07A9	; 0x8007a9 <twi_rxBufferIndex>
    4110:	70 e0       	ldi	r23, 0x00	; 0
    4112:	e0 91 0e 08 	lds	r30, 0x080E	; 0x80080e <twi_onSlaveReceive>
    4116:	f0 91 0f 08 	lds	r31, 0x080F	; 0x80080f <twi_onSlaveReceive+0x1>
    411a:	8a ea       	ldi	r24, 0xAA	; 170
    411c:	97 e0       	ldi	r25, 0x07	; 7
    411e:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    4120:	10 92 a9 07 	sts	0x07A9, r1	; 0x8007a9 <twi_rxBufferIndex>
      break;
    4124:	35 c0       	rjmp	.+106    	; 0x4190 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    4126:	84 e0       	ldi	r24, 0x04	; 4
    4128:	80 93 15 08 	sts	0x0815, r24	; 0x800815 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    412c:	10 92 cb 07 	sts	0x07CB, r1	; 0x8007cb <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    4130:	10 92 ca 07 	sts	0x07CA, r1	; 0x8007ca <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    4134:	e0 91 10 08 	lds	r30, 0x0810	; 0x800810 <twi_onSlaveTransmit>
    4138:	f0 91 11 08 	lds	r31, 0x0811	; 0x800811 <twi_onSlaveTransmit+0x1>
    413c:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    413e:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <twi_txBufferLength>
    4142:	81 11       	cpse	r24, r1
    4144:	05 c0       	rjmp	.+10     	; 0x4150 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	80 93 ca 07 	sts	0x07CA, r24	; 0x8007ca <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    414c:	10 92 cc 07 	sts	0x07CC, r1	; 0x8007cc <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    4150:	e0 91 cb 07 	lds	r30, 0x07CB	; 0x8007cb <twi_txBufferIndex>
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	8e 0f       	add	r24, r30
    4158:	80 93 cb 07 	sts	0x07CB, r24	; 0x8007cb <twi_txBufferIndex>
    415c:	f0 e0       	ldi	r31, 0x00	; 0
    415e:	e4 53       	subi	r30, 0x34	; 52
    4160:	f8 4f       	sbci	r31, 0xF8	; 248
    4162:	80 81       	ld	r24, Z
    4164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    4168:	90 91 cb 07 	lds	r25, 0x07CB	; 0x8007cb <twi_txBufferIndex>
    416c:	80 91 ca 07 	lds	r24, 0x07CA	; 0x8007ca <twi_txBufferLength>
    4170:	98 17       	cp	r25, r24
    4172:	08 f4       	brcc	.+2      	; 0x4176 <__vector_39+0x21c>
    4174:	7d cf       	rjmp	.-262    	; 0x4070 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    4176:	85 e8       	ldi	r24, 0x85	; 133
    4178:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    417c:	09 c0       	rjmp	.+18     	; 0x4190 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    417e:	85 ec       	ldi	r24, 0xC5	; 197
    4180:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    4184:	10 92 15 08 	sts	0x0815, r1	; 0x800815 <twi_state>
      break;
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    418a:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <twi_error>
      twi_stop();
    418e:	d5 de       	rcall	.-598    	; 0x3f3a <twi_stop>
      break;
  }
}
    4190:	ff 91       	pop	r31
    4192:	ef 91       	pop	r30
    4194:	bf 91       	pop	r27
    4196:	af 91       	pop	r26
    4198:	9f 91       	pop	r25
    419a:	8f 91       	pop	r24
    419c:	7f 91       	pop	r23
    419e:	6f 91       	pop	r22
    41a0:	5f 91       	pop	r21
    41a2:	4f 91       	pop	r20
    41a4:	3f 91       	pop	r19
    41a6:	2f 91       	pop	r18
    41a8:	0f 90       	pop	r0
    41aa:	0b be       	out	0x3b, r0	; 59
    41ac:	0f 90       	pop	r0
    41ae:	0f be       	out	0x3f, r0	; 63
    41b0:	0f 90       	pop	r0
    41b2:	1f 90       	pop	r1
    41b4:	18 95       	reti

000041b6 <__mulsi3>:
    41b6:	db 01       	movw	r26, r22
    41b8:	8f 93       	push	r24
    41ba:	9f 93       	push	r25
    41bc:	6c d0       	rcall	.+216    	; 0x4296 <__muluhisi3>
    41be:	bf 91       	pop	r27
    41c0:	af 91       	pop	r26
    41c2:	a2 9f       	mul	r26, r18
    41c4:	80 0d       	add	r24, r0
    41c6:	91 1d       	adc	r25, r1
    41c8:	a3 9f       	mul	r26, r19
    41ca:	90 0d       	add	r25, r0
    41cc:	b2 9f       	mul	r27, r18
    41ce:	90 0d       	add	r25, r0
    41d0:	11 24       	eor	r1, r1
    41d2:	08 95       	ret

000041d4 <__udivmodsi4>:
    41d4:	a1 e2       	ldi	r26, 0x21	; 33
    41d6:	1a 2e       	mov	r1, r26
    41d8:	aa 1b       	sub	r26, r26
    41da:	bb 1b       	sub	r27, r27
    41dc:	fd 01       	movw	r30, r26
    41de:	0d c0       	rjmp	.+26     	; 0x41fa <__udivmodsi4_ep>

000041e0 <__udivmodsi4_loop>:
    41e0:	aa 1f       	adc	r26, r26
    41e2:	bb 1f       	adc	r27, r27
    41e4:	ee 1f       	adc	r30, r30
    41e6:	ff 1f       	adc	r31, r31
    41e8:	a2 17       	cp	r26, r18
    41ea:	b3 07       	cpc	r27, r19
    41ec:	e4 07       	cpc	r30, r20
    41ee:	f5 07       	cpc	r31, r21
    41f0:	20 f0       	brcs	.+8      	; 0x41fa <__udivmodsi4_ep>
    41f2:	a2 1b       	sub	r26, r18
    41f4:	b3 0b       	sbc	r27, r19
    41f6:	e4 0b       	sbc	r30, r20
    41f8:	f5 0b       	sbc	r31, r21

000041fa <__udivmodsi4_ep>:
    41fa:	66 1f       	adc	r22, r22
    41fc:	77 1f       	adc	r23, r23
    41fe:	88 1f       	adc	r24, r24
    4200:	99 1f       	adc	r25, r25
    4202:	1a 94       	dec	r1
    4204:	69 f7       	brne	.-38     	; 0x41e0 <__udivmodsi4_loop>
    4206:	60 95       	com	r22
    4208:	70 95       	com	r23
    420a:	80 95       	com	r24
    420c:	90 95       	com	r25
    420e:	9b 01       	movw	r18, r22
    4210:	ac 01       	movw	r20, r24
    4212:	bd 01       	movw	r22, r26
    4214:	cf 01       	movw	r24, r30
    4216:	08 95       	ret

00004218 <__divmodsi4>:
    4218:	05 2e       	mov	r0, r21
    421a:	97 fb       	bst	r25, 7
    421c:	16 f4       	brtc	.+4      	; 0x4222 <__divmodsi4+0xa>
    421e:	00 94       	com	r0
    4220:	0f d0       	rcall	.+30     	; 0x4240 <__negsi2>
    4222:	57 fd       	sbrc	r21, 7
    4224:	05 d0       	rcall	.+10     	; 0x4230 <__divmodsi4_neg2>
    4226:	d6 df       	rcall	.-84     	; 0x41d4 <__udivmodsi4>
    4228:	07 fc       	sbrc	r0, 7
    422a:	02 d0       	rcall	.+4      	; 0x4230 <__divmodsi4_neg2>
    422c:	46 f4       	brtc	.+16     	; 0x423e <__divmodsi4_exit>
    422e:	08 c0       	rjmp	.+16     	; 0x4240 <__negsi2>

00004230 <__divmodsi4_neg2>:
    4230:	50 95       	com	r21
    4232:	40 95       	com	r20
    4234:	30 95       	com	r19
    4236:	21 95       	neg	r18
    4238:	3f 4f       	sbci	r19, 0xFF	; 255
    423a:	4f 4f       	sbci	r20, 0xFF	; 255
    423c:	5f 4f       	sbci	r21, 0xFF	; 255

0000423e <__divmodsi4_exit>:
    423e:	08 95       	ret

00004240 <__negsi2>:
    4240:	90 95       	com	r25
    4242:	80 95       	com	r24
    4244:	70 95       	com	r23
    4246:	61 95       	neg	r22
    4248:	7f 4f       	sbci	r23, 0xFF	; 255
    424a:	8f 4f       	sbci	r24, 0xFF	; 255
    424c:	9f 4f       	sbci	r25, 0xFF	; 255
    424e:	08 95       	ret

00004250 <__tablejump2__>:
    4250:	ee 0f       	add	r30, r30
    4252:	ff 1f       	adc	r31, r31
    4254:	88 1f       	adc	r24, r24
    4256:	8b bf       	out	0x3b, r24	; 59
    4258:	07 90       	elpm	r0, Z+
    425a:	f6 91       	elpm	r31, Z
    425c:	e0 2d       	mov	r30, r0
    425e:	19 94       	eijmp

00004260 <__mulhisi3>:
    4260:	05 d0       	rcall	.+10     	; 0x426c <__umulhisi3>
    4262:	33 23       	and	r19, r19
    4264:	12 f4       	brpl	.+4      	; 0x426a <__mulhisi3+0xa>
    4266:	8a 1b       	sub	r24, r26
    4268:	9b 0b       	sbc	r25, r27
    426a:	10 c0       	rjmp	.+32     	; 0x428c <__usmulhisi3_tail>

0000426c <__umulhisi3>:
    426c:	a2 9f       	mul	r26, r18
    426e:	b0 01       	movw	r22, r0
    4270:	b3 9f       	mul	r27, r19
    4272:	c0 01       	movw	r24, r0
    4274:	a3 9f       	mul	r26, r19
    4276:	70 0d       	add	r23, r0
    4278:	81 1d       	adc	r24, r1
    427a:	11 24       	eor	r1, r1
    427c:	91 1d       	adc	r25, r1
    427e:	b2 9f       	mul	r27, r18
    4280:	70 0d       	add	r23, r0
    4282:	81 1d       	adc	r24, r1
    4284:	11 24       	eor	r1, r1
    4286:	91 1d       	adc	r25, r1
    4288:	08 95       	ret

0000428a <__usmulhisi3>:
    428a:	f0 df       	rcall	.-32     	; 0x426c <__umulhisi3>

0000428c <__usmulhisi3_tail>:
    428c:	b7 ff       	sbrs	r27, 7
    428e:	08 95       	ret
    4290:	82 1b       	sub	r24, r18
    4292:	93 0b       	sbc	r25, r19
    4294:	08 95       	ret

00004296 <__muluhisi3>:
    4296:	ea df       	rcall	.-44     	; 0x426c <__umulhisi3>
    4298:	a5 9f       	mul	r26, r21
    429a:	90 0d       	add	r25, r0
    429c:	b4 9f       	mul	r27, r20
    429e:	90 0d       	add	r25, r0
    42a0:	a4 9f       	mul	r26, r20
    42a2:	80 0d       	add	r24, r0
    42a4:	91 1d       	adc	r25, r1
    42a6:	11 24       	eor	r1, r1
    42a8:	08 95       	ret

000042aa <abort>:
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	90 e0       	ldi	r25, 0x00	; 0
    42ae:	f8 94       	cli
    42b0:	00 c0       	rjmp	.+0      	; 0x42b2 <_exit>

000042b2 <_exit>:
    42b2:	f8 94       	cli

000042b4 <__stop_program>:
    42b4:	ff cf       	rjmp	.-2      	; 0x42b4 <__stop_program>
