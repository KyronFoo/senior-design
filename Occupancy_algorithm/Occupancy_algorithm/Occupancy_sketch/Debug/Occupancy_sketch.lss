
Occupancy_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800200  00003dae  00003e42  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003dae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002da  00800342  00800342  00003f84  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a88  00000000  00000000  00003ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001e72d  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004a71  00000000  00000000  000231a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070fe  00000000  00000000  00027c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002dec  00000000  00000000  0002ed18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00005e2c  00000000  00000000  00031b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00015a72  00000000  00000000  00037930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d00  00000000  00000000  0004d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	a3 c3       	rjmp	.+1862   	; 0x748 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c3       	rjmp	.+1954   	; 0x7a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c3       	rjmp	.+1950   	; 0x7a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c3       	rjmp	.+1946   	; 0x7a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c3       	rjmp	.+1942   	; 0x7a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c3       	rjmp	.+1938   	; 0x7a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c3       	rjmp	.+1934   	; 0x7a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c3       	rjmp	.+1930   	; 0x7a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c3       	rjmp	.+1926   	; 0x7a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c3       	rjmp	.+1922   	; 0x7a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c3       	rjmp	.+1918   	; 0x7a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c3       	rjmp	.+1914   	; 0x7a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	bb c3       	rjmp	.+1910   	; 0x7a8 <__bad_interrupt>
      32:	00 00       	nop
      34:	b9 c3       	rjmp	.+1906   	; 0x7a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c3       	rjmp	.+1902   	; 0x7a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c3       	rjmp	.+1898   	; 0x7a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c3       	rjmp	.+1894   	; 0x7a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c3       	rjmp	.+1890   	; 0x7a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c3       	rjmp	.+1886   	; 0x7a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c3       	rjmp	.+1882   	; 0x7a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c3       	rjmp	.+1878   	; 0x7a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c3       	rjmp	.+1874   	; 0x7a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c3       	rjmp	.+1870   	; 0x7a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__vector_23>
      60:	a3 c3       	rjmp	.+1862   	; 0x7a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	d7 c6       	rjmp	.+3502   	; 0xe14 <__vector_25>
      66:	00 00       	nop
      68:	0b c7       	rjmp	.+3606   	; 0xe80 <__vector_26>
      6a:	00 00       	nop
      6c:	9d c3       	rjmp	.+1850   	; 0x7a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c3       	rjmp	.+1846   	; 0x7a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c3       	rjmp	.+1842   	; 0x7a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c3       	rjmp	.+1838   	; 0x7a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c3       	rjmp	.+1834   	; 0x7a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c3       	rjmp	.+1830   	; 0x7a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c3       	rjmp	.+1826   	; 0x7a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c3       	rjmp	.+1822   	; 0x7a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c3       	rjmp	.+1818   	; 0x7a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c3       	rjmp	.+1814   	; 0x7a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	89 c3       	rjmp	.+1810   	; 0x7a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	87 c3       	rjmp	.+1806   	; 0x7a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__vector_39>
      a0:	83 c3       	rjmp	.+1798   	; 0x7a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c3       	rjmp	.+1794   	; 0x7a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7f c3       	rjmp	.+1790   	; 0x7a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7d c3       	rjmp	.+1786   	; 0x7a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c3       	rjmp	.+1782   	; 0x7a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c3       	rjmp	.+1778   	; 0x7a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c3       	rjmp	.+1774   	; 0x7a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	75 c3       	rjmp	.+1770   	; 0x7a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	73 c3       	rjmp	.+1766   	; 0x7a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c3       	rjmp	.+1762   	; 0x7a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c3       	rjmp	.+1758   	; 0x7a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6d c3       	rjmp	.+1754   	; 0x7a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6b c3       	rjmp	.+1750   	; 0x7a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	69 c3       	rjmp	.+1746   	; 0x7a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	67 c3       	rjmp	.+1742   	; 0x7a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	65 c3       	rjmp	.+1738   	; 0x7a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	63 c3       	rjmp	.+1734   	; 0x7a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	60 09       	sbc	r22, r0
      e6:	63 09       	sbc	r22, r3
      e8:	52 09       	sbc	r21, r2
      ea:	56 09       	sbc	r21, r6
      ec:	5c 09       	sbc	r21, r12
      ee:	9a 09       	sbc	r25, r10
      f0:	67 09       	sbc	r22, r7
      f2:	6b 09       	sbc	r22, r11
      f4:	71 09       	sbc	r23, r1
      f6:	75 09       	sbc	r23, r5
      f8:	79 09       	sbc	r23, r9
      fa:	7f 09       	sbc	r23, r15
      fc:	83 09       	sbc	r24, r3
      fe:	87 09       	sbc	r24, r7
     100:	9a 09       	sbc	r25, r10
     102:	8d 09       	sbc	r24, r13
     104:	91 09       	sbc	r25, r1
     106:	95 09       	sbc	r25, r5

00000108 <__trampolines_end>:
     108:	41 4d       	sbci	r20, 0xD1	; 209
     10a:	47 38       	cpi	r20, 0x87	; 135
     10c:	38 78       	andi	r19, 0x88	; 136
     10e:	78 20       	and	r7, r8
     110:	74 68       	ori	r23, 0x84	; 132
     112:	65 72       	andi	r22, 0x25	; 37
     114:	6d 61       	ori	r22, 0x1D	; 29
     116:	6c 20       	and	r6, r12
     118:	63 61       	ori	r22, 0x13	; 19
     11a:	6d 65       	ori	r22, 0x5D	; 93
     11c:	72 61       	ori	r23, 0x12	; 18
     11e:	21 00       	.word	0x0021	; ????

00000120 <digital_pin_to_timer_PGM>:
     120:	00 00 0a 0b 02 09 0c 0d 0e 08 07 03 04 01 00 00     ................
	...
     14c:	12 11 10 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00000166 <digital_pin_to_bit_mask_PGM>:
     166:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     176:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     186:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     196:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     1a6:	04 08 10 20 40 80                                   ... @.

000001ac <digital_pin_to_port_PGM>:
     1ac:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1bc:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1cc:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1dc:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1ec:	0b 0b 0b 0b 0b 0b                                   ......

000001f2 <port_to_input_PGM>:
     1f2:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     202:	00 01 00 00 03 01 06 01 09 01                       ..........

0000020c <port_to_output_PGM>:
     20c:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     21c:	02 01 00 00 05 01 08 01 0b 01                       ..........

00000226 <port_to_mode_PGM>:
     226:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     236:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000240 <_ZL4font>:
     240:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     250:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     260:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     270:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     280:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     290:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     2a0:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     2b0:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     2c0:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     2d0:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     2e0:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     2f0:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     300:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     310:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     320:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     330:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     340:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     350:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     360:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     370:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     380:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     390:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     3a0:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     3b0:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     3c0:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     3d0:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     3e0:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     3f0:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     400:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     410:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     420:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     430:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     440:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     450:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     460:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     470:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     480:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     490:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     4a0:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     4b0:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     4c0:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     4d0:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     4e0:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     4f0:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     500:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     510:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     520:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     530:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     540:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     550:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     560:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     570:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     580:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     590:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     5a0:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     5b0:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     5c0:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     5d0:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     5e0:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     5f0:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     600:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     610:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     620:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     630:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     640:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     650:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     660:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     670:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     680:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     690:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     6a0:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     6b0:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     6c0:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     6d0:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     6e0:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     6f0:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     700:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     710:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     720:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     730:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000740 <__ctors_start>:
     740:	3b 04       	cpc	r3, r11
     742:	d4 04       	cpc	r13, r4
     744:	72 07       	cpc	r23, r18
     746:	b6 0e       	add	r11, r22

00000748 <__ctors_end>:
     748:	11 24       	eor	r1, r1
     74a:	1f be       	out	0x3f, r1	; 63
     74c:	cf ef       	ldi	r28, 0xFF	; 255
     74e:	d1 e2       	ldi	r29, 0x21	; 33
     750:	de bf       	out	0x3e, r29	; 62
     752:	cd bf       	out	0x3d, r28	; 61
     754:	00 e0       	ldi	r16, 0x00	; 0
     756:	0c bf       	out	0x3c, r16	; 60

00000758 <__do_copy_data>:
     758:	13 e0       	ldi	r17, 0x03	; 3
     75a:	a0 e0       	ldi	r26, 0x00	; 0
     75c:	b2 e0       	ldi	r27, 0x02	; 2
     75e:	ee ea       	ldi	r30, 0xAE	; 174
     760:	fd e3       	ldi	r31, 0x3D	; 61
     762:	00 e0       	ldi	r16, 0x00	; 0
     764:	0b bf       	out	0x3b, r16	; 59
     766:	02 c0       	rjmp	.+4      	; 0x76c <__do_copy_data+0x14>
     768:	07 90       	elpm	r0, Z+
     76a:	0d 92       	st	X+, r0
     76c:	a2 34       	cpi	r26, 0x42	; 66
     76e:	b1 07       	cpc	r27, r17
     770:	d9 f7       	brne	.-10     	; 0x768 <__do_copy_data+0x10>

00000772 <__do_clear_bss>:
     772:	26 e0       	ldi	r18, 0x06	; 6
     774:	a2 e4       	ldi	r26, 0x42	; 66
     776:	b3 e0       	ldi	r27, 0x03	; 3
     778:	01 c0       	rjmp	.+2      	; 0x77c <.do_clear_bss_start>

0000077a <.do_clear_bss_loop>:
     77a:	1d 92       	st	X+, r1

0000077c <.do_clear_bss_start>:
     77c:	ac 31       	cpi	r26, 0x1C	; 28
     77e:	b2 07       	cpc	r27, r18
     780:	e1 f7       	brne	.-8      	; 0x77a <.do_clear_bss_loop>

00000782 <__do_global_ctors>:
     782:	13 e0       	ldi	r17, 0x03	; 3
     784:	c4 ea       	ldi	r28, 0xA4	; 164
     786:	d3 e0       	ldi	r29, 0x03	; 3
     788:	00 e0       	ldi	r16, 0x00	; 0
     78a:	06 c0       	rjmp	.+12     	; 0x798 <__do_global_ctors+0x16>
     78c:	21 97       	sbiw	r28, 0x01	; 1
     78e:	01 09       	sbc	r16, r1
     790:	80 2f       	mov	r24, r16
     792:	fe 01       	movw	r30, r28
     794:	0e 94 9a 1e 	call	0x3d34	; 0x3d34 <__tablejump2__>
     798:	c0 3a       	cpi	r28, 0xA0	; 160
     79a:	d1 07       	cpc	r29, r17
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	08 07       	cpc	r16, r24
     7a0:	a9 f7       	brne	.-22     	; 0x78c <__do_global_ctors+0xa>
     7a2:	ce d3       	rcall	.+1948   	; 0xf40 <main>
     7a4:	0c 94 d5 1e 	jmp	0x3daa	; 0x3daa <_exit>

000007a8 <__bad_interrupt>:
     7a8:	2b cc       	rjmp	.-1962   	; 0x0 <__vectors>

000007aa <setup>:
	// put your setup code here, to run once:

	//Serial.begin(9600);
	//Serial.println(F("AMG88xx thermal camera!"));

	pinMode(PIR_read_pin, INPUT);
     7aa:	60 e0       	ldi	r22, 0x00	; 0
     7ac:	8f e1       	ldi	r24, 0x1F	; 31
     7ae:	c3 d5       	rcall	.+2950   	; 0x1336 <pinMode>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     7b0:	26 e0       	ldi	r18, 0x06	; 6
     7b2:	40 e8       	ldi	r20, 0x80	; 128
     7b4:	55 e2       	ldi	r21, 0x25	; 37
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	8d ea       	ldi	r24, 0xAD	; 173
     7bc:	94 e0       	ldi	r25, 0x04	; 4
     7be:	c1 d2       	rcall	.+1410   	; 0xd42 <_ZN14HardwareSerial5beginEmh>
	
	Serial.begin(9600);
	Serial.println(F("AMG88xx thermal camera!"));
     7c0:	68 e0       	ldi	r22, 0x08	; 8
     7c2:	71 e0       	ldi	r23, 0x01	; 1
     7c4:	8d ea       	ldi	r24, 0xAD	; 173
     7c6:	94 e0       	ldi	r25, 0x04	; 4

	Thermal_setup();
     7c8:	2b d4       	rcall	.+2134   	; 0x1020 <_ZN5Print7printlnEPK19__FlashStringHelper>
     7ca:	66 c0       	rjmp	.+204    	; 0x898 <_Z13Thermal_setupv>

000007cc <_Z16Ping_calibrationv>:
	//}
	/*end testing code*/
	
}

int Ping_calibration(){
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ca e0       	ldi	r28, 0x0A	; 10
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
	int Sample_size = 10;
	int Reading;
	
	for (int i = 0; i < Sample_size ; i++)
	{
		Reading += hcsr04.distanceInMillimeters();
     7d8:	8e e4       	ldi	r24, 0x4E	; 78
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN6HCSR0421distanceInMillimetersEv>
     7e0:	08 0f       	add	r16, r24
     7e2:	19 1f       	adc	r17, r25
     7e4:	21 97       	sbiw	r28, 0x01	; 1

int Ping_calibration(){
	int Sample_size = 10;
	int Reading;
	
	for (int i = 0; i < Sample_size ; i++)
     7e6:	c1 f7       	brne	.-16     	; 0x7d8 <_Z16Ping_calibrationv+0xc>
		Reading += hcsr04.distanceInMillimeters();
	}
	
	Reading = Reading/Sample_size;
	
	return Reading; 
     7e8:	c8 01       	movw	r24, r16
     7ea:	6a e0       	ldi	r22, 0x0A	; 10
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	0e 94 65 1e 	call	0x3cca	; 0x3cca <__divmodhi4>
     7f2:	cb 01       	movw	r24, r22
	
};
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	08 95       	ret

000007fe <_Z15Occupant_detect6states>:

int Occupant_detect(states State){
     7fe:	cf 93       	push	r28
     800:	c8 2f       	mov	r28, r24
	Distance = hcsr04.distanceInMillimeters();
     802:	8e e4       	ldi	r24, 0x4E	; 78
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	0e 94 23 0d 	call	0x1a46	; 0x1a46 <_ZN6HCSR0421distanceInMillimetersEv>
     80a:	90 93 47 03 	sts	0x0347, r25	; 0x800347 <Distance+0x1>
     80e:	80 93 46 03 	sts	0x0346, r24	; 0x800346 <Distance>
	PIR = digitalRead(PIR_read_pin);
     812:	8f e1       	ldi	r24, 0x1F	; 31
     814:	fa d5       	rcall	.+3060   	; 0x140a <digitalRead>
     816:	90 93 45 03 	sts	0x0345, r25	; 0x800345 <PIR+0x1>
     81a:	80 93 44 03 	sts	0x0344, r24	; 0x800344 <PIR>
	Seat_load = 1; // hard coded for positive reading, to be backed by logic when module is designed
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 43 03 	sts	0x0343, r25	; 0x800343 <__data_end+0x1>
     826:	80 93 42 03 	sts	0x0342, r24	; 0x800342 <__data_end>
	Thermal_parsed = Thermal_read();
     82a:	4d d0       	rcall	.+154    	; 0x8c6 <_Z12Thermal_readv>
     82c:	20 93 48 03 	sts	0x0348, r18	; 0x800348 <Thermal_parsed>
     830:	30 93 49 03 	sts	0x0349, r19	; 0x800349 <Thermal_parsed+0x1>
     834:	40 93 4a 03 	sts	0x034A, r20	; 0x80034a <Thermal_parsed+0x2>
     838:	50 93 4b 03 	sts	0x034B, r21	; 0x80034b <Thermal_parsed+0x3>
     83c:	60 93 4c 03 	sts	0x034C, r22	; 0x80034c <Thermal_parsed+0x4>
     840:	70 93 4d 03 	sts	0x034D, r23	; 0x80034d <Thermal_parsed+0x5>
	int Object;
	int IR;
	
	int Object_size = Seat_Distance - Distance;
	
	switch (State) //Need to add in CO states
     844:	c7 30       	cpi	r28, 0x07	; 7
     846:	08 f0       	brcs	.+2      	; 0x84a <_Z15Occupant_detect6states+0x4c>
		break;
		
		default:
		break;
	}
} 
     848:	02 c0       	rjmp	.+4      	; 0x84e <_Z15Occupant_detect6states+0x50>
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <loop>:

//int Print_delay = 0;

void loop() {	

	switch (State)
     852:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
     856:	82 30       	cpi	r24, 0x02	; 2
     858:	68 f0       	brcs	.+26     	; 0x874 <loop+0x22>
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	49 f4       	brne	.+18     	; 0x870 <loop+0x1e>
		/*check for sun*/
		
		break;
		
		case TH0:
		if (!Occupant_detect(State)){
     85e:	cf df       	rcall	.-98     	; 0x7fe <_Z15Occupant_detect6states>
     860:	89 2b       	or	r24, r25
     862:	41 f4       	brne	.+16     	; 0x874 <loop+0x22>
			/*Calibrate Ping sensor*/
			Seat_Distance = Ping_calibration(); 	
     864:	b3 df       	rcall	.-154    	; 0x7cc <_Z16Ping_calibrationv>
     866:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <Seat_Distance+0x1>
     86a:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <Seat_Distance>
     86e:	08 95       	ret
     870:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
		}
				
		break;
		
		default:
		State = Running;
     874:	08 95       	ret

00000876 <_GLOBAL__sub_I_hcsr04>:
     876:	0f 93       	push	r16
		break;
		
		default:
		break;
	}
} 
     878:	1f 93       	push	r17
﻿#include <Arduino.h>
#include "Sketch.h"

HCSR04 hcsr04(TRIG_PIN, ECHO_PIN, 20, 4000); //setup ping sensor
     87a:	00 ea       	ldi	r16, 0xA0	; 160
     87c:	1f e0       	ldi	r17, 0x0F	; 15
     87e:	24 e1       	ldi	r18, 0x14	; 20
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	4b e1       	ldi	r20, 0x1B	; 27
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	6d e1       	ldi	r22, 0x1D	; 29
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	8e e4       	ldi	r24, 0x4E	; 78
     88c:	93 e0       	ldi	r25, 0x03	; 3
     88e:	0e 94 c8 0c 	call	0x1990	; 0x1990 <_ZN6HCSR04C1Eiiii>
		break;
		
		default:
		break;
	}
} 
     892:	1f 91       	pop	r17
     894:	0f 91       	pop	r16
     896:	08 95       	ret

00000898 <_Z13Thermal_setupv>:
	//tft.setRotation(3);
	
	bool status;
	
	// default settings
	status = amg.begin();
     898:	69 e6       	ldi	r22, 0x69	; 105
     89a:	86 e5       	ldi	r24, 0x56	; 86
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	20 d6       	rcall	.+3136   	; 0x14e0 <_ZN16Adafruit_AMG88xx5beginEh>
	if (!status) {
     8a0:	81 11       	cpse	r24, r1
     8a2:	06 c0       	rjmp	.+12     	; 0x8b0 <_Z13Thermal_setupv+0x18>
		Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
     8a4:	63 e0       	ldi	r22, 0x03	; 3
     8a6:	72 e0       	ldi	r23, 0x02	; 2
     8a8:	8d ea       	ldi	r24, 0xAD	; 173
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	c9 d3       	rcall	.+1938   	; 0x1040 <_ZN5Print7printlnEPKc>
     8ae:	ff cf       	rjmp	.-2      	; 0x8ae <_Z13Thermal_setupv+0x16>
		while (1);
	}
	
	Serial.println("-- Thermal Camera Test --");
     8b0:	68 e3       	ldi	r22, 0x38	; 56
     8b2:	72 e0       	ldi	r23, 0x02	; 2
     8b4:	8d ea       	ldi	r24, 0xAD	; 173
     8b6:	94 e0       	ldi	r25, 0x04	; 4
     8b8:	c3 d3       	rcall	.+1926   	; 0x1040 <_ZN5Print7printlnEPKc>
	delay(100); // let sensor boot up
     8ba:	64 e6       	ldi	r22, 0x64	; 100
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	3d c4       	rjmp	.+2170   	; 0x113e <delay>

}
     8c4:	08 95       	ret

000008c6 <_Z12Thermal_readv>:

//int Print_raw_data = false;
//int Temp_print_delay;

Thermal_SizeTemp_Struct Thermal_read(){
     8c6:	8f 92       	push	r8
     8c8:	9f 92       	push	r9
     8ca:	af 92       	push	r10
     8cc:	bf 92       	push	r11
     8ce:	cf 92       	push	r12
     8d0:	df 92       	push	r13
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <_Z12Thermal_readv+0x1a>
     8e0:	00 d0       	rcall	.+0      	; 0x8e2 <_Z12Thermal_readv+0x1c>
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
	amg.readPixels(pixels);
     8e6:	40 e4       	ldi	r20, 0x40	; 64
     8e8:	6d ea       	ldi	r22, 0xAD	; 173
     8ea:	73 e0       	ldi	r23, 0x03	; 3
     8ec:	86 e5       	ldi	r24, 0x56	; 86
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	6e d6       	rcall	.+3292   	; 0x15ce <_ZN16Adafruit_AMG88xx10readPixelsEPfh>
     8f2:	8d ea       	ldi	r24, 0xAD	; 173
     8f4:	c8 2e       	mov	r12, r24
     8f6:	83 e0       	ldi	r24, 0x03	; 3
     8f8:	d8 2e       	mov	r13, r24
	struct Thermal_SizeTemp_Struct Size_temp_read;
	//int cold = 40;
	Size_temp_read.max_temp = 0;
     8fa:	00 e0       	ldi	r16, 0x00	; 0
     8fc:	10 e0       	ldi	r17, 0x00	; 0
	Size_temp_read.size = 0;
     8fe:	e1 2c       	mov	r14, r1
     900:	f1 2c       	mov	r15, r1
		//Print_raw_data = false;
	//}

	
	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
		if(pixels[i] > Size_temp_read.max_temp){
     902:	f6 01       	movw	r30, r12
     904:	81 90       	ld	r8, Z+
     906:	91 90       	ld	r9, Z+
     908:	a1 90       	ld	r10, Z+
     90a:	b1 90       	ld	r11, Z+
     90c:	6f 01       	movw	r12, r30
     90e:	b8 01       	movw	r22, r16
     910:	01 2e       	mov	r0, r17
     912:	00 0c       	add	r0, r0
     914:	88 0b       	sbc	r24, r24
     916:	99 0b       	sbc	r25, r25
     918:	80 d0       	rcall	.+256    	; 0xa1a <__floatsisf>
     91a:	9b 01       	movw	r18, r22
     91c:	ac 01       	movw	r20, r24
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	df d0       	rcall	.+446    	; 0xae2 <__gesf2>
     924:	18 16       	cp	r1, r24
     926:	24 f4       	brge	.+8      	; 0x930 <_Z12Thermal_readv+0x6a>
			Size_temp_read.max_temp = pixels[i];
     928:	c5 01       	movw	r24, r10
     92a:	b4 01       	movw	r22, r8
     92c:	43 d0       	rcall	.+134    	; 0x9b4 <__fixsfsi>
     92e:	8b 01       	movw	r16, r22
     930:	20 e0       	ldi	r18, 0x00	; 0
		}
		if(pixels[i] >= DETECTEMP){
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	48 eb       	ldi	r20, 0xB8	; 184
     936:	51 e4       	ldi	r21, 0x41	; 65
     938:	c5 01       	movw	r24, r10
     93a:	b4 01       	movw	r22, r8
     93c:	d2 d0       	rcall	.+420    	; 0xae2 <__gesf2>
     93e:	87 fd       	sbrc	r24, 7
     940:	03 c0       	rjmp	.+6      	; 0x948 <_Z12Thermal_readv+0x82>
     942:	ff ef       	ldi	r31, 0xFF	; 255
			Size_temp_read.size++;
     944:	ef 1a       	sub	r14, r31
     946:	ff 0a       	sbc	r15, r31
     948:	8d ea       	ldi	r24, 0xAD	; 173
		//Serial.println();
		//Print_raw_data = false;
	//}

	
	for(int i=0; i<AMG88xx_PIXEL_ARRAY_SIZE; i++){
     94a:	c8 16       	cp	r12, r24
     94c:	84 e0       	ldi	r24, 0x04	; 4
     94e:	d8 06       	cpc	r13, r24
     950:	c1 f6       	brne	.-80     	; 0x902 <_Z12Thermal_readv+0x3c>
     952:	08 31       	cpi	r16, 0x18	; 24
		if(pixels[i] >= DETECTEMP){
			Size_temp_read.size++;
		}
	}
	
	if ((Size_temp_read.max_temp > DETECTEMP) && (Size_temp_read.size > 4)){
     954:	11 05       	cpc	r17, r1
     956:	44 f0       	brlt	.+16     	; 0x968 <_Z12Thermal_readv+0xa2>
     958:	61 e0       	ldi	r22, 0x01	; 1
	amg.readPixels(pixels);
	struct Thermal_SizeTemp_Struct Size_temp_read;
	//int cold = 40;
	Size_temp_read.max_temp = 0;
	Size_temp_read.size = 0;
	Size_temp_read.detected = 0;
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	95 e0       	ldi	r25, 0x05	; 5
     95e:	e9 16       	cp	r14, r25
     960:	f1 04       	cpc	r15, r1
     962:	24 f4       	brge	.+8      	; 0x96c <_Z12Thermal_readv+0xa6>
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	02 c0       	rjmp	.+4      	; 0x96c <_Z12Thermal_readv+0xa6>
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	1a 83       	std	Y+2, r17	; 0x02
		//displayPixelHeight, displayPixelWidth, camColors[colorIndex]);
	//}
	
	
	
	return Size_temp_read;
     96e:	09 83       	std	Y+1, r16	; 0x01
     970:	fc 82       	std	Y+4, r15	; 0x04
     972:	eb 82       	std	Y+3, r14	; 0x03
     974:	20 2f       	mov	r18, r16
     976:	3a 81       	ldd	r19, Y+2	; 0x02
     978:	4e 2d       	mov	r20, r14
     97a:	5c 81       	ldd	r21, Y+4	; 0x04
     97c:	78 2f       	mov	r23, r24
     97e:	80 e0       	ldi	r24, 0x00	; 0
}
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	26 96       	adiw	r28, 0x06	; 6
     984:	0f b6       	in	r0, 0x3f	; 63
     986:	f8 94       	cli
     988:	de bf       	out	0x3e, r29	; 62
     98a:	0f be       	out	0x3f, r0	; 63
     98c:	cd bf       	out	0x3d, r28	; 61
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	df 90       	pop	r13
     99c:	cf 90       	pop	r12
     99e:	bf 90       	pop	r11
     9a0:	af 90       	pop	r10
     9a2:	9f 90       	pop	r9
     9a4:	8f 90       	pop	r8
     9a6:	08 95       	ret

000009a8 <_GLOBAL__sub_I_displayPixelWidth>:
     9a8:	20 e3       	ldi	r18, 0x30	; 48
unsigned long delayTime;
/*
Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
*/

Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);
     9aa:	41 e3       	ldi	r20, 0x31	; 49
     9ac:	65 e3       	ldi	r22, 0x35	; 53
     9ae:	86 e6       	ldi	r24, 0x66	; 102
     9b0:	93 e0       	ldi	r25, 0x03	; 3
     9b2:	11 c7       	rjmp	.+3618   	; 0x17d6 <_ZN15Adafruit_ST7735C1Eaaa>

000009b4 <__fixsfsi>:
     9b4:	04 d0       	rcall	.+8      	; 0x9be <__fixunssfsi>
     9b6:	68 94       	set
     9b8:	b1 11       	cpse	r27, r1
     9ba:	8d c0       	rjmp	.+282    	; 0xad6 <__fp_szero>
     9bc:	08 95       	ret

000009be <__fixunssfsi>:
     9be:	70 d0       	rcall	.+224    	; 0xaa0 <__fp_splitA>
     9c0:	88 f0       	brcs	.+34     	; 0x9e4 <__fixunssfsi+0x26>
     9c2:	9f 57       	subi	r25, 0x7F	; 127
     9c4:	90 f0       	brcs	.+36     	; 0x9ea <__fixunssfsi+0x2c>
     9c6:	b9 2f       	mov	r27, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	b7 51       	subi	r27, 0x17	; 23
     9cc:	a0 f0       	brcs	.+40     	; 0x9f6 <__fixunssfsi+0x38>
     9ce:	d1 f0       	breq	.+52     	; 0xa04 <__fixunssfsi+0x46>
     9d0:	66 0f       	add	r22, r22
     9d2:	77 1f       	adc	r23, r23
     9d4:	88 1f       	adc	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	1a f0       	brmi	.+6      	; 0x9e0 <__fixunssfsi+0x22>
     9da:	ba 95       	dec	r27
     9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__fixunssfsi+0x12>
     9de:	12 c0       	rjmp	.+36     	; 0xa04 <__fixunssfsi+0x46>
     9e0:	b1 30       	cpi	r27, 0x01	; 1
     9e2:	81 f0       	breq	.+32     	; 0xa04 <__fixunssfsi+0x46>
     9e4:	77 d0       	rcall	.+238    	; 0xad4 <__fp_zero>
     9e6:	b1 e0       	ldi	r27, 0x01	; 1
     9e8:	08 95       	ret
     9ea:	74 c0       	rjmp	.+232    	; 0xad4 <__fp_zero>
     9ec:	67 2f       	mov	r22, r23
     9ee:	78 2f       	mov	r23, r24
     9f0:	88 27       	eor	r24, r24
     9f2:	b8 5f       	subi	r27, 0xF8	; 248
     9f4:	39 f0       	breq	.+14     	; 0xa04 <__fixunssfsi+0x46>
     9f6:	b9 3f       	cpi	r27, 0xF9	; 249
     9f8:	cc f3       	brlt	.-14     	; 0x9ec <__fixunssfsi+0x2e>
     9fa:	86 95       	lsr	r24
     9fc:	77 95       	ror	r23
     9fe:	67 95       	ror	r22
     a00:	b3 95       	inc	r27
     a02:	d9 f7       	brne	.-10     	; 0x9fa <__fixunssfsi+0x3c>
     a04:	3e f4       	brtc	.+14     	; 0xa14 <__fixunssfsi+0x56>
     a06:	90 95       	com	r25
     a08:	80 95       	com	r24
     a0a:	70 95       	com	r23
     a0c:	61 95       	neg	r22
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	8f 4f       	sbci	r24, 0xFF	; 255
     a12:	9f 4f       	sbci	r25, 0xFF	; 255
     a14:	08 95       	ret

00000a16 <__floatunsisf>:
     a16:	e8 94       	clt
     a18:	09 c0       	rjmp	.+18     	; 0xa2c <__floatsisf+0x12>

00000a1a <__floatsisf>:
     a1a:	97 fb       	bst	r25, 7
     a1c:	3e f4       	brtc	.+14     	; 0xa2c <__floatsisf+0x12>
     a1e:	90 95       	com	r25
     a20:	80 95       	com	r24
     a22:	70 95       	com	r23
     a24:	61 95       	neg	r22
     a26:	7f 4f       	sbci	r23, 0xFF	; 255
     a28:	8f 4f       	sbci	r24, 0xFF	; 255
     a2a:	9f 4f       	sbci	r25, 0xFF	; 255
     a2c:	99 23       	and	r25, r25
     a2e:	a9 f0       	breq	.+42     	; 0xa5a <__floatsisf+0x40>
     a30:	f9 2f       	mov	r31, r25
     a32:	96 e9       	ldi	r25, 0x96	; 150
     a34:	bb 27       	eor	r27, r27
     a36:	93 95       	inc	r25
     a38:	f6 95       	lsr	r31
     a3a:	87 95       	ror	r24
     a3c:	77 95       	ror	r23
     a3e:	67 95       	ror	r22
     a40:	b7 95       	ror	r27
     a42:	f1 11       	cpse	r31, r1
     a44:	f8 cf       	rjmp	.-16     	; 0xa36 <__floatsisf+0x1c>
     a46:	fa f4       	brpl	.+62     	; 0xa86 <__floatsisf+0x6c>
     a48:	bb 0f       	add	r27, r27
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__floatsisf+0x36>
     a4c:	60 ff       	sbrs	r22, 0
     a4e:	1b c0       	rjmp	.+54     	; 0xa86 <__floatsisf+0x6c>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	16 c0       	rjmp	.+44     	; 0xa86 <__floatsisf+0x6c>
     a5a:	88 23       	and	r24, r24
     a5c:	11 f0       	breq	.+4      	; 0xa62 <__floatsisf+0x48>
     a5e:	96 e9       	ldi	r25, 0x96	; 150
     a60:	11 c0       	rjmp	.+34     	; 0xa84 <__floatsisf+0x6a>
     a62:	77 23       	and	r23, r23
     a64:	21 f0       	breq	.+8      	; 0xa6e <__floatsisf+0x54>
     a66:	9e e8       	ldi	r25, 0x8E	; 142
     a68:	87 2f       	mov	r24, r23
     a6a:	76 2f       	mov	r23, r22
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__floatsisf+0x5e>
     a6e:	66 23       	and	r22, r22
     a70:	71 f0       	breq	.+28     	; 0xa8e <__floatsisf+0x74>
     a72:	96 e8       	ldi	r25, 0x86	; 134
     a74:	86 2f       	mov	r24, r22
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	60 e0       	ldi	r22, 0x00	; 0
     a7a:	2a f0       	brmi	.+10     	; 0xa86 <__floatsisf+0x6c>
     a7c:	9a 95       	dec	r25
     a7e:	66 0f       	add	r22, r22
     a80:	77 1f       	adc	r23, r23
     a82:	88 1f       	adc	r24, r24
     a84:	da f7       	brpl	.-10     	; 0xa7c <__floatsisf+0x62>
     a86:	88 0f       	add	r24, r24
     a88:	96 95       	lsr	r25
     a8a:	87 95       	ror	r24
     a8c:	97 f9       	bld	r25, 7
     a8e:	08 95       	ret

00000a90 <__fp_split3>:
     a90:	57 fd       	sbrc	r21, 7
     a92:	90 58       	subi	r25, 0x80	; 128
     a94:	44 0f       	add	r20, r20
     a96:	55 1f       	adc	r21, r21
     a98:	59 f0       	breq	.+22     	; 0xab0 <__fp_splitA+0x10>
     a9a:	5f 3f       	cpi	r21, 0xFF	; 255
     a9c:	71 f0       	breq	.+28     	; 0xaba <__fp_splitA+0x1a>
     a9e:	47 95       	ror	r20

00000aa0 <__fp_splitA>:
     aa0:	88 0f       	add	r24, r24
     aa2:	97 fb       	bst	r25, 7
     aa4:	99 1f       	adc	r25, r25
     aa6:	61 f0       	breq	.+24     	; 0xac0 <__fp_splitA+0x20>
     aa8:	9f 3f       	cpi	r25, 0xFF	; 255
     aaa:	79 f0       	breq	.+30     	; 0xaca <__fp_splitA+0x2a>
     aac:	87 95       	ror	r24
     aae:	08 95       	ret
     ab0:	12 16       	cp	r1, r18
     ab2:	13 06       	cpc	r1, r19
     ab4:	14 06       	cpc	r1, r20
     ab6:	55 1f       	adc	r21, r21
     ab8:	f2 cf       	rjmp	.-28     	; 0xa9e <__fp_split3+0xe>
     aba:	46 95       	lsr	r20
     abc:	f1 df       	rcall	.-30     	; 0xaa0 <__fp_splitA>
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <__fp_splitA+0x30>
     ac0:	16 16       	cp	r1, r22
     ac2:	17 06       	cpc	r1, r23
     ac4:	18 06       	cpc	r1, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	f1 cf       	rjmp	.-30     	; 0xaac <__fp_splitA+0xc>
     aca:	86 95       	lsr	r24
     acc:	71 05       	cpc	r23, r1
     ace:	61 05       	cpc	r22, r1
     ad0:	08 94       	sec
     ad2:	08 95       	ret

00000ad4 <__fp_zero>:
     ad4:	e8 94       	clt

00000ad6 <__fp_szero>:
     ad6:	bb 27       	eor	r27, r27
     ad8:	66 27       	eor	r22, r22
     ada:	77 27       	eor	r23, r23
     adc:	cb 01       	movw	r24, r22
     ade:	97 f9       	bld	r25, 7
     ae0:	08 95       	ret

00000ae2 <__gesf2>:
     ae2:	03 d0       	rcall	.+6      	; 0xaea <__fp_cmp>
     ae4:	08 f4       	brcc	.+2      	; 0xae8 <__gesf2+0x6>
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	08 95       	ret

00000aea <__fp_cmp>:
     aea:	99 0f       	add	r25, r25
     aec:	00 08       	sbc	r0, r0
     aee:	55 0f       	add	r21, r21
     af0:	aa 0b       	sbc	r26, r26
     af2:	e0 e8       	ldi	r30, 0x80	; 128
     af4:	fe ef       	ldi	r31, 0xFE	; 254
     af6:	16 16       	cp	r1, r22
     af8:	17 06       	cpc	r1, r23
     afa:	e8 07       	cpc	r30, r24
     afc:	f9 07       	cpc	r31, r25
     afe:	c0 f0       	brcs	.+48     	; 0xb30 <__fp_cmp+0x46>
     b00:	12 16       	cp	r1, r18
     b02:	13 06       	cpc	r1, r19
     b04:	e4 07       	cpc	r30, r20
     b06:	f5 07       	cpc	r31, r21
     b08:	98 f0       	brcs	.+38     	; 0xb30 <__fp_cmp+0x46>
     b0a:	62 1b       	sub	r22, r18
     b0c:	73 0b       	sbc	r23, r19
     b0e:	84 0b       	sbc	r24, r20
     b10:	95 0b       	sbc	r25, r21
     b12:	39 f4       	brne	.+14     	; 0xb22 <__fp_cmp+0x38>
     b14:	0a 26       	eor	r0, r26
     b16:	61 f0       	breq	.+24     	; 0xb30 <__fp_cmp+0x46>
     b18:	23 2b       	or	r18, r19
     b1a:	24 2b       	or	r18, r20
     b1c:	25 2b       	or	r18, r21
     b1e:	21 f4       	brne	.+8      	; 0xb28 <__fp_cmp+0x3e>
     b20:	08 95       	ret
     b22:	0a 26       	eor	r0, r26
     b24:	09 f4       	brne	.+2      	; 0xb28 <__fp_cmp+0x3e>
     b26:	a1 40       	sbci	r26, 0x01	; 1
     b28:	a6 95       	lsr	r26
     b2a:	8f ef       	ldi	r24, 0xFF	; 255
     b2c:	81 1d       	adc	r24, r1
     b2e:	81 1d       	adc	r24, r1
     b30:	08 95       	ret

00000b32 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     b32:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     b34:	91 8d       	ldd	r25, Z+25	; 0x19
     b36:	22 8d       	ldd	r18, Z+26	; 0x1a
     b38:	89 2f       	mov	r24, r25
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	80 5c       	subi	r24, 0xC0	; 192
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	82 1b       	sub	r24, r18
     b42:	91 09       	sbc	r25, r1
}
     b44:	8f 73       	andi	r24, 0x3F	; 63
     b46:	99 27       	eor	r25, r25
     b48:	08 95       	ret

00000b4a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     b4a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     b4c:	91 8d       	ldd	r25, Z+25	; 0x19
     b4e:	82 8d       	ldd	r24, Z+26	; 0x1a
     b50:	98 17       	cp	r25, r24
     b52:	31 f0       	breq	.+12     	; 0xb60 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     b54:	82 8d       	ldd	r24, Z+26	; 0x1a
     b56:	e8 0f       	add	r30, r24
     b58:	f1 1d       	adc	r31, r1
     b5a:	85 8d       	ldd	r24, Z+29	; 0x1d
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     b64:	08 95       	ret

00000b66 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     b66:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     b68:	91 8d       	ldd	r25, Z+25	; 0x19
     b6a:	82 8d       	ldd	r24, Z+26	; 0x1a
     b6c:	98 17       	cp	r25, r24
     b6e:	61 f0       	breq	.+24     	; 0xb88 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     b70:	82 8d       	ldd	r24, Z+26	; 0x1a
     b72:	df 01       	movw	r26, r30
     b74:	a8 0f       	add	r26, r24
     b76:	b1 1d       	adc	r27, r1
     b78:	5d 96       	adiw	r26, 0x1d	; 29
     b7a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     b7c:	92 8d       	ldd	r25, Z+26	; 0x1a
     b7e:	9f 5f       	subi	r25, 0xFF	; 255
     b80:	9f 73       	andi	r25, 0x3F	; 63
     b82:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     b88:	8f ef       	ldi	r24, 0xFF	; 255
     b8a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     b8c:	08 95       	ret

00000b8e <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     b8e:	fc 01       	movw	r30, r24
     b90:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     b92:	44 8d       	ldd	r20, Z+28	; 0x1c
     b94:	25 2f       	mov	r18, r21
     b96:	30 e0       	ldi	r19, 0x00	; 0
     b98:	84 2f       	mov	r24, r20
     b9a:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     b9c:	82 1b       	sub	r24, r18
     b9e:	93 0b       	sbc	r25, r19
     ba0:	54 17       	cp	r21, r20
     ba2:	10 f0       	brcs	.+4      	; 0xba8 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     ba4:	cf 96       	adiw	r24, 0x3f	; 63
     ba6:	08 95       	ret
  return tail - head - 1;
     ba8:	01 97       	sbiw	r24, 0x01	; 1
}
     baa:	08 95       	ret

00000bac <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     bac:	89 e6       	ldi	r24, 0x69	; 105
     bae:	97 e0       	ldi	r25, 0x07	; 7
     bb0:	89 2b       	or	r24, r25
     bb2:	39 f0       	breq	.+14     	; 0xbc2 <_Z14serialEventRunv+0x16>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	89 2b       	or	r24, r25
     bba:	19 f0       	breq	.+6      	; 0xbc2 <_Z14serialEventRunv+0x16>
     bbc:	8a d1       	rcall	.+788    	; 0xed2 <_Z17Serial0_availablev>
     bbe:	81 11       	cpse	r24, r1
     bc0:	25 c0       	rjmp	.+74     	; 0xc0c <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	89 2b       	or	r24, r25
     bc8:	41 f0       	breq	.+16     	; 0xbda <_Z14serialEventRunv+0x2e>
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	89 2b       	or	r24, r25
     bd0:	21 f0       	breq	.+8      	; 0xbda <_Z14serialEventRunv+0x2e>
     bd2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bd6:	81 11       	cpse	r24, r1
     bd8:	1c c0       	rjmp	.+56     	; 0xc12 <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	89 2b       	or	r24, r25
     be0:	41 f0       	breq	.+16     	; 0xbf2 <_Z14serialEventRunv+0x46>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	89 2b       	or	r24, r25
     be8:	21 f0       	breq	.+8      	; 0xbf2 <_Z14serialEventRunv+0x46>
     bea:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     bee:	81 11       	cpse	r24, r1
     bf0:	13 c0       	rjmp	.+38     	; 0xc18 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	89 2b       	or	r24, r25
     bf8:	a1 f0       	breq	.+40     	; 0xc22 <_Z14serialEventRunv+0x76>
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	89 2b       	or	r24, r25
     c00:	81 f0       	breq	.+32     	; 0xc22 <_Z14serialEventRunv+0x76>
     c02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c06:	81 11       	cpse	r24, r1
     c08:	0a c0       	rjmp	.+20     	; 0xc1e <_Z14serialEventRunv+0x72>
     c0a:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     c0c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c10:	d8 cf       	rjmp	.-80     	; 0xbc2 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     c12:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c16:	e1 cf       	rjmp	.-62     	; 0xbda <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     c18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     c1c:	ea cf       	rjmp	.-44     	; 0xbf2 <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     c1e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     c22:	08 95       	ret

00000c24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     c24:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     c26:	84 8d       	ldd	r24, Z+28	; 0x1c
     c28:	df 01       	movw	r26, r30
     c2a:	a8 0f       	add	r26, r24
     c2c:	b1 1d       	adc	r27, r1
     c2e:	a3 5a       	subi	r26, 0xA3	; 163
     c30:	bf 4f       	sbci	r27, 0xFF	; 255
     c32:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     c34:	84 8d       	ldd	r24, Z+28	; 0x1c
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	01 96       	adiw	r24, 0x01	; 1
     c3a:	8f 73       	andi	r24, 0x3F	; 63
     c3c:	99 27       	eor	r25, r25
     c3e:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     c40:	a6 89       	ldd	r26, Z+22	; 0x16
     c42:	b7 89       	ldd	r27, Z+23	; 0x17
     c44:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     c46:	a0 89       	ldd	r26, Z+16	; 0x10
     c48:	b1 89       	ldd	r27, Z+17	; 0x11
     c4a:	8c 91       	ld	r24, X
     c4c:	83 70       	andi	r24, 0x03	; 3
     c4e:	80 64       	ori	r24, 0x40	; 64
     c50:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     c52:	93 8d       	ldd	r25, Z+27	; 0x1b
     c54:	84 8d       	ldd	r24, Z+28	; 0x1c
     c56:	98 13       	cpse	r25, r24
     c58:	06 c0       	rjmp	.+12     	; 0xc66 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     c5a:	02 88       	ldd	r0, Z+18	; 0x12
     c5c:	f3 89       	ldd	r31, Z+19	; 0x13
     c5e:	e0 2d       	mov	r30, r0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	80 83       	st	Z, r24
     c66:	08 95       	ret

00000c68 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
  _written = true;
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     c7a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     c7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c7e:	98 13       	cpse	r25, r24
     c80:	05 c0       	rjmp	.+10     	; 0xc8c <_ZN14HardwareSerial5writeEh+0x24>
     c82:	e8 89       	ldd	r30, Y+16	; 0x10
     c84:	f9 89       	ldd	r31, Y+17	; 0x11
     c86:	80 81       	ld	r24, Z
     c88:	85 fd       	sbrc	r24, 5
     c8a:	25 c0       	rjmp	.+74     	; 0xcd6 <_ZN14HardwareSerial5writeEh+0x6e>
     c8c:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     c8e:	0b 8d       	ldd	r16, Y+27	; 0x1b
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	0f 5f       	subi	r16, 0xFF	; 255
     c94:	1f 4f       	sbci	r17, 0xFF	; 255
     c96:	0f 73       	andi	r16, 0x3F	; 63
     c98:	11 27       	eor	r17, r17
     c9a:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     c9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c9e:	e8 12       	cpse	r14, r24
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	07 fc       	sbrc	r0, 7
     ca6:	fa cf       	rjmp	.-12     	; 0xc9c <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     ca8:	e8 89       	ldd	r30, Y+16	; 0x10
     caa:	f9 89       	ldd	r31, Y+17	; 0x11
     cac:	80 81       	ld	r24, Z
     cae:	85 ff       	sbrs	r24, 5
     cb0:	f5 cf       	rjmp	.-22     	; 0xc9c <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     cb2:	ce 01       	movw	r24, r28
     cb4:	b7 df       	rcall	.-146    	; 0xc24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     cb6:	f2 cf       	rjmp	.-28     	; 0xc9c <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     cb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cba:	fe 01       	movw	r30, r28
     cbc:	e8 0f       	add	r30, r24
     cbe:	f1 1d       	adc	r31, r1
     cc0:	e3 5a       	subi	r30, 0xA3	; 163
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     cc6:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     cc8:	f8 94       	cli
    _tx_buffer_head = i;
     cca:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     ccc:	ea 89       	ldd	r30, Y+18	; 0x12
     cce:	fb 89       	ldd	r31, Y+19	; 0x13
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     cd6:	9f b7       	in	r25, 0x3f	; 63
     cd8:	f8 94       	cli
      *_udr = c;
     cda:	ee 89       	ldd	r30, Y+22	; 0x16
     cdc:	ff 89       	ldd	r31, Y+23	; 0x17
     cde:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     ce0:	e8 89       	ldd	r30, Y+16	; 0x10
     ce2:	f9 89       	ldd	r31, Y+17	; 0x11
     ce4:	80 81       	ld	r24, Z
     ce6:	83 70       	andi	r24, 0x03	; 3
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     cec:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	08 95       	ret

00000d00 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     d06:	88 8d       	ldd	r24, Y+24	; 0x18
     d08:	88 23       	and	r24, r24
     d0a:	c1 f0       	breq	.+48     	; 0xd3c <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     d0c:	ea 89       	ldd	r30, Y+18	; 0x12
     d0e:	fb 89       	ldd	r31, Y+19	; 0x13
     d10:	80 81       	ld	r24, Z
     d12:	85 fd       	sbrc	r24, 5
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <_ZN14HardwareSerial5flushEv+0x20>
     d16:	a8 89       	ldd	r26, Y+16	; 0x10
     d18:	b9 89       	ldd	r27, Y+17	; 0x11
     d1a:	8c 91       	ld	r24, X
     d1c:	86 fd       	sbrc	r24, 6
     d1e:	0e c0       	rjmp	.+28     	; 0xd3c <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	07 fc       	sbrc	r0, 7
     d24:	f5 cf       	rjmp	.-22     	; 0xd10 <_ZN14HardwareSerial5flushEv+0x10>
     d26:	80 81       	ld	r24, Z
     d28:	85 ff       	sbrs	r24, 5
     d2a:	f2 cf       	rjmp	.-28     	; 0xd10 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     d2c:	a8 89       	ldd	r26, Y+16	; 0x10
     d2e:	b9 89       	ldd	r27, Y+17	; 0x11
     d30:	8c 91       	ld	r24, X
     d32:	85 ff       	sbrs	r24, 5
     d34:	ed cf       	rjmp	.-38     	; 0xd10 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     d36:	ce 01       	movw	r24, r28
     d38:	75 df       	rcall	.-278    	; 0xc24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     d3a:	e8 cf       	rjmp	.-48     	; 0xd0c <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	ec 01       	movw	r28, r24
     d52:	6a 01       	movw	r12, r20
     d54:	7b 01       	movw	r14, r22
     d56:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     d58:	e8 89       	ldd	r30, Y+16	; 0x10
     d5a:	f9 89       	ldd	r31, Y+17	; 0x11
     d5c:	82 e0       	ldi	r24, 0x02	; 2
     d5e:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d60:	41 15       	cp	r20, r1
     d62:	51 4e       	sbci	r21, 0xE1	; 225
     d64:	61 05       	cpc	r22, r1
     d66:	71 05       	cpc	r23, r1
     d68:	b1 f0       	breq	.+44     	; 0xd96 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	79 e0       	ldi	r23, 0x09	; 9
     d6e:	8d e3       	ldi	r24, 0x3D	; 61
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	a7 01       	movw	r20, r14
     d74:	96 01       	movw	r18, r12
     d76:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodsi4>
     d7a:	da 01       	movw	r26, r20
     d7c:	c9 01       	movw	r24, r18
     d7e:	01 97       	sbiw	r24, 0x01	; 1
     d80:	a1 09       	sbc	r26, r1
     d82:	b1 09       	sbc	r27, r1
     d84:	b6 95       	lsr	r27
     d86:	a7 95       	ror	r26
     d88:	97 95       	ror	r25
     d8a:	87 95       	ror	r24
     d8c:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     d8e:	21 15       	cp	r18, r1
     d90:	80 e1       	ldi	r24, 0x10	; 16
     d92:	38 07       	cpc	r19, r24
     d94:	a8 f0       	brcs	.+42     	; 0xdc0 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     d96:	e8 89       	ldd	r30, Y+16	; 0x10
     d98:	f9 89       	ldd	r31, Y+17	; 0x11
     d9a:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     d9c:	60 e8       	ldi	r22, 0x80	; 128
     d9e:	74 e8       	ldi	r23, 0x84	; 132
     da0:	8e e1       	ldi	r24, 0x1E	; 30
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a7 01       	movw	r20, r14
     da6:	96 01       	movw	r18, r12
     da8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__udivmodsi4>
     dac:	da 01       	movw	r26, r20
     dae:	c9 01       	movw	r24, r18
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	a1 09       	sbc	r26, r1
     db4:	b1 09       	sbc	r27, r1
     db6:	b6 95       	lsr	r27
     db8:	a7 95       	ror	r26
     dba:	97 95       	ror	r25
     dbc:	87 95       	ror	r24
     dbe:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     dc0:	ec 85       	ldd	r30, Y+12	; 0x0c
     dc2:	fd 85       	ldd	r31, Y+13	; 0x0d
     dc4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     dc6:	ee 85       	ldd	r30, Y+14	; 0x0e
     dc8:	ff 85       	ldd	r31, Y+15	; 0x0f
     dca:	20 83       	st	Z, r18

  _written = false;
     dcc:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     dce:	ec 89       	ldd	r30, Y+20	; 0x14
     dd0:	fd 89       	ldd	r31, Y+21	; 0x15
     dd2:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     dd4:	ea 89       	ldd	r30, Y+18	; 0x12
     dd6:	fb 89       	ldd	r31, Y+19	; 0x13
     dd8:	80 81       	ld	r24, Z
     dda:	80 61       	ori	r24, 0x10	; 16
     ddc:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     dde:	ea 89       	ldd	r30, Y+18	; 0x12
     de0:	fb 89       	ldd	r31, Y+19	; 0x13
     de2:	80 81       	ld	r24, Z
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     de8:	ea 89       	ldd	r30, Y+18	; 0x12
     dea:	fb 89       	ldd	r31, Y+19	; 0x13
     dec:	80 81       	ld	r24, Z
     dee:	80 68       	ori	r24, 0x80	; 128
     df0:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     df2:	ea 89       	ldd	r30, Y+18	; 0x12
     df4:	fb 89       	ldd	r31, Y+19	; 0x13
     df6:	80 81       	ld	r24, Z
     df8:	8f 7d       	andi	r24, 0xDF	; 223
     dfa:	80 83       	st	Z, r24
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	cf 90       	pop	r12
     e0a:	08 95       	ret

00000e0c <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 95       	ret

00000e12 <_ZN5Print5flushEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     e12:	08 95       	ret

00000e14 <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	0b b6       	in	r0, 0x3b	; 59
     e20:	0f 92       	push	r0
     e22:	2f 93       	push	r18
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     e2c:	e0 91 bd 04 	lds	r30, 0x04BD	; 0x8004bd <Serial+0x10>
     e30:	f0 91 be 04 	lds	r31, 0x04BE	; 0x8004be <Serial+0x11>
     e34:	80 81       	ld	r24, Z
     e36:	e0 91 c3 04 	lds	r30, 0x04C3	; 0x8004c3 <Serial+0x16>
     e3a:	f0 91 c4 04 	lds	r31, 0x04C4	; 0x8004c4 <Serial+0x17>
     e3e:	82 fd       	sbrc	r24, 2
     e40:	12 c0       	rjmp	.+36     	; 0xe66 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     e42:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     e44:	80 91 c6 04 	lds	r24, 0x04C6	; 0x8004c6 <Serial+0x19>
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     e4c:	20 91 c7 04 	lds	r18, 0x04C7	; 0x8004c7 <Serial+0x1a>
     e50:	82 17       	cp	r24, r18
     e52:	51 f0       	breq	.+20     	; 0xe68 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     e54:	e0 91 c6 04 	lds	r30, 0x04C6	; 0x8004c6 <Serial+0x19>
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	e3 55       	subi	r30, 0x53	; 83
     e5c:	fb 4f       	sbci	r31, 0xFB	; 251
     e5e:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     e60:	80 93 c6 04 	sts	0x04C6, r24	; 0x8004c6 <Serial+0x19>
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     e66:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     e68:	ff 91       	pop	r31
     e6a:	ef 91       	pop	r30
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	2f 91       	pop	r18
     e72:	0f 90       	pop	r0
     e74:	0b be       	out	0x3b, r0	; 59
     e76:	0f 90       	pop	r0
     e78:	0f be       	out	0x3f, r0	; 63
     e7a:	0f 90       	pop	r0
     e7c:	1f 90       	pop	r1
     e7e:	18 95       	reti

00000e80 <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     e80:	1f 92       	push	r1
     e82:	0f 92       	push	r0
     e84:	0f b6       	in	r0, 0x3f	; 63
     e86:	0f 92       	push	r0
     e88:	11 24       	eor	r1, r1
     e8a:	0b b6       	in	r0, 0x3b	; 59
     e8c:	0f 92       	push	r0
     e8e:	2f 93       	push	r18
     e90:	3f 93       	push	r19
     e92:	4f 93       	push	r20
     e94:	5f 93       	push	r21
     e96:	6f 93       	push	r22
     e98:	7f 93       	push	r23
     e9a:	8f 93       	push	r24
     e9c:	9f 93       	push	r25
     e9e:	af 93       	push	r26
     ea0:	bf 93       	push	r27
     ea2:	ef 93       	push	r30
     ea4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     ea6:	8d ea       	ldi	r24, 0xAD	; 173
     ea8:	94 e0       	ldi	r25, 0x04	; 4
     eaa:	bc de       	rcall	.-648    	; 0xc24 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     ed2:	8d ea       	ldi	r24, 0xAD	; 173
     ed4:	94 e0       	ldi	r25, 0x04	; 4
     ed6:	2d de       	rcall	.-934    	; 0xb32 <_ZN14HardwareSerial9availableEv>
     ed8:	21 e0       	ldi	r18, 0x01	; 1
     eda:	89 2b       	or	r24, r25
     edc:	09 f4       	brne	.+2      	; 0xee0 <_Z17Serial0_availablev+0xe>
     ede:	20 e0       	ldi	r18, 0x00	; 0
}
     ee0:	82 2f       	mov	r24, r18
     ee2:	08 95       	ret

00000ee4 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     ee4:	ed ea       	ldi	r30, 0xAD	; 173
     ee6:	f4 e0       	ldi	r31, 0x04	; 4
     ee8:	13 82       	std	Z+3, r1	; 0x03
     eea:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     eec:	88 ee       	ldi	r24, 0xE8	; 232
     eee:	93 e0       	ldi	r25, 0x03	; 3
     ef0:	a0 e0       	ldi	r26, 0x00	; 0
     ef2:	b0 e0       	ldi	r27, 0x00	; 0
     ef4:	84 83       	std	Z+4, r24	; 0x04
     ef6:	95 83       	std	Z+5, r25	; 0x05
     ef8:	a6 83       	std	Z+6, r26	; 0x06
     efa:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     efc:	86 e5       	ldi	r24, 0x56	; 86
     efe:	92 e0       	ldi	r25, 0x02	; 2
     f00:	91 83       	std	Z+1, r25	; 0x01
     f02:	80 83       	st	Z, r24
     f04:	85 ec       	ldi	r24, 0xC5	; 197
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	95 87       	std	Z+13, r25	; 0x0d
     f0a:	84 87       	std	Z+12, r24	; 0x0c
     f0c:	84 ec       	ldi	r24, 0xC4	; 196
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	97 87       	std	Z+15, r25	; 0x0f
     f12:	86 87       	std	Z+14, r24	; 0x0e
     f14:	80 ec       	ldi	r24, 0xC0	; 192
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	91 8b       	std	Z+17, r25	; 0x11
     f1a:	80 8b       	std	Z+16, r24	; 0x10
     f1c:	81 ec       	ldi	r24, 0xC1	; 193
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	93 8b       	std	Z+19, r25	; 0x13
     f22:	82 8b       	std	Z+18, r24	; 0x12
     f24:	82 ec       	ldi	r24, 0xC2	; 194
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	95 8b       	std	Z+21, r25	; 0x15
     f2a:	84 8b       	std	Z+20, r24	; 0x14
     f2c:	86 ec       	ldi	r24, 0xC6	; 198
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	97 8b       	std	Z+23, r25	; 0x17
     f32:	86 8b       	std	Z+22, r24	; 0x16
     f34:	11 8e       	std	Z+25, r1	; 0x19
     f36:	12 8e       	std	Z+26, r1	; 0x1a
     f38:	13 8e       	std	Z+27, r1	; 0x1b
     f3a:	14 8e       	std	Z+28, r1	; 0x1c
     f3c:	08 95       	ret

00000f3e <initVariant>:
     f3e:	08 95       	ret

00000f40 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     f40:	42 d1       	rcall	.+644    	; 0x11c6 <init>

	initVariant();
     f42:	fd df       	rcall	.-6      	; 0xf3e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     f44:	32 dc       	rcall	.-1948   	; 0x7aa <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     f46:	c6 ed       	ldi	r28, 0xD6	; 214
     f48:	d5 e0       	ldi	r29, 0x05	; 5
#endif
	
	setup();
    
	for (;;) {
		loop();
     f4a:	83 dc       	rcall	.-1786   	; 0x852 <loop>
		if (serialEventRun) serialEventRun();
     f4c:	20 97       	sbiw	r28, 0x00	; 0
     f4e:	e9 f3       	breq	.-6      	; 0xf4a <main+0xa>
     f50:	2d de       	rcall	.-934    	; 0xbac <_Z14serialEventRunv>
     f52:	fb cf       	rjmp	.-10     	; 0xf4a <main+0xa>

00000f54 <_ZN5Print5writeEPKhj>:
     f54:	cf 92       	push	r12
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	6c 01       	movw	r12, r24
     f66:	7a 01       	movw	r14, r20
     f68:	8b 01       	movw	r16, r22
     f6a:	c0 e0       	ldi	r28, 0x00	; 0
     f6c:	d0 e0       	ldi	r29, 0x00	; 0
     f6e:	ce 15       	cp	r28, r14
     f70:	df 05       	cpc	r29, r15
     f72:	81 f0       	breq	.+32     	; 0xf94 <_ZN5Print5writeEPKhj+0x40>
     f74:	d8 01       	movw	r26, r16
     f76:	6d 91       	ld	r22, X+
     f78:	8d 01       	movw	r16, r26
     f7a:	d6 01       	movw	r26, r12
     f7c:	ed 91       	ld	r30, X+
     f7e:	fc 91       	ld	r31, X
     f80:	01 90       	ld	r0, Z+
     f82:	f0 81       	ld	r31, Z
     f84:	e0 2d       	mov	r30, r0
     f86:	c6 01       	movw	r24, r12
     f88:	19 95       	eicall
     f8a:	89 2b       	or	r24, r25
     f8c:	11 f0       	breq	.+4      	; 0xf92 <_ZN5Print5writeEPKhj+0x3e>
     f8e:	21 96       	adiw	r28, 0x01	; 1
     f90:	ee cf       	rjmp	.-36     	; 0xf6e <_ZN5Print5writeEPKhj+0x1a>
     f92:	7e 01       	movw	r14, r28
     f94:	c7 01       	movw	r24, r14
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	1f 91       	pop	r17
     f9c:	0f 91       	pop	r16
     f9e:	ff 90       	pop	r15
     fa0:	ef 90       	pop	r14
     fa2:	df 90       	pop	r13
     fa4:	cf 90       	pop	r12
     fa6:	08 95       	ret

00000fa8 <_ZN5Print5writeEPKc>:
     fa8:	61 15       	cp	r22, r1
     faa:	71 05       	cpc	r23, r1
     fac:	79 f0       	breq	.+30     	; 0xfcc <_ZN5Print5writeEPKc+0x24>
     fae:	fb 01       	movw	r30, r22
     fb0:	01 90       	ld	r0, Z+
     fb2:	00 20       	and	r0, r0
     fb4:	e9 f7       	brne	.-6      	; 0xfb0 <_ZN5Print5writeEPKc+0x8>
     fb6:	31 97       	sbiw	r30, 0x01	; 1
     fb8:	af 01       	movw	r20, r30
     fba:	46 1b       	sub	r20, r22
     fbc:	57 0b       	sbc	r21, r23
     fbe:	dc 01       	movw	r26, r24
     fc0:	ed 91       	ld	r30, X+
     fc2:	fc 91       	ld	r31, X
     fc4:	02 80       	ldd	r0, Z+2	; 0x02
     fc6:	f3 81       	ldd	r31, Z+3	; 0x03
     fc8:	e0 2d       	mov	r30, r0
     fca:	19 94       	eijmp
     fcc:	80 e0       	ldi	r24, 0x00	; 0
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	08 95       	ret

00000fd2 <_ZN5Print5printEPK19__FlashStringHelper>:
     fd2:	ef 92       	push	r14
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	8c 01       	movw	r16, r24
     fe0:	7b 01       	movw	r14, r22
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	f7 01       	movw	r30, r14
     fe8:	ec 0f       	add	r30, r28
     fea:	fd 1f       	adc	r31, r29
     fec:	64 91       	lpm	r22, Z
     fee:	66 23       	and	r22, r22
     ff0:	61 f0       	breq	.+24     	; 0x100a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     ff2:	d8 01       	movw	r26, r16
     ff4:	ed 91       	ld	r30, X+
     ff6:	fc 91       	ld	r31, X
     ff8:	01 90       	ld	r0, Z+
     ffa:	f0 81       	ld	r31, Z
     ffc:	e0 2d       	mov	r30, r0
     ffe:	c8 01       	movw	r24, r16
    1000:	19 95       	eicall
    1002:	89 2b       	or	r24, r25
    1004:	11 f0       	breq	.+4      	; 0x100a <_ZN5Print5printEPK19__FlashStringHelper+0x38>
    1006:	21 96       	adiw	r28, 0x01	; 1
    1008:	ee cf       	rjmp	.-36     	; 0xfe6 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
    100a:	ce 01       	movw	r24, r28
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	ff 90       	pop	r15
    1016:	ef 90       	pop	r14
    1018:	08 95       	ret

0000101a <_ZN5Print7printlnEv>:
    101a:	64 e6       	ldi	r22, 0x64	; 100
    101c:	72 e0       	ldi	r23, 0x02	; 2
    101e:	c4 cf       	rjmp	.-120    	; 0xfa8 <_ZN5Print5writeEPKc>

00001020 <_ZN5Print7printlnEPK19__FlashStringHelper>:
    1020:	0f 93       	push	r16
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
    1028:	ec 01       	movw	r28, r24
    102a:	d3 df       	rcall	.-90     	; 0xfd2 <_ZN5Print5printEPK19__FlashStringHelper>
    102c:	8c 01       	movw	r16, r24
    102e:	ce 01       	movw	r24, r28
    1030:	f4 df       	rcall	.-24     	; 0x101a <_ZN5Print7printlnEv>
    1032:	80 0f       	add	r24, r16
    1034:	91 1f       	adc	r25, r17
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	0f 91       	pop	r16
    103e:	08 95       	ret

00001040 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1040:	0f 93       	push	r16
    1042:	1f 93       	push	r17
    1044:	cf 93       	push	r28
    1046:	df 93       	push	r29
    1048:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    104a:	ae df       	rcall	.-164    	; 0xfa8 <_ZN5Print5writeEPKc>
    104c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    104e:	ce 01       	movw	r24, r28
    1050:	e4 df       	rcall	.-56     	; 0x101a <_ZN5Print7printlnEv>
  return n;
}
    1052:	80 0f       	add	r24, r16
    1054:	91 1f       	adc	r25, r17
    1056:	df 91       	pop	r29
    1058:	cf 91       	pop	r28
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	08 95       	ret

00001060 <__vector_23>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
    1060:	1f 92       	push	r1
    1062:	0f 92       	push	r0
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	0f 92       	push	r0
    1068:	11 24       	eor	r1, r1
    106a:	2f 93       	push	r18
    106c:	3f 93       	push	r19
    106e:	8f 93       	push	r24
    1070:	9f 93       	push	r25
    1072:	af 93       	push	r26
    1074:	bf 93       	push	r27
    1076:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <timer0_millis>
    107a:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <timer0_millis+0x1>
    107e:	a0 91 4d 05 	lds	r26, 0x054D	; 0x80054d <timer0_millis+0x2>
    1082:	b0 91 4e 05 	lds	r27, 0x054E	; 0x80054e <timer0_millis+0x3>
    1086:	30 91 4a 05 	lds	r19, 0x054A	; 0x80054a <timer0_fract>
    108a:	23 e0       	ldi	r18, 0x03	; 3
    108c:	23 0f       	add	r18, r19
    108e:	2d 37       	cpi	r18, 0x7D	; 125
    1090:	20 f4       	brcc	.+8      	; 0x109a <__vector_23+0x3a>
    1092:	01 96       	adiw	r24, 0x01	; 1
    1094:	a1 1d       	adc	r26, r1
    1096:	b1 1d       	adc	r27, r1
    1098:	05 c0       	rjmp	.+10     	; 0x10a4 <__vector_23+0x44>
    109a:	26 e8       	ldi	r18, 0x86	; 134
    109c:	23 0f       	add	r18, r19
    109e:	02 96       	adiw	r24, 0x02	; 2
    10a0:	a1 1d       	adc	r26, r1
    10a2:	b1 1d       	adc	r27, r1
    10a4:	20 93 4a 05 	sts	0x054A, r18	; 0x80054a <timer0_fract>
    10a8:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <timer0_millis>
    10ac:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <timer0_millis+0x1>
    10b0:	a0 93 4d 05 	sts	0x054D, r26	; 0x80054d <timer0_millis+0x2>
    10b4:	b0 93 4e 05 	sts	0x054E, r27	; 0x80054e <timer0_millis+0x3>
    10b8:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <timer0_overflow_count>
    10bc:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <timer0_overflow_count+0x1>
    10c0:	a0 91 51 05 	lds	r26, 0x0551	; 0x800551 <timer0_overflow_count+0x2>
    10c4:	b0 91 52 05 	lds	r27, 0x0552	; 0x800552 <timer0_overflow_count+0x3>
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	a1 1d       	adc	r26, r1
    10cc:	b1 1d       	adc	r27, r1
    10ce:	80 93 4f 05 	sts	0x054F, r24	; 0x80054f <timer0_overflow_count>
    10d2:	90 93 50 05 	sts	0x0550, r25	; 0x800550 <timer0_overflow_count+0x1>
    10d6:	a0 93 51 05 	sts	0x0551, r26	; 0x800551 <timer0_overflow_count+0x2>
    10da:	b0 93 52 05 	sts	0x0552, r27	; 0x800552 <timer0_overflow_count+0x3>
    10de:	bf 91       	pop	r27
    10e0:	af 91       	pop	r26
    10e2:	9f 91       	pop	r25
    10e4:	8f 91       	pop	r24
    10e6:	3f 91       	pop	r19
    10e8:	2f 91       	pop	r18
    10ea:	0f 90       	pop	r0
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	0f 90       	pop	r0
    10f0:	1f 90       	pop	r1
    10f2:	18 95       	reti

000010f4 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10f4:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    10f6:	f8 94       	cli
	m = timer0_overflow_count;
    10f8:	80 91 4f 05 	lds	r24, 0x054F	; 0x80054f <timer0_overflow_count>
    10fc:	90 91 50 05 	lds	r25, 0x0550	; 0x800550 <timer0_overflow_count+0x1>
    1100:	a0 91 51 05 	lds	r26, 0x0551	; 0x800551 <timer0_overflow_count+0x2>
    1104:	b0 91 52 05 	lds	r27, 0x0552	; 0x800552 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1108:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    110a:	a8 9b       	sbis	0x15, 0	; 21
    110c:	05 c0       	rjmp	.+10     	; 0x1118 <micros+0x24>
    110e:	2f 3f       	cpi	r18, 0xFF	; 255
    1110:	19 f0       	breq	.+6      	; 0x1118 <micros+0x24>
		m++;
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	a1 1d       	adc	r26, r1
    1116:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1118:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    111a:	ba 2f       	mov	r27, r26
    111c:	a9 2f       	mov	r26, r25
    111e:	98 2f       	mov	r25, r24
    1120:	88 27       	eor	r24, r24
    1122:	82 0f       	add	r24, r18
    1124:	91 1d       	adc	r25, r1
    1126:	a1 1d       	adc	r26, r1
    1128:	b1 1d       	adc	r27, r1
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	42 e0       	ldi	r20, 0x02	; 2
    1130:	66 0f       	add	r22, r22
    1132:	77 1f       	adc	r23, r23
    1134:	88 1f       	adc	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	4a 95       	dec	r20
    113a:	d1 f7       	brne	.-12     	; 0x1130 <micros+0x3c>
}
    113c:	08 95       	ret

0000113e <delay>:

void delay(unsigned long ms)
{
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	6b 01       	movw	r12, r22
    1150:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    1152:	d0 df       	rcall	.-96     	; 0x10f4 <micros>
    1154:	4b 01       	movw	r8, r22
    1156:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1158:	c1 14       	cp	r12, r1
    115a:	d1 04       	cpc	r13, r1
    115c:	e1 04       	cpc	r14, r1
    115e:	f1 04       	cpc	r15, r1
		yield();
    1160:	f1 f0       	breq	.+60     	; 0x119e <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1162:	09 d6       	rcall	.+3090   	; 0x1d76 <yield>
    1164:	c7 df       	rcall	.-114    	; 0x10f4 <micros>
    1166:	dc 01       	movw	r26, r24
    1168:	cb 01       	movw	r24, r22
    116a:	88 19       	sub	r24, r8
    116c:	99 09       	sbc	r25, r9
    116e:	aa 09       	sbc	r26, r10
    1170:	bb 09       	sbc	r27, r11
    1172:	88 3e       	cpi	r24, 0xE8	; 232
    1174:	93 40       	sbci	r25, 0x03	; 3
    1176:	a1 05       	cpc	r26, r1
    1178:	b1 05       	cpc	r27, r1
    117a:	70 f3       	brcs	.-36     	; 0x1158 <delay+0x1a>
			ms--;
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	c2 1a       	sub	r12, r18
    1180:	d1 08       	sbc	r13, r1
    1182:	e1 08       	sbc	r14, r1
    1184:	f1 08       	sbc	r15, r1
			start += 1000;
    1186:	88 ee       	ldi	r24, 0xE8	; 232
    1188:	88 0e       	add	r8, r24
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	98 1e       	adc	r9, r24
    118e:	a1 1c       	adc	r10, r1
    1190:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1192:	c1 14       	cp	r12, r1
    1194:	d1 04       	cpc	r13, r1
    1196:	e1 04       	cpc	r14, r1
    1198:	f1 04       	cpc	r15, r1
    119a:	21 f7       	brne	.-56     	; 0x1164 <delay+0x26>
    119c:	dd cf       	rjmp	.-70     	; 0x1158 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	bf 90       	pop	r11
    11a8:	af 90       	pop	r10
    11aa:	9f 90       	pop	r9
    11ac:	8f 90       	pop	r8
    11ae:	08 95       	ret

000011b0 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	91 05       	cpc	r25, r1
    11b4:	38 f0       	brcs	.+14     	; 0x11c4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    11be:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	f1 f7       	brne	.-4      	; 0x11c0 <delayMicroseconds+0x10>
    11c4:	08 95       	ret

000011c6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11c6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11c8:	84 b5       	in	r24, 0x24	; 36
    11ca:	82 60       	ori	r24, 0x02	; 2
    11cc:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11ce:	84 b5       	in	r24, 0x24	; 36
    11d0:	81 60       	ori	r24, 0x01	; 1
    11d2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11d4:	85 b5       	in	r24, 0x25	; 37
    11d6:	82 60       	ori	r24, 0x02	; 2
    11d8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11da:	85 b5       	in	r24, 0x25	; 37
    11dc:	81 60       	ori	r24, 0x01	; 1
    11de:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11e0:	ee e6       	ldi	r30, 0x6E	; 110
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	81 60       	ori	r24, 0x01	; 1
    11e8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11ea:	e1 e8       	ldi	r30, 0x81	; 129
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11f0:	80 81       	ld	r24, Z
    11f2:	82 60       	ori	r24, 0x02	; 2
    11f4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11f6:	80 81       	ld	r24, Z
    11f8:	81 60       	ori	r24, 0x01	; 1
    11fa:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11fc:	e0 e8       	ldi	r30, 0x80	; 128
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1206:	e1 eb       	ldi	r30, 0xB1	; 177
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1210:	e0 eb       	ldi	r30, 0xB0	; 176
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	81 60       	ori	r24, 0x01	; 1
    1218:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    121a:	e1 e9       	ldi	r30, 0x91	; 145
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	82 60       	ori	r24, 0x02	; 2
    1222:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1224:	80 81       	ld	r24, Z
    1226:	81 60       	ori	r24, 0x01	; 1
    1228:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    122a:	e0 e9       	ldi	r30, 0x90	; 144
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	81 60       	ori	r24, 0x01	; 1
    1232:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1234:	e1 ea       	ldi	r30, 0xA1	; 161
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	82 60       	ori	r24, 0x02	; 2
    123c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    123e:	80 81       	ld	r24, Z
    1240:	81 60       	ori	r24, 0x01	; 1
    1242:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1244:	e0 ea       	ldi	r30, 0xA0	; 160
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	81 60       	ori	r24, 0x01	; 1
    124c:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    124e:	e1 e2       	ldi	r30, 0x21	; 33
    1250:	f1 e0       	ldi	r31, 0x01	; 1
    1252:	80 81       	ld	r24, Z
    1254:	82 60       	ori	r24, 0x02	; 2
    1256:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1258:	80 81       	ld	r24, Z
    125a:	81 60       	ori	r24, 0x01	; 1
    125c:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    125e:	e0 e2       	ldi	r30, 0x20	; 32
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	80 81       	ld	r24, Z
    1264:	81 60       	ori	r24, 0x01	; 1
    1266:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1268:	ea e7       	ldi	r30, 0x7A	; 122
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	84 60       	ori	r24, 0x04	; 4
    1270:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1272:	80 81       	ld	r24, Z
    1274:	82 60       	ori	r24, 0x02	; 2
    1276:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1278:	80 81       	ld	r24, Z
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    127e:	80 81       	ld	r24, Z
    1280:	80 68       	ori	r24, 0x80	; 128
    1282:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1284:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1288:	08 95       	ret

0000128a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	fc 01       	movw	r30, r24
    128e:	31 97       	sbiw	r30, 0x01	; 1
    1290:	e2 31       	cpi	r30, 0x12	; 18
    1292:	f1 05       	cpc	r31, r1
    1294:	08 f0       	brcs	.+2      	; 0x1298 <turnOffPWM+0xe>
    1296:	4e c0       	rjmp	.+156    	; 0x1334 <turnOffPWM+0xaa>
    1298:	88 27       	eor	r24, r24
    129a:	ee 58       	subi	r30, 0x8E	; 142
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	8f 4f       	sbci	r24, 0xFF	; 255
    12a0:	0c 94 9a 1e 	jmp	0x3d34	; 0x3d34 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    12a4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12a8:	8f 77       	andi	r24, 0x7F	; 127
    12aa:	03 c0       	rjmp	.+6      	; 0x12b2 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12ac:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12b0:	8f 7d       	andi	r24, 0xDF	; 223
    12b2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12b6:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    12b8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12bc:	87 7f       	andi	r24, 0xF7	; 247
    12be:	f9 cf       	rjmp	.-14     	; 0x12b2 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    12c0:	84 b5       	in	r24, 0x24	; 36
    12c2:	8f 77       	andi	r24, 0x7F	; 127
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    12c6:	84 b5       	in	r24, 0x24	; 36
    12c8:	8f 7d       	andi	r24, 0xDF	; 223
    12ca:	84 bd       	out	0x24, r24	; 36
    12cc:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12ce:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12d2:	8f 77       	andi	r24, 0x7F	; 127
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12d6:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12da:	8f 7d       	andi	r24, 0xDF	; 223
    12dc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12e0:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    12e2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12e6:	8f 77       	andi	r24, 0x7F	; 127
    12e8:	07 c0       	rjmp	.+14     	; 0x12f8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    12ea:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12ee:	8f 7d       	andi	r24, 0xDF	; 223
    12f0:	03 c0       	rjmp	.+6      	; 0x12f8 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    12f2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12f6:	87 7f       	andi	r24, 0xF7	; 247
    12f8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12fc:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    12fe:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1302:	8f 77       	andi	r24, 0x7F	; 127
    1304:	07 c0       	rjmp	.+14     	; 0x1314 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1306:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    130a:	8f 7d       	andi	r24, 0xDF	; 223
    130c:	03 c0       	rjmp	.+6      	; 0x1314 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    130e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1312:	87 7f       	andi	r24, 0xF7	; 247
    1314:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1318:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    131a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	07 c0       	rjmp	.+14     	; 0x1330 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1322:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1326:	8f 7d       	andi	r24, 0xDF	; 223
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    132a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    132e:	87 7f       	andi	r24, 0xF7	; 247
    1330:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1334:	08 95       	ret

00001336 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fc 01       	movw	r30, r24
    133e:	ea 59       	subi	r30, 0x9A	; 154
    1340:	fe 4f       	sbci	r31, 0xFE	; 254
    1342:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1344:	fc 01       	movw	r30, r24
    1346:	e4 55       	subi	r30, 0x54	; 84
    1348:	fe 4f       	sbci	r31, 0xFE	; 254
    134a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    134c:	88 23       	and	r24, r24
    134e:	61 f1       	breq	.+88     	; 0x13a8 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	fc 01       	movw	r30, r24
    1358:	ea 5d       	subi	r30, 0xDA	; 218
    135a:	fd 4f       	sbci	r31, 0xFD	; 253
    135c:	c5 91       	lpm	r28, Z+
    135e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    1360:	fc 01       	movw	r30, r24
    1362:	e4 5f       	subi	r30, 0xF4	; 244
    1364:	fd 4f       	sbci	r31, 0xFD	; 253
    1366:	a5 91       	lpm	r26, Z+
    1368:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    136a:	61 11       	cpse	r22, r1
    136c:	09 c0       	rjmp	.+18     	; 0x1380 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    136e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1370:	f8 94       	cli
		*reg &= ~bit;
    1372:	88 81       	ld	r24, Y
    1374:	20 95       	com	r18
    1376:	82 23       	and	r24, r18
    1378:	88 83       	st	Y, r24
		*out &= ~bit;
    137a:	ec 91       	ld	r30, X
    137c:	2e 23       	and	r18, r30
    137e:	0b c0       	rjmp	.+22     	; 0x1396 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1380:	62 30       	cpi	r22, 0x02	; 2
    1382:	61 f4       	brne	.+24     	; 0x139c <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1384:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1386:	f8 94       	cli
		*reg &= ~bit;
    1388:	88 81       	ld	r24, Y
    138a:	32 2f       	mov	r19, r18
    138c:	30 95       	com	r19
    138e:	83 23       	and	r24, r19
    1390:	88 83       	st	Y, r24
		*out |= bit;
    1392:	ec 91       	ld	r30, X
    1394:	2e 2b       	or	r18, r30
    1396:	2c 93       	st	X, r18
		SREG = oldSREG;
    1398:	9f bf       	out	0x3f, r25	; 63
    139a:	06 c0       	rjmp	.+12     	; 0x13a8 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    139c:	8f b7       	in	r24, 0x3f	; 63
                cli();
    139e:	f8 94       	cli
		*reg |= bit;
    13a0:	e8 81       	ld	r30, Y
    13a2:	2e 2b       	or	r18, r30
    13a4:	28 83       	st	Y, r18
		SREG = oldSREG;
    13a6:	8f bf       	out	0x3f, r24	; 63
	}
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13ae:	1f 93       	push	r17
    13b0:	cf 93       	push	r28
    13b2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13b4:	28 2f       	mov	r18, r24
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	f9 01       	movw	r30, r18
    13ba:	e0 5e       	subi	r30, 0xE0	; 224
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13c0:	f9 01       	movw	r30, r18
    13c2:	ea 59       	subi	r30, 0x9A	; 154
    13c4:	fe 4f       	sbci	r31, 0xFE	; 254
    13c6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13c8:	f9 01       	movw	r30, r18
    13ca:	e4 55       	subi	r30, 0x54	; 84
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13d0:	cc 23       	and	r28, r28
    13d2:	b9 f0       	breq	.+46     	; 0x1402 <digitalWrite+0x54>
    13d4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13d6:	81 11       	cpse	r24, r1
    13d8:	58 df       	rcall	.-336    	; 0x128a <turnOffPWM>

	out = portOutputRegister(port);
    13da:	ec 2f       	mov	r30, r28
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	ee 0f       	add	r30, r30
    13e0:	ff 1f       	adc	r31, r31
    13e2:	e4 5f       	subi	r30, 0xF4	; 244
    13e4:	fd 4f       	sbci	r31, 0xFD	; 253
    13e6:	a5 91       	lpm	r26, Z+
    13e8:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    13ea:	9f b7       	in	r25, 0x3f	; 63
	cli();
    13ec:	f8 94       	cli

	if (val == LOW) {
    13ee:	11 11       	cpse	r17, r1
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <digitalWrite+0x4c>
		*out &= ~bit;
    13f2:	8c 91       	ld	r24, X
    13f4:	d0 95       	com	r29
    13f6:	d8 23       	and	r29, r24
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <digitalWrite+0x50>
	} else {
		*out |= bit;
    13fa:	ec 91       	ld	r30, X
    13fc:	de 2b       	or	r29, r30
    13fe:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1400:	9f bf       	out	0x3f, r25	; 63
}
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	08 95       	ret

0000140a <digitalRead>:

int digitalRead(uint8_t pin)
{
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	f9 01       	movw	r30, r18
    1414:	e0 5e       	subi	r30, 0xE0	; 224
    1416:	fe 4f       	sbci	r31, 0xFE	; 254
    1418:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    141a:	f9 01       	movw	r30, r18
    141c:	ea 59       	subi	r30, 0x9A	; 154
    141e:	fe 4f       	sbci	r31, 0xFE	; 254
    1420:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1422:	f9 01       	movw	r30, r18
    1424:	e4 55       	subi	r30, 0x54	; 84
    1426:	fe 4f       	sbci	r31, 0xFE	; 254
    1428:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    142a:	cc 23       	and	r28, r28
    142c:	89 f0       	breq	.+34     	; 0x1450 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    142e:	81 11       	cpse	r24, r1
    1430:	2c df       	rcall	.-424    	; 0x128a <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1432:	ec 2f       	mov	r30, r28
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	ee 0f       	add	r30, r30
    1438:	ff 1f       	adc	r31, r31
    143a:	ee 50       	subi	r30, 0x0E	; 14
    143c:	fe 4f       	sbci	r31, 0xFE	; 254
    143e:	a5 91       	lpm	r26, Z+
    1440:	b4 91       	lpm	r27, Z
    1442:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1444:	ed 23       	and	r30, r29
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	21 f4       	brne	.+8      	; 0x1454 <digitalRead+0x4a>
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <digitalRead+0x4a>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	08 95       	ret

0000145a <_ZN16Adafruit_AMG88xx5writeEhPhh>:
	uint8_t raw[2];
	this->read(AMG88xx_TTHL, raw, 2);
	uint16_t recast = ((uint16_t)raw[1] << 8) | ((uint16_t)raw[0]);

	return signedMag12ToFloat(recast) * AMG88xx_THERMISTOR_CONVERSION;
}
    145a:	ef 92       	push	r14
    145c:	ff 92       	push	r15
    145e:	0f 93       	push	r16
    1460:	1f 93       	push	r17
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	c6 2f       	mov	r28, r22
    1468:	7a 01       	movw	r14, r20
    146a:	02 2f       	mov	r16, r18
    146c:	fc 01       	movw	r30, r24
    146e:	60 81       	ld	r22, Z
    1470:	83 e5       	ldi	r24, 0x53	; 83
    1472:	95 e0       	ldi	r25, 0x05	; 5
    1474:	f9 d3       	rcall	.+2034   	; 0x1c68 <_ZN7TwoWire17beginTransmissionEh>
    1476:	6c 2f       	mov	r22, r28
    1478:	83 e5       	ldi	r24, 0x53	; 83
    147a:	95 e0       	ldi	r25, 0x05	; 5
    147c:	a4 d3       	rcall	.+1864   	; 0x1bc6 <_ZN7TwoWire5writeEh>
    147e:	e7 01       	movw	r28, r14
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	ce 01       	movw	r24, r28
    1484:	8e 19       	sub	r24, r14
    1486:	9f 09       	sbc	r25, r15
    1488:	80 17       	cp	r24, r16
    148a:	91 07       	cpc	r25, r17
    148c:	2c f4       	brge	.+10     	; 0x1498 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x3e>
    148e:	69 91       	ld	r22, Y+
    1490:	83 e5       	ldi	r24, 0x53	; 83
    1492:	95 e0       	ldi	r25, 0x05	; 5
    1494:	98 d3       	rcall	.+1840   	; 0x1bc6 <_ZN7TwoWire5writeEh>
    1496:	f5 cf       	rjmp	.-22     	; 0x1482 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x28>
    1498:	83 e5       	ldi	r24, 0x53	; 83
    149a:	95 e0       	ldi	r25, 0x05	; 5
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	0f 91       	pop	r16
    14a4:	ff 90       	pop	r15
    14a6:	ef 90       	pop	r14
    14a8:	5f c4       	rjmp	.+2238   	; 0x1d68 <_ZN7TwoWire15endTransmissionEv>

000014aa <_ZN16Adafruit_AMG88xx6write8Ehh>:
    14aa:	cf 93       	push	r28
    14ac:	df 93       	push	r29
    14ae:	1f 92       	push	r1
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	49 83       	std	Y+1, r20	; 0x01
    14b6:	21 e0       	ldi	r18, 0x01	; 1
    14b8:	ae 01       	movw	r20, r28
    14ba:	4f 5f       	subi	r20, 0xFF	; 255
    14bc:	5f 4f       	sbci	r21, 0xFF	; 255
    14be:	cd df       	rcall	.-102    	; 0x145a <_ZN16Adafruit_AMG88xx5writeEhPhh>
    14c0:	0f 90       	pop	r0
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <_ZN16Adafruit_AMG88xx16disableInterruptEv>:
    14c8:	fc 01       	movw	r30, r24
    14ca:	24 81       	ldd	r18, Z+4	; 0x04
    14cc:	2e 7f       	andi	r18, 0xFE	; 254
    14ce:	24 83       	std	Z+4, r18	; 0x04
    14d0:	21 fb       	bst	r18, 1
    14d2:	44 27       	eor	r20, r20
    14d4:	40 f9       	bld	r20, 0
    14d6:	50 e0       	ldi	r21, 0x00	; 0
    14d8:	44 0f       	add	r20, r20
    14da:	55 1f       	adc	r21, r21
    14dc:	63 e0       	ldi	r22, 0x03	; 3
    14de:	e5 cf       	rjmp	.-54     	; 0x14aa <_ZN16Adafruit_AMG88xx6write8Ehh>

000014e0 <_ZN16Adafruit_AMG88xx5beginEh>:
    14e0:	cf 93       	push	r28
    14e2:	df 93       	push	r29
    14e4:	ec 01       	movw	r28, r24
    14e6:	68 83       	st	Y, r22
    14e8:	83 e5       	ldi	r24, 0x53	; 83
    14ea:	95 e0       	ldi	r25, 0x05	; 5
    14ec:	ab d3       	rcall	.+1878   	; 0x1c44 <_ZN7TwoWire5beginEv>
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	ce 01       	movw	r24, r28
    14f6:	d9 df       	rcall	.-78     	; 0x14aa <_ZN16Adafruit_AMG88xx6write8Ehh>
    14f8:	8f e3       	ldi	r24, 0x3F	; 63
    14fa:	8a 83       	std	Y+2, r24	; 0x02
    14fc:	4f e3       	ldi	r20, 0x3F	; 63
    14fe:	61 e0       	ldi	r22, 0x01	; 1
    1500:	ce 01       	movw	r24, r28
    1502:	d3 df       	rcall	.-90     	; 0x14aa <_ZN16Adafruit_AMG88xx6write8Ehh>
    1504:	ce 01       	movw	r24, r28
    1506:	e0 df       	rcall	.-64     	; 0x14c8 <_ZN16Adafruit_AMG88xx16disableInterruptEv>
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	8e 7f       	andi	r24, 0xFE	; 254
    150c:	8b 83       	std	Y+3, r24	; 0x03
    150e:	40 e0       	ldi	r20, 0x00	; 0
    1510:	62 e0       	ldi	r22, 0x02	; 2
    1512:	ce 01       	movw	r24, r28
    1514:	ca df       	rcall	.-108    	; 0x14aa <_ZN16Adafruit_AMG88xx6write8Ehh>
    1516:	64 e6       	ldi	r22, 0x64	; 100
    1518:	70 e0       	ldi	r23, 0x00	; 0
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0f de       	rcall	.-994    	; 0x113e <delay>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	08 95       	ret

00001528 <_ZN16Adafruit_AMG88xx4readEhPhh>:
    1528:	6f 92       	push	r6
    152a:	7f 92       	push	r7
    152c:	8f 92       	push	r8
    152e:	9f 92       	push	r9
    1530:	af 92       	push	r10
    1532:	bf 92       	push	r11
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	8c 01       	movw	r16, r24
    1546:	66 2e       	mov	r6, r22
    1548:	6a 01       	movw	r12, r20
    154a:	72 2e       	mov	r7, r18
    154c:	c0 e0       	ldi	r28, 0x00	; 0
    154e:	c7 15       	cp	r28, r7
    1550:	78 f5       	brcc	.+94     	; 0x15b0 <_ZN16Adafruit_AMG88xx4readEhPhh+0x88>
    1552:	d7 2d       	mov	r29, r7
    1554:	dc 1b       	sub	r29, r28
    1556:	d1 32       	cpi	r29, 0x21	; 33
    1558:	08 f0       	brcs	.+2      	; 0x155c <_ZN16Adafruit_AMG88xx4readEhPhh+0x34>
    155a:	d0 e2       	ldi	r29, 0x20	; 32
    155c:	f8 01       	movw	r30, r16
    155e:	60 81       	ld	r22, Z
    1560:	83 e5       	ldi	r24, 0x53	; 83
    1562:	95 e0       	ldi	r25, 0x05	; 5
    1564:	81 d3       	rcall	.+1794   	; 0x1c68 <_ZN7TwoWire17beginTransmissionEh>
    1566:	6c 2f       	mov	r22, r28
    1568:	66 0d       	add	r22, r6
    156a:	83 e5       	ldi	r24, 0x53	; 83
    156c:	95 e0       	ldi	r25, 0x05	; 5
    156e:	2b d3       	rcall	.+1622   	; 0x1bc6 <_ZN7TwoWire5writeEh>
    1570:	83 e5       	ldi	r24, 0x53	; 83
    1572:	95 e0       	ldi	r25, 0x05	; 5
    1574:	f9 d3       	rcall	.+2034   	; 0x1d68 <_ZN7TwoWire15endTransmissionEv>
    1576:	4d 2f       	mov	r20, r29
    1578:	f8 01       	movw	r30, r16
    157a:	60 81       	ld	r22, Z
    157c:	83 e5       	ldi	r24, 0x53	; 83
    157e:	95 e0       	ldi	r25, 0x05	; 5
    1580:	f1 d3       	rcall	.+2018   	; 0x1d64 <_ZN7TwoWire11requestFromEhh>
    1582:	81 2c       	mov	r8, r1
    1584:	91 2c       	mov	r9, r1
    1586:	ad 2e       	mov	r10, r29
    1588:	b1 2c       	mov	r11, r1
    158a:	8c 2f       	mov	r24, r28
    158c:	88 0d       	add	r24, r8
    158e:	8a 14       	cp	r8, r10
    1590:	9b 04       	cpc	r9, r11
    1592:	14 f0       	brlt	.+4      	; 0x1598 <_ZN16Adafruit_AMG88xx4readEhPhh+0x70>
    1594:	cd 0f       	add	r28, r29
    1596:	db cf       	rjmp	.-74     	; 0x154e <_ZN16Adafruit_AMG88xx4readEhPhh+0x26>
    1598:	76 01       	movw	r14, r12
    159a:	e8 0e       	add	r14, r24
    159c:	f1 1c       	adc	r15, r1
    159e:	83 e5       	ldi	r24, 0x53	; 83
    15a0:	95 e0       	ldi	r25, 0x05	; 5
    15a2:	8a d2       	rcall	.+1300   	; 0x1ab8 <_ZN7TwoWire4readEv>
    15a4:	f7 01       	movw	r30, r14
    15a6:	80 83       	st	Z, r24
    15a8:	ff ef       	ldi	r31, 0xFF	; 255
    15aa:	8f 1a       	sub	r8, r31
    15ac:	9f 0a       	sbc	r9, r31
    15ae:	ed cf       	rjmp	.-38     	; 0x158a <_ZN16Adafruit_AMG88xx4readEhPhh+0x62>
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	ff 90       	pop	r15
    15ba:	ef 90       	pop	r14
    15bc:	df 90       	pop	r13
    15be:	cf 90       	pop	r12
    15c0:	bf 90       	pop	r11
    15c2:	af 90       	pop	r10
    15c4:	9f 90       	pop	r9
    15c6:	8f 90       	pop	r8
    15c8:	7f 90       	pop	r7
    15ca:	6f 90       	pop	r6
    15cc:	08 95       	ret

000015ce <_ZN16Adafruit_AMG88xx10readPixelsEPfh>:
    @param  size Optionsl number of bytes to read (up to 64). Default is 64 bytes.
    @return up to 64 bytes of pixel data in buf
*/
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
    15ce:	8f 92       	push	r8
    15d0:	9f 92       	push	r9
    15d2:	af 92       	push	r10
    15d4:	bf 92       	push	r11
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	f6 2e       	mov	r15, r22
    15ec:	17 2f       	mov	r17, r23
    15ee:	04 2f       	mov	r16, r20
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    15f0:	8d b6       	in	r8, 0x3d	; 61
    15f2:	9e b6       	in	r9, 0x3e	; 62
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
	uint16_t recast;
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
    15f4:	24 2f       	mov	r18, r20
    15f6:	22 0f       	add	r18, r18
    15f8:	46 fd       	sbrc	r20, 6
    15fa:	20 e8       	ldi	r18, 0x80	; 128
	uint8_t rawArray[bytesToRead];
    15fc:	4d b7       	in	r20, 0x3d	; 61
    15fe:	5e b7       	in	r21, 0x3e	; 62
    1600:	42 1b       	sub	r20, r18
    1602:	51 09       	sbc	r21, r1
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	5e bf       	out	0x3e, r21	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	4d bf       	out	0x3d, r20	; 61
    160e:	ed b7       	in	r30, 0x3d	; 61
    1610:	fe b7       	in	r31, 0x3e	; 62
    1612:	31 96       	adiw	r30, 0x01	; 1
    1614:	5f 01       	movw	r10, r30
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
    1616:	af 01       	movw	r20, r30
    1618:	60 e8       	ldi	r22, 0x80	; 128
    161a:	86 df       	rcall	.-244    	; 0x1528 <_ZN16Adafruit_AMG88xx4readEhPhh>
    161c:	cf 2c       	mov	r12, r15
    161e:	d1 2e       	mov	r13, r17
	
	for(int i=0; i<size; i++){
    1620:	e1 2c       	mov	r14, r1
    1622:	f1 2c       	mov	r15, r1
    1624:	10 e0       	ldi	r17, 0x00	; 0
    1626:	e0 16       	cp	r14, r16
    1628:	f1 06       	cpc	r15, r17
    162a:	54 f5       	brge	.+84     	; 0x1680 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0xb2>
		uint8_t pos = i << 1;
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
    162c:	8e 2d       	mov	r24, r14
    162e:	88 0f       	add	r24, r24
    1630:	f5 01       	movw	r30, r10
    1632:	e8 0f       	add	r30, r24
    1634:	f1 1d       	adc	r31, r1
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
    1636:	61 81       	ldd	r22, Z+1	; 0x01
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	76 2f       	mov	r23, r22
    163c:	66 27       	eor	r22, r22
    163e:	80 81       	ld	r24, Z
    1640:	68 2b       	or	r22, r24
    1642:	94 e0       	ldi	r25, 0x04	; 4
    1644:	66 0f       	add	r22, r22
    1646:	77 1f       	adc	r23, r23
    1648:	9a 95       	dec	r25
    164a:	e1 f7       	brne	.-8      	; 0x1644 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x76>
    164c:	24 e0       	ldi	r18, 0x04	; 4
    164e:	75 95       	asr	r23
    1650:	67 95       	ror	r22
    1652:	2a 95       	dec	r18
    1654:	e1 f7       	brne	.-8      	; 0x164e <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x80>
    1656:	07 2e       	mov	r0, r23
    1658:	00 0c       	add	r0, r0
    165a:	88 0b       	sbc	r24, r24
    165c:	99 0b       	sbc	r25, r25
    165e:	dd d9       	rcall	.-3142   	; 0xa1a <__floatsisf>
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e8       	ldi	r20, 0x80	; 128
    1666:	5e e3       	ldi	r21, 0x3E	; 62
    1668:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__mulsf3>
    166c:	f6 01       	movw	r30, r12
    166e:	61 93       	st	Z+, r22
    1670:	71 93       	st	Z+, r23
    1672:	81 93       	st	Z+, r24
    1674:	91 93       	st	Z+, r25
    1676:	6f 01       	movw	r12, r30
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
	uint8_t rawArray[bytesToRead];
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
	
	for(int i=0; i<size; i++){
    1678:	ff ef       	ldi	r31, 0xFF	; 255
    167a:	ef 1a       	sub	r14, r31
    167c:	ff 0a       	sbc	r15, r31
    167e:	d3 cf       	rjmp	.-90     	; 0x1626 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x58>
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	9e be       	out	0x3e, r9	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	8d be       	out	0x3d, r8	; 61
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	1f 91       	pop	r17
    1690:	0f 91       	pop	r16
    1692:	ff 90       	pop	r15
    1694:	ef 90       	pop	r14
    1696:	df 90       	pop	r13
    1698:	cf 90       	pop	r12
    169a:	bf 90       	pop	r11
    169c:	af 90       	pop	r10
    169e:	9f 90       	pop	r9
    16a0:	8f 90       	pop	r8
    16a2:	08 95       	ret

000016a4 <_ZN15Adafruit_ST773511setRotationEh>:
    @param  rst   Reset pin # (optional, pass -1 if unused)
*/
Adafruit_ST7735::Adafruit_ST7735(int8_t cs, int8_t dc, int8_t mosi, int8_t sclk,
                                 int8_t rst)
    : Adafruit_ST77xx(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, mosi,
                      sclk, rst) {}
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	1f 92       	push	r1
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	fc 01       	movw	r30, r24
    16b0:	19 82       	std	Y+1, r1	; 0x01
    16b2:	63 70       	andi	r22, 0x03	; 3
    16b4:	66 8b       	std	Z+22, r22	; 0x16
    16b6:	dc 01       	movw	r26, r24
    16b8:	aa 5b       	subi	r26, 0xBA	; 186
    16ba:	bf 4f       	sbci	r27, 0xFF	; 255
    16bc:	8c 91       	ld	r24, X
    16be:	98 2f       	mov	r25, r24
    16c0:	9b 7f       	andi	r25, 0xFB	; 251
    16c2:	af 01       	movw	r20, r30
    16c4:	4c 5b       	subi	r20, 0xBC	; 188
    16c6:	5f 4f       	sbci	r21, 0xFF	; 255
    16c8:	91 30       	cpi	r25, 0x01	; 1
    16ca:	29 f4       	brne	.+10     	; 0x16d6 <_ZN15Adafruit_ST773511setRotationEh+0x32>
    16cc:	62 30       	cpi	r22, 0x02	; 2
    16ce:	08 f4       	brcc	.+2      	; 0x16d2 <_ZN15Adafruit_ST773511setRotationEh+0x2e>
    16d0:	93 e0       	ldi	r25, 0x03	; 3
    16d2:	da 01       	movw	r26, r20
    16d4:	9c 93       	st	X, r25
    16d6:	9f 01       	movw	r18, r30
    16d8:	2d 5b       	subi	r18, 0xBD	; 189
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	62 30       	cpi	r22, 0x02	; 2
    16de:	d9 f0       	breq	.+54     	; 0x1716 <_ZN15Adafruit_ST773511setRotationEh+0x72>
    16e0:	63 30       	cpi	r22, 0x03	; 3
    16e2:	09 f4       	brne	.+2      	; 0x16e6 <_ZN15Adafruit_ST773511setRotationEh+0x42>
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <_ZN15Adafruit_ST773511setRotationEh+0xc0>
    16e6:	61 30       	cpi	r22, 0x01	; 1
    16e8:	71 f0       	breq	.+28     	; 0x1706 <_ZN15Adafruit_ST773511setRotationEh+0x62>
    16ea:	82 30       	cpi	r24, 0x02	; 2
    16ec:	11 f0       	breq	.+4      	; 0x16f2 <_ZN15Adafruit_ST773511setRotationEh+0x4e>
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	29 f4       	brne	.+10     	; 0x16fc <_ZN15Adafruit_ST773511setRotationEh+0x58>
    16f2:	90 ec       	ldi	r25, 0xC0	; 192
    16f4:	99 83       	std	Y+1, r25	; 0x01
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	19 f4       	brne	.+6      	; 0x1700 <_ZN15Adafruit_ST773511setRotationEh+0x5c>
    16fa:	15 c0       	rjmp	.+42     	; 0x1726 <_ZN15Adafruit_ST773511setRotationEh+0x82>
    16fc:	98 ec       	ldi	r25, 0xC8	; 200
    16fe:	10 c0       	rjmp	.+32     	; 0x1720 <_ZN15Adafruit_ST773511setRotationEh+0x7c>
    1700:	84 30       	cpi	r24, 0x04	; 4
    1702:	b1 f0       	breq	.+44     	; 0x1730 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
    1704:	1c c0       	rjmp	.+56     	; 0x173e <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    1706:	82 30       	cpi	r24, 0x02	; 2
    1708:	11 f0       	breq	.+4      	; 0x170e <_ZN15Adafruit_ST773511setRotationEh+0x6a>
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	11 f4       	brne	.+4      	; 0x1712 <_ZN15Adafruit_ST773511setRotationEh+0x6e>
    170e:	90 ea       	ldi	r25, 0xA0	; 160
    1710:	2e c0       	rjmp	.+92     	; 0x176e <_ZN15Adafruit_ST773511setRotationEh+0xca>
    1712:	98 ea       	ldi	r25, 0xA8	; 168
    1714:	35 c0       	rjmp	.+106    	; 0x1780 <_ZN15Adafruit_ST773511setRotationEh+0xdc>
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	91 f0       	breq	.+36     	; 0x173e <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    171a:	84 30       	cpi	r24, 0x04	; 4
    171c:	49 f0       	breq	.+18     	; 0x1730 <_ZN15Adafruit_ST773511setRotationEh+0x8c>
    171e:	98 e0       	ldi	r25, 0x08	; 8
    1720:	99 83       	std	Y+1, r25	; 0x01
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	61 f4       	brne	.+24     	; 0x173e <_ZN15Adafruit_ST773511setRotationEh+0x9a>
    1726:	80 e8       	ldi	r24, 0x80	; 128
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	93 87       	std	Z+11, r25	; 0x0b
    172c:	82 87       	std	Z+10, r24	; 0x0a
    172e:	0d c0       	rjmp	.+26     	; 0x174a <_ZN15Adafruit_ST773511setRotationEh+0xa6>
    1730:	80 ea       	ldi	r24, 0xA0	; 160
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	93 87       	std	Z+11, r25	; 0x0b
    1736:	82 87       	std	Z+10, r24	; 0x0a
    1738:	80 e5       	ldi	r24, 0x50	; 80
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	06 c0       	rjmp	.+12     	; 0x174a <_ZN15Adafruit_ST773511setRotationEh+0xa6>
    173e:	80 ea       	ldi	r24, 0xA0	; 160
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	93 87       	std	Z+11, r25	; 0x0b
    1744:	82 87       	std	Z+10, r24	; 0x0a
    1746:	80 e8       	ldi	r24, 0x80	; 128
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	91 87       	std	Z+9, r25	; 0x09
    174c:	80 87       	std	Z+8, r24	; 0x08
    174e:	d9 01       	movw	r26, r18
    1750:	8c 91       	ld	r24, X
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	92 af       	std	Z+58, r25	; 0x3a
    1756:	81 af       	std	Z+57, r24	; 0x39
    1758:	da 01       	movw	r26, r20
    175a:	8c 91       	ld	r24, X
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	94 af       	std	Z+60, r25	; 0x3c
    1760:	83 af       	std	Z+59, r24	; 0x3b
    1762:	2d c0       	rjmp	.+90     	; 0x17be <_ZN15Adafruit_ST773511setRotationEh+0x11a>
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	11 f0       	breq	.+4      	; 0x176c <_ZN15Adafruit_ST773511setRotationEh+0xc8>
    1768:	84 30       	cpi	r24, 0x04	; 4
    176a:	49 f4       	brne	.+18     	; 0x177e <_ZN15Adafruit_ST773511setRotationEh+0xda>
    176c:	90 e6       	ldi	r25, 0x60	; 96
    176e:	99 83       	std	Y+1, r25	; 0x01
    1770:	81 30       	cpi	r24, 0x01	; 1
    1772:	51 f4       	brne	.+20     	; 0x1788 <_ZN15Adafruit_ST773511setRotationEh+0xe4>
    1774:	80 e8       	ldi	r24, 0x80	; 128
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	91 87       	std	Z+9, r25	; 0x09
    177a:	80 87       	std	Z+8, r24	; 0x08
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <_ZN15Adafruit_ST773511setRotationEh+0x102>
    177e:	98 e6       	ldi	r25, 0x68	; 104
    1780:	99 83       	std	Y+1, r25	; 0x01
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	51 f4       	brne	.+20     	; 0x179a <_ZN15Adafruit_ST773511setRotationEh+0xf6>
    1786:	f6 cf       	rjmp	.-20     	; 0x1774 <_ZN15Adafruit_ST773511setRotationEh+0xd0>
    1788:	84 30       	cpi	r24, 0x04	; 4
    178a:	39 f4       	brne	.+14     	; 0x179a <_ZN15Adafruit_ST773511setRotationEh+0xf6>
    178c:	80 ea       	ldi	r24, 0xA0	; 160
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	91 87       	std	Z+9, r25	; 0x09
    1792:	80 87       	std	Z+8, r24	; 0x08
    1794:	80 e5       	ldi	r24, 0x50	; 80
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	06 c0       	rjmp	.+12     	; 0x17a6 <_ZN15Adafruit_ST773511setRotationEh+0x102>
    179a:	80 ea       	ldi	r24, 0xA0	; 160
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	91 87       	std	Z+9, r25	; 0x09
    17a0:	80 87       	std	Z+8, r24	; 0x08
    17a2:	80 e8       	ldi	r24, 0x80	; 128
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	93 87       	std	Z+11, r25	; 0x0b
    17a8:	82 87       	std	Z+10, r24	; 0x0a
    17aa:	d9 01       	movw	r26, r18
    17ac:	8c 91       	ld	r24, X
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	94 af       	std	Z+60, r25	; 0x3c
    17b2:	83 af       	std	Z+59, r24	; 0x3b
    17b4:	da 01       	movw	r26, r20
    17b6:	8c 91       	ld	r24, X
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	92 af       	std	Z+58, r25	; 0x3a
    17bc:	81 af       	std	Z+57, r24	; 0x39
    17be:	21 e0       	ldi	r18, 0x01	; 1
    17c0:	ae 01       	movw	r20, r28
    17c2:	4f 5f       	subi	r20, 0xFF	; 255
    17c4:	5f 4f       	sbci	r21, 0xFF	; 255
    17c6:	66 e3       	ldi	r22, 0x36	; 54
    17c8:	cf 01       	movw	r24, r30
    17ca:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
    17ce:	0f 90       	pop	r0
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <_ZN15Adafruit_ST7735C1Eaaa>:
    @brief  Instantiate Adafruit ST7735 driver with default hardware SPI
    @param  cs   Chip select pin #
    @param  dc   Data/Command pin #
    @param  rst  Reset pin # (optional, pass -1 if unused)
*/
Adafruit_ST7735::Adafruit_ST7735(int8_t cs, int8_t dc, int8_t rst)
    17d6:	ef 92       	push	r14
    17d8:	0f 93       	push	r16
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    : Adafruit_ST77xx(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {}
    17e0:	e2 2e       	mov	r14, r18
    17e2:	04 2f       	mov	r16, r20
    17e4:	26 2f       	mov	r18, r22
    17e6:	40 ea       	ldi	r20, 0xA0	; 160
    17e8:	50 e0       	ldi	r21, 0x00	; 0
    17ea:	60 e8       	ldi	r22, 0x80	; 128
    17ec:	70 e0       	ldi	r23, 0x00	; 0
    17ee:	b7 d0       	rcall	.+366    	; 0x195e <_ZN15Adafruit_ST77xxC1Ejjaaa>
    17f0:	87 e7       	ldi	r24, 0x77	; 119
    17f2:	92 e0       	ldi	r25, 0x02	; 2
    17f4:	99 83       	std	Y+1, r25	; 0x01
    17f6:	88 83       	st	Y, r24
    17f8:	df 91       	pop	r29
    17fa:	cf 91       	pop	r28
    17fc:	0f 91       	pop	r16
    17fe:	ef 90       	pop	r14
    1800:	08 95       	ret

00001802 <_ZN15Adafruit_ST77xx5beginEm>:
*/
/**************************************************************************/
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, int8_t cs, int8_t dc,
                                 int8_t mosi, int8_t sclk, int8_t rst,
                                 int8_t miso)
    : Adafruit_SPITFT(w, h, cs, dc, mosi, sclk, rst, miso) {}
    1802:	41 15       	cp	r20, r1
    1804:	51 05       	cpc	r21, r1
    1806:	61 05       	cpc	r22, r1
    1808:	71 05       	cpc	r23, r1
    180a:	21 f4       	brne	.+8      	; 0x1814 <_ZN15Adafruit_ST77xx5beginEm+0x12>
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	58 e4       	ldi	r21, 0x48	; 72
    1810:	68 ee       	ldi	r22, 0xE8	; 232
    1812:	71 e0       	ldi	r23, 0x01	; 1
    1814:	fc 01       	movw	r30, r24
    1816:	ff 96       	adiw	r30, 0x3f	; 63
    1818:	40 83       	st	Z, r20
    181a:	51 83       	std	Z+1, r21	; 0x01
    181c:	62 83       	std	Z+2, r22	; 0x02
    181e:	73 83       	std	Z+3, r23	; 0x03
    1820:	21 e2       	ldi	r18, 0x21	; 33
    1822:	fc 01       	movw	r30, r24
    1824:	25 af       	std	Z+61, r18	; 0x3d
    1826:	20 e2       	ldi	r18, 0x20	; 32
    1828:	26 af       	std	Z+62, r18	; 0x3e
    182a:	eb 5b       	subi	r30, 0xBB	; 187
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	20 81       	ld	r18, Z
    1830:	0c 94 5f 15 	jmp	0x2abe	; 0x2abe <_ZN15Adafruit_SPITFT7initSPIEmh>

00001834 <_ZN15Adafruit_ST77xx13setAddrWindowEjjjj>:
    1834:	8f 92       	push	r8
    1836:	9f 92       	push	r9
    1838:	af 92       	push	r10
    183a:	bf 92       	push	r11
    183c:	cf 92       	push	r12
    183e:	df 92       	push	r13
    1840:	ef 92       	push	r14
    1842:	ff 92       	push	r15
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	ec 01       	movw	r28, r24
    184e:	89 ad       	ldd	r24, Y+57	; 0x39
    1850:	9a ad       	ldd	r25, Y+58	; 0x3a
    1852:	4b 01       	movw	r8, r22
    1854:	88 0e       	add	r8, r24
    1856:	99 1e       	adc	r9, r25
    1858:	8b ad       	ldd	r24, Y+59	; 0x3b
    185a:	9c ad       	ldd	r25, Y+60	; 0x3c
    185c:	48 0f       	add	r20, r24
    185e:	59 1f       	adc	r21, r25
    1860:	c9 01       	movw	r24, r18
    1862:	01 97       	sbiw	r24, 0x01	; 1
    1864:	88 0d       	add	r24, r8
    1866:	99 1d       	adc	r25, r9
    1868:	a0 e0       	ldi	r26, 0x00	; 0
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	a1 2c       	mov	r10, r1
    186e:	b1 2c       	mov	r11, r1
    1870:	54 01       	movw	r10, r8
    1872:	99 24       	eor	r9, r9
    1874:	88 24       	eor	r8, r8
    1876:	88 2a       	or	r8, r24
    1878:	99 2a       	or	r9, r25
    187a:	aa 2a       	or	r10, r26
    187c:	bb 2a       	or	r11, r27
    187e:	01 50       	subi	r16, 0x01	; 1
    1880:	11 09       	sbc	r17, r1
    1882:	68 01       	movw	r12, r16
    1884:	c4 0e       	add	r12, r20
    1886:	d5 1e       	adc	r13, r21
    1888:	86 01       	movw	r16, r12
    188a:	20 e0       	ldi	r18, 0x00	; 0
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	6a 01       	movw	r12, r20
    1890:	e1 2c       	mov	r14, r1
    1892:	f1 2c       	mov	r15, r1
    1894:	76 01       	movw	r14, r12
    1896:	dd 24       	eor	r13, r13
    1898:	cc 24       	eor	r12, r12
    189a:	c0 2a       	or	r12, r16
    189c:	d1 2a       	or	r13, r17
    189e:	e2 2a       	or	r14, r18
    18a0:	f3 2a       	or	r15, r19
    18a2:	6a e2       	ldi	r22, 0x2A	; 42
    18a4:	ce 01       	movw	r24, r28
    18a6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN15Adafruit_SPITFT12writeCommandEh>
    18aa:	b5 01       	movw	r22, r10
    18ac:	a4 01       	movw	r20, r8
    18ae:	ce 01       	movw	r24, r28
    18b0:	0e 94 06 18 	call	0x300c	; 0x300c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    18b4:	6b e2       	ldi	r22, 0x2B	; 43
    18b6:	ce 01       	movw	r24, r28
    18b8:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <_ZN15Adafruit_SPITFT12writeCommandEh>
    18bc:	b7 01       	movw	r22, r14
    18be:	a6 01       	movw	r20, r12
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 06 18 	call	0x300c	; 0x300c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
    18c6:	6c e2       	ldi	r22, 0x2C	; 44
    18c8:	ce 01       	movw	r24, r28
    18ca:	df 91       	pop	r29
    18cc:	cf 91       	pop	r28
    18ce:	1f 91       	pop	r17
    18d0:	0f 91       	pop	r16
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	bf 90       	pop	r11
    18dc:	af 90       	pop	r10
    18de:	9f 90       	pop	r9
    18e0:	8f 90       	pop	r8
    18e2:	0c 94 cc 16 	jmp	0x2d98	; 0x2d98 <_ZN15Adafruit_SPITFT12writeCommandEh>

000018e6 <_ZN15Adafruit_ST77xx11setRotationEh>:
    18e6:	cf 93       	push	r28
    18e8:	df 93       	push	r29
    18ea:	1f 92       	push	r1
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
    18f0:	fc 01       	movw	r30, r24
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	63 70       	andi	r22, 0x03	; 3
    18f6:	66 8b       	std	Z+22, r22	; 0x16
    18f8:	8d 5b       	subi	r24, 0xBD	; 189
    18fa:	9f 4f       	sbci	r25, 0xFF	; 255
    18fc:	af 01       	movw	r20, r30
    18fe:	4c 5b       	subi	r20, 0xBC	; 188
    1900:	5f 4f       	sbci	r21, 0xFF	; 255
    1902:	62 30       	cpi	r22, 0x02	; 2
    1904:	49 f0       	breq	.+18     	; 0x1918 <_ZN15Adafruit_ST77xx11setRotationEh+0x32>
    1906:	63 30       	cpi	r22, 0x03	; 3
    1908:	91 f0       	breq	.+36     	; 0x192e <_ZN15Adafruit_ST77xx11setRotationEh+0x48>
    190a:	61 30       	cpi	r22, 0x01	; 1
    190c:	19 f0       	breq	.+6      	; 0x1914 <_ZN15Adafruit_ST77xx11setRotationEh+0x2e>
    190e:	20 ec       	ldi	r18, 0xC0	; 192
    1910:	29 83       	std	Y+1, r18	; 0x01
    1912:	02 c0       	rjmp	.+4      	; 0x1918 <_ZN15Adafruit_ST77xx11setRotationEh+0x32>
    1914:	20 ea       	ldi	r18, 0xA0	; 160
    1916:	0c c0       	rjmp	.+24     	; 0x1930 <_ZN15Adafruit_ST77xx11setRotationEh+0x4a>
    1918:	dc 01       	movw	r26, r24
    191a:	8c 91       	ld	r24, X
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	92 af       	std	Z+58, r25	; 0x3a
    1920:	81 af       	std	Z+57, r24	; 0x39
    1922:	da 01       	movw	r26, r20
    1924:	8c 91       	ld	r24, X
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	94 af       	std	Z+60, r25	; 0x3c
    192a:	83 af       	std	Z+59, r24	; 0x3b
    192c:	0c c0       	rjmp	.+24     	; 0x1946 <_ZN15Adafruit_ST77xx11setRotationEh+0x60>
    192e:	20 e6       	ldi	r18, 0x60	; 96
    1930:	29 83       	std	Y+1, r18	; 0x01
    1932:	dc 01       	movw	r26, r24
    1934:	8c 91       	ld	r24, X
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	94 af       	std	Z+60, r25	; 0x3c
    193a:	83 af       	std	Z+59, r24	; 0x3b
    193c:	da 01       	movw	r26, r20
    193e:	8c 91       	ld	r24, X
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	92 af       	std	Z+58, r25	; 0x3a
    1944:	81 af       	std	Z+57, r24	; 0x39
    1946:	21 e0       	ldi	r18, 0x01	; 1
    1948:	ae 01       	movw	r20, r28
    194a:	4f 5f       	subi	r20, 0xFF	; 255
    194c:	5f 4f       	sbci	r21, 0xFF	; 255
    194e:	66 e3       	ldi	r22, 0x36	; 54
    1950:	cf 01       	movw	r24, r30
    1952:	0e 94 32 17 	call	0x2e64	; 0x2e64 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>
    1956:	0f 90       	pop	r0
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <_ZN15Adafruit_ST77xxC1Ejjaaa>:
    @param  cs    Chip select pin #
    @param  dc    Data/Command pin #
    @param  rst   Reset pin # (optional, pass -1 if unused)
*/
/**************************************************************************/
Adafruit_ST77xx::Adafruit_ST77xx(uint16_t w, uint16_t h, int8_t cs, int8_t dc,
    195e:	ef 92       	push	r14
    1960:	0f 93       	push	r16
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	ec 01       	movw	r28, r24
                                 int8_t rst)
    : Adafruit_SPITFT(w, h, cs, dc, rst) {}
    1968:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <_ZN15Adafruit_SPITFTC1Ejjaaa>
    196c:	87 ea       	ldi	r24, 0xA7	; 167
    196e:	92 e0       	ldi	r25, 0x02	; 2
    1970:	99 83       	std	Y+1, r25	; 0x01
    1972:	88 83       	st	Y, r24
    1974:	fe 01       	movw	r30, r28
    1976:	ed 5b       	subi	r30, 0xBD	; 189
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	10 82       	st	Z, r1
    197c:	31 96       	adiw	r30, 0x01	; 1
    197e:	10 82       	st	Z, r1
    1980:	cb 5b       	subi	r28, 0xBB	; 187
    1982:	df 4f       	sbci	r29, 0xFF	; 255
    1984:	18 82       	st	Y, r1
    1986:	df 91       	pop	r29
    1988:	cf 91       	pop	r28
    198a:	0f 91       	pop	r16
    198c:	ef 90       	pop	r14
    198e:	08 95       	ret

00001990 <_ZN6HCSR04C1Eiiii>:
    pinMode(echo, INPUT);
    _trigger = trigger;
    _echo = echo;
}

HCSR04::HCSR04(int trigger, int echo, int minRange, int maxRange)
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	cf 92       	push	r12
    1996:	df 92       	push	r13
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	0f 93       	push	r16
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	ec 01       	movw	r28, r24
    19a6:	e6 2e       	mov	r14, r22
    19a8:	a7 2e       	mov	r10, r23
    19aa:	f4 2e       	mov	r15, r20
    19ac:	b5 2e       	mov	r11, r21
    19ae:	69 01       	movw	r12, r18
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	9f ef       	ldi	r25, 0xFF	; 255
    19b4:	9d 83       	std	Y+5, r25	; 0x05
    19b6:	8c 83       	std	Y+4, r24	; 0x04
    19b8:	9f 83       	std	Y+7, r25	; 0x07
    19ba:	8e 83       	std	Y+6, r24	; 0x06
{
    pinMode(trigger, OUTPUT);
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	8e 2d       	mov	r24, r14
    19c0:	ba dc       	rcall	.-1676   	; 0x1336 <pinMode>
    pinMode(echo, INPUT);
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	8f 2d       	mov	r24, r15
    19c6:	b7 dc       	rcall	.-1682   	; 0x1336 <pinMode>
    _trigger = trigger;
    19c8:	e8 82       	st	Y, r14
    19ca:	a9 82       	std	Y+1, r10	; 0x01
    _echo = echo;
    19cc:	fa 82       	std	Y+2, r15	; 0x02
    19ce:	bb 82       	std	Y+3, r11	; 0x03
	_minRange = minRange;
    19d0:	dd 82       	std	Y+5, r13	; 0x05
    19d2:	cc 82       	std	Y+4, r12	; 0x04
    _maxRange = maxRange;
    19d4:	1f 83       	std	Y+7, r17	; 0x07
    19d6:	0e 83       	std	Y+6, r16	; 0x06
}
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	df 90       	pop	r13
    19e6:	cf 90       	pop	r12
    19e8:	bf 90       	pop	r11
    19ea:	af 90       	pop	r10
    19ec:	08 95       	ret

000019ee <_ZN6HCSR0418echoInMicrosecondsEv>:

unsigned int HCSR04::echoInMicroseconds()
{
    19ee:	cf 92       	push	r12
    19f0:	df 92       	push	r13
    19f2:	ef 92       	push	r14
    19f4:	ff 92       	push	r15
    19f6:	cf 93       	push	r28
    19f8:	df 93       	push	r29
    19fa:	ec 01       	movw	r28, r24
    digitalWrite(_trigger, LOW);
    19fc:	60 e0       	ldi	r22, 0x00	; 0
    19fe:	88 81       	ld	r24, Y
    1a00:	d6 dc       	rcall	.-1620   	; 0x13ae <digitalWrite>
    delayMicroseconds(5);
    1a02:	85 e0       	ldi	r24, 0x05	; 5
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	d4 db       	rcall	.-2136   	; 0x11b0 <delayMicroseconds>
    digitalWrite(_trigger, HIGH);
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	88 81       	ld	r24, Y
    1a0c:	d0 dc       	rcall	.-1632   	; 0x13ae <digitalWrite>
    delayMicroseconds(10);
    1a0e:	8a e0       	ldi	r24, 0x0A	; 10
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	ce db       	rcall	.-2148   	; 0x11b0 <delayMicroseconds>
    digitalWrite(_trigger, LOW);  
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	88 81       	ld	r24, Y
    1a18:	ca dc       	rcall	.-1644   	; 0x13ae <digitalWrite>
    // Why don't I just use? "return pulseIn(_echo, HIGH);"
	// Arduino Primo doesn't have access to pulseIn.
    while(digitalRead(_echo) == LOW);
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	f6 dc       	rcall	.-1556   	; 0x140a <digitalRead>
    1a1e:	89 2b       	or	r24, r25
    1a20:	e1 f3       	breq	.-8      	; 0x1a1a <_ZN6HCSR0418echoInMicrosecondsEv+0x2c>

    int pulseStart = micros();
    1a22:	68 db       	rcall	.-2352   	; 0x10f4 <micros>
    1a24:	6b 01       	movw	r12, r22
    1a26:	7c 01       	movw	r14, r24

    while(digitalRead(_echo) == HIGH);
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	ef dc       	rcall	.-1570   	; 0x140a <digitalRead>
    1a2c:	01 97       	sbiw	r24, 0x01	; 1
    1a2e:	e1 f3       	breq	.-8      	; 0x1a28 <_ZN6HCSR0418echoInMicrosecondsEv+0x3a>
    1a30:	61 db       	rcall	.-2366   	; 0x10f4 <micros>

    return micros() - pulseStart;
    1a32:	cb 01       	movw	r24, r22
    1a34:	8c 19       	sub	r24, r12
}
    1a36:	9d 09       	sbc	r25, r13
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	ff 90       	pop	r15
    1a3e:	ef 90       	pop	r14
    1a40:	df 90       	pop	r13
    1a42:	cf 90       	pop	r12
    1a44:	08 95       	ret

00001a46 <_ZN6HCSR0421distanceInMillimetersEv>:
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29

int HCSR04::distanceInMillimeters()
{
    1a4a:	ec 01       	movw	r28, r24
    int duration = echoInMicroseconds();
    1a4c:	d0 df       	rcall	.-96     	; 0x19ee <_ZN6HCSR0418echoInMicrosecondsEv>
    
    // Given the speed of sound in air is 332m/s = 3320cm/s = 0.0332cm/us).
    int distance = (duration / 2) * 0.332;
    1a4e:	97 fd       	sbrc	r25, 7
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	bc 01       	movw	r22, r24
    1a54:	75 95       	asr	r23
    1a56:	67 95       	ror	r22
    1a58:	07 2e       	mov	r0, r23
    1a5a:	00 0c       	add	r0, r0
    1a5c:	88 0b       	sbc	r24, r24
    1a5e:	99 0b       	sbc	r25, r25
    1a60:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatsisf>
    1a64:	27 ee       	ldi	r18, 0xE7	; 231
    1a66:	3b ef       	ldi	r19, 0xFB	; 251
    1a68:	49 ea       	ldi	r20, 0xA9	; 169
    1a6a:	5e e3       	ldi	r21, 0x3E	; 62
    1a6c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <__mulsf3>
    1a70:	0e 94 da 04 	call	0x9b4	; 0x9b4 <__fixsfsi>
    1a74:	9b 01       	movw	r18, r22
	
	if (_minRange == -1 && _maxRange == -1)
    1a76:	4c 81       	ldd	r20, Y+4	; 0x04
    1a78:	5d 81       	ldd	r21, Y+5	; 0x05
    1a7a:	4f 3f       	cpi	r20, 0xFF	; 255
    1a7c:	af ef       	ldi	r26, 0xFF	; 255
    1a7e:	5a 07       	cpc	r21, r26
    1a80:	21 f4       	brne	.+8      	; 0x1a8a <_ZN6HCSR0421distanceInMillimetersEv+0x44>
    1a82:	ee 81       	ldd	r30, Y+6	; 0x06
    1a84:	ff 81       	ldd	r31, Y+7	; 0x07
    1a86:	31 96       	adiw	r30, 0x01	; 1
    1a88:	59 f0       	breq	.+22     	; 0x1aa0 <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
	{
		return distance;
	}
	
	if (distance > _minRange && distance < _maxRange)
    1a8a:	42 17       	cp	r20, r18
    1a8c:	53 07       	cpc	r21, r19
    1a8e:	2c f4       	brge	.+10     	; 0x1a9a <_ZN6HCSR0421distanceInMillimetersEv+0x54>
    1a90:	4e 81       	ldd	r20, Y+6	; 0x06
    1a92:	5f 81       	ldd	r21, Y+7	; 0x07
    1a94:	24 17       	cp	r18, r20
    1a96:	35 07       	cpc	r19, r21
    1a98:	1c f0       	brlt	.+6      	; 0x1aa0 <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
	{
		return distance;
	}	
	
	return -1;
    1a9a:	8f ef       	ldi	r24, 0xFF	; 255
    1a9c:	9f ef       	ldi	r25, 0xFF	; 255
    1a9e:	01 c0       	rjmp	.+2      	; 0x1aa2 <_ZN6HCSR0421distanceInMillimetersEv+0x5c>
    1aa0:	cb 01       	movw	r24, r22
}
    1aa2:	df 91       	pop	r29
    1aa4:	cf 91       	pop	r28
    1aa6:	08 95       	ret

00001aa8 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1aa8:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	20 91 88 05 	lds	r18, 0x0588	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1ab2:	82 1b       	sub	r24, r18
    1ab4:	91 09       	sbc	r25, r1
    1ab6:	08 95       	ret

00001ab8 <_ZN7TwoWire4readEv>:
    1ab8:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1abc:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1ac0:	98 17       	cp	r25, r24
    1ac2:	50 f4       	brcc	.+20     	; 0x1ad8 <_ZN7TwoWire4readEv+0x20>
    1ac4:	e9 2f       	mov	r30, r25
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	e7 57       	subi	r30, 0x77	; 119
    1aca:	fa 4f       	sbci	r31, 0xFA	; 250
    1acc:	20 81       	ld	r18, Z
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	9f 5f       	subi	r25, 0xFF	; 255
    1ad2:	90 93 88 05 	sts	0x0588, r25	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <_ZN7TwoWire4readEv+0x24>
    1ad8:	2f ef       	ldi	r18, 0xFF	; 255
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	c9 01       	movw	r24, r18
    1ade:	08 95       	ret

00001ae0 <_ZN7TwoWire4peekEv>:
    1ae0:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1ae4:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1ae8:	e8 17       	cp	r30, r24
    1aea:	30 f4       	brcc	.+12     	; 0x1af8 <_ZN7TwoWire4peekEv+0x18>
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	e7 57       	subi	r30, 0x77	; 119
    1af0:	fa 4f       	sbci	r31, 0xFA	; 250
    1af2:	80 81       	ld	r24, Z
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	08 95       	ret
    1af8:	8f ef       	ldi	r24, 0xFF	; 255
    1afa:	9f ef       	ldi	r25, 0xFF	; 255
    1afc:	08 95       	ret

00001afe <_ZN7TwoWire5flushEv>:
    1afe:	08 95       	ret

00001b00 <_ZN7TwoWire16onReceiveServiceEPhi>:
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ec 01       	movw	r28, r24
    1b06:	e0 91 5f 05 	lds	r30, 0x055F	; 0x80055f <_ZN7TwoWire14user_onReceiveE>
    1b0a:	f0 91 60 05 	lds	r31, 0x0560	; 0x800560 <_ZN7TwoWire14user_onReceiveE+0x1>
    1b0e:	30 97       	sbiw	r30, 0x00	; 0
    1b10:	f1 f0       	breq	.+60     	; 0x1b4e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b12:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1b16:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1b1a:	98 17       	cp	r25, r24
    1b1c:	c0 f0       	brcs	.+48     	; 0x1b4e <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	29 2f       	mov	r18, r25
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	26 17       	cp	r18, r22
    1b26:	37 07       	cpc	r19, r23
    1b28:	54 f4       	brge	.+20     	; 0x1b3e <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1b2a:	de 01       	movw	r26, r28
    1b2c:	a2 0f       	add	r26, r18
    1b2e:	b3 1f       	adc	r27, r19
    1b30:	4c 91       	ld	r20, X
    1b32:	d9 01       	movw	r26, r18
    1b34:	a7 57       	subi	r26, 0x77	; 119
    1b36:	ba 4f       	sbci	r27, 0xFA	; 250
    1b38:	4c 93       	st	X, r20
    1b3a:	9f 5f       	subi	r25, 0xFF	; 255
    1b3c:	f1 cf       	rjmp	.-30     	; 0x1b20 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1b3e:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1b42:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1b46:	cb 01       	movw	r24, r22
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	19 94       	eijmp
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	08 95       	ret

00001b54 <_ZN7TwoWire16onRequestServiceEv>:
    1b54:	e0 91 61 05 	lds	r30, 0x0561	; 0x800561 <_ZN7TwoWire14user_onRequestE>
    1b58:	f0 91 62 05 	lds	r31, 0x0562	; 0x800562 <_ZN7TwoWire14user_onRequestE+0x1>
    1b5c:	30 97       	sbiw	r30, 0x00	; 0
    1b5e:	29 f0       	breq	.+10     	; 0x1b6a <_ZN7TwoWire16onRequestServiceEv+0x16>
    1b60:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1b64:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1b68:	19 94       	eijmp
    1b6a:	08 95       	ret

00001b6c <_ZN7TwoWire5writeEPKhj>:
    1b6c:	cf 92       	push	r12
    1b6e:	df 92       	push	r13
    1b70:	ef 92       	push	r14
    1b72:	ff 92       	push	r15
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	7c 01       	movw	r14, r24
    1b7e:	cb 01       	movw	r24, r22
    1b80:	8a 01       	movw	r16, r20
    1b82:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <_ZN7TwoWire12transmittingE>
    1b86:	22 23       	and	r18, r18
    1b88:	89 f0       	breq	.+34     	; 0x1bac <_ZN7TwoWire5writeEPKhj+0x40>
    1b8a:	eb 01       	movw	r28, r22
    1b8c:	6b 01       	movw	r12, r22
    1b8e:	c4 0e       	add	r12, r20
    1b90:	d5 1e       	adc	r13, r21
    1b92:	cc 15       	cp	r28, r12
    1b94:	dd 05       	cpc	r29, r13
    1b96:	69 f0       	breq	.+26     	; 0x1bb2 <_ZN7TwoWire5writeEPKhj+0x46>
    1b98:	69 91       	ld	r22, Y+
    1b9a:	d7 01       	movw	r26, r14
    1b9c:	ed 91       	ld	r30, X+
    1b9e:	fc 91       	ld	r31, X
    1ba0:	01 90       	ld	r0, Z+
    1ba2:	f0 81       	ld	r31, Z
    1ba4:	e0 2d       	mov	r30, r0
    1ba6:	c7 01       	movw	r24, r14
    1ba8:	19 95       	eicall
    1baa:	f3 cf       	rjmp	.-26     	; 0x1b92 <_ZN7TwoWire5writeEPKhj+0x26>
    1bac:	64 2f       	mov	r22, r20
    1bae:	0e 94 67 1c 	call	0x38ce	; 0x38ce <twi_transmit>
    1bb2:	c8 01       	movw	r24, r16
    1bb4:	df 91       	pop	r29
    1bb6:	cf 91       	pop	r28
    1bb8:	1f 91       	pop	r17
    1bba:	0f 91       	pop	r16
    1bbc:	ff 90       	pop	r15
    1bbe:	ef 90       	pop	r14
    1bc0:	df 90       	pop	r13
    1bc2:	cf 90       	pop	r12
    1bc4:	08 95       	ret

00001bc6 <_ZN7TwoWire5writeEh>:
    1bc6:	cf 93       	push	r28
    1bc8:	df 93       	push	r29
    1bca:	1f 92       	push	r1
    1bcc:	cd b7       	in	r28, 0x3d	; 61
    1bce:	de b7       	in	r29, 0x3e	; 62
    1bd0:	69 83       	std	Y+1, r22	; 0x01
    1bd2:	20 91 63 05 	lds	r18, 0x0563	; 0x800563 <_ZN7TwoWire12transmittingE>
    1bd6:	22 23       	and	r18, r18
    1bd8:	d1 f0       	breq	.+52     	; 0x1c0e <_ZN7TwoWire5writeEh+0x48>
    1bda:	20 91 64 05 	lds	r18, 0x0564	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1bde:	20 32       	cpi	r18, 0x20	; 32
    1be0:	40 f0       	brcs	.+16     	; 0x1bf2 <_ZN7TwoWire5writeEh+0x2c>
    1be2:	21 e0       	ldi	r18, 0x01	; 1
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	fc 01       	movw	r30, r24
    1be8:	33 83       	std	Z+3, r19	; 0x03
    1bea:	22 83       	std	Z+2, r18	; 0x02
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	15 c0       	rjmp	.+42     	; 0x1c1c <_ZN7TwoWire5writeEh+0x56>
    1bf2:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1bf6:	e8 2f       	mov	r30, r24
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	ea 59       	subi	r30, 0x9A	; 154
    1bfc:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfe:	99 81       	ldd	r25, Y+1	; 0x01
    1c00:	90 83       	st	Z, r25
    1c02:	8f 5f       	subi	r24, 0xFF	; 255
    1c04:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1c08:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1c0c:	05 c0       	rjmp	.+10     	; 0x1c18 <_ZN7TwoWire5writeEh+0x52>
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	ce 01       	movw	r24, r28
    1c12:	01 96       	adiw	r24, 0x01	; 1
    1c14:	0e 94 67 1c 	call	0x38ce	; 0x38ce <twi_transmit>
    1c18:	81 e0       	ldi	r24, 0x01	; 1
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0f 90       	pop	r0
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	08 95       	ret

00001c24 <_ZN7TwoWireC1Ev>:
    1c24:	fc 01       	movw	r30, r24
    1c26:	13 82       	std	Z+3, r1	; 0x03
    1c28:	12 82       	std	Z+2, r1	; 0x02
    1c2a:	88 ee       	ldi	r24, 0xE8	; 232
    1c2c:	93 e0       	ldi	r25, 0x03	; 3
    1c2e:	a0 e0       	ldi	r26, 0x00	; 0
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	84 83       	std	Z+4, r24	; 0x04
    1c34:	95 83       	std	Z+5, r25	; 0x05
    1c36:	a6 83       	std	Z+6, r26	; 0x06
    1c38:	b7 83       	std	Z+7, r27	; 0x07
    1c3a:	87 ed       	ldi	r24, 0xD7	; 215
    1c3c:	92 e0       	ldi	r25, 0x02	; 2
    1c3e:	91 83       	std	Z+1, r25	; 0x01
    1c40:	80 83       	st	Z, r24
    1c42:	08 95       	ret

00001c44 <_ZN7TwoWire5beginEv>:
    1c44:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1c48:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1c4c:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1c50:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1c54:	0e 94 ab 1b 	call	0x3756	; 0x3756 <twi_init>
    1c58:	8a ea       	ldi	r24, 0xAA	; 170
    1c5a:	9d e0       	ldi	r25, 0x0D	; 13
    1c5c:	0e 94 94 1c 	call	0x3928	; 0x3928 <twi_attachSlaveTxEvent>
    1c60:	80 e8       	ldi	r24, 0x80	; 128
    1c62:	9d e0       	ldi	r25, 0x0D	; 13
    1c64:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <twi_attachSlaveRxEvent>

00001c68 <_ZN7TwoWire17beginTransmissionEh>:
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <_ZN7TwoWire12transmittingE>
    1c6e:	60 93 86 05 	sts	0x0586, r22	; 0x800586 <_ZN7TwoWire9txAddressE>
    1c72:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1c76:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1c7a:	08 95       	ret

00001c7c <_ZN7TwoWire15endTransmissionEh>:
    1c7c:	0f 93       	push	r16
    1c7e:	06 2f       	mov	r16, r22
    1c80:	21 e0       	ldi	r18, 0x01	; 1
    1c82:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1c86:	66 e6       	ldi	r22, 0x66	; 102
    1c88:	75 e0       	ldi	r23, 0x05	; 5
    1c8a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ZN7TwoWire9txAddressE>
    1c8e:	0e 94 11 1c 	call	0x3822	; 0x3822 <twi_writeTo>
    1c92:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <_ZN7TwoWire13txBufferIndexE>
    1c96:	10 92 64 05 	sts	0x0564, r1	; 0x800564 <_ZN7TwoWire14txBufferLengthE>
    1c9a:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <_ZN7TwoWire12transmittingE>
    1c9e:	0f 91       	pop	r16
    1ca0:	08 95       	ret

00001ca2 <_ZN7TwoWire11requestFromEhhmhh>:
    1ca2:	4f 92       	push	r4
    1ca4:	5f 92       	push	r5
    1ca6:	6f 92       	push	r6
    1ca8:	7f 92       	push	r7
    1caa:	af 92       	push	r10
    1cac:	bf 92       	push	r11
    1cae:	cf 92       	push	r12
    1cb0:	ef 92       	push	r14
    1cb2:	ff 92       	push	r15
    1cb4:	0f 93       	push	r16
    1cb6:	1f 93       	push	r17
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	5c 01       	movw	r10, r24
    1cbe:	f6 2e       	mov	r15, r22
    1cc0:	d4 2f       	mov	r29, r20
    1cc2:	28 01       	movw	r4, r16
    1cc4:	39 01       	movw	r6, r18
    1cc6:	ee 20       	and	r14, r14
    1cc8:	11 f1       	breq	.+68     	; 0x1d0e <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    1cca:	ce df       	rcall	.-100    	; 0x1c68 <_ZN7TwoWire17beginTransmissionEh>
    1ccc:	ce 2d       	mov	r28, r14
    1cce:	c4 30       	cpi	r28, 0x04	; 4
    1cd0:	08 f0       	brcs	.+2      	; 0x1cd4 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1cd2:	c3 e0       	ldi	r28, 0x03	; 3
    1cd4:	c1 50       	subi	r28, 0x01	; 1
    1cd6:	c0 f0       	brcs	.+48     	; 0x1d08 <_ZN7TwoWire11requestFromEhhmhh+0x66>
    1cd8:	28 e0       	ldi	r18, 0x08	; 8
    1cda:	c2 9f       	mul	r28, r18
    1cdc:	c0 01       	movw	r24, r0
    1cde:	11 24       	eor	r1, r1
    1ce0:	a3 01       	movw	r20, r6
    1ce2:	92 01       	movw	r18, r4
    1ce4:	04 c0       	rjmp	.+8      	; 0x1cee <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    1ce6:	56 95       	lsr	r21
    1ce8:	47 95       	ror	r20
    1cea:	37 95       	ror	r19
    1cec:	27 95       	ror	r18
    1cee:	8a 95       	dec	r24
    1cf0:	d2 f7       	brpl	.-12     	; 0x1ce6 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    1cf2:	ca 01       	movw	r24, r20
    1cf4:	b9 01       	movw	r22, r18
    1cf6:	d5 01       	movw	r26, r10
    1cf8:	ed 91       	ld	r30, X+
    1cfa:	fc 91       	ld	r31, X
    1cfc:	01 90       	ld	r0, Z+
    1cfe:	f0 81       	ld	r31, Z
    1d00:	e0 2d       	mov	r30, r0
    1d02:	c5 01       	movw	r24, r10
    1d04:	19 95       	eicall
    1d06:	e6 cf       	rjmp	.-52     	; 0x1cd4 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	b7 df       	rcall	.-146    	; 0x1c7c <_ZN7TwoWire15endTransmissionEh>
    1d0e:	4d 2f       	mov	r20, r29
    1d10:	d1 32       	cpi	r29, 0x21	; 33
    1d12:	08 f0       	brcs	.+2      	; 0x1d16 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    1d14:	40 e2       	ldi	r20, 0x20	; 32
    1d16:	2c 2d       	mov	r18, r12
    1d18:	69 e8       	ldi	r22, 0x89	; 137
    1d1a:	75 e0       	ldi	r23, 0x05	; 5
    1d1c:	8f 2d       	mov	r24, r15
    1d1e:	0e 94 c9 1b 	call	0x3792	; 0x3792 <twi_readFrom>
    1d22:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <_ZN7TwoWire13rxBufferIndexE>
    1d26:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <_ZN7TwoWire14rxBufferLengthE>
    1d2a:	df 91       	pop	r29
    1d2c:	cf 91       	pop	r28
    1d2e:	1f 91       	pop	r17
    1d30:	0f 91       	pop	r16
    1d32:	ff 90       	pop	r15
    1d34:	ef 90       	pop	r14
    1d36:	cf 90       	pop	r12
    1d38:	bf 90       	pop	r11
    1d3a:	af 90       	pop	r10
    1d3c:	7f 90       	pop	r7
    1d3e:	6f 90       	pop	r6
    1d40:	5f 90       	pop	r5
    1d42:	4f 90       	pop	r4
    1d44:	08 95       	ret

00001d46 <_ZN7TwoWire11requestFromEhhh>:
    1d46:	cf 92       	push	r12
    1d48:	ef 92       	push	r14
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	c2 2e       	mov	r12, r18
    1d50:	e1 2c       	mov	r14, r1
    1d52:	00 e0       	ldi	r16, 0x00	; 0
    1d54:	10 e0       	ldi	r17, 0x00	; 0
    1d56:	98 01       	movw	r18, r16
    1d58:	a4 df       	rcall	.-184    	; 0x1ca2 <_ZN7TwoWire11requestFromEhhmhh>
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ef 90       	pop	r14
    1d60:	cf 90       	pop	r12
    1d62:	08 95       	ret

00001d64 <_ZN7TwoWire11requestFromEhh>:
    1d64:	21 e0       	ldi	r18, 0x01	; 1
    1d66:	ef cf       	rjmp	.-34     	; 0x1d46 <_ZN7TwoWire11requestFromEhhh>

00001d68 <_ZN7TwoWire15endTransmissionEv>:
    1d68:	61 e0       	ldi	r22, 0x01	; 1
    1d6a:	88 cf       	rjmp	.-240    	; 0x1c7c <_ZN7TwoWire15endTransmissionEh>

00001d6c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1d6c:	83 e5       	ldi	r24, 0x53	; 83
    1d6e:	95 e0       	ldi	r25, 0x05	; 5
    1d70:	59 cf       	rjmp	.-334    	; 0x1c24 <_ZN7TwoWireC1Ev>

00001d72 <__cxa_pure_virtual>:
    1d72:	0e 94 d1 1e 	call	0x3da2	; 0x3da2 <abort>

00001d76 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    1d76:	08 95       	ret

00001d78 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    1d78:	2f 92       	push	r2
    1d7a:	3f 92       	push	r3
    1d7c:	4f 92       	push	r4
    1d7e:	5f 92       	push	r5
    1d80:	6f 92       	push	r6
    1d82:	7f 92       	push	r7
    1d84:	8f 92       	push	r8
    1d86:	9f 92       	push	r9
    1d88:	af 92       	push	r10
    1d8a:	bf 92       	push	r11
    1d8c:	cf 92       	push	r12
    1d8e:	df 92       	push	r13
    1d90:	ef 92       	push	r14
    1d92:	ff 92       	push	r15
    1d94:	0f 93       	push	r16
    1d96:	1f 93       	push	r17
    1d98:	cf 93       	push	r28
    1d9a:	df 93       	push	r29
    1d9c:	00 d0       	rcall	.+0      	; 0x1d9e <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	2c 01       	movw	r4, r24
    1da6:	7e 83       	std	Y+6, r23	; 0x06
    1da8:	6d 83       	std	Y+5, r22	; 0x05
    1daa:	6a 01       	movw	r12, r20
    1dac:	59 01       	movw	r10, r18
    1dae:	c8 01       	movw	r24, r16
    1db0:	fc 82       	std	Y+4, r15	; 0x04
    1db2:	eb 82       	std	Y+3, r14	; 0x03
    1db4:	48 01       	movw	r8, r16
    1db6:	84 1a       	sub	r8, r20
    1db8:	95 0a       	sbc	r9, r21
    1dba:	97 fe       	sbrs	r9, 7
    1dbc:	03 c0       	rjmp	.+6      	; 0x1dc4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4c>
    1dbe:	91 94       	neg	r9
    1dc0:	81 94       	neg	r8
    1dc2:	91 08       	sbc	r9, r1
    1dc4:	35 01       	movw	r6, r10
    1dc6:	2d 81       	ldd	r18, Y+5	; 0x05
    1dc8:	3e 81       	ldd	r19, Y+6	; 0x06
    1dca:	62 1a       	sub	r6, r18
    1dcc:	73 0a       	sbc	r7, r19
    1dce:	77 fe       	sbrs	r7, 7
    1dd0:	03 c0       	rjmp	.+6      	; 0x1dd8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x60>
    1dd2:	71 94       	neg	r7
    1dd4:	61 94       	neg	r6
    1dd6:	71 08       	sbc	r7, r1
    1dd8:	68 14       	cp	r6, r8
    1dda:	79 04       	cpc	r7, r9
    1ddc:	5c f4       	brge	.+22     	; 0x1df4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7c>
    1dde:	3a 2d       	mov	r19, r10
    1de0:	2b 2d       	mov	r18, r11
    1de2:	5c 01       	movw	r10, r24
    1de4:	83 2f       	mov	r24, r19
    1de6:	92 2f       	mov	r25, r18
    1de8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dea:	2e 81       	ldd	r18, Y+6	; 0x06
    1dec:	de 82       	std	Y+6, r13	; 0x06
    1dee:	cd 82       	std	Y+5, r12	; 0x05
    1df0:	c3 2e       	mov	r12, r19
    1df2:	d2 2e       	mov	r13, r18
    1df4:	ad 81       	ldd	r26, Y+5	; 0x05
    1df6:	be 81       	ldd	r27, Y+6	; 0x06
    1df8:	aa 16       	cp	r10, r26
    1dfa:	bb 06       	cpc	r11, r27
    1dfc:	5c f4       	brge	.+22     	; 0x1e14 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9c>
    1dfe:	3c 2d       	mov	r19, r12
    1e00:	2d 2d       	mov	r18, r13
    1e02:	6c 01       	movw	r12, r24
    1e04:	83 2f       	mov	r24, r19
    1e06:	92 2f       	mov	r25, r18
    1e08:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e0c:	be 82       	std	Y+6, r11	; 0x06
    1e0e:	ad 82       	std	Y+5, r10	; 0x05
    1e10:	a3 2e       	mov	r10, r19
    1e12:	b2 2e       	mov	r11, r18
    1e14:	85 01       	movw	r16, r10
    1e16:	2d 81       	ldd	r18, Y+5	; 0x05
    1e18:	3e 81       	ldd	r19, Y+6	; 0x06
    1e1a:	02 1b       	sub	r16, r18
    1e1c:	13 0b       	sbc	r17, r19
    1e1e:	1c 01       	movw	r2, r24
    1e20:	2c 18       	sub	r2, r12
    1e22:	3d 08       	sbc	r3, r13
    1e24:	37 fe       	sbrs	r3, 7
    1e26:	03 c0       	rjmp	.+6      	; 0x1e2e <_ZN12Adafruit_GFX9writeLineEiiiij+0xb6>
    1e28:	31 94       	neg	r3
    1e2a:	21 94       	neg	r2
    1e2c:	31 08       	sbc	r3, r1
    1e2e:	78 01       	movw	r14, r16
    1e30:	17 ff       	sbrs	r17, 7
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <_ZN12Adafruit_GFX9writeLineEiiiij+0xc2>
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	e3 1a       	sub	r14, r19
    1e38:	f3 0a       	sbc	r15, r19
    1e3a:	f5 94       	asr	r15
    1e3c:	e7 94       	ror	r14
    1e3e:	c8 16       	cp	r12, r24
    1e40:	d9 06       	cpc	r13, r25
    1e42:	2c f0       	brlt	.+10     	; 0x1e4e <_ZN12Adafruit_GFX9writeLineEiiiij+0xd6>
    1e44:	8f ef       	ldi	r24, 0xFF	; 255
    1e46:	9f ef       	ldi	r25, 0xFF	; 255
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	89 83       	std	Y+1, r24	; 0x01
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1e4e:	a1 e0       	ldi	r26, 0x01	; 1
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	ba 83       	std	Y+2, r27	; 0x02
    1e54:	a9 83       	std	Y+1, r26	; 0x01
    1e56:	2d 81       	ldd	r18, Y+5	; 0x05
    1e58:	3e 81       	ldd	r19, Y+6	; 0x06
    1e5a:	a2 16       	cp	r10, r18
    1e5c:	b3 06       	cpc	r11, r19
    1e5e:	24 f1       	brlt	.+72     	; 0x1ea8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x130>
    1e60:	d2 01       	movw	r26, r4
    1e62:	ed 91       	ld	r30, X+
    1e64:	fc 91       	ld	r31, X
    1e66:	04 84       	ldd	r0, Z+12	; 0x0c
    1e68:	f5 85       	ldd	r31, Z+13	; 0x0d
    1e6a:	e0 2d       	mov	r30, r0
    1e6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e70:	68 14       	cp	r6, r8
    1e72:	79 04       	cpc	r7, r9
    1e74:	24 f4       	brge	.+8      	; 0x1e7e <_ZN12Adafruit_GFX9writeLineEiiiij+0x106>
    1e76:	4d 81       	ldd	r20, Y+5	; 0x05
    1e78:	5e 81       	ldd	r21, Y+6	; 0x06
    1e7a:	b6 01       	movw	r22, r12
    1e7c:	03 c0       	rjmp	.+6      	; 0x1e84 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10c>
    1e7e:	a6 01       	movw	r20, r12
    1e80:	6d 81       	ldd	r22, Y+5	; 0x05
    1e82:	7e 81       	ldd	r23, Y+6	; 0x06
    1e84:	c2 01       	movw	r24, r4
    1e86:	19 95       	eicall
    1e88:	e2 18       	sub	r14, r2
    1e8a:	f3 08       	sbc	r15, r3
    1e8c:	f7 fe       	sbrs	r15, 7
    1e8e:	06 c0       	rjmp	.+12     	; 0x1e9c <_ZN12Adafruit_GFX9writeLineEiiiij+0x124>
    1e90:	29 81       	ldd	r18, Y+1	; 0x01
    1e92:	3a 81       	ldd	r19, Y+2	; 0x02
    1e94:	c2 0e       	add	r12, r18
    1e96:	d3 1e       	adc	r13, r19
    1e98:	e0 0e       	add	r14, r16
    1e9a:	f1 1e       	adc	r15, r17
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	d7 cf       	rjmp	.-82     	; 0x1e56 <_ZN12Adafruit_GFX9writeLineEiiiij+0xde>
    1ea8:	26 96       	adiw	r28, 0x06	; 6
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	3f 90       	pop	r3
    1ed6:	2f 90       	pop	r2
    1ed8:	08 95       	ret

00001eda <_ZN12Adafruit_GFX10writePixelEiij>:
    1eda:	dc 01       	movw	r26, r24
    1edc:	ed 91       	ld	r30, X+
    1ede:	fc 91       	ld	r31, X
    1ee0:	00 84       	ldd	r0, Z+8	; 0x08
    1ee2:	f1 85       	ldd	r31, Z+9	; 0x09
    1ee4:	e0 2d       	mov	r30, r0
    1ee6:	19 94       	eijmp

00001ee8 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	dc 01       	movw	r26, r24
    1eee:	ed 91       	ld	r30, X+
    1ef0:	fc 91       	ld	r31, X
    1ef2:	04 8c       	ldd	r0, Z+28	; 0x1c
    1ef4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    1ef6:	e0 2d       	mov	r30, r0
    1ef8:	19 95       	eicall
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	08 95       	ret

00001f00 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    1f00:	0f 93       	push	r16
    1f02:	1f 93       	push	r17
    1f04:	dc 01       	movw	r26, r24
    1f06:	ed 91       	ld	r30, X+
    1f08:	fc 91       	ld	r31, X
    1f0a:	06 8c       	ldd	r0, Z+30	; 0x1e
    1f0c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    1f0e:	e0 2d       	mov	r30, r0
    1f10:	19 95       	eicall
    1f12:	1f 91       	pop	r17
    1f14:	0f 91       	pop	r16
    1f16:	08 95       	ret

00001f18 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    1f18:	ef 92       	push	r14
    1f1a:	ff 92       	push	r15
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	dc 01       	movw	r26, r24
    1f22:	ed 91       	ld	r30, X+
    1f24:	fc 91       	ld	r31, X
    1f26:	00 a0       	ldd	r0, Z+32	; 0x20
    1f28:	f1 a1       	ldd	r31, Z+33	; 0x21
    1f2a:	e0 2d       	mov	r30, r0
    1f2c:	19 95       	eicall
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	ff 90       	pop	r15
    1f34:	ef 90       	pop	r14
    1f36:	08 95       	ret

00001f38 <_ZN12Adafruit_GFX10startWriteEv>:
    1f38:	08 95       	ret

00001f3a <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    1f3a:	8f 92       	push	r8
    1f3c:	9f 92       	push	r9
    1f3e:	af 92       	push	r10
    1f40:	bf 92       	push	r11
    1f42:	cf 92       	push	r12
    1f44:	df 92       	push	r13
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	5b 01       	movw	r10, r22
    1f56:	4a 01       	movw	r8, r20
    1f58:	69 01       	movw	r12, r18
    1f5a:	78 01       	movw	r14, r16
    1f5c:	e8 81       	ld	r30, Y
    1f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1f60:	02 84       	ldd	r0, Z+10	; 0x0a
    1f62:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f64:	e0 2d       	mov	r30, r0
    1f66:	19 95       	eicall
    1f68:	c8 0c       	add	r12, r8
    1f6a:	d9 1c       	adc	r13, r9
    1f6c:	86 01       	movw	r16, r12
    1f6e:	01 50       	subi	r16, 0x01	; 1
    1f70:	11 09       	sbc	r17, r1
    1f72:	e8 81       	ld	r30, Y
    1f74:	f9 81       	ldd	r31, Y+1	; 0x01
    1f76:	04 88       	ldd	r0, Z+20	; 0x14
    1f78:	f5 89       	ldd	r31, Z+21	; 0x15
    1f7a:	e0 2d       	mov	r30, r0
    1f7c:	95 01       	movw	r18, r10
    1f7e:	a4 01       	movw	r20, r8
    1f80:	b5 01       	movw	r22, r10
    1f82:	ce 01       	movw	r24, r28
    1f84:	19 95       	eicall
    1f86:	e8 81       	ld	r30, Y
    1f88:	f9 81       	ldd	r31, Y+1	; 0x01
    1f8a:	06 88       	ldd	r0, Z+22	; 0x16
    1f8c:	f7 89       	ldd	r31, Z+23	; 0x17
    1f8e:	e0 2d       	mov	r30, r0
    1f90:	ce 01       	movw	r24, r28
    1f92:	df 91       	pop	r29
    1f94:	cf 91       	pop	r28
    1f96:	1f 91       	pop	r17
    1f98:	0f 91       	pop	r16
    1f9a:	ff 90       	pop	r15
    1f9c:	ef 90       	pop	r14
    1f9e:	df 90       	pop	r13
    1fa0:	cf 90       	pop	r12
    1fa2:	bf 90       	pop	r11
    1fa4:	af 90       	pop	r10
    1fa6:	9f 90       	pop	r9
    1fa8:	8f 90       	pop	r8
    1faa:	19 94       	eijmp

00001fac <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    1fac:	8f 92       	push	r8
    1fae:	9f 92       	push	r9
    1fb0:	af 92       	push	r10
    1fb2:	bf 92       	push	r11
    1fb4:	cf 92       	push	r12
    1fb6:	df 92       	push	r13
    1fb8:	ef 92       	push	r14
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	ec 01       	movw	r28, r24
    1fc6:	5b 01       	movw	r10, r22
    1fc8:	4a 01       	movw	r8, r20
    1fca:	69 01       	movw	r12, r18
    1fcc:	e8 81       	ld	r30, Y
    1fce:	f9 81       	ldd	r31, Y+1	; 0x01
    1fd0:	02 84       	ldd	r0, Z+10	; 0x0a
    1fd2:	f3 85       	ldd	r31, Z+11	; 0x0b
    1fd4:	e0 2d       	mov	r30, r0
    1fd6:	19 95       	eicall
    1fd8:	95 01       	movw	r18, r10
    1fda:	2c 0d       	add	r18, r12
    1fdc:	3d 1d       	adc	r19, r13
    1fde:	21 50       	subi	r18, 0x01	; 1
    1fe0:	31 09       	sbc	r19, r1
    1fe2:	e8 81       	ld	r30, Y
    1fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    1fe6:	04 88       	ldd	r0, Z+20	; 0x14
    1fe8:	f5 89       	ldd	r31, Z+21	; 0x15
    1fea:	e0 2d       	mov	r30, r0
    1fec:	78 01       	movw	r14, r16
    1fee:	84 01       	movw	r16, r8
    1ff0:	a4 01       	movw	r20, r8
    1ff2:	b5 01       	movw	r22, r10
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	19 95       	eicall
    1ff8:	e8 81       	ld	r30, Y
    1ffa:	f9 81       	ldd	r31, Y+1	; 0x01
    1ffc:	06 88       	ldd	r0, Z+22	; 0x16
    1ffe:	f7 89       	ldd	r31, Z+23	; 0x17
    2000:	e0 2d       	mov	r30, r0
    2002:	ce 01       	movw	r24, r28
    2004:	df 91       	pop	r29
    2006:	cf 91       	pop	r28
    2008:	1f 91       	pop	r17
    200a:	0f 91       	pop	r16
    200c:	ff 90       	pop	r15
    200e:	ef 90       	pop	r14
    2010:	df 90       	pop	r13
    2012:	cf 90       	pop	r12
    2014:	bf 90       	pop	r11
    2016:	af 90       	pop	r10
    2018:	9f 90       	pop	r9
    201a:	8f 90       	pop	r8
    201c:	19 94       	eijmp

0000201e <_ZN12Adafruit_GFX8fillRectEiiiij>:
    201e:	4f 92       	push	r4
    2020:	5f 92       	push	r5
    2022:	6f 92       	push	r6
    2024:	7f 92       	push	r7
    2026:	8f 92       	push	r8
    2028:	9f 92       	push	r9
    202a:	af 92       	push	r10
    202c:	bf 92       	push	r11
    202e:	cf 92       	push	r12
    2030:	df 92       	push	r13
    2032:	ef 92       	push	r14
    2034:	ff 92       	push	r15
    2036:	0f 93       	push	r16
    2038:	1f 93       	push	r17
    203a:	cf 93       	push	r28
    203c:	df 93       	push	r29
    203e:	6c 01       	movw	r12, r24
    2040:	2b 01       	movw	r4, r22
    2042:	5a 01       	movw	r10, r20
    2044:	39 01       	movw	r6, r18
    2046:	48 01       	movw	r8, r16
    2048:	dc 01       	movw	r26, r24
    204a:	ed 91       	ld	r30, X+
    204c:	fc 91       	ld	r31, X
    204e:	02 84       	ldd	r0, Z+10	; 0x0a
    2050:	f3 85       	ldd	r31, Z+11	; 0x0b
    2052:	e0 2d       	mov	r30, r0
    2054:	19 95       	eicall
    2056:	e2 01       	movw	r28, r4
    2058:	64 0c       	add	r6, r4
    205a:	75 1c       	adc	r7, r5
    205c:	d6 01       	movw	r26, r12
    205e:	ed 91       	ld	r30, X+
    2060:	fc 91       	ld	r31, X
    2062:	c6 15       	cp	r28, r6
    2064:	d7 05       	cpc	r29, r7
    2066:	5c f4       	brge	.+22     	; 0x207e <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    2068:	00 88       	ldd	r0, Z+16	; 0x10
    206a:	f1 89       	ldd	r31, Z+17	; 0x11
    206c:	e0 2d       	mov	r30, r0
    206e:	87 01       	movw	r16, r14
    2070:	94 01       	movw	r18, r8
    2072:	a5 01       	movw	r20, r10
    2074:	be 01       	movw	r22, r28
    2076:	c6 01       	movw	r24, r12
    2078:	19 95       	eicall
    207a:	21 96       	adiw	r28, 0x01	; 1
    207c:	ef cf       	rjmp	.-34     	; 0x205c <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    207e:	06 88       	ldd	r0, Z+22	; 0x16
    2080:	f7 89       	ldd	r31, Z+23	; 0x17
    2082:	e0 2d       	mov	r30, r0
    2084:	c6 01       	movw	r24, r12
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ff 90       	pop	r15
    2090:	ef 90       	pop	r14
    2092:	df 90       	pop	r13
    2094:	cf 90       	pop	r12
    2096:	bf 90       	pop	r11
    2098:	af 90       	pop	r10
    209a:	9f 90       	pop	r9
    209c:	8f 90       	pop	r8
    209e:	7f 90       	pop	r7
    20a0:	6f 90       	pop	r6
    20a2:	5f 90       	pop	r5
    20a4:	4f 90       	pop	r4
    20a6:	19 94       	eijmp

000020a8 <_ZN12Adafruit_GFX10fillScreenEj>:
    20a8:	ef 92       	push	r14
    20aa:	ff 92       	push	r15
    20ac:	0f 93       	push	r16
    20ae:	1f 93       	push	r17
    20b0:	dc 01       	movw	r26, r24
    20b2:	1a 96       	adiw	r26, 0x0a	; 10
    20b4:	0d 91       	ld	r16, X+
    20b6:	1c 91       	ld	r17, X
    20b8:	1b 97       	sbiw	r26, 0x0b	; 11
    20ba:	18 96       	adiw	r26, 0x08	; 8
    20bc:	2d 91       	ld	r18, X+
    20be:	3c 91       	ld	r19, X
    20c0:	19 97       	sbiw	r26, 0x09	; 9
    20c2:	ed 91       	ld	r30, X+
    20c4:	fc 91       	ld	r31, X
    20c6:	00 a0       	ldd	r0, Z+32	; 0x20
    20c8:	f1 a1       	ldd	r31, Z+33	; 0x21
    20ca:	e0 2d       	mov	r30, r0
    20cc:	7b 01       	movw	r14, r22
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	19 95       	eicall
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	ff 90       	pop	r15
    20de:	ef 90       	pop	r14
    20e0:	08 95       	ret

000020e2 <_ZN12Adafruit_GFX8drawLineEiiiij>:
    20e2:	8f 92       	push	r8
    20e4:	9f 92       	push	r9
    20e6:	af 92       	push	r10
    20e8:	bf 92       	push	r11
    20ea:	cf 92       	push	r12
    20ec:	df 92       	push	r13
    20ee:	ef 92       	push	r14
    20f0:	ff 92       	push	r15
    20f2:	0f 93       	push	r16
    20f4:	1f 93       	push	r17
    20f6:	cf 93       	push	r28
    20f8:	df 93       	push	r29
    20fa:	4c 01       	movw	r8, r24
    20fc:	6b 01       	movw	r12, r22
    20fe:	5a 01       	movw	r10, r20
    2100:	e9 01       	movw	r28, r18
    2102:	dc 01       	movw	r26, r24
    2104:	ed 91       	ld	r30, X+
    2106:	fc 91       	ld	r31, X
    2108:	62 17       	cp	r22, r18
    210a:	73 07       	cpc	r23, r19
    210c:	81 f4       	brne	.+32     	; 0x212e <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    210e:	04 17       	cp	r16, r20
    2110:	15 07       	cpc	r17, r21
    2112:	24 f4       	brge	.+8      	; 0x211c <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    2114:	8b 2d       	mov	r24, r11
    2116:	58 01       	movw	r10, r16
    2118:	04 2f       	mov	r16, r20
    211a:	18 2f       	mov	r17, r24
    211c:	0a 19       	sub	r16, r10
    211e:	1b 09       	sbc	r17, r11
    2120:	98 01       	movw	r18, r16
    2122:	2f 5f       	subi	r18, 0xFF	; 255
    2124:	3f 4f       	sbci	r19, 0xFF	; 255
    2126:	04 8c       	ldd	r0, Z+28	; 0x1c
    2128:	f5 8d       	ldd	r31, Z+29	; 0x1d
    212a:	e0 2d       	mov	r30, r0
    212c:	12 c0       	rjmp	.+36     	; 0x2152 <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    212e:	40 17       	cp	r20, r16
    2130:	51 07       	cpc	r21, r17
    2132:	09 f5       	brne	.+66     	; 0x2176 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    2134:	26 17       	cp	r18, r22
    2136:	37 07       	cpc	r19, r23
    2138:	24 f4       	brge	.+8      	; 0x2142 <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    213a:	8d 2d       	mov	r24, r13
    213c:	69 01       	movw	r12, r18
    213e:	c6 2f       	mov	r28, r22
    2140:	d8 2f       	mov	r29, r24
    2142:	9e 01       	movw	r18, r28
    2144:	2c 19       	sub	r18, r12
    2146:	3d 09       	sbc	r19, r13
    2148:	2f 5f       	subi	r18, 0xFF	; 255
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	06 8c       	ldd	r0, Z+30	; 0x1e
    214e:	f7 8d       	ldd	r31, Z+31	; 0x1f
    2150:	e0 2d       	mov	r30, r0
    2152:	87 01       	movw	r16, r14
    2154:	a5 01       	movw	r20, r10
    2156:	b6 01       	movw	r22, r12
    2158:	c4 01       	movw	r24, r8
    215a:	19 95       	eicall
    215c:	df 91       	pop	r29
    215e:	cf 91       	pop	r28
    2160:	1f 91       	pop	r17
    2162:	0f 91       	pop	r16
    2164:	ff 90       	pop	r15
    2166:	ef 90       	pop	r14
    2168:	df 90       	pop	r13
    216a:	cf 90       	pop	r12
    216c:	bf 90       	pop	r11
    216e:	af 90       	pop	r10
    2170:	9f 90       	pop	r9
    2172:	8f 90       	pop	r8
    2174:	08 95       	ret
    2176:	02 84       	ldd	r0, Z+10	; 0x0a
    2178:	f3 85       	ldd	r31, Z+11	; 0x0b
    217a:	e0 2d       	mov	r30, r0
    217c:	19 95       	eicall
    217e:	d4 01       	movw	r26, r8
    2180:	ed 91       	ld	r30, X+
    2182:	fc 91       	ld	r31, X
    2184:	04 88       	ldd	r0, Z+20	; 0x14
    2186:	f5 89       	ldd	r31, Z+21	; 0x15
    2188:	e0 2d       	mov	r30, r0
    218a:	9e 01       	movw	r18, r28
    218c:	a5 01       	movw	r20, r10
    218e:	b6 01       	movw	r22, r12
    2190:	c4 01       	movw	r24, r8
    2192:	19 95       	eicall
    2194:	d4 01       	movw	r26, r8
    2196:	ed 91       	ld	r30, X+
    2198:	fc 91       	ld	r31, X
    219a:	06 88       	ldd	r0, Z+22	; 0x16
    219c:	f7 89       	ldd	r31, Z+23	; 0x17
    219e:	e0 2d       	mov	r30, r0
    21a0:	c4 01       	movw	r24, r8
    21a2:	df 91       	pop	r29
    21a4:	cf 91       	pop	r28
    21a6:	1f 91       	pop	r17
    21a8:	0f 91       	pop	r16
    21aa:	ff 90       	pop	r15
    21ac:	ef 90       	pop	r14
    21ae:	df 90       	pop	r13
    21b0:	cf 90       	pop	r12
    21b2:	bf 90       	pop	r11
    21b4:	af 90       	pop	r10
    21b6:	9f 90       	pop	r9
    21b8:	8f 90       	pop	r8
    21ba:	19 94       	eijmp

000021bc <_ZN12Adafruit_GFX8drawRectEiiiij>:
    21bc:	6f 92       	push	r6
    21be:	7f 92       	push	r7
    21c0:	8f 92       	push	r8
    21c2:	9f 92       	push	r9
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	ec 01       	movw	r28, r24
    21da:	4b 01       	movw	r8, r22
    21dc:	5a 01       	movw	r10, r20
    21de:	69 01       	movw	r12, r18
    21e0:	38 01       	movw	r6, r16
    21e2:	e8 81       	ld	r30, Y
    21e4:	f9 81       	ldd	r31, Y+1	; 0x01
    21e6:	02 84       	ldd	r0, Z+10	; 0x0a
    21e8:	f3 85       	ldd	r31, Z+11	; 0x0b
    21ea:	e0 2d       	mov	r30, r0
    21ec:	19 95       	eicall
    21ee:	e8 81       	ld	r30, Y
    21f0:	f9 81       	ldd	r31, Y+1	; 0x01
    21f2:	02 88       	ldd	r0, Z+18	; 0x12
    21f4:	f3 89       	ldd	r31, Z+19	; 0x13
    21f6:	e0 2d       	mov	r30, r0
    21f8:	87 01       	movw	r16, r14
    21fa:	96 01       	movw	r18, r12
    21fc:	a5 01       	movw	r20, r10
    21fe:	b4 01       	movw	r22, r8
    2200:	ce 01       	movw	r24, r28
    2202:	19 95       	eicall
    2204:	a5 01       	movw	r20, r10
    2206:	46 0d       	add	r20, r6
    2208:	57 1d       	adc	r21, r7
    220a:	41 50       	subi	r20, 0x01	; 1
    220c:	51 09       	sbc	r21, r1
    220e:	e8 81       	ld	r30, Y
    2210:	f9 81       	ldd	r31, Y+1	; 0x01
    2212:	02 88       	ldd	r0, Z+18	; 0x12
    2214:	f3 89       	ldd	r31, Z+19	; 0x13
    2216:	e0 2d       	mov	r30, r0
    2218:	96 01       	movw	r18, r12
    221a:	b4 01       	movw	r22, r8
    221c:	ce 01       	movw	r24, r28
    221e:	19 95       	eicall
    2220:	e8 81       	ld	r30, Y
    2222:	f9 81       	ldd	r31, Y+1	; 0x01
    2224:	00 88       	ldd	r0, Z+16	; 0x10
    2226:	f1 89       	ldd	r31, Z+17	; 0x11
    2228:	e0 2d       	mov	r30, r0
    222a:	93 01       	movw	r18, r6
    222c:	a5 01       	movw	r20, r10
    222e:	b4 01       	movw	r22, r8
    2230:	ce 01       	movw	r24, r28
    2232:	19 95       	eicall
    2234:	c8 0c       	add	r12, r8
    2236:	d9 1c       	adc	r13, r9
    2238:	b6 01       	movw	r22, r12
    223a:	61 50       	subi	r22, 0x01	; 1
    223c:	71 09       	sbc	r23, r1
    223e:	e8 81       	ld	r30, Y
    2240:	f9 81       	ldd	r31, Y+1	; 0x01
    2242:	00 88       	ldd	r0, Z+16	; 0x10
    2244:	f1 89       	ldd	r31, Z+17	; 0x11
    2246:	e0 2d       	mov	r30, r0
    2248:	93 01       	movw	r18, r6
    224a:	a5 01       	movw	r20, r10
    224c:	ce 01       	movw	r24, r28
    224e:	19 95       	eicall
    2250:	e8 81       	ld	r30, Y
    2252:	f9 81       	ldd	r31, Y+1	; 0x01
    2254:	06 88       	ldd	r0, Z+22	; 0x16
    2256:	f7 89       	ldd	r31, Z+23	; 0x17
    2258:	e0 2d       	mov	r30, r0
    225a:	ce 01       	movw	r24, r28
    225c:	df 91       	pop	r29
    225e:	cf 91       	pop	r28
    2260:	1f 91       	pop	r17
    2262:	0f 91       	pop	r16
    2264:	ff 90       	pop	r15
    2266:	ef 90       	pop	r14
    2268:	df 90       	pop	r13
    226a:	cf 90       	pop	r12
    226c:	bf 90       	pop	r11
    226e:	af 90       	pop	r10
    2270:	9f 90       	pop	r9
    2272:	8f 90       	pop	r8
    2274:	7f 90       	pop	r7
    2276:	6f 90       	pop	r6
    2278:	19 94       	eijmp

0000227a <_ZN12Adafruit_GFX13invertDisplayEb>:
    227a:	08 95       	ret

0000227c <_ZN12Adafruit_GFX11setRotationEh>:
    227c:	fc 01       	movw	r30, r24
    227e:	63 70       	andi	r22, 0x03	; 3
    2280:	66 8b       	std	Z+22, r22	; 0x16
    2282:	84 81       	ldd	r24, Z+4	; 0x04
    2284:	95 81       	ldd	r25, Z+5	; 0x05
    2286:	26 81       	ldd	r18, Z+6	; 0x06
    2288:	37 81       	ldd	r19, Z+7	; 0x07
    228a:	61 30       	cpi	r22, 0x01	; 1
    228c:	39 f0       	breq	.+14     	; 0x229c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    228e:	63 30       	cpi	r22, 0x03	; 3
    2290:	29 f0       	breq	.+10     	; 0x229c <_ZN12Adafruit_GFX11setRotationEh+0x20>
    2292:	91 87       	std	Z+9, r25	; 0x09
    2294:	80 87       	std	Z+8, r24	; 0x08
    2296:	33 87       	std	Z+11, r19	; 0x0b
    2298:	22 87       	std	Z+10, r18	; 0x0a
    229a:	08 95       	ret
    229c:	31 87       	std	Z+9, r19	; 0x09
    229e:	20 87       	std	Z+8, r18	; 0x08
    22a0:	93 87       	std	Z+11, r25	; 0x0b
    22a2:	82 87       	std	Z+10, r24	; 0x0a
    22a4:	08 95       	ret

000022a6 <_ZN12Adafruit_GFXC1Eii>:
    22a6:	fc 01       	movw	r30, r24
    22a8:	13 82       	std	Z+3, r1	; 0x03
    22aa:	12 82       	std	Z+2, r1	; 0x02
    22ac:	89 ee       	ldi	r24, 0xE9	; 233
    22ae:	92 e0       	ldi	r25, 0x02	; 2
    22b0:	91 83       	std	Z+1, r25	; 0x01
    22b2:	80 83       	st	Z, r24
    22b4:	75 83       	std	Z+5, r23	; 0x05
    22b6:	64 83       	std	Z+4, r22	; 0x04
    22b8:	57 83       	std	Z+7, r21	; 0x07
    22ba:	46 83       	std	Z+6, r20	; 0x06
    22bc:	71 87       	std	Z+9, r23	; 0x09
    22be:	60 87       	std	Z+8, r22	; 0x08
    22c0:	53 87       	std	Z+11, r21	; 0x0b
    22c2:	42 87       	std	Z+10, r20	; 0x0a
    22c4:	16 8a       	std	Z+22, r1	; 0x16
    22c6:	15 86       	std	Z+13, r1	; 0x0d
    22c8:	14 86       	std	Z+12, r1	; 0x0c
    22ca:	17 86       	std	Z+15, r1	; 0x0f
    22cc:	16 86       	std	Z+14, r1	; 0x0e
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	85 8b       	std	Z+21, r24	; 0x15
    22d2:	84 8b       	std	Z+20, r24	; 0x14
    22d4:	2f ef       	ldi	r18, 0xFF	; 255
    22d6:	3f ef       	ldi	r19, 0xFF	; 255
    22d8:	33 8b       	std	Z+19, r19	; 0x13
    22da:	22 8b       	std	Z+18, r18	; 0x12
    22dc:	31 8b       	std	Z+17, r19	; 0x11
    22de:	20 8b       	std	Z+16, r18	; 0x10
    22e0:	87 8b       	std	Z+23, r24	; 0x17
    22e2:	10 8e       	std	Z+24, r1	; 0x18
    22e4:	12 8e       	std	Z+26, r1	; 0x1a
    22e6:	11 8e       	std	Z+25, r1	; 0x19
    22e8:	08 95       	ret

000022ea <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    22ea:	2f 92       	push	r2
    22ec:	3f 92       	push	r3
    22ee:	4f 92       	push	r4
    22f0:	5f 92       	push	r5
    22f2:	6f 92       	push	r6
    22f4:	7f 92       	push	r7
    22f6:	8f 92       	push	r8
    22f8:	9f 92       	push	r9
    22fa:	af 92       	push	r10
    22fc:	bf 92       	push	r11
    22fe:	cf 92       	push	r12
    2300:	df 92       	push	r13
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	cf 93       	push	r28
    230c:	df 93       	push	r29
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	6b 97       	sbiw	r28, 0x1b	; 27
    2314:	0f b6       	in	r0, 0x3f	; 63
    2316:	f8 94       	cli
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	0f be       	out	0x3f, r0	; 63
    231c:	cd bf       	out	0x3d, r28	; 61
    231e:	9b 8f       	std	Y+27, r25	; 0x1b
    2320:	8a 8f       	std	Y+26, r24	; 0x1a
    2322:	2b 01       	movw	r4, r22
    2324:	5a 83       	std	Y+2, r21	; 0x02
    2326:	49 83       	std	Y+1, r20	; 0x01
    2328:	d2 2e       	mov	r13, r18
    232a:	19 87       	std	Y+9, r17	; 0x09
    232c:	08 87       	std	Y+8, r16	; 0x08
    232e:	47 01       	movw	r8, r14
    2330:	ab 82       	std	Y+3, r10	; 0x03
    2332:	dc 01       	movw	r26, r24
    2334:	59 96       	adiw	r26, 0x19	; 25
    2336:	2d 91       	ld	r18, X+
    2338:	3c 91       	ld	r19, X
    233a:	5a 97       	sbiw	r26, 0x1a	; 26
    233c:	21 15       	cp	r18, r1
    233e:	31 05       	cpc	r19, r1
    2340:	09 f0       	breq	.+2      	; 0x2344 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    2342:	00 c1       	rjmp	.+512    	; 0x2544 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    2344:	18 96       	adiw	r26, 0x08	; 8
    2346:	8d 91       	ld	r24, X+
    2348:	9c 91       	ld	r25, X
    234a:	19 97       	sbiw	r26, 0x09	; 9
    234c:	68 17       	cp	r22, r24
    234e:	79 07       	cpc	r23, r25
    2350:	0c f0       	brlt	.+2      	; 0x2354 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    2352:	e7 c1       	rjmp	.+974    	; 0x2722 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2354:	1a 96       	adiw	r26, 0x0a	; 10
    2356:	8d 91       	ld	r24, X+
    2358:	9c 91       	ld	r25, X
    235a:	1b 97       	sbiw	r26, 0x0b	; 11
    235c:	48 17       	cp	r20, r24
    235e:	59 07       	cpc	r21, r25
    2360:	0c f0       	brlt	.+2      	; 0x2364 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    2362:	df c1       	rjmp	.+958    	; 0x2722 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2364:	2c 2c       	mov	r2, r12
    2366:	31 2c       	mov	r3, r1
    2368:	fb 01       	movw	r30, r22
    236a:	26 e0       	ldi	r18, 0x06	; 6
    236c:	c2 9e       	mul	r12, r18
    236e:	e0 0d       	add	r30, r0
    2370:	f1 1d       	adc	r31, r1
    2372:	11 24       	eor	r1, r1
    2374:	fd 87       	std	Y+13, r31	; 0x0d
    2376:	ec 87       	std	Y+12, r30	; 0x0c
    2378:	1e 16       	cp	r1, r30
    237a:	1f 06       	cpc	r1, r31
    237c:	0c f0       	brlt	.+2      	; 0x2380 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    237e:	d1 c1       	rjmp	.+930    	; 0x2722 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    2380:	4a 2d       	mov	r20, r10
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	5b 87       	std	Y+11, r21	; 0x0b
    2386:	4a 87       	std	Y+10, r20	; 0x0a
    2388:	83 e0       	ldi	r24, 0x03	; 3
    238a:	44 0f       	add	r20, r20
    238c:	55 1f       	adc	r21, r21
    238e:	8a 95       	dec	r24
    2390:	e1 f7       	brne	.-8      	; 0x238a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    2392:	5f 87       	std	Y+15, r21	; 0x0f
    2394:	4e 87       	std	Y+14, r20	; 0x0e
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	84 0f       	add	r24, r20
    239c:	95 1f       	adc	r25, r21
    239e:	18 16       	cp	r1, r24
    23a0:	19 06       	cpc	r1, r25
    23a2:	0c f0       	brlt	.+2      	; 0x23a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    23a4:	be c1       	rjmp	.+892    	; 0x2722 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    23a6:	58 96       	adiw	r26, 0x18	; 24
    23a8:	8c 91       	ld	r24, X
    23aa:	81 11       	cpse	r24, r1
    23ac:	04 c0       	rjmp	.+8      	; 0x23b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    23ae:	6f ea       	ldi	r22, 0xAF	; 175
    23b0:	6d 15       	cp	r22, r13
    23b2:	08 f4       	brcc	.+2      	; 0x23b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    23b4:	d3 94       	inc	r13
    23b6:	aa 8d       	ldd	r26, Y+26	; 0x1a
    23b8:	bb 8d       	ldd	r27, Y+27	; 0x1b
    23ba:	ed 91       	ld	r30, X+
    23bc:	fc 91       	ld	r31, X
    23be:	11 97       	sbiw	r26, 0x01	; 1
    23c0:	02 84       	ldd	r0, Z+10	; 0x0a
    23c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    23c4:	e0 2d       	mov	r30, r0
    23c6:	cd 01       	movw	r24, r26
    23c8:	19 95       	eicall
    23ca:	b5 e0       	ldi	r27, 0x05	; 5
    23cc:	db 9e       	mul	r13, r27
    23ce:	c0 01       	movw	r24, r0
    23d0:	11 24       	eor	r1, r1
    23d2:	ec 2d       	mov	r30, r12
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	f9 8b       	std	Y+17, r31	; 0x11
    23d8:	e8 8b       	std	Y+16, r30	; 0x10
    23da:	92 01       	movw	r18, r4
    23dc:	2b 5f       	subi	r18, 0xFB	; 251
    23de:	3f 4f       	sbci	r19, 0xFF	; 255
    23e0:	3b 8b       	std	Y+19, r19	; 0x13
    23e2:	2a 8b       	std	Y+18, r18	; 0x12
    23e4:	32 01       	movw	r6, r4
    23e6:	5d 82       	std	Y+5, r5	; 0x05
    23e8:	4c 82       	std	Y+4, r4	; 0x04
    23ea:	ac 01       	movw	r20, r24
    23ec:	44 19       	sub	r20, r4
    23ee:	55 09       	sbc	r21, r5
    23f0:	5d 8b       	std	Y+21, r21	; 0x15
    23f2:	4c 8b       	std	Y+20, r20	; 0x14
    23f4:	7b 81       	ldd	r23, Y+3	; 0x03
    23f6:	67 2f       	mov	r22, r23
    23f8:	70 e0       	ldi	r23, 0x00	; 0
    23fa:	7f 8b       	std	Y+23, r23	; 0x17
    23fc:	6e 8b       	std	Y+22, r22	; 0x16
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	9a 81       	ldd	r25, Y+2	; 0x02
    2402:	08 96       	adiw	r24, 0x08	; 8
    2404:	99 8f       	std	Y+25, r25	; 0x19
    2406:	88 8f       	std	Y+24, r24	; 0x18
    2408:	ec 89       	ldd	r30, Y+20	; 0x14
    240a:	fd 89       	ldd	r31, Y+21	; 0x15
    240c:	e6 0d       	add	r30, r6
    240e:	f7 1d       	adc	r31, r7
    2410:	e0 5c       	subi	r30, 0xC0	; 192
    2412:	fd 4f       	sbci	r31, 0xFD	; 253
    2414:	d4 90       	lpm	r13, Z
    2416:	a9 81       	ldd	r26, Y+1	; 0x01
    2418:	ba 81       	ldd	r27, Y+2	; 0x02
    241a:	bf 83       	std	Y+7, r27	; 0x07
    241c:	ae 83       	std	Y+6, r26	; 0x06
    241e:	5d 01       	movw	r10, r26
    2420:	d0 fe       	sbrs	r13, 0
    2422:	16 c0       	rjmp	.+44     	; 0x2450 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    2424:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2426:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2428:	ed 91       	ld	r30, X+
    242a:	fc 91       	ld	r31, X
    242c:	b1 e0       	ldi	r27, 0x01	; 1
    242e:	cb 12       	cpse	r12, r27
    2430:	09 c0       	rjmp	.+18     	; 0x2444 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2432:	2b 81       	ldd	r18, Y+3	; 0x03
    2434:	21 30       	cpi	r18, 0x01	; 1
    2436:	31 f4       	brne	.+12     	; 0x2444 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    2438:	04 84       	ldd	r0, Z+12	; 0x0c
    243a:	f5 85       	ldd	r31, Z+13	; 0x0d
    243c:	e0 2d       	mov	r30, r0
    243e:	28 85       	ldd	r18, Y+8	; 0x08
    2440:	39 85       	ldd	r19, Y+9	; 0x09
    2442:	19 c0       	rjmp	.+50     	; 0x2476 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    2444:	06 84       	ldd	r0, Z+14	; 0x0e
    2446:	f7 85       	ldd	r31, Z+15	; 0x0f
    2448:	e0 2d       	mov	r30, r0
    244a:	e8 84       	ldd	r14, Y+8	; 0x08
    244c:	f9 84       	ldd	r15, Y+9	; 0x09
    244e:	1d c0       	rjmp	.+58     	; 0x248a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    2450:	48 85       	ldd	r20, Y+8	; 0x08
    2452:	59 85       	ldd	r21, Y+9	; 0x09
    2454:	48 15       	cp	r20, r8
    2456:	59 05       	cpc	r21, r9
    2458:	11 f1       	breq	.+68     	; 0x249e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    245a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    245c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    245e:	ed 91       	ld	r30, X+
    2460:	fc 91       	ld	r31, X
    2462:	b1 e0       	ldi	r27, 0x01	; 1
    2464:	cb 12       	cpse	r12, r27
    2466:	0d c0       	rjmp	.+26     	; 0x2482 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    2468:	2b 81       	ldd	r18, Y+3	; 0x03
    246a:	21 30       	cpi	r18, 0x01	; 1
    246c:	51 f4       	brne	.+20     	; 0x2482 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    246e:	04 84       	ldd	r0, Z+12	; 0x0c
    2470:	f5 85       	ldd	r31, Z+13	; 0x0d
    2472:	e0 2d       	mov	r30, r0
    2474:	94 01       	movw	r18, r8
    2476:	a5 01       	movw	r20, r10
    2478:	b3 01       	movw	r22, r6
    247a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    247c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    247e:	19 95       	eicall
    2480:	0e c0       	rjmp	.+28     	; 0x249e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    2482:	06 84       	ldd	r0, Z+14	; 0x0e
    2484:	f7 85       	ldd	r31, Z+15	; 0x0f
    2486:	e0 2d       	mov	r30, r0
    2488:	74 01       	movw	r14, r8
    248a:	0a 85       	ldd	r16, Y+10	; 0x0a
    248c:	1b 85       	ldd	r17, Y+11	; 0x0b
    248e:	91 01       	movw	r18, r2
    2490:	4e 81       	ldd	r20, Y+6	; 0x06
    2492:	5f 81       	ldd	r21, Y+7	; 0x07
    2494:	6c 81       	ldd	r22, Y+4	; 0x04
    2496:	7d 81       	ldd	r23, Y+5	; 0x05
    2498:	8a 8d       	ldd	r24, Y+26	; 0x1a
    249a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    249c:	19 95       	eicall
    249e:	d6 94       	lsr	r13
    24a0:	4e 81       	ldd	r20, Y+6	; 0x06
    24a2:	5f 81       	ldd	r21, Y+7	; 0x07
    24a4:	6e 89       	ldd	r22, Y+22	; 0x16
    24a6:	7f 89       	ldd	r23, Y+23	; 0x17
    24a8:	46 0f       	add	r20, r22
    24aa:	57 1f       	adc	r21, r23
    24ac:	5f 83       	std	Y+7, r21	; 0x07
    24ae:	4e 83       	std	Y+6, r20	; 0x06
    24b0:	7f ef       	ldi	r23, 0xFF	; 255
    24b2:	a7 1a       	sub	r10, r23
    24b4:	b7 0a       	sbc	r11, r23
    24b6:	88 8d       	ldd	r24, Y+24	; 0x18
    24b8:	99 8d       	ldd	r25, Y+25	; 0x19
    24ba:	a8 16       	cp	r10, r24
    24bc:	b9 06       	cpc	r11, r25
    24be:	09 f0       	breq	.+2      	; 0x24c2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    24c0:	af cf       	rjmp	.-162    	; 0x2420 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    24c2:	ac 81       	ldd	r26, Y+4	; 0x04
    24c4:	bd 81       	ldd	r27, Y+5	; 0x05
    24c6:	e8 89       	ldd	r30, Y+16	; 0x10
    24c8:	f9 89       	ldd	r31, Y+17	; 0x11
    24ca:	ae 0f       	add	r26, r30
    24cc:	bf 1f       	adc	r27, r31
    24ce:	bd 83       	std	Y+5, r27	; 0x05
    24d0:	ac 83       	std	Y+4, r26	; 0x04
    24d2:	ff ef       	ldi	r31, 0xFF	; 255
    24d4:	6f 1a       	sub	r6, r31
    24d6:	7f 0a       	sbc	r7, r31
    24d8:	2a 89       	ldd	r18, Y+18	; 0x12
    24da:	3b 89       	ldd	r19, Y+19	; 0x13
    24dc:	62 16       	cp	r6, r18
    24de:	73 06       	cpc	r7, r19
    24e0:	09 f0       	breq	.+2      	; 0x24e4 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    24e2:	92 cf       	rjmp	.-220    	; 0x2408 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    24e4:	48 85       	ldd	r20, Y+8	; 0x08
    24e6:	59 85       	ldd	r21, Y+9	; 0x09
    24e8:	48 15       	cp	r20, r8
    24ea:	59 05       	cpc	r21, r9
    24ec:	09 f4       	brne	.+2      	; 0x24f0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    24ee:	f7 c0       	rjmp	.+494    	; 0x26de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    24f0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    24f2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    24f4:	ed 91       	ld	r30, X+
    24f6:	fc 91       	ld	r31, X
    24f8:	b1 e0       	ldi	r27, 0x01	; 1
    24fa:	cb 12       	cpse	r12, r27
    24fc:	12 c0       	rjmp	.+36     	; 0x2522 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    24fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2500:	21 30       	cpi	r18, 0x01	; 1
    2502:	79 f4       	brne	.+30     	; 0x2522 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    2504:	b2 01       	movw	r22, r4
    2506:	6b 5f       	subi	r22, 0xFB	; 251
    2508:	7f 4f       	sbci	r23, 0xFF	; 255
    250a:	00 88       	ldd	r0, Z+16	; 0x10
    250c:	f1 89       	ldd	r31, Z+17	; 0x11
    250e:	e0 2d       	mov	r30, r0
    2510:	84 01       	movw	r16, r8
    2512:	28 e0       	ldi	r18, 0x08	; 8
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	49 81       	ldd	r20, Y+1	; 0x01
    2518:	5a 81       	ldd	r21, Y+2	; 0x02
    251a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    251c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    251e:	19 95       	eicall
    2520:	de c0       	rjmp	.+444    	; 0x26de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2522:	6c 85       	ldd	r22, Y+12	; 0x0c
    2524:	7d 85       	ldd	r23, Y+13	; 0x0d
    2526:	62 19       	sub	r22, r2
    2528:	73 09       	sbc	r23, r3
    252a:	06 84       	ldd	r0, Z+14	; 0x0e
    252c:	f7 85       	ldd	r31, Z+15	; 0x0f
    252e:	e0 2d       	mov	r30, r0
    2530:	74 01       	movw	r14, r8
    2532:	0e 85       	ldd	r16, Y+14	; 0x0e
    2534:	1f 85       	ldd	r17, Y+15	; 0x0f
    2536:	91 01       	movw	r18, r2
    2538:	49 81       	ldd	r20, Y+1	; 0x01
    253a:	5a 81       	ldd	r21, Y+2	; 0x02
    253c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    253e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2540:	19 95       	eicall
    2542:	cd c0       	rjmp	.+410    	; 0x26de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    2544:	f9 01       	movw	r30, r18
    2546:	34 96       	adiw	r30, 0x04	; 4
    2548:	e4 91       	lpm	r30, Z
    254a:	de 1a       	sub	r13, r30
    254c:	f9 01       	movw	r30, r18
    254e:	32 96       	adiw	r30, 0x02	; 2
    2550:	85 91       	lpm	r24, Z+
    2552:	94 91       	lpm	r25, Z
    2554:	b7 e0       	ldi	r27, 0x07	; 7
    2556:	db 9e       	mul	r13, r27
    2558:	80 0d       	add	r24, r0
    255a:	91 1d       	adc	r25, r1
    255c:	11 24       	eor	r1, r1
    255e:	f9 01       	movw	r30, r18
    2560:	25 91       	lpm	r18, Z+
    2562:	34 91       	lpm	r19, Z
    2564:	39 8b       	std	Y+17, r19	; 0x11
    2566:	28 8b       	std	Y+16, r18	; 0x10
    2568:	fc 01       	movw	r30, r24
    256a:	25 90       	lpm	r2, Z+
    256c:	34 90       	lpm	r3, Z
    256e:	fc 01       	movw	r30, r24
    2570:	32 96       	adiw	r30, 0x02	; 2
    2572:	74 90       	lpm	r7, Z
    2574:	31 96       	adiw	r30, 0x01	; 1
    2576:	a4 90       	lpm	r10, Z
    2578:	32 96       	adiw	r30, 0x02	; 2
    257a:	94 90       	lpm	r9, Z
    257c:	31 96       	adiw	r30, 0x01	; 1
    257e:	b4 90       	lpm	r11, Z
    2580:	31 e0       	ldi	r19, 0x01	; 1
    2582:	3c 15       	cp	r19, r12
    2584:	18 f0       	brcs	.+6      	; 0x258c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    2586:	4b 81       	ldd	r20, Y+3	; 0x03
    2588:	42 30       	cpi	r20, 0x02	; 2
    258a:	68 f0       	brcs	.+26     	; 0x25a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    258c:	69 2d       	mov	r22, r9
    258e:	09 2c       	mov	r0, r9
    2590:	00 0c       	add	r0, r0
    2592:	77 0b       	sbc	r23, r23
    2594:	7d 83       	std	Y+5, r23	; 0x05
    2596:	6c 83       	std	Y+4, r22	; 0x04
    2598:	8b 2d       	mov	r24, r11
    259a:	0b 2c       	mov	r0, r11
    259c:	00 0c       	add	r0, r0
    259e:	99 0b       	sbc	r25, r25
    25a0:	9f 83       	std	Y+7, r25	; 0x07
    25a2:	8e 83       	std	Y+6, r24	; 0x06
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    25a6:	1f 82       	std	Y+7, r1	; 0x07
    25a8:	1e 82       	std	Y+6, r1	; 0x06
    25aa:	1d 82       	std	Y+5, r1	; 0x05
    25ac:	1c 82       	std	Y+4, r1	; 0x04
    25ae:	aa 8d       	ldd	r26, Y+26	; 0x1a
    25b0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    25b2:	ed 91       	ld	r30, X+
    25b4:	fc 91       	ld	r31, X
    25b6:	11 97       	sbiw	r26, 0x01	; 1
    25b8:	02 84       	ldd	r0, Z+10	; 0x0a
    25ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    25bc:	e0 2d       	mov	r30, r0
    25be:	cd 01       	movw	r24, r26
    25c0:	19 95       	eicall
    25c2:	61 2c       	mov	r6, r1
    25c4:	d1 2c       	mov	r13, r1
    25c6:	81 2c       	mov	r8, r1
    25c8:	fb 81       	ldd	r31, Y+3	; 0x03
    25ca:	ef 2f       	mov	r30, r31
    25cc:	f0 e0       	ldi	r31, 0x00	; 0
    25ce:	fb 87       	std	Y+11, r31	; 0x0b
    25d0:	ea 87       	std	Y+10, r30	; 0x0a
    25d2:	2c 2d       	mov	r18, r12
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	3d 87       	std	Y+13, r19	; 0x0d
    25d8:	2c 87       	std	Y+12, r18	; 0x0c
    25da:	49 81       	ldd	r20, Y+1	; 0x01
    25dc:	5a 81       	ldd	r21, Y+2	; 0x02
    25de:	4b 0d       	add	r20, r11
    25e0:	51 1d       	adc	r21, r1
    25e2:	b7 fc       	sbrc	r11, 7
    25e4:	5a 95       	dec	r21
    25e6:	5d 8b       	std	Y+21, r21	; 0x15
    25e8:	4c 8b       	std	Y+20, r20	; 0x14
    25ea:	b2 01       	movw	r22, r4
    25ec:	69 0d       	add	r22, r9
    25ee:	71 1d       	adc	r23, r1
    25f0:	97 fc       	sbrc	r9, 7
    25f2:	7a 95       	dec	r23
    25f4:	7f 8b       	std	Y+23, r23	; 0x17
    25f6:	6e 8b       	std	Y+22, r22	; 0x16
    25f8:	8a 14       	cp	r8, r10
    25fa:	08 f0       	brcs	.+2      	; 0x25fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    25fc:	70 c0       	rjmp	.+224    	; 0x26de <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    25fe:	28 2d       	mov	r18, r8
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	4e 81       	ldd	r20, Y+6	; 0x06
    2604:	5f 81       	ldd	r21, Y+7	; 0x07
    2606:	42 0f       	add	r20, r18
    2608:	53 1f       	adc	r21, r19
    260a:	aa 85       	ldd	r26, Y+10	; 0x0a
    260c:	bb 85       	ldd	r27, Y+11	; 0x0b
    260e:	a4 9f       	mul	r26, r20
    2610:	c0 01       	movw	r24, r0
    2612:	a5 9f       	mul	r26, r21
    2614:	90 0d       	add	r25, r0
    2616:	b4 9f       	mul	r27, r20
    2618:	90 0d       	add	r25, r0
    261a:	11 24       	eor	r1, r1
    261c:	e9 81       	ldd	r30, Y+1	; 0x01
    261e:	fa 81       	ldd	r31, Y+2	; 0x02
    2620:	e8 0f       	add	r30, r24
    2622:	f9 1f       	adc	r31, r25
    2624:	ff 87       	std	Y+15, r31	; 0x0f
    2626:	ee 87       	std	Y+14, r30	; 0x0e
    2628:	86 2d       	mov	r24, r6
    262a:	91 2c       	mov	r9, r1
    262c:	4c 89       	ldd	r20, Y+20	; 0x14
    262e:	5d 89       	ldd	r21, Y+21	; 0x15
    2630:	42 0f       	add	r20, r18
    2632:	53 1f       	adc	r21, r19
    2634:	5b 8b       	std	Y+19, r21	; 0x13
    2636:	4a 8b       	std	Y+18, r20	; 0x12
    2638:	97 14       	cp	r9, r7
    263a:	08 f0       	brcs	.+2      	; 0x263e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    263c:	4d c0       	rjmp	.+154    	; 0x26d8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    263e:	bb 24       	eor	r11, r11
    2640:	b3 94       	inc	r11
    2642:	b8 0e       	add	r11, r24
    2644:	87 70       	andi	r24, 0x07	; 7
    2646:	41 f4       	brne	.+16     	; 0x2658 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    2648:	c1 01       	movw	r24, r2
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	e8 89       	ldd	r30, Y+16	; 0x10
    264e:	f9 89       	ldd	r31, Y+17	; 0x11
    2650:	e2 0d       	add	r30, r2
    2652:	f3 1d       	adc	r31, r3
    2654:	d4 90       	lpm	r13, Z
    2656:	1c 01       	movw	r2, r24
    2658:	d7 fe       	sbrs	r13, 7
    265a:	3a c0       	rjmp	.+116    	; 0x26d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    265c:	51 e0       	ldi	r21, 0x01	; 1
    265e:	c5 12       	cpse	r12, r21
    2660:	16 c0       	rjmp	.+44     	; 0x268e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2662:	6b 81       	ldd	r22, Y+3	; 0x03
    2664:	61 30       	cpi	r22, 0x01	; 1
    2666:	99 f4       	brne	.+38     	; 0x268e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    2668:	aa 8d       	ldd	r26, Y+26	; 0x1a
    266a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    266c:	ed 91       	ld	r30, X+
    266e:	fc 91       	ld	r31, X
    2670:	11 97       	sbiw	r26, 0x01	; 1
    2672:	04 84       	ldd	r0, Z+12	; 0x0c
    2674:	f5 85       	ldd	r31, Z+13	; 0x0d
    2676:	e0 2d       	mov	r30, r0
    2678:	28 85       	ldd	r18, Y+8	; 0x08
    267a:	39 85       	ldd	r19, Y+9	; 0x09
    267c:	4a 89       	ldd	r20, Y+18	; 0x12
    267e:	5b 89       	ldd	r21, Y+19	; 0x13
    2680:	6e 89       	ldd	r22, Y+22	; 0x16
    2682:	7f 89       	ldd	r23, Y+23	; 0x17
    2684:	69 0d       	add	r22, r9
    2686:	71 1d       	adc	r23, r1
    2688:	cd 01       	movw	r24, r26
    268a:	19 95       	eicall
    268c:	21 c0       	rjmp	.+66     	; 0x26d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    268e:	8c 81       	ldd	r24, Y+4	; 0x04
    2690:	9d 81       	ldd	r25, Y+5	; 0x05
    2692:	89 0d       	add	r24, r9
    2694:	91 1d       	adc	r25, r1
    2696:	ec 85       	ldd	r30, Y+12	; 0x0c
    2698:	fd 85       	ldd	r31, Y+13	; 0x0d
    269a:	8e 9f       	mul	r24, r30
    269c:	b0 01       	movw	r22, r0
    269e:	8f 9f       	mul	r24, r31
    26a0:	70 0d       	add	r23, r0
    26a2:	9e 9f       	mul	r25, r30
    26a4:	70 0d       	add	r23, r0
    26a6:	11 24       	eor	r1, r1
    26a8:	64 0d       	add	r22, r4
    26aa:	75 1d       	adc	r23, r5
    26ac:	aa 8d       	ldd	r26, Y+26	; 0x1a
    26ae:	bb 8d       	ldd	r27, Y+27	; 0x1b
    26b0:	ed 91       	ld	r30, X+
    26b2:	fc 91       	ld	r31, X
    26b4:	11 97       	sbiw	r26, 0x01	; 1
    26b6:	06 84       	ldd	r0, Z+14	; 0x0e
    26b8:	f7 85       	ldd	r31, Z+15	; 0x0f
    26ba:	e0 2d       	mov	r30, r0
    26bc:	e8 84       	ldd	r14, Y+8	; 0x08
    26be:	f9 84       	ldd	r15, Y+9	; 0x09
    26c0:	0a 85       	ldd	r16, Y+10	; 0x0a
    26c2:	1b 85       	ldd	r17, Y+11	; 0x0b
    26c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    26c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    26c8:	4e 85       	ldd	r20, Y+14	; 0x0e
    26ca:	5f 85       	ldd	r21, Y+15	; 0x0f
    26cc:	cd 01       	movw	r24, r26
    26ce:	19 95       	eicall
    26d0:	dd 0c       	add	r13, r13
    26d2:	93 94       	inc	r9
    26d4:	8b 2d       	mov	r24, r11
    26d6:	b0 cf       	rjmp	.-160    	; 0x2638 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    26d8:	67 0c       	add	r6, r7
    26da:	83 94       	inc	r8
    26dc:	8d cf       	rjmp	.-230    	; 0x25f8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    26de:	aa 8d       	ldd	r26, Y+26	; 0x1a
    26e0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	06 88       	ldd	r0, Z+22	; 0x16
    26ea:	f7 89       	ldd	r31, Z+23	; 0x17
    26ec:	e0 2d       	mov	r30, r0
    26ee:	cd 01       	movw	r24, r26
    26f0:	6b 96       	adiw	r28, 0x1b	; 27
    26f2:	0f b6       	in	r0, 0x3f	; 63
    26f4:	f8 94       	cli
    26f6:	de bf       	out	0x3e, r29	; 62
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	cd bf       	out	0x3d, r28	; 61
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	1f 91       	pop	r17
    2702:	0f 91       	pop	r16
    2704:	ff 90       	pop	r15
    2706:	ef 90       	pop	r14
    2708:	df 90       	pop	r13
    270a:	cf 90       	pop	r12
    270c:	bf 90       	pop	r11
    270e:	af 90       	pop	r10
    2710:	9f 90       	pop	r9
    2712:	8f 90       	pop	r8
    2714:	7f 90       	pop	r7
    2716:	6f 90       	pop	r6
    2718:	5f 90       	pop	r5
    271a:	4f 90       	pop	r4
    271c:	3f 90       	pop	r3
    271e:	2f 90       	pop	r2
    2720:	19 94       	eijmp
    2722:	6b 96       	adiw	r28, 0x1b	; 27
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	af 90       	pop	r10
    2742:	9f 90       	pop	r9
    2744:	8f 90       	pop	r8
    2746:	7f 90       	pop	r7
    2748:	6f 90       	pop	r6
    274a:	5f 90       	pop	r5
    274c:	4f 90       	pop	r4
    274e:	3f 90       	pop	r3
    2750:	2f 90       	pop	r2
    2752:	08 95       	ret

00002754 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    2754:	8f 92       	push	r8
    2756:	9f 92       	push	r9
    2758:	af 92       	push	r10
    275a:	cf 92       	push	r12
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	ec 01       	movw	r28, r24
    276a:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    276c:	89 8d       	ldd	r24, Y+25	; 0x19
    276e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2770:	00 97       	sbiw	r24, 0x00	; 0
    2772:	09 f0       	breq	.+2      	; 0x2776 <_ZN12Adafruit_GFX5writeEh+0x22>
    2774:	41 c0       	rjmp	.+130    	; 0x27f8 <_ZN12Adafruit_GFX5writeEh+0xa4>

    if (c == '\n') {              // Newline?
    2776:	6a 30       	cpi	r22, 0x0A	; 10
    2778:	59 f4       	brne	.+22     	; 0x2790 <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    277a:	1d 86       	std	Y+13, r1	; 0x0d
    277c:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    277e:	2d 89       	ldd	r18, Y+21	; 0x15
    2780:	8e 85       	ldd	r24, Y+14	; 0x0e
    2782:	9f 85       	ldd	r25, Y+15	; 0x0f
    2784:	38 e0       	ldi	r19, 0x08	; 8
    2786:	23 9f       	mul	r18, r19
    2788:	80 0d       	add	r24, r0
    278a:	91 1d       	adc	r25, r1
    278c:	11 24       	eor	r1, r1
    278e:	42 c0       	rjmp	.+132    	; 0x2814 <_ZN12Adafruit_GFX5writeEh+0xc0>
    } else if (c != '\r') {       // Ignore carriage returns
    2790:	6d 30       	cpi	r22, 0x0D	; 13
    2792:	09 f4       	brne	.+2      	; 0x2796 <_ZN12Adafruit_GFX5writeEh+0x42>
    2794:	a8 c0       	rjmp	.+336    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    2796:	8f 89       	ldd	r24, Y+23	; 0x17
    2798:	88 23       	and	r24, r24
    279a:	c9 f0       	breq	.+50     	; 0x27ce <_ZN12Adafruit_GFX5writeEh+0x7a>
    279c:	3c 89       	ldd	r19, Y+20	; 0x14
    279e:	8c 85       	ldd	r24, Y+12	; 0x0c
    27a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27a2:	46 e0       	ldi	r20, 0x06	; 6
    27a4:	34 9f       	mul	r19, r20
    27a6:	80 0d       	add	r24, r0
    27a8:	91 1d       	adc	r25, r1
    27aa:	11 24       	eor	r1, r1
    27ac:	48 85       	ldd	r20, Y+8	; 0x08
    27ae:	59 85       	ldd	r21, Y+9	; 0x09
    27b0:	48 17       	cp	r20, r24
    27b2:	59 07       	cpc	r21, r25
    27b4:	64 f4       	brge	.+24     	; 0x27ce <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    27b6:	1d 86       	std	Y+13, r1	; 0x0d
    27b8:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    27ba:	3d 89       	ldd	r19, Y+21	; 0x15
    27bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27be:	9f 85       	ldd	r25, Y+15	; 0x0f
    27c0:	48 e0       	ldi	r20, 0x08	; 8
    27c2:	34 9f       	mul	r19, r20
    27c4:	80 0d       	add	r24, r0
    27c6:	91 1d       	adc	r25, r1
    27c8:	11 24       	eor	r1, r1
    27ca:	9f 87       	std	Y+15, r25	; 0x0f
    27cc:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    27ce:	ea 88       	ldd	r14, Y+18	; 0x12
    27d0:	fb 88       	ldd	r15, Y+19	; 0x13
    27d2:	08 89       	ldd	r16, Y+16	; 0x10
    27d4:	19 89       	ldd	r17, Y+17	; 0x11
    27d6:	4e 85       	ldd	r20, Y+14	; 0x0e
    27d8:	5f 85       	ldd	r21, Y+15	; 0x0f
    27da:	6c 85       	ldd	r22, Y+12	; 0x0c
    27dc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27de:	ad 88       	ldd	r10, Y+21	; 0x15
    27e0:	cc 88       	ldd	r12, Y+20	; 0x14
    27e2:	ce 01       	movw	r24, r28
    27e4:	82 dd       	rcall	.-1276   	; 0x22ea <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    27e6:	2c 89       	ldd	r18, Y+20	; 0x14
    27e8:	8c 85       	ldd	r24, Y+12	; 0x0c
    27ea:	9d 85       	ldd	r25, Y+13	; 0x0d
    27ec:	36 e0       	ldi	r19, 0x06	; 6
    27ee:	23 9f       	mul	r18, r19
    27f0:	80 0d       	add	r24, r0
    27f2:	91 1d       	adc	r25, r1
    27f4:	11 24       	eor	r1, r1
    27f6:	3e c0       	rjmp	.+124    	; 0x2874 <_ZN12Adafruit_GFX5writeEh+0x120>
    }

  } else { // Custom font

    if (c == '\n') {
    27f8:	6a 30       	cpi	r22, 0x0A	; 10
    27fa:	79 f4       	brne	.+30     	; 0x281a <_ZN12Adafruit_GFX5writeEh+0xc6>
      cursor_x = 0;
    27fc:	1d 86       	std	Y+13, r1	; 0x0d
    27fe:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    2800:	2d 89       	ldd	r18, Y+21	; 0x15
    2802:	fc 01       	movw	r30, r24
    2804:	36 96       	adiw	r30, 0x06	; 6
    2806:	e4 91       	lpm	r30, Z
    2808:	8e 85       	ldd	r24, Y+14	; 0x0e
    280a:	9f 85       	ldd	r25, Y+15	; 0x0f
    280c:	2e 9f       	mul	r18, r30
    280e:	80 0d       	add	r24, r0
    2810:	91 1d       	adc	r25, r1
    2812:	11 24       	eor	r1, r1
    2814:	9f 87       	std	Y+15, r25	; 0x0f
    2816:	8e 87       	std	Y+14, r24	; 0x0e
    2818:	66 c0       	rjmp	.+204    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
    } else if (c != '\r') {
    281a:	6d 30       	cpi	r22, 0x0D	; 13
    281c:	09 f4       	brne	.+2      	; 0x2820 <_ZN12Adafruit_GFX5writeEh+0xcc>
    281e:	63 c0       	rjmp	.+198    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    2820:	fc 01       	movw	r30, r24
    2822:	34 96       	adiw	r30, 0x04	; 4
    2824:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    2826:	63 17       	cp	r22, r19
    2828:	08 f4       	brcc	.+2      	; 0x282c <_ZN12Adafruit_GFX5writeEh+0xd8>
    282a:	5d c0       	rjmp	.+186    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
    282c:	31 96       	adiw	r30, 0x01	; 1
    282e:	e4 91       	lpm	r30, Z
    2830:	e6 17       	cp	r30, r22
    2832:	08 f4       	brcc	.+2      	; 0x2836 <_ZN12Adafruit_GFX5writeEh+0xe2>
    2834:	58 c0       	rjmp	.+176    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    2836:	46 2f       	mov	r20, r22
    2838:	43 1b       	sub	r20, r19
    283a:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    283c:	fc 01       	movw	r30, r24
    283e:	32 96       	adiw	r30, 0x02	; 2
    2840:	85 90       	lpm	r8, Z+
    2842:	94 90       	lpm	r9, Z
    2844:	47 e0       	ldi	r20, 0x07	; 7
    2846:	34 9f       	mul	r19, r20
    2848:	80 0c       	add	r8, r0
    284a:	91 1c       	adc	r9, r1
    284c:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    284e:	f4 01       	movw	r30, r8
    2850:	32 96       	adiw	r30, 0x02	; 2
    2852:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    2854:	31 96       	adiw	r30, 0x01	; 1
    2856:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    2858:	33 23       	and	r19, r19
    285a:	11 f0       	breq	.+4      	; 0x2860 <_ZN12Adafruit_GFX5writeEh+0x10c>
    285c:	e1 11       	cpse	r30, r1
    285e:	0d c0       	rjmp	.+26     	; 0x287a <_ZN12Adafruit_GFX5writeEh+0x126>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    2860:	f4 01       	movw	r30, r8
    2862:	34 96       	adiw	r30, 0x04	; 4
    2864:	e4 91       	lpm	r30, Z
    2866:	2c 89       	ldd	r18, Y+20	; 0x14
    2868:	8c 85       	ldd	r24, Y+12	; 0x0c
    286a:	9d 85       	ldd	r25, Y+13	; 0x0d
    286c:	e2 9f       	mul	r30, r18
    286e:	80 0d       	add	r24, r0
    2870:	91 1d       	adc	r25, r1
    2872:	11 24       	eor	r1, r1
    2874:	9d 87       	std	Y+13, r25	; 0x0d
    2876:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    2878:	36 c0       	rjmp	.+108    	; 0x28e6 <_ZN12Adafruit_GFX5writeEh+0x192>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    287a:	f4 01       	movw	r30, r8
    287c:	35 96       	adiw	r30, 0x05	; 5
    287e:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    2880:	5f 89       	ldd	r21, Y+23	; 0x17
    2882:	55 23       	and	r21, r21
    2884:	19 f1       	breq	.+70     	; 0x28cc <_ZN12Adafruit_GFX5writeEh+0x178>
    2886:	5c 89       	ldd	r21, Y+20	; 0x14
    2888:	e3 2f       	mov	r30, r19
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	e4 0f       	add	r30, r20
    288e:	f1 1d       	adc	r31, r1
    2890:	47 fd       	sbrc	r20, 7
    2892:	fa 95       	dec	r31
    2894:	5e 9f       	mul	r21, r30
    2896:	b0 01       	movw	r22, r0
    2898:	5f 9f       	mul	r21, r31
    289a:	70 0d       	add	r23, r0
    289c:	11 24       	eor	r1, r1
    289e:	4c 85       	ldd	r20, Y+12	; 0x0c
    28a0:	5d 85       	ldd	r21, Y+13	; 0x0d
    28a2:	46 0f       	add	r20, r22
    28a4:	57 1f       	adc	r21, r23
    28a6:	68 85       	ldd	r22, Y+8	; 0x08
    28a8:	79 85       	ldd	r23, Y+9	; 0x09
    28aa:	64 17       	cp	r22, r20
    28ac:	75 07       	cpc	r23, r21
    28ae:	74 f4       	brge	.+28     	; 0x28cc <_ZN12Adafruit_GFX5writeEh+0x178>
            cursor_x = 0;
    28b0:	1d 86       	std	Y+13, r1	; 0x0d
    28b2:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    28b4:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    28b6:	fc 01       	movw	r30, r24
    28b8:	36 96       	adiw	r30, 0x06	; 6
    28ba:	e4 91       	lpm	r30, Z
    28bc:	8e 85       	ldd	r24, Y+14	; 0x0e
    28be:	9f 85       	ldd	r25, Y+15	; 0x0f
    28c0:	3e 9f       	mul	r19, r30
    28c2:	80 0d       	add	r24, r0
    28c4:	91 1d       	adc	r25, r1
    28c6:	11 24       	eor	r1, r1
    28c8:	9f 87       	std	Y+15, r25	; 0x0f
    28ca:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    28cc:	ea 88       	ldd	r14, Y+18	; 0x12
    28ce:	fb 88       	ldd	r15, Y+19	; 0x13
    28d0:	08 89       	ldd	r16, Y+16	; 0x10
    28d2:	19 89       	ldd	r17, Y+17	; 0x11
    28d4:	4e 85       	ldd	r20, Y+14	; 0x0e
    28d6:	5f 85       	ldd	r21, Y+15	; 0x0f
    28d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    28da:	7d 85       	ldd	r23, Y+13	; 0x0d
    28dc:	ad 88       	ldd	r10, Y+21	; 0x15
    28de:	cc 88       	ldd	r12, Y+20	; 0x14
    28e0:	ce 01       	movw	r24, r28
    28e2:	03 dd       	rcall	.-1530   	; 0x22ea <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    28e4:	bd cf       	rjmp	.-134    	; 0x2860 <_ZN12Adafruit_GFX5writeEh+0x10c>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	df 91       	pop	r29
    28ec:	cf 91       	pop	r28
    28ee:	1f 91       	pop	r17
    28f0:	0f 91       	pop	r16
    28f2:	ff 90       	pop	r15
    28f4:	ef 90       	pop	r14
    28f6:	cf 90       	pop	r12
    28f8:	af 90       	pop	r10
    28fa:	9f 90       	pop	r9
    28fc:	8f 90       	pop	r8
    28fe:	08 95       	ret

00002900 <_ZN11SPISettingsC1Emhh>:
    @param  cmd  16-bit command to write.
*/
void Adafruit_SPITFT::writeCommand16(uint16_t cmd) {
  SPI_DC_LOW();
  write16(cmd);
  SPI_DC_HIGH();
    2900:	0f 93       	push	r16
    2902:	fc 01       	movw	r30, r24
    2904:	80 e0       	ldi	r24, 0x00	; 0
    2906:	92 e1       	ldi	r25, 0x12	; 18
    2908:	aa e7       	ldi	r26, 0x7A	; 122
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	48 17       	cp	r20, r24
    2910:	59 07       	cpc	r21, r25
    2912:	6a 07       	cpc	r22, r26
    2914:	7b 07       	cpc	r23, r27
    2916:	40 f4       	brcc	.+16     	; 0x2928 <_ZN11SPISettingsC1Emhh+0x28>
    2918:	b6 95       	lsr	r27
    291a:	a7 95       	ror	r26
    291c:	97 95       	ror	r25
    291e:	87 95       	ror	r24
    2920:	3f 5f       	subi	r19, 0xFF	; 255
    2922:	36 30       	cpi	r19, 0x06	; 6
    2924:	a1 f7       	brne	.-24     	; 0x290e <_ZN11SPISettingsC1Emhh+0xe>
    2926:	37 e0       	ldi	r19, 0x07	; 7
    2928:	91 e0       	ldi	r25, 0x01	; 1
    292a:	93 27       	eor	r25, r19
    292c:	22 23       	and	r18, r18
    292e:	11 f0       	breq	.+4      	; 0x2934 <_ZN11SPISettingsC1Emhh+0x34>
    2930:	20 e5       	ldi	r18, 0x50	; 80
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <_ZN11SPISettingsC1Emhh+0x36>
    2934:	20 e7       	ldi	r18, 0x70	; 112
    2936:	0c 70       	andi	r16, 0x0C	; 12
    2938:	89 2f       	mov	r24, r25
    293a:	86 95       	lsr	r24
    293c:	08 2b       	or	r16, r24
    293e:	02 2b       	or	r16, r18
    2940:	00 83       	st	Z, r16
    2942:	91 70       	andi	r25, 0x01	; 1
    2944:	91 83       	std	Z+1, r25	; 0x01
    2946:	0f 91       	pop	r16
    2948:	08 95       	ret

0000294a <_ZN8SPIClass14endTransactionEv>:
    294a:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <_ZN8SPIClass13interruptModeE>
    294e:	88 23       	and	r24, r24
    2950:	61 f0       	breq	.+24     	; 0x296a <_ZN8SPIClass14endTransactionEv+0x20>
    2952:	9f b7       	in	r25, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	20 91 ab 05 	lds	r18, 0x05AB	; 0x8005ab <_ZN8SPIClass13interruptModeE>
    295a:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <_ZN8SPIClass13interruptSaveE>
    295e:	21 30       	cpi	r18, 0x01	; 1
    2960:	19 f4       	brne	.+6      	; 0x2968 <_ZN8SPIClass14endTransactionEv+0x1e>
    2962:	8d bb       	out	0x1d, r24	; 29
    2964:	9f bf       	out	0x3f, r25	; 63
    2966:	08 95       	ret
    2968:	8f bf       	out	0x3f, r24	; 63
    296a:	08 95       	ret

0000296c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>:
    296c:	dc 01       	movw	r26, r24
    296e:	5b 96       	adiw	r26, 0x1b	; 27
    2970:	ed 91       	ld	r30, X+
    2972:	fc 91       	ld	r31, X
    2974:	5c 97       	sbiw	r26, 0x1c	; 28
    2976:	90 81       	ld	r25, Z
    2978:	d1 96       	adiw	r26, 0x31	; 49
    297a:	8c 91       	ld	r24, X
    297c:	89 2b       	or	r24, r25
    297e:	80 83       	st	Z, r24
    2980:	08 95       	ret

00002982 <_ZN15Adafruit_SPITFT8endWriteEv>:
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	ec 01       	movw	r28, r24
    2988:	8f a9       	ldd	r24, Y+55	; 0x37
    298a:	87 fd       	sbrc	r24, 7
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <_ZN15Adafruit_SPITFT8endWriteEv+0x10>
    298e:	ce 01       	movw	r24, r28
    2990:	ed df       	rcall	.-38     	; 0x296c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
    2992:	8d a9       	ldd	r24, Y+53	; 0x35
    2994:	81 11       	cpse	r24, r1
    2996:	03 c0       	rjmp	.+6      	; 0x299e <_ZN15Adafruit_SPITFT8endWriteEv+0x1c>
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	d6 cf       	rjmp	.-84     	; 0x294a <_ZN8SPIClass14endTransactionEv>
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>:
    29a4:	dc 01       	movw	r26, r24
    29a6:	5b 96       	adiw	r26, 0x1b	; 27
    29a8:	ed 91       	ld	r30, X+
    29aa:	fc 91       	ld	r31, X
    29ac:	5c 97       	sbiw	r26, 0x1c	; 28
    29ae:	90 81       	ld	r25, Z
    29b0:	d2 96       	adiw	r26, 0x32	; 50
    29b2:	8c 91       	ld	r24, X
    29b4:	89 23       	and	r24, r25
    29b6:	80 83       	st	Z, r24
    29b8:	08 95       	ret

000029ba <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>:
    29ba:	dc 01       	movw	r26, r24
    29bc:	5d 96       	adiw	r26, 0x1d	; 29
    29be:	ed 91       	ld	r30, X+
    29c0:	fc 91       	ld	r31, X
    29c2:	5e 97       	sbiw	r26, 0x1e	; 30
    29c4:	90 81       	ld	r25, Z
    29c6:	d3 96       	adiw	r26, 0x33	; 51
    29c8:	8c 91       	ld	r24, X
    29ca:	89 2b       	or	r24, r25
    29cc:	80 83       	st	Z, r24
    29ce:	08 95       	ret

000029d0 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>:
    29d0:	dc 01       	movw	r26, r24
    29d2:	5d 96       	adiw	r26, 0x1d	; 29
    29d4:	ed 91       	ld	r30, X+
    29d6:	fc 91       	ld	r31, X
    29d8:	5e 97       	sbiw	r26, 0x1e	; 30
    29da:	90 81       	ld	r25, Z
    29dc:	d4 96       	adiw	r26, 0x34	; 52
    29de:	8c 91       	ld	r24, X
    29e0:	89 23       	and	r24, r25
    29e2:	80 83       	st	Z, r24
    29e4:	08 95       	ret

000029e6 <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa>:
    29e6:	af 92       	push	r10
    29e8:	bf 92       	push	r11
    29ea:	cf 92       	push	r12
    29ec:	ef 92       	push	r14
    29ee:	0f 93       	push	r16
    29f0:	1f 93       	push	r17
    29f2:	cf 93       	push	r28
    29f4:	df 93       	push	r29
    29f6:	ec 01       	movw	r28, r24
    29f8:	59 01       	movw	r10, r18
    29fa:	55 dc       	rcall	.-1878   	; 0x22a6 <_ZN12Adafruit_GFXC1Eii>
    29fc:	85 e1       	ldi	r24, 0x15	; 21
    29fe:	93 e0       	ldi	r25, 0x03	; 3
    2a00:	99 83       	std	Y+1, r25	; 0x01
    2a02:	88 83       	st	Y, r24
    2a04:	1d aa       	std	Y+53, r1	; 0x35
    2a06:	ce aa       	std	Y+54, r12	; 0x36
    2a08:	0f ab       	std	Y+55, r16	; 0x37
    2a0a:	e8 ae       	std	Y+56, r14	; 0x38
    2a0c:	1a ae       	std	Y+58, r1	; 0x3a
    2a0e:	19 ae       	std	Y+57, r1	; 0x39
    2a10:	1c ae       	std	Y+60, r1	; 0x3c
    2a12:	1b ae       	std	Y+59, r1	; 0x3b
    2a14:	1d ae       	std	Y+61, r1	; 0x3d
    2a16:	1e ae       	std	Y+62, r1	; 0x3e
    2a18:	fe 01       	movw	r30, r28
    2a1a:	ff 96       	adiw	r30, 0x3f	; 63
    2a1c:	10 82       	st	Z, r1
    2a1e:	11 82       	std	Z+1, r1	; 0x01
    2a20:	12 82       	std	Z+2, r1	; 0x02
    2a22:	13 82       	std	Z+3, r1	; 0x03
    2a24:	b8 a2       	std	Y+32, r11	; 0x20
    2a26:	af 8e       	std	Y+31, r10	; 0x1f
    2a28:	8e 2d       	mov	r24, r14
    2a2a:	ee 0c       	add	r14, r14
    2a2c:	99 0b       	sbc	r25, r25
    2a2e:	fc 01       	movw	r30, r24
    2a30:	e4 55       	subi	r30, 0x54	; 84
    2a32:	fe 4f       	sbci	r31, 0xFE	; 254
    2a34:	e4 91       	lpm	r30, Z
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	ee 0f       	add	r30, r30
    2a3a:	ff 1f       	adc	r31, r31
    2a3c:	e4 5f       	subi	r30, 0xF4	; 244
    2a3e:	fd 4f       	sbci	r31, 0xFD	; 253
    2a40:	25 91       	lpm	r18, Z+
    2a42:	34 91       	lpm	r19, Z
    2a44:	3e 8f       	std	Y+30, r19	; 0x1e
    2a46:	2d 8f       	std	Y+29, r18	; 0x1d
    2a48:	fc 01       	movw	r30, r24
    2a4a:	ea 59       	subi	r30, 0x9A	; 154
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	84 91       	lpm	r24, Z
    2a50:	8b ab       	std	Y+51, r24	; 0x33
    2a52:	07 fd       	sbrc	r16, 7
    2a54:	16 c0       	rjmp	.+44     	; 0x2a82 <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa+0x9c>
    2a56:	00 2e       	mov	r0, r16
    2a58:	00 0c       	add	r0, r0
    2a5a:	11 0b       	sbc	r17, r17
    2a5c:	f8 01       	movw	r30, r16
    2a5e:	e4 55       	subi	r30, 0x54	; 84
    2a60:	fe 4f       	sbci	r31, 0xFE	; 254
    2a62:	e4 91       	lpm	r30, Z
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	ee 0f       	add	r30, r30
    2a68:	ff 1f       	adc	r31, r31
    2a6a:	e4 5f       	subi	r30, 0xF4	; 244
    2a6c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a6e:	25 91       	lpm	r18, Z+
    2a70:	34 91       	lpm	r19, Z
    2a72:	3c 8f       	std	Y+28, r19	; 0x1c
    2a74:	2b 8f       	std	Y+27, r18	; 0x1b
    2a76:	f8 01       	movw	r30, r16
    2a78:	ea 59       	subi	r30, 0x9A	; 154
    2a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a7c:	04 91       	lpm	r16, Z
    2a7e:	09 ab       	std	Y+49, r16	; 0x31
    2a80:	03 c0       	rjmp	.+6      	; 0x2a88 <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa+0xa2>
    2a82:	3c 8f       	std	Y+28, r19	; 0x1c
    2a84:	2b 8f       	std	Y+27, r18	; 0x1b
    2a86:	19 aa       	std	Y+49, r1	; 0x31
    2a88:	99 a9       	ldd	r25, Y+49	; 0x31
    2a8a:	90 95       	com	r25
    2a8c:	9a ab       	std	Y+50, r25	; 0x32
    2a8e:	80 95       	com	r24
    2a90:	8c ab       	std	Y+52, r24	; 0x34
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	ef 90       	pop	r14
    2a9c:	cf 90       	pop	r12
    2a9e:	bf 90       	pop	r11
    2aa0:	af 90       	pop	r10
    2aa2:	08 95       	ret

00002aa4 <_ZN15Adafruit_SPITFTC1Ejjaaa>:
    2aa4:	cf 92       	push	r12
    2aa6:	ef 92       	push	r14
    2aa8:	0f 93       	push	r16
    2aaa:	ce 2c       	mov	r12, r14
    2aac:	e0 2e       	mov	r14, r16
    2aae:	02 2f       	mov	r16, r18
    2ab0:	2d ea       	ldi	r18, 0xAD	; 173
    2ab2:	35 e0       	ldi	r19, 0x05	; 5
    2ab4:	98 df       	rcall	.-208    	; 0x29e6 <_ZN15Adafruit_SPITFTC1EjjP8SPIClassaaa>
    2ab6:	0f 91       	pop	r16
    2ab8:	ef 90       	pop	r14
    2aba:	cf 90       	pop	r12
    2abc:	08 95       	ret

00002abe <_ZN15Adafruit_SPITFT7initSPIEmh>:
    2abe:	8f 92       	push	r8
    2ac0:	9f 92       	push	r9
    2ac2:	af 92       	push	r10
    2ac4:	bf 92       	push	r11
    2ac6:	df 92       	push	r13
    2ac8:	ef 92       	push	r14
    2aca:	ff 92       	push	r15
    2acc:	0f 93       	push	r16
    2ace:	1f 93       	push	r17
    2ad0:	cf 93       	push	r28
    2ad2:	df 93       	push	r29
    2ad4:	1f 92       	push	r1
    2ad6:	1f 92       	push	r1
    2ad8:	cd b7       	in	r28, 0x3d	; 61
    2ada:	de b7       	in	r29, 0x3e	; 62
    2adc:	7c 01       	movw	r14, r24
    2ade:	4a 01       	movw	r8, r20
    2ae0:	5b 01       	movw	r10, r22
    2ae2:	12 2f       	mov	r17, r18
    2ae4:	45 2b       	or	r20, r21
    2ae6:	46 2b       	or	r20, r22
    2ae8:	47 2b       	or	r20, r23
    2aea:	31 f4       	brne	.+12     	; 0x2af8 <_ZN15Adafruit_SPITFT7initSPIEmh+0x3a>
    2aec:	81 2c       	mov	r8, r1
    2aee:	92 e1       	ldi	r25, 0x12	; 18
    2af0:	99 2e       	mov	r9, r25
    2af2:	9a e7       	ldi	r25, 0x7A	; 122
    2af4:	a9 2e       	mov	r10, r25
    2af6:	b1 2c       	mov	r11, r1
    2af8:	f7 01       	movw	r30, r14
    2afa:	87 a9       	ldd	r24, Z+55	; 0x37
    2afc:	87 fd       	sbrc	r24, 7
    2afe:	08 c0       	rjmp	.+16     	; 0x2b10 <_ZN15Adafruit_SPITFT7initSPIEmh+0x52>
    2b00:	61 e0       	ldi	r22, 0x01	; 1
    2b02:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	f7 01       	movw	r30, r14
    2b0a:	87 a9       	ldd	r24, Z+55	; 0x37
    2b0c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	f7 01       	movw	r30, r14
    2b14:	80 ad       	ldd	r24, Z+56	; 0x38
    2b16:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2b1a:	61 e0       	ldi	r22, 0x01	; 1
    2b1c:	f7 01       	movw	r30, r14
    2b1e:	80 ad       	ldd	r24, Z+56	; 0x38
    2b20:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2b24:	f7 01       	movw	r30, r14
    2b26:	85 a9       	ldd	r24, Z+53	; 0x35
    2b28:	81 11       	cpse	r24, r1
    2b2a:	16 c0       	rjmp	.+44     	; 0x2b58 <_ZN15Adafruit_SPITFT7initSPIEmh+0x9a>
    2b2c:	01 2f       	mov	r16, r17
    2b2e:	21 e0       	ldi	r18, 0x01	; 1
    2b30:	b5 01       	movw	r22, r10
    2b32:	a4 01       	movw	r20, r8
    2b34:	ce 01       	movw	r24, r28
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	e3 de       	rcall	.-570    	; 0x2900 <_ZN11SPISettingsC1Emhh>
    2b3a:	89 81       	ldd	r24, Y+1	; 0x01
    2b3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3e:	f7 01       	movw	r30, r14
    2b40:	92 a3       	std	Z+34, r25	; 0x22
    2b42:	81 a3       	std	Z+33, r24	; 0x21
    2b44:	01 2f       	mov	r16, r17
    2b46:	10 e0       	ldi	r17, 0x00	; 0
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	03 a3       	std	Z+35, r16	; 0x23
    2b4e:	14 a3       	std	Z+36, r17	; 0x24
    2b50:	25 a3       	std	Z+37, r18	; 0x25
    2b52:	36 a3       	std	Z+38, r19	; 0x26
    2b54:	ca d5       	rcall	.+2964   	; 0x36ea <_ZN8SPIClass5beginEv>
    2b56:	55 c0       	rjmp	.+170    	; 0x2c02 <_ZN15Adafruit_SPITFT7initSPIEmh+0x144>
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	e1 f4       	brne	.+56     	; 0x2b94 <_ZN15Adafruit_SPITFT7initSPIEmh+0xd6>
    2b5c:	61 e0       	ldi	r22, 0x01	; 1
    2b5e:	f7 01       	movw	r30, r14
    2b60:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b62:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2b66:	60 e0       	ldi	r22, 0x00	; 0
    2b68:	f7 01       	movw	r30, r14
    2b6a:	82 a5       	ldd	r24, Z+42	; 0x2a
    2b6c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2b70:	61 e0       	ldi	r22, 0x01	; 1
    2b72:	f7 01       	movw	r30, r14
    2b74:	84 a5       	ldd	r24, Z+44	; 0x2c
    2b76:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2b7a:	60 e0       	ldi	r22, 0x00	; 0
    2b7c:	f7 01       	movw	r30, r14
    2b7e:	84 a5       	ldd	r24, Z+44	; 0x2c
    2b80:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2b84:	f7 01       	movw	r30, r14
    2b86:	83 a5       	ldd	r24, Z+43	; 0x2b
    2b88:	87 fd       	sbrc	r24, 7
    2b8a:	3b c0       	rjmp	.+118    	; 0x2c02 <_ZN15Adafruit_SPITFT7initSPIEmh+0x144>
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2b92:	37 c0       	rjmp	.+110    	; 0x2c02 <_ZN15Adafruit_SPITFT7initSPIEmh+0x144>
    2b94:	0c ea       	ldi	r16, 0xAC	; 172
    2b96:	11 e0       	ldi	r17, 0x01	; 1
    2b98:	d1 2c       	mov	r13, r1
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	84 91       	lpm	r24, Z
    2b9e:	e8 2f       	mov	r30, r24
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	ee 0f       	add	r30, r30
    2ba4:	ff 1f       	adc	r31, r31
    2ba6:	e4 5f       	subi	r30, 0xF4	; 244
    2ba8:	fd 4f       	sbci	r31, 0xFD	; 253
    2baa:	85 91       	lpm	r24, Z+
    2bac:	94 91       	lpm	r25, Z
    2bae:	f7 01       	movw	r30, r14
    2bb0:	27 8d       	ldd	r18, Z+31	; 0x1f
    2bb2:	30 a1       	ldd	r19, Z+32	; 0x20
    2bb4:	28 17       	cp	r18, r24
    2bb6:	39 07       	cpc	r19, r25
    2bb8:	41 f4       	brne	.+16     	; 0x2bca <_ZN15Adafruit_SPITFT7initSPIEmh+0x10c>
    2bba:	61 e0       	ldi	r22, 0x01	; 1
    2bbc:	8d 2d       	mov	r24, r13
    2bbe:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2bc2:	60 e0       	ldi	r22, 0x00	; 0
    2bc4:	8d 2d       	mov	r24, r13
    2bc6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2bca:	d3 94       	inc	r13
    2bcc:	0f 5f       	subi	r16, 0xFF	; 255
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	f6 e4       	ldi	r31, 0x46	; 70
    2bd2:	df 12       	cpse	r13, r31
    2bd4:	e2 cf       	rjmp	.-60     	; 0x2b9a <_ZN15Adafruit_SPITFT7initSPIEmh+0xdc>
    2bd6:	61 e0       	ldi	r22, 0x01	; 1
    2bd8:	f7 01       	movw	r30, r14
    2bda:	86 a5       	ldd	r24, Z+46	; 0x2e
    2bdc:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2be0:	61 e0       	ldi	r22, 0x01	; 1
    2be2:	f7 01       	movw	r30, r14
    2be4:	86 a5       	ldd	r24, Z+46	; 0x2e
    2be6:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2bea:	f7 01       	movw	r30, r14
    2bec:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bee:	87 fd       	sbrc	r24, 7
    2bf0:	08 c0       	rjmp	.+16     	; 0x2c02 <_ZN15Adafruit_SPITFT7initSPIEmh+0x144>
    2bf2:	61 e0       	ldi	r22, 0x01	; 1
    2bf4:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2bf8:	61 e0       	ldi	r22, 0x01	; 1
    2bfa:	f7 01       	movw	r30, r14
    2bfc:	87 a5       	ldd	r24, Z+47	; 0x2f
    2bfe:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2c02:	f7 01       	movw	r30, r14
    2c04:	86 a9       	ldd	r24, Z+54	; 0x36
    2c06:	87 fd       	sbrc	r24, 7
    2c08:	24 c0       	rjmp	.+72     	; 0x2c52 <_ZN15Adafruit_SPITFT7initSPIEmh+0x194>
    2c0a:	61 e0       	ldi	r22, 0x01	; 1
    2c0c:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    2c10:	61 e0       	ldi	r22, 0x01	; 1
    2c12:	f7 01       	movw	r30, r14
    2c14:	86 a9       	ldd	r24, Z+54	; 0x36
    2c16:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2c1a:	64 e6       	ldi	r22, 0x64	; 100
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	0e 94 9f 08 	call	0x113e	; 0x113e <delay>
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	f7 01       	movw	r30, r14
    2c2a:	86 a9       	ldd	r24, Z+54	; 0x36
    2c2c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2c30:	64 e6       	ldi	r22, 0x64	; 100
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	0e 94 9f 08 	call	0x113e	; 0x113e <delay>
    2c3c:	61 e0       	ldi	r22, 0x01	; 1
    2c3e:	f7 01       	movw	r30, r14
    2c40:	86 a9       	ldd	r24, Z+54	; 0x36
    2c42:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    2c46:	68 ec       	ldi	r22, 0xC8	; 200
    2c48:	70 e0       	ldi	r23, 0x00	; 0
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 9f 08 	call	0x113e	; 0x113e <delay>
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	1f 91       	pop	r17
    2c5c:	0f 91       	pop	r16
    2c5e:	ff 90       	pop	r15
    2c60:	ef 90       	pop	r14
    2c62:	df 90       	pop	r13
    2c64:	bf 90       	pop	r11
    2c66:	af 90       	pop	r10
    2c68:	9f 90       	pop	r9
    2c6a:	8f 90       	pop	r8
    2c6c:	08 95       	ret

00002c6e <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    2c6e:	fc 01       	movw	r30, r24
    2c70:	85 a9       	ldd	r24, Z+53	; 0x35
    2c72:	81 11       	cpse	r24, r1
    2c74:	1b c0       	rjmp	.+54     	; 0x2cac <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3e>
    2c76:	41 a1       	ldd	r20, Z+33	; 0x21
    2c78:	32 a1       	ldd	r19, Z+34	; 0x22
    2c7a:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <_ZN8SPIClass13interruptModeE>
    2c7e:	88 23       	and	r24, r24
    2c80:	99 f0       	breq	.+38     	; 0x2ca8 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3a>
    2c82:	2f b7       	in	r18, 0x3f	; 63
    2c84:	f8 94       	cli
    2c86:	80 91 ab 05 	lds	r24, 0x05AB	; 0x8005ab <_ZN8SPIClass13interruptModeE>
    2c8a:	81 30       	cpi	r24, 0x01	; 1
    2c8c:	59 f4       	brne	.+22     	; 0x2ca4 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x36>
    2c8e:	8d b3       	in	r24, 0x1d	; 29
    2c90:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <_ZN8SPIClass13interruptSaveE>
    2c94:	9d b3       	in	r25, 0x1d	; 29
    2c96:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <_ZN8SPIClass13interruptMaskE>
    2c9a:	80 95       	com	r24
    2c9c:	89 23       	and	r24, r25
    2c9e:	8d bb       	out	0x1d, r24	; 29
    2ca0:	2f bf       	out	0x3f, r18	; 63
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x3a>
    2ca4:	20 93 a9 05 	sts	0x05A9, r18	; 0x8005a9 <_ZN8SPIClass13interruptSaveE>
    2ca8:	4c bd       	out	0x2c, r20	; 44
    2caa:	3d bd       	out	0x2d, r19	; 45
    2cac:	08 95       	ret

00002cae <_ZN15Adafruit_SPITFT10startWriteEv>:
    2cae:	cf 93       	push	r28
    2cb0:	df 93       	push	r29
    2cb2:	ec 01       	movw	r28, r24
    2cb4:	dc df       	rcall	.-72     	; 0x2c6e <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    2cb6:	8f a9       	ldd	r24, Y+55	; 0x37
    2cb8:	87 fd       	sbrc	r24, 7
    2cba:	04 c0       	rjmp	.+8      	; 0x2cc4 <_ZN15Adafruit_SPITFT10startWriteEv+0x16>
    2cbc:	ce 01       	movw	r24, r28
    2cbe:	df 91       	pop	r29
    2cc0:	cf 91       	pop	r28
    2cc2:	70 ce       	rjmp	.-800    	; 0x29a4 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	08 95       	ret

00002cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>:
    2cca:	dc 01       	movw	r26, r24
    2ccc:	91 96       	adiw	r26, 0x21	; 33
    2cce:	ed 91       	ld	r30, X+
    2cd0:	fc 91       	ld	r31, X
    2cd2:	92 97       	sbiw	r26, 0x22	; 34
    2cd4:	90 81       	ld	r25, Z
    2cd6:	95 96       	adiw	r26, 0x25	; 37
    2cd8:	8c 91       	ld	r24, X
    2cda:	89 2b       	or	r24, r25
    2cdc:	80 83       	st	Z, r24
    2cde:	08 95       	ret

00002ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>:
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	91 96       	adiw	r26, 0x21	; 33
    2ce4:	ed 91       	ld	r30, X+
    2ce6:	fc 91       	ld	r31, X
    2ce8:	92 97       	sbiw	r26, 0x22	; 34
    2cea:	90 81       	ld	r25, Z
    2cec:	96 96       	adiw	r26, 0x26	; 38
    2cee:	8c 91       	ld	r24, X
    2cf0:	89 23       	and	r24, r25
    2cf2:	80 83       	st	Z, r24
    2cf4:	08 95       	ret

00002cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>:
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	93 96       	adiw	r26, 0x23	; 35
    2cfa:	ed 91       	ld	r30, X+
    2cfc:	fc 91       	ld	r31, X
    2cfe:	94 97       	sbiw	r26, 0x24	; 36
    2d00:	90 81       	ld	r25, Z
    2d02:	97 96       	adiw	r26, 0x27	; 39
    2d04:	8c 91       	ld	r24, X
    2d06:	89 2b       	or	r24, r25
    2d08:	80 83       	st	Z, r24
    2d0a:	08 95       	ret

00002d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>:
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	93 96       	adiw	r26, 0x23	; 35
    2d10:	ed 91       	ld	r30, X+
    2d12:	fc 91       	ld	r31, X
    2d14:	94 97       	sbiw	r26, 0x24	; 36
    2d16:	90 81       	ld	r25, Z
    2d18:	98 96       	adiw	r26, 0x28	; 40
    2d1a:	8c 91       	ld	r24, X
    2d1c:	89 23       	and	r24, r25
    2d1e:	80 83       	st	Z, r24
    2d20:	08 95       	ret

00002d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:
    2d22:	fc 01       	movw	r30, r24
    2d24:	a5 a1       	ldd	r26, Z+37	; 0x25
    2d26:	b6 a1       	ldd	r27, Z+38	; 0x26
    2d28:	9c 91       	ld	r25, X
    2d2a:	82 a5       	ldd	r24, Z+42	; 0x2a
    2d2c:	89 23       	and	r24, r25
    2d2e:	8c 93       	st	X, r24
    2d30:	a5 a1       	ldd	r26, Z+37	; 0x25
    2d32:	b6 a1       	ldd	r27, Z+38	; 0x26
    2d34:	9c 91       	ld	r25, X
    2d36:	81 a5       	ldd	r24, Z+41	; 0x29
    2d38:	89 2b       	or	r24, r25
    2d3a:	8c 93       	st	X, r24
    2d3c:	08 95       	ret

00002d3e <_ZN15Adafruit_SPITFT8spiWriteEh>:
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
    2d42:	cf 93       	push	r28
    2d44:	df 93       	push	r29
    2d46:	ec 01       	movw	r28, r24
    2d48:	16 2f       	mov	r17, r22
    2d4a:	8d a9       	ldd	r24, Y+53	; 0x35
    2d4c:	81 11       	cpse	r24, r1
    2d4e:	05 c0       	rjmp	.+10     	; 0x2d5a <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
    2d50:	6e bd       	out	0x2e, r22	; 46
    2d52:	0d b4       	in	r0, 0x2d	; 45
    2d54:	07 fe       	sbrs	r0, 7
    2d56:	fd cf       	rjmp	.-6      	; 0x2d52 <_ZN15Adafruit_SPITFT8spiWriteEh+0x14>
    2d58:	1a c0       	rjmp	.+52     	; 0x2d8e <_ZN15Adafruit_SPITFT8spiWriteEh+0x50>
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	79 f4       	brne	.+30     	; 0x2d7c <_ZN15Adafruit_SPITFT8spiWriteEh+0x3e>
    2d5e:	08 e0       	ldi	r16, 0x08	; 8
    2d60:	ce 01       	movw	r24, r28
    2d62:	17 ff       	sbrs	r17, 7
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <_ZN15Adafruit_SPITFT8spiWriteEh+0x2c>
    2d66:	b1 df       	rcall	.-158    	; 0x2cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2d68:	01 c0       	rjmp	.+2      	; 0x2d6c <_ZN15Adafruit_SPITFT8spiWriteEh+0x2e>
    2d6a:	ba df       	rcall	.-140    	; 0x2ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    2d6c:	ce 01       	movw	r24, r28
    2d6e:	c3 df       	rcall	.-122    	; 0x2cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2d70:	11 0f       	add	r17, r17
    2d72:	ce 01       	movw	r24, r28
    2d74:	cb df       	rcall	.-106    	; 0x2d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2d76:	01 50       	subi	r16, 0x01	; 1
    2d78:	99 f7       	brne	.-26     	; 0x2d60 <_ZN15Adafruit_SPITFT8spiWriteEh+0x22>
    2d7a:	09 c0       	rjmp	.+18     	; 0x2d8e <_ZN15Adafruit_SPITFT8spiWriteEh+0x50>
    2d7c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d7e:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d80:	60 83       	st	Z, r22
    2d82:	ce 01       	movw	r24, r28
    2d84:	df 91       	pop	r29
    2d86:	cf 91       	pop	r28
    2d88:	1f 91       	pop	r17
    2d8a:	0f 91       	pop	r16
    2d8c:	ca cf       	rjmp	.-108    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2d8e:	df 91       	pop	r29
    2d90:	cf 91       	pop	r28
    2d92:	1f 91       	pop	r17
    2d94:	0f 91       	pop	r16
    2d96:	08 95       	ret

00002d98 <_ZN15Adafruit_SPITFT12writeCommandEh>:
    2d98:	1f 93       	push	r17
    2d9a:	cf 93       	push	r28
    2d9c:	df 93       	push	r29
    2d9e:	ec 01       	movw	r28, r24
    2da0:	16 2f       	mov	r17, r22
    2da2:	16 de       	rcall	.-980    	; 0x29d0 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
    2da4:	61 2f       	mov	r22, r17
    2da6:	ce 01       	movw	r24, r28
    2da8:	ca df       	rcall	.-108    	; 0x2d3e <_ZN15Adafruit_SPITFT8spiWriteEh>
    2daa:	ce 01       	movw	r24, r28
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	1f 91       	pop	r17
    2db2:	03 ce       	rjmp	.-1018   	; 0x29ba <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>

00002db4 <_ZN15Adafruit_SPITFT13invertDisplayEb>:
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	ec 01       	movw	r28, r24
    2dbc:	16 2f       	mov	r17, r22
    2dbe:	e8 81       	ld	r30, Y
    2dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    2dc2:	02 84       	ldd	r0, Z+10	; 0x0a
    2dc4:	f3 85       	ldd	r31, Z+11	; 0x0b
    2dc6:	e0 2d       	mov	r30, r0
    2dc8:	19 95       	eicall
    2dca:	11 23       	and	r17, r17
    2dcc:	11 f0       	breq	.+4      	; 0x2dd2 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x1e>
    2dce:	6d ad       	ldd	r22, Y+61	; 0x3d
    2dd0:	01 c0       	rjmp	.+2      	; 0x2dd4 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x20>
    2dd2:	6e ad       	ldd	r22, Y+62	; 0x3e
    2dd4:	ce 01       	movw	r24, r28
    2dd6:	e0 df       	rcall	.-64     	; 0x2d98 <_ZN15Adafruit_SPITFT12writeCommandEh>
    2dd8:	e8 81       	ld	r30, Y
    2dda:	f9 81       	ldd	r31, Y+1	; 0x01
    2ddc:	06 88       	ldd	r0, Z+22	; 0x16
    2dde:	f7 89       	ldd	r31, Z+23	; 0x17
    2de0:	e0 2d       	mov	r30, r0
    2de2:	ce 01       	movw	r24, r28
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	19 94       	eijmp

00002dec <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>:
    2dec:	ff 92       	push	r15
    2dee:	0f 93       	push	r16
    2df0:	1f 93       	push	r17
    2df2:	cf 93       	push	r28
    2df4:	df 93       	push	r29
    2df6:	ec 01       	movw	r28, r24
    2df8:	8b 01       	movw	r16, r22
    2dfa:	8d a9       	ldd	r24, Y+53	; 0x35
    2dfc:	81 11       	cpse	r24, r1
    2dfe:	09 c0       	rjmp	.+18     	; 0x2e12 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x26>
    2e00:	1e bd       	out	0x2e, r17	; 46
    2e02:	0d b4       	in	r0, 0x2d	; 45
    2e04:	07 fe       	sbrs	r0, 7
    2e06:	fd cf       	rjmp	.-6      	; 0x2e02 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x16>
    2e08:	0e bd       	out	0x2e, r16	; 46
    2e0a:	0d b4       	in	r0, 0x2d	; 45
    2e0c:	07 fe       	sbrs	r0, 7
    2e0e:	fd cf       	rjmp	.-6      	; 0x2e0a <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x1e>
    2e10:	23 c0       	rjmp	.+70     	; 0x2e58 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x6c>
    2e12:	81 30       	cpi	r24, 0x01	; 1
    2e14:	91 f4       	brne	.+36     	; 0x2e3a <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x4e>
    2e16:	90 e1       	ldi	r25, 0x10	; 16
    2e18:	f9 2e       	mov	r15, r25
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	17 ff       	sbrs	r17, 7
    2e1e:	02 c0       	rjmp	.+4      	; 0x2e24 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x38>
    2e20:	54 df       	rcall	.-344    	; 0x2cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    2e22:	01 c0       	rjmp	.+2      	; 0x2e26 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x3a>
    2e24:	5d df       	rcall	.-326    	; 0x2ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    2e26:	ce 01       	movw	r24, r28
    2e28:	66 df       	rcall	.-308    	; 0x2cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    2e2a:	ce 01       	movw	r24, r28
    2e2c:	6f df       	rcall	.-290    	; 0x2d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    2e2e:	00 0f       	add	r16, r16
    2e30:	11 1f       	adc	r17, r17
    2e32:	fa 94       	dec	r15
    2e34:	f1 10       	cpse	r15, r1
    2e36:	f1 cf       	rjmp	.-30     	; 0x2e1a <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x2e>
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej+0x6c>
    2e3a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e3c:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e3e:	10 83       	st	Z, r17
    2e40:	ce 01       	movw	r24, r28
    2e42:	6f df       	rcall	.-290    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e44:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2e46:	f8 a1       	ldd	r31, Y+32	; 0x20
    2e48:	00 83       	st	Z, r16
    2e4a:	ce 01       	movw	r24, r28
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	0f 91       	pop	r16
    2e54:	ff 90       	pop	r15
    2e56:	65 cf       	rjmp	.-310    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    2e58:	df 91       	pop	r29
    2e5a:	cf 91       	pop	r28
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	ff 90       	pop	r15
    2e62:	08 95       	ret

00002e64 <_ZN15Adafruit_SPITFT11sendCommandEhPhh>:
    2e64:	cf 92       	push	r12
    2e66:	df 92       	push	r13
    2e68:	ef 92       	push	r14
    2e6a:	ff 92       	push	r15
    2e6c:	0f 93       	push	r16
    2e6e:	1f 93       	push	r17
    2e70:	cf 93       	push	r28
    2e72:	df 93       	push	r29
    2e74:	ec 01       	movw	r28, r24
    2e76:	f6 2e       	mov	r15, r22
    2e78:	8a 01       	movw	r16, r20
    2e7a:	c2 2e       	mov	r12, r18
    2e7c:	f8 de       	rcall	.-528    	; 0x2c6e <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    2e7e:	8f a9       	ldd	r24, Y+55	; 0x37
    2e80:	87 fd       	sbrc	r24, 7
    2e82:	02 c0       	rjmp	.+4      	; 0x2e88 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x24>
    2e84:	ce 01       	movw	r24, r28
    2e86:	8e dd       	rcall	.-1252   	; 0x29a4 <_ZN15Adafruit_SPITFT10SPI_CS_LOWEv>
    2e88:	ce 01       	movw	r24, r28
    2e8a:	a2 dd       	rcall	.-1212   	; 0x29d0 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv>
    2e8c:	6f 2d       	mov	r22, r15
    2e8e:	ce 01       	movw	r24, r28
    2e90:	56 df       	rcall	.-340    	; 0x2d3e <_ZN15Adafruit_SPITFT8spiWriteEh>
    2e92:	ce 01       	movw	r24, r28
    2e94:	92 dd       	rcall	.-1244   	; 0x29ba <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv>
    2e96:	e1 2c       	mov	r14, r1
    2e98:	f1 2c       	mov	r15, r1
    2e9a:	d1 2c       	mov	r13, r1
    2e9c:	ec 14       	cp	r14, r12
    2e9e:	fd 04       	cpc	r15, r13
    2ea0:	dc f4       	brge	.+54     	; 0x2ed8 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x74>
    2ea2:	f8 01       	movw	r30, r16
    2ea4:	60 81       	ld	r22, Z
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	4a df       	rcall	.-364    	; 0x2d3e <_ZN15Adafruit_SPITFT8spiWriteEh>
    2eaa:	8d a9       	ldd	r24, Y+53	; 0x35
    2eac:	f8 01       	movw	r30, r16
    2eae:	82 30       	cpi	r24, 0x02	; 2
    2eb0:	51 f4       	brne	.+20     	; 0x2ec6 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x62>
    2eb2:	88 a9       	ldd	r24, Y+48	; 0x30
    2eb4:	88 23       	and	r24, r24
    2eb6:	39 f0       	breq	.+14     	; 0x2ec6 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x62>
    2eb8:	61 81       	ldd	r22, Z+1	; 0x01
    2eba:	72 81       	ldd	r23, Z+2	; 0x02
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	96 df       	rcall	.-212    	; 0x2dec <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2ec0:	0d 5f       	subi	r16, 0xFD	; 253
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	05 c0       	rjmp	.+10     	; 0x2ed0 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x6c>
    2ec6:	61 81       	ldd	r22, Z+1	; 0x01
    2ec8:	ce 01       	movw	r24, r28
    2eca:	39 df       	rcall	.-398    	; 0x2d3e <_ZN15Adafruit_SPITFT8spiWriteEh>
    2ecc:	0e 5f       	subi	r16, 0xFE	; 254
    2ece:	1f 4f       	sbci	r17, 0xFF	; 255
    2ed0:	ff ef       	ldi	r31, 0xFF	; 255
    2ed2:	ef 1a       	sub	r14, r31
    2ed4:	ff 0a       	sbc	r15, r31
    2ed6:	e2 cf       	rjmp	.-60     	; 0x2e9c <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x38>
    2ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    2eda:	87 fd       	sbrc	r24, 7
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x7e>
    2ede:	ce 01       	movw	r24, r28
    2ee0:	45 dd       	rcall	.-1398   	; 0x296c <_ZN15Adafruit_SPITFT11SPI_CS_HIGHEv>
    2ee2:	8d a9       	ldd	r24, Y+53	; 0x35
    2ee4:	81 11       	cpse	r24, r1
    2ee6:	09 c0       	rjmp	.+18     	; 0x2efa <_ZN15Adafruit_SPITFT11sendCommandEhPhh+0x96>
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	ff 90       	pop	r15
    2ef2:	ef 90       	pop	r14
    2ef4:	df 90       	pop	r13
    2ef6:	cf 90       	pop	r12
    2ef8:	28 cd       	rjmp	.-1456   	; 0x294a <_ZN8SPIClass14endTransactionEv>
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	cf 90       	pop	r12
    2f0a:	08 95       	ret

00002f0c <_ZN15Adafruit_SPITFT9drawPixelEiij>:
    2f0c:	af 92       	push	r10
    2f0e:	bf 92       	push	r11
    2f10:	cf 92       	push	r12
    2f12:	df 92       	push	r13
    2f14:	ef 92       	push	r14
    2f16:	ff 92       	push	r15
    2f18:	0f 93       	push	r16
    2f1a:	1f 93       	push	r17
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	ec 01       	movw	r28, r24
    2f22:	77 fd       	sbrc	r23, 7
    2f24:	37 c0       	rjmp	.+110    	; 0x2f94 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2f26:	88 85       	ldd	r24, Y+8	; 0x08
    2f28:	99 85       	ldd	r25, Y+9	; 0x09
    2f2a:	68 17       	cp	r22, r24
    2f2c:	79 07       	cpc	r23, r25
    2f2e:	94 f5       	brge	.+100    	; 0x2f94 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2f30:	57 fd       	sbrc	r21, 7
    2f32:	30 c0       	rjmp	.+96     	; 0x2f94 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2f34:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f36:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f38:	48 17       	cp	r20, r24
    2f3a:	59 07       	cpc	r21, r25
    2f3c:	5c f5       	brge	.+86     	; 0x2f94 <_ZN15Adafruit_SPITFT9drawPixelEiij+0x88>
    2f3e:	69 01       	movw	r12, r18
    2f40:	7a 01       	movw	r14, r20
    2f42:	5b 01       	movw	r10, r22
    2f44:	e8 81       	ld	r30, Y
    2f46:	f9 81       	ldd	r31, Y+1	; 0x01
    2f48:	02 84       	ldd	r0, Z+10	; 0x0a
    2f4a:	f3 85       	ldd	r31, Z+11	; 0x0b
    2f4c:	e0 2d       	mov	r30, r0
    2f4e:	ce 01       	movw	r24, r28
    2f50:	19 95       	eicall
    2f52:	e8 81       	ld	r30, Y
    2f54:	f9 81       	ldd	r31, Y+1	; 0x01
    2f56:	02 a4       	ldd	r0, Z+42	; 0x2a
    2f58:	f3 a5       	ldd	r31, Z+43	; 0x2b
    2f5a:	e0 2d       	mov	r30, r0
    2f5c:	01 e0       	ldi	r16, 0x01	; 1
    2f5e:	10 e0       	ldi	r17, 0x00	; 0
    2f60:	21 e0       	ldi	r18, 0x01	; 1
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	a7 01       	movw	r20, r14
    2f66:	b5 01       	movw	r22, r10
    2f68:	ce 01       	movw	r24, r28
    2f6a:	19 95       	eicall
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	ce 01       	movw	r24, r28
    2f70:	3d df       	rcall	.-390    	; 0x2dec <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2f72:	e8 81       	ld	r30, Y
    2f74:	f9 81       	ldd	r31, Y+1	; 0x01
    2f76:	06 88       	ldd	r0, Z+22	; 0x16
    2f78:	f7 89       	ldd	r31, Z+23	; 0x17
    2f7a:	e0 2d       	mov	r30, r0
    2f7c:	ce 01       	movw	r24, r28
    2f7e:	df 91       	pop	r29
    2f80:	cf 91       	pop	r28
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	df 90       	pop	r13
    2f8c:	cf 90       	pop	r12
    2f8e:	bf 90       	pop	r11
    2f90:	af 90       	pop	r10
    2f92:	19 94       	eijmp
    2f94:	df 91       	pop	r29
    2f96:	cf 91       	pop	r28
    2f98:	1f 91       	pop	r17
    2f9a:	0f 91       	pop	r16
    2f9c:	ff 90       	pop	r15
    2f9e:	ef 90       	pop	r14
    2fa0:	df 90       	pop	r13
    2fa2:	cf 90       	pop	r12
    2fa4:	bf 90       	pop	r11
    2fa6:	af 90       	pop	r10
    2fa8:	08 95       	ret

00002faa <_ZN15Adafruit_SPITFT10writePixelEiij>:
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	ec 01       	movw	r28, r24
    2fb8:	77 fd       	sbrc	r23, 7
    2fba:	21 c0       	rjmp	.+66     	; 0x2ffe <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2fbc:	88 85       	ldd	r24, Y+8	; 0x08
    2fbe:	99 85       	ldd	r25, Y+9	; 0x09
    2fc0:	68 17       	cp	r22, r24
    2fc2:	79 07       	cpc	r23, r25
    2fc4:	e4 f4       	brge	.+56     	; 0x2ffe <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2fc6:	57 fd       	sbrc	r21, 7
    2fc8:	1a c0       	rjmp	.+52     	; 0x2ffe <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2fca:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fcc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fce:	48 17       	cp	r20, r24
    2fd0:	59 07       	cpc	r21, r25
    2fd2:	ac f4       	brge	.+42     	; 0x2ffe <_ZN15Adafruit_SPITFT10writePixelEiij+0x54>
    2fd4:	79 01       	movw	r14, r18
    2fd6:	e8 81       	ld	r30, Y
    2fd8:	f9 81       	ldd	r31, Y+1	; 0x01
    2fda:	02 a4       	ldd	r0, Z+42	; 0x2a
    2fdc:	f3 a5       	ldd	r31, Z+43	; 0x2b
    2fde:	e0 2d       	mov	r30, r0
    2fe0:	01 e0       	ldi	r16, 0x01	; 1
    2fe2:	10 e0       	ldi	r17, 0x00	; 0
    2fe4:	21 e0       	ldi	r18, 0x01	; 1
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	ce 01       	movw	r24, r28
    2fea:	19 95       	eicall
    2fec:	b7 01       	movw	r22, r14
    2fee:	ce 01       	movw	r24, r28
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	1f 91       	pop	r17
    2ff6:	0f 91       	pop	r16
    2ff8:	ff 90       	pop	r15
    2ffa:	ef 90       	pop	r14
    2ffc:	f7 ce       	rjmp	.-530    	; 0x2dec <_ZN15Adafruit_SPITFT11SPI_WRITE16Ej>
    2ffe:	df 91       	pop	r29
    3000:	cf 91       	pop	r28
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	ff 90       	pop	r15
    3008:	ef 90       	pop	r14
    300a:	08 95       	ret

0000300c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	ec 01       	movw	r28, r24
    301c:	6a 01       	movw	r12, r20
    301e:	7b 01       	movw	r14, r22
    3020:	8d a9       	ldd	r24, Y+53	; 0x35
    3022:	81 11       	cpse	r24, r1
    3024:	1c c0       	rjmp	.+56     	; 0x305e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x52>
    3026:	8f 2d       	mov	r24, r15
    3028:	99 27       	eor	r25, r25
    302a:	aa 27       	eor	r26, r26
    302c:	bb 27       	eor	r27, r27
    302e:	8e bd       	out	0x2e, r24	; 46
    3030:	0d b4       	in	r0, 0x2d	; 45
    3032:	07 fe       	sbrs	r0, 7
    3034:	fd cf       	rjmp	.-6      	; 0x3030 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x24>
    3036:	c7 01       	movw	r24, r14
    3038:	aa 27       	eor	r26, r26
    303a:	bb 27       	eor	r27, r27
    303c:	8e bd       	out	0x2e, r24	; 46
    303e:	0d b4       	in	r0, 0x2d	; 45
    3040:	07 fe       	sbrs	r0, 7
    3042:	fd cf       	rjmp	.-6      	; 0x303e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x32>
    3044:	bb 27       	eor	r27, r27
    3046:	af 2d       	mov	r26, r15
    3048:	9e 2d       	mov	r25, r14
    304a:	8d 2d       	mov	r24, r13
    304c:	8e bd       	out	0x2e, r24	; 46
    304e:	0d b4       	in	r0, 0x2d	; 45
    3050:	07 fe       	sbrs	r0, 7
    3052:	fd cf       	rjmp	.-6      	; 0x304e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x42>
    3054:	ce bc       	out	0x2e, r12	; 46
    3056:	0d b4       	in	r0, 0x2d	; 45
    3058:	07 fe       	sbrs	r0, 7
    305a:	fd cf       	rjmp	.-6      	; 0x3056 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x4a>
    305c:	3a c0       	rjmp	.+116    	; 0x30d2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0xc6>
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	91 f4       	brne	.+36     	; 0x3086 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x7a>
    3062:	10 e2       	ldi	r17, 0x20	; 32
    3064:	ce 01       	movw	r24, r28
    3066:	f7 fe       	sbrs	r15, 7
    3068:	02 c0       	rjmp	.+4      	; 0x306e <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>
    306a:	2f de       	rcall	.-930    	; 0x2cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    306c:	01 c0       	rjmp	.+2      	; 0x3070 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
    306e:	38 de       	rcall	.-912    	; 0x2ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
    3070:	ce 01       	movw	r24, r28
    3072:	41 de       	rcall	.-894    	; 0x2cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    3074:	ce 01       	movw	r24, r28
    3076:	4a de       	rcall	.-876    	; 0x2d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    3078:	cc 0c       	add	r12, r12
    307a:	dd 1c       	adc	r13, r13
    307c:	ee 1c       	adc	r14, r14
    307e:	ff 1c       	adc	r15, r15
    3080:	11 50       	subi	r17, 0x01	; 1
    3082:	81 f7       	brne	.-32     	; 0x3064 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x58>
    3084:	26 c0       	rjmp	.+76     	; 0x30d2 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0xc6>
    3086:	ef 8d       	ldd	r30, Y+31	; 0x1f
    3088:	f8 a1       	ldd	r31, Y+32	; 0x20
    308a:	87 2f       	mov	r24, r23
    308c:	99 27       	eor	r25, r25
    308e:	aa 27       	eor	r26, r26
    3090:	bb 27       	eor	r27, r27
    3092:	80 83       	st	Z, r24
    3094:	ce 01       	movw	r24, r28
    3096:	45 de       	rcall	.-886    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    3098:	ef 8d       	ldd	r30, Y+31	; 0x1f
    309a:	f8 a1       	ldd	r31, Y+32	; 0x20
    309c:	c7 01       	movw	r24, r14
    309e:	aa 27       	eor	r26, r26
    30a0:	bb 27       	eor	r27, r27
    30a2:	80 83       	st	Z, r24
    30a4:	ce 01       	movw	r24, r28
    30a6:	3d de       	rcall	.-902    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    30a8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30aa:	f8 a1       	ldd	r31, Y+32	; 0x20
    30ac:	bb 27       	eor	r27, r27
    30ae:	af 2d       	mov	r26, r15
    30b0:	9e 2d       	mov	r25, r14
    30b2:	8d 2d       	mov	r24, r13
    30b4:	80 83       	st	Z, r24
    30b6:	ce 01       	movw	r24, r28
    30b8:	34 de       	rcall	.-920    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    30ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    30bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    30be:	c0 82       	st	Z, r12
    30c0:	ce 01       	movw	r24, r28
    30c2:	df 91       	pop	r29
    30c4:	cf 91       	pop	r28
    30c6:	1f 91       	pop	r17
    30c8:	ff 90       	pop	r15
    30ca:	ef 90       	pop	r14
    30cc:	df 90       	pop	r13
    30ce:	cf 90       	pop	r12
    30d0:	28 ce       	rjmp	.-944    	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    30d2:	df 91       	pop	r29
    30d4:	cf 91       	pop	r28
    30d6:	1f 91       	pop	r17
    30d8:	ff 90       	pop	r15
    30da:	ef 90       	pop	r14
    30dc:	df 90       	pop	r13
    30de:	cf 90       	pop	r12
    30e0:	08 95       	ret

000030e2 <_ZN15Adafruit_SPITFT10writeColorEjm>:
    @brief  Issue a series of pixels, all the same color. Not self-
            contained; should follow startWrite() and setAddrWindow() calls.
    @param  color  16-bit pixel color in '565' RGB format.
    @param  len    Number of pixels to draw.
*/
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
    30e2:	af 92       	push	r10
    30e4:	bf 92       	push	r11
    30e6:	cf 92       	push	r12
    30e8:	df 92       	push	r13
    30ea:	ef 92       	push	r14
    30ec:	ff 92       	push	r15
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	cf 93       	push	r28
    30f4:	df 93       	push	r29
    30f6:	ec 01       	movw	r28, r24
    30f8:	8b 01       	movw	r16, r22

  if (!len)
    30fa:	21 15       	cp	r18, r1
    30fc:	31 05       	cpc	r19, r1
    30fe:	41 05       	cpc	r20, r1
    3100:	51 05       	cpc	r21, r1
    3102:	09 f4       	brne	.+2      	; 0x3106 <_ZN15Adafruit_SPITFT10writeColorEjm+0x24>
    3104:	69 c0       	rjmp	.+210    	; 0x31d8 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
#endif // end USE_SPI_DMA
#endif // end !ESP32

  // All other cases (non-DMA hard SPI, bitbang SPI, parallel)...

  if (connection == TFT_HARD_SPI) {
    3106:	8d a9       	ldd	r24, Y+53	; 0x35
    3108:	81 11       	cpse	r24, r1
    310a:	0f c0       	rjmp	.+30     	; 0x312a <_ZN15Adafruit_SPITFT10writeColorEjm+0x48>
        hwspi._spi->write(hi);
        hwspi._spi->write(lo);
      }
    } while (len);
#else // !ESP8266
    while (len--) {
    310c:	21 50       	subi	r18, 0x01	; 1
    310e:	31 09       	sbc	r19, r1
    3110:	41 09       	sbc	r20, r1
    3112:	51 09       	sbc	r21, r1
    3114:	08 f4       	brcc	.+2      	; 0x3118 <_ZN15Adafruit_SPITFT10writeColorEjm+0x36>
    3116:	60 c0       	rjmp	.+192    	; 0x31d8 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
#if defined(__AVR__)
      AVR_WRITESPI(hi);
    3118:	1e bd       	out	0x2e, r17	; 46
    311a:	0d b4       	in	r0, 0x2d	; 45
    311c:	07 fe       	sbrs	r0, 7
    311e:	fd cf       	rjmp	.-6      	; 0x311a <_ZN15Adafruit_SPITFT10writeColorEjm+0x38>
      AVR_WRITESPI(lo);
    3120:	0e bd       	out	0x2e, r16	; 46
    3122:	0d b4       	in	r0, 0x2d	; 45
    3124:	07 fe       	sbrs	r0, 7
    3126:	fd cf       	rjmp	.-6      	; 0x3122 <_ZN15Adafruit_SPITFT10writeColorEjm+0x40>
    3128:	f1 cf       	rjmp	.-30     	; 0x310c <_ZN15Adafruit_SPITFT10writeColorEjm+0x2a>
      hwspi._spi->transfer(hi);
      hwspi._spi->transfer(lo);
#endif
    }
#endif // end !ESP8266
  } else if (connection == TFT_SOFT_SPI) {
    312a:	81 30       	cpi	r24, 0x01	; 1
    312c:	59 f5       	brne	.+86     	; 0x3184 <_ZN15Adafruit_SPITFT10writeColorEjm+0xa2>
    312e:	69 01       	movw	r12, r18
    3130:	7a 01       	movw	r14, r20
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {

  if (!len)
    return; // Avoid 0-byte transfers

  uint8_t hi = color >> 8, lo = color;
    3132:	a1 2e       	mov	r10, r17
    3134:	28 e0       	ldi	r18, 0x08	; 8
    3136:	b2 2e       	mov	r11, r18
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
        if (x & 0x80)
          SPI_MOSI_HIGH();
    3138:	ce 01       	movw	r24, r28
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
        if (x & 0x80)
    313a:	a7 fe       	sbrs	r10, 7
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <_ZN15Adafruit_SPITFT10writeColorEjm+0x60>
          SPI_MOSI_HIGH();
    313e:	c5 dd       	rcall	.-1142   	; 0x2cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <_ZN15Adafruit_SPITFT10writeColorEjm+0x62>
        else
          SPI_MOSI_LOW();
    3142:	ce dd       	rcall	.-1124   	; 0x2ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
        SPI_SCK_HIGH();
    3144:	ce 01       	movw	r24, r28
    3146:	d7 dd       	rcall	.-1106   	; 0x2cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
        SPI_SCK_LOW();
    3148:	ce 01       	movw	r24, r28
    314a:	e0 dd       	rcall	.-1088   	; 0x2d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    314c:	aa 0c       	add	r10, r10
        x <<= 1;
    314e:	ba 94       	dec	r11
    3150:	b1 10       	cpse	r11, r1
      }
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
    3152:	f2 cf       	rjmp	.-28     	; 0x3138 <_ZN15Adafruit_SPITFT10writeColorEjm+0x56>
    3154:	a0 2e       	mov	r10, r16
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {

  if (!len)
    return; // Avoid 0-byte transfers

  uint8_t hi = color >> 8, lo = color;
    3156:	98 e0       	ldi	r25, 0x08	; 8
      }
    } while (len);
#else // !ESP8266
    while (len--) {
#if defined(__AVR__)
      for (uint8_t bit = 0, x = hi; bit < 8; bit++) {
    3158:	b9 2e       	mov	r11, r25
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
        if (x & 0x80)
          SPI_MOSI_HIGH();
    315a:	ce 01       	movw	r24, r28
        SPI_SCK_HIGH();
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
        if (x & 0x80)
    315c:	a7 fe       	sbrs	r10, 7
          SPI_MOSI_HIGH();
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <_ZN15Adafruit_SPITFT10writeColorEjm+0x82>
    3160:	b4 dd       	rcall	.-1176   	; 0x2cca <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv>
        else
          SPI_MOSI_LOW();
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <_ZN15Adafruit_SPITFT10writeColorEjm+0x84>
    3164:	bd dd       	rcall	.-1158   	; 0x2ce0 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv>
        SPI_SCK_HIGH();
    3166:	ce 01       	movw	r24, r28
    3168:	c6 dd       	rcall	.-1140   	; 0x2cf6 <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv>
    316a:	ce 01       	movw	r24, r28
        SPI_SCK_LOW();
    316c:	cf dd       	rcall	.-1122   	; 0x2d0c <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv>
    316e:	aa 0c       	add	r10, r10
    3170:	ba 94       	dec	r11
        x <<= 1;
    3172:	b1 10       	cpse	r11, r1
    3174:	f2 cf       	rjmp	.-28     	; 0x315a <_ZN15Adafruit_SPITFT10writeColorEjm+0x78>
          SPI_MOSI_LOW();
        SPI_SCK_HIGH();
        SPI_SCK_LOW();
        x <<= 1;
      }
      for (uint8_t bit = 0, x = lo; bit < 8; bit++) {
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	c8 1a       	sub	r12, r24
    317a:	d1 08       	sbc	r13, r1
    317c:	e1 08       	sbc	r14, r1
    317e:	f1 08       	sbc	r15, r1
    3180:	c1 f6       	brne	.-80     	; 0x3132 <_ZN15Adafruit_SPITFT10writeColorEjm+0x50>
    3182:	2a c0       	rjmp	.+84     	; 0x31d8 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
          x <<= 1;
        }
      }
    } while (len);
#else // !ESP8266
    while (len--) {
    3184:	16 13       	cpse	r17, r22
    3186:	16 c0       	rjmp	.+44     	; 0x31b4 <_ZN15Adafruit_SPITFT10writeColorEjm+0xd2>
      }
#endif     // end !__AVR__
    }
#endif     // end !ESP8266
  } else { // PARALLEL
    if (hi == lo) {
    3188:	ef 8d       	ldd	r30, Y+31	; 0x1f
    318a:	f8 a1       	ldd	r31, Y+32	; 0x20
#if defined(__AVR__)
      len *= 2;
      *tft8.writePort = hi;
    318c:	10 83       	st	Z, r17
    318e:	69 01       	movw	r12, r18
    3190:	7a 01       	movw	r14, r20
    3192:	cc 0c       	add	r12, r12
    3194:	dd 1c       	adc	r13, r13
    3196:	ee 1c       	adc	r14, r14
    3198:	ff 1c       	adc	r15, r15
    319a:	c1 14       	cp	r12, r1
      while (len--) {
    319c:	d1 04       	cpc	r13, r1
    319e:	e1 04       	cpc	r14, r1
    31a0:	f1 04       	cpc	r15, r1
    31a2:	d1 f0       	breq	.+52     	; 0x31d8 <_ZN15Adafruit_SPITFT10writeColorEjm+0xf6>
    31a4:	ce 01       	movw	r24, r28
        TFT_WR_STROBE();
    31a6:	bd dd       	rcall	.-1158   	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	c8 1a       	sub	r12, r24
    31ac:	d1 08       	sbc	r13, r1
    31ae:	e1 08       	sbc	r14, r1
    31b0:	f1 08       	sbc	r15, r1
    31b2:	f3 cf       	rjmp	.-26     	; 0x319a <_ZN15Adafruit_SPITFT10writeColorEjm+0xb8>
    31b4:	69 01       	movw	r12, r18
      }
#endif     // end !__AVR__
    }
#endif     // end !ESP8266
  } else { // PARALLEL
    if (hi == lo) {
    31b6:	7a 01       	movw	r14, r20
    31b8:	ef 8d       	ldd	r30, Y+31	; 0x1f
      }
#endif
    } else {
      while (len--) {
#if defined(__AVR__)
        *tft8.writePort = hi;
    31ba:	f8 a1       	ldd	r31, Y+32	; 0x20
    31bc:	10 83       	st	Z, r17
        TFT_WR_STROBE();
    31be:	ce 01       	movw	r24, r28
    31c0:	b0 dd       	rcall	.-1184   	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    31c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
        *tft8.writePort = lo;
    31c4:	f8 a1       	ldd	r31, Y+32	; 0x20
    31c6:	00 83       	st	Z, r16
    31c8:	ce 01       	movw	r24, r28
          *tft8.writePort = lo;
        } else {
          *(volatile uint16_t *)tft8.writePort = color;
        }
#endif
        TFT_WR_STROBE();
    31ca:	ab dd       	rcall	.-1194   	; 0x2d22 <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
    31cc:	81 e0       	ldi	r24, 0x01	; 1
    31ce:	c8 1a       	sub	r12, r24
    31d0:	d1 08       	sbc	r13, r1
    31d2:	e1 08       	sbc	r14, r1
    31d4:	f1 08       	sbc	r15, r1
    31d6:	81 f7       	brne	.-32     	; 0x31b8 <_ZN15Adafruit_SPITFT10writeColorEjm+0xd6>
    31d8:	df 91       	pop	r29
      while (len--) {
        TFT_WR_STROBE();
      }
#endif
    } else {
      while (len--) {
    31da:	cf 91       	pop	r28
#endif
        TFT_WR_STROBE();
      }
    }
  }
}
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	df 90       	pop	r13
    31e6:	cf 90       	pop	r12
    31e8:	bf 90       	pop	r11
    31ea:	af 90       	pop	r10
    31ec:	08 95       	ret

000031ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>:
    31ee:	af 92       	push	r10
    31f0:	bf 92       	push	r11
    @note   This is a new function, no graphics primitives besides rects
            and horizontal/vertical lines are written to best use this yet.
*/
inline void Adafruit_SPITFT::writeFillRectPreclipped(int16_t x, int16_t y,
                                                     int16_t w, int16_t h,
                                                     uint16_t color) {
    31f2:	cf 92       	push	r12
    31f4:	df 92       	push	r13
    31f6:	ef 92       	push	r14
    31f8:	ff 92       	push	r15
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	ec 01       	movw	r28, r24
    3204:	59 01       	movw	r10, r18
  setAddrWindow(x, y, w, h);
    3206:	e8 81       	ld	r30, Y
    3208:	f9 81       	ldd	r31, Y+1	; 0x01
    320a:	02 a4       	ldd	r0, Z+42	; 0x2a
    320c:	f3 a5       	ldd	r31, Z+43	; 0x2b
    320e:	e0 2d       	mov	r30, r0
    3210:	19 95       	eicall
  writeColor(color, (uint32_t)w * h);
    3212:	95 01       	movw	r18, r10
    3214:	d8 01       	movw	r26, r16
    3216:	96 d5       	rcall	.+2860   	; 0x3d44 <__mulhisi3>
    3218:	9b 01       	movw	r18, r22
    321a:	ac 01       	movw	r20, r24
    321c:	b7 01       	movw	r22, r14
    321e:	ce 01       	movw	r24, r28
}
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	1f 91       	pop	r17
    3226:	0f 91       	pop	r16
    3228:	ff 90       	pop	r15
    322a:	ef 90       	pop	r14
    322c:	df 90       	pop	r13
    322e:	cf 90       	pop	r12
    3230:	bf 90       	pop	r11
*/
inline void Adafruit_SPITFT::writeFillRectPreclipped(int16_t x, int16_t y,
                                                     int16_t w, int16_t h,
                                                     uint16_t color) {
  setAddrWindow(x, y, w, h);
  writeColor(color, (uint32_t)w * h);
    3232:	af 90       	pop	r10
    3234:	56 cf       	rjmp	.-340    	; 0x30e2 <_ZN15Adafruit_SPITFT10writeColorEjm>

00003236 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij>:
    @param  h      Line height in pixels (positive = below first point,
                   negative = above first point).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastVLine(int16_t x, int16_t y, int16_t h,
                                            uint16_t color) {
    3236:	ef 92       	push	r14
    3238:	ff 92       	push	r15
    323a:	0f 93       	push	r16
    323c:	1f 93       	push	r17
    323e:	cf 93       	push	r28
    3240:	df 93       	push	r29
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
    3242:	77 fd       	sbrc	r23, 7
    3244:	33 c0       	rjmp	.+102    	; 0x32ac <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    3246:	dc 01       	movw	r26, r24
    3248:	18 96       	adiw	r26, 0x08	; 8
    324a:	ed 91       	ld	r30, X+
    324c:	fc 91       	ld	r31, X
    324e:	19 97       	sbiw	r26, 0x09	; 9
    3250:	6e 17       	cp	r22, r30
    3252:	7f 07       	cpc	r23, r31
    3254:	5c f5       	brge	.+86     	; 0x32ac <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    3256:	21 15       	cp	r18, r1
    3258:	31 05       	cpc	r19, r1
    325a:	41 f1       	breq	.+80     	; 0x32ac <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
    if (h < 0) {                       // If negative height...
    325c:	37 ff       	sbrs	r19, 7
    325e:	07 c0       	rjmp	.+14     	; 0x326e <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x38>
      y += h + 1;                      //   Move Y to top edge
    3260:	f9 01       	movw	r30, r18
    3262:	31 96       	adiw	r30, 0x01	; 1
    3264:	4e 0f       	add	r20, r30
    3266:	5f 1f       	adc	r21, r31
      h = -h;                          //   Use positive height
    3268:	31 95       	neg	r19
    326a:	21 95       	neg	r18
    326c:	31 09       	sbc	r19, r1
    }
    if (y < _height) { // Not off bottom
    326e:	dc 01       	movw	r26, r24
    3270:	1a 96       	adiw	r26, 0x0a	; 10
    3272:	ed 91       	ld	r30, X+
    3274:	fc 91       	ld	r31, X
    3276:	1b 97       	sbiw	r26, 0x0b	; 11
    3278:	4e 17       	cp	r20, r30
    327a:	5f 07       	cpc	r21, r31
    327c:	bc f4       	brge	.+46     	; 0x32ac <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
      int16_t y2 = y + h - 1;
    327e:	ea 01       	movw	r28, r20
    3280:	c2 0f       	add	r28, r18
    3282:	d3 1f       	adc	r29, r19
    3284:	de 01       	movw	r26, r28
    3286:	11 97       	sbiw	r26, 0x01	; 1
      if (y2 >= 0) { // Not off top
    3288:	b7 fd       	sbrc	r27, 7
    328a:	10 c0       	rjmp	.+32     	; 0x32ac <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x76>
        // Line partly or fully overlaps screen
        if (y < 0) {
    328c:	57 ff       	sbrs	r21, 7
    328e:	03 c0       	rjmp	.+6      	; 0x3296 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x60>
          y = 0;
          h = y2 + 1;
    3290:	9e 01       	movw	r18, r28
    if (y < _height) { // Not off bottom
      int16_t y2 = y + h - 1;
      if (y2 >= 0) { // Not off top
        // Line partly or fully overlaps screen
        if (y < 0) {
          y = 0;
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	50 e0       	ldi	r21, 0x00	; 0
          h = y2 + 1;
        } // Clip top
        if (y2 >= _height) {
    3296:	ae 17       	cp	r26, r30
    3298:	bf 07       	cpc	r27, r31
    329a:	1c f0       	brlt	.+6      	; 0x32a2 <_ZN15Adafruit_SPITFT14writeFastVLineEiiij+0x6c>
          h = _height - y;
    329c:	9f 01       	movw	r18, r30
    329e:	24 1b       	sub	r18, r20
    32a0:	35 0b       	sbc	r19, r21
        } // Clip bottom
        writeFillRectPreclipped(x, y, 1, h, color);
    32a2:	78 01       	movw	r14, r16
    32a4:	89 01       	movw	r16, r18
    32a6:	21 e0       	ldi	r18, 0x01	; 1
    32a8:	30 e0       	ldi	r19, 0x00	; 0
    32aa:	a1 df       	rcall	.-190    	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
      }
    }
  }
}
    32ac:	df 91       	pop	r29
    32ae:	cf 91       	pop	r28
    32b0:	1f 91       	pop	r17
    32b2:	0f 91       	pop	r16
    32b4:	ff 90       	pop	r15
    32b6:	ef 90       	pop	r14
    32b8:	08 95       	ret

000032ba <_ZN15Adafruit_SPITFT14writeFastHLineEiiij>:
    @param  w      Line width in pixels (positive = right of first point,
                   negative = point of first corner).
    @param  color  16-bit line color in '565' RGB format.
*/
void inline Adafruit_SPITFT::writeFastHLine(int16_t x, int16_t y, int16_t w,
                                            uint16_t color) {
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
    32c6:	57 fd       	sbrc	r21, 7
    32c8:	32 c0       	rjmp	.+100    	; 0x332e <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    32ca:	dc 01       	movw	r26, r24
    32cc:	1a 96       	adiw	r26, 0x0a	; 10
    32ce:	ed 91       	ld	r30, X+
    32d0:	fc 91       	ld	r31, X
    32d2:	1b 97       	sbiw	r26, 0x0b	; 11
    32d4:	4e 17       	cp	r20, r30
    32d6:	5f 07       	cpc	r21, r31
    32d8:	54 f5       	brge	.+84     	; 0x332e <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    32da:	21 15       	cp	r18, r1
    32dc:	31 05       	cpc	r19, r1
    32de:	39 f1       	breq	.+78     	; 0x332e <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
    if (w < 0) {                        // If negative width...
    32e0:	37 ff       	sbrs	r19, 7
    32e2:	07 c0       	rjmp	.+14     	; 0x32f2 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x38>
      x += w + 1;                       //   Move X to left edge
    32e4:	f9 01       	movw	r30, r18
    32e6:	31 96       	adiw	r30, 0x01	; 1
    32e8:	6e 0f       	add	r22, r30
    32ea:	7f 1f       	adc	r23, r31
      w = -w;                           //   Use positive width
    32ec:	31 95       	neg	r19
    32ee:	21 95       	neg	r18
    32f0:	31 09       	sbc	r19, r1
    }
    if (x < _width) { // Not off right
    32f2:	dc 01       	movw	r26, r24
    32f4:	18 96       	adiw	r26, 0x08	; 8
    32f6:	ed 91       	ld	r30, X+
    32f8:	fc 91       	ld	r31, X
    32fa:	19 97       	sbiw	r26, 0x09	; 9
    32fc:	6e 17       	cp	r22, r30
    32fe:	7f 07       	cpc	r23, r31
    3300:	b4 f4       	brge	.+44     	; 0x332e <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
      int16_t x2 = x + w - 1;
    3302:	eb 01       	movw	r28, r22
    3304:	c2 0f       	add	r28, r18
    3306:	d3 1f       	adc	r29, r19
    3308:	de 01       	movw	r26, r28
    330a:	11 97       	sbiw	r26, 0x01	; 1
      if (x2 >= 0) { // Not off left
    330c:	b7 fd       	sbrc	r27, 7
    330e:	0f c0       	rjmp	.+30     	; 0x332e <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x74>
        // Line partly or fully overlaps screen
        if (x < 0) {
    3310:	77 ff       	sbrs	r23, 7
    3312:	03 c0       	rjmp	.+6      	; 0x331a <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x60>
          x = 0;
          w = x2 + 1;
    3314:	9e 01       	movw	r18, r28
    if (x < _width) { // Not off right
      int16_t x2 = x + w - 1;
      if (x2 >= 0) { // Not off left
        // Line partly or fully overlaps screen
        if (x < 0) {
          x = 0;
    3316:	60 e0       	ldi	r22, 0x00	; 0
    3318:	70 e0       	ldi	r23, 0x00	; 0
          w = x2 + 1;
        } // Clip left
        if (x2 >= _width) {
    331a:	ae 17       	cp	r26, r30
    331c:	bf 07       	cpc	r27, r31
    331e:	1c f0       	brlt	.+6      	; 0x3326 <_ZN15Adafruit_SPITFT14writeFastHLineEiiij+0x6c>
          w = _width - x;
    3320:	9f 01       	movw	r18, r30
    3322:	26 1b       	sub	r18, r22
    3324:	37 0b       	sbc	r19, r23
        } // Clip right
        writeFillRectPreclipped(x, y, w, 1, color);
    3326:	78 01       	movw	r14, r16
    3328:	01 e0       	ldi	r16, 0x01	; 1
    332a:	10 e0       	ldi	r17, 0x00	; 0
    332c:	60 df       	rcall	.-320    	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
      }
    }
  }
}
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	1f 91       	pop	r17
    3334:	0f 91       	pop	r16
    3336:	ff 90       	pop	r15
    3338:	ef 90       	pop	r14
    333a:	08 95       	ret

0000333c <_ZN15Adafruit_SPITFT13drawFastVLineEiiij>:
            done this way (rather than starting the transaction and calling
            writeFastVLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastVLine(int16_t x, int16_t y, int16_t h,
                                    uint16_t color) {
    333c:	8f 92       	push	r8
    333e:	9f 92       	push	r9
    3340:	af 92       	push	r10
    3342:	bf 92       	push	r11
    3344:	cf 92       	push	r12
    3346:	df 92       	push	r13
    3348:	ef 92       	push	r14
    334a:	ff 92       	push	r15
    334c:	0f 93       	push	r16
    334e:	1f 93       	push	r17
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	5c 01       	movw	r10, r24
    3356:	4b 01       	movw	r8, r22
    3358:	6a 01       	movw	r12, r20
    335a:	e9 01       	movw	r28, r18
  if ((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
    335c:	77 fd       	sbrc	r23, 7
    335e:	52 c0       	rjmp	.+164    	; 0x3404 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    3360:	dc 01       	movw	r26, r24
    3362:	18 96       	adiw	r26, 0x08	; 8
    3364:	8d 91       	ld	r24, X+
    3366:	9c 91       	ld	r25, X
    3368:	19 97       	sbiw	r26, 0x09	; 9
    336a:	68 17       	cp	r22, r24
    336c:	79 07       	cpc	r23, r25
    336e:	0c f0       	brlt	.+2      	; 0x3372 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x36>
    3370:	49 c0       	rjmp	.+146    	; 0x3404 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    3372:	20 97       	sbiw	r28, 0x00	; 0
    3374:	09 f4       	brne	.+2      	; 0x3378 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x3c>
    3376:	46 c0       	rjmp	.+140    	; 0x3404 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
    if (h < 0) {                       // If negative height...
    3378:	37 ff       	sbrs	r19, 7
    337a:	07 c0       	rjmp	.+14     	; 0x338a <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x4e>
      y += h + 1;                      //   Move Y to top edge
    337c:	c9 01       	movw	r24, r18
    337e:	01 96       	adiw	r24, 0x01	; 1
    3380:	c8 0e       	add	r12, r24
    3382:	d9 1e       	adc	r13, r25
      h = -h;                          //   Use positive height
    3384:	d1 95       	neg	r29
    3386:	c1 95       	neg	r28
    3388:	d1 09       	sbc	r29, r1
    }
    if (y < _height) { // Not off bottom
    338a:	f5 01       	movw	r30, r10
    338c:	82 85       	ldd	r24, Z+10	; 0x0a
    338e:	93 85       	ldd	r25, Z+11	; 0x0b
    3390:	c8 16       	cp	r12, r24
    3392:	d9 06       	cpc	r13, r25
    3394:	bc f5       	brge	.+110    	; 0x3404 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
      int16_t y2 = y + h - 1;
    3396:	a6 01       	movw	r20, r12
    3398:	4c 0f       	add	r20, r28
    339a:	5d 1f       	adc	r21, r29
    339c:	9a 01       	movw	r18, r20
    339e:	21 50       	subi	r18, 0x01	; 1
    33a0:	31 09       	sbc	r19, r1
      if (y2 >= 0) { // Not off top
    33a2:	37 fd       	sbrc	r19, 7
    33a4:	2f c0       	rjmp	.+94     	; 0x3404 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0xc8>
        // Line partly or fully overlaps screen
        if (y < 0) {
    33a6:	d7 fe       	sbrs	r13, 7
    33a8:	03 c0       	rjmp	.+6      	; 0x33b0 <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x74>
          y = 0;
          h = y2 + 1;
    33aa:	ea 01       	movw	r28, r20
    if (y < _height) { // Not off bottom
      int16_t y2 = y + h - 1;
      if (y2 >= 0) { // Not off top
        // Line partly or fully overlaps screen
        if (y < 0) {
          y = 0;
    33ac:	c1 2c       	mov	r12, r1
    33ae:	d1 2c       	mov	r13, r1
          h = y2 + 1;
        } // Clip top
        if (y2 >= _height) {
    33b0:	28 17       	cp	r18, r24
    33b2:	39 07       	cpc	r19, r25
    33b4:	1c f0       	brlt	.+6      	; 0x33bc <_ZN15Adafruit_SPITFT13drawFastVLineEiiij+0x80>
          h = _height - y;
    33b6:	ec 01       	movw	r28, r24
    33b8:	cc 19       	sub	r28, r12
    33ba:	dd 09       	sbc	r29, r13
        } // Clip bottom
        startWrite();
    33bc:	d5 01       	movw	r26, r10
    33be:	ed 91       	ld	r30, X+
    33c0:	fc 91       	ld	r31, X
    33c2:	02 84       	ldd	r0, Z+10	; 0x0a
    33c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    33c6:	e0 2d       	mov	r30, r0
    33c8:	c5 01       	movw	r24, r10
    33ca:	19 95       	eicall
        writeFillRectPreclipped(x, y, 1, h, color);
    33cc:	78 01       	movw	r14, r16
    33ce:	8e 01       	movw	r16, r28
    33d0:	21 e0       	ldi	r18, 0x01	; 1
    33d2:	30 e0       	ldi	r19, 0x00	; 0
    33d4:	a6 01       	movw	r20, r12
    33d6:	b4 01       	movw	r22, r8
    33d8:	c5 01       	movw	r24, r10
    33da:	09 df       	rcall	.-494    	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
        endWrite();
    33dc:	d5 01       	movw	r26, r10
    33de:	ed 91       	ld	r30, X+
    33e0:	fc 91       	ld	r31, X
    33e2:	06 88       	ldd	r0, Z+22	; 0x16
    33e4:	f7 89       	ldd	r31, Z+23	; 0x17
    33e6:	e0 2d       	mov	r30, r0
    33e8:	c5 01       	movw	r24, r10
      }
    }
  }
}
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	ef 90       	pop	r14
    33f6:	df 90       	pop	r13
    33f8:	cf 90       	pop	r12
    33fa:	bf 90       	pop	r11
    33fc:	af 90       	pop	r10
    33fe:	9f 90       	pop	r9
    3400:	8f 90       	pop	r8
        if (y2 >= _height) {
          h = _height - y;
        } // Clip bottom
        startWrite();
        writeFillRectPreclipped(x, y, 1, h, color);
        endWrite();
    3402:	19 94       	eijmp
      }
    }
  }
}
    3404:	df 91       	pop	r29
    3406:	cf 91       	pop	r28
    3408:	1f 91       	pop	r17
    340a:	0f 91       	pop	r16
    340c:	ff 90       	pop	r15
    340e:	ef 90       	pop	r14
    3410:	df 90       	pop	r13
    3412:	cf 90       	pop	r12
    3414:	bf 90       	pop	r11
    3416:	af 90       	pop	r10
    3418:	9f 90       	pop	r9
    341a:	8f 90       	pop	r8
    341c:	08 95       	ret

0000341e <_ZN15Adafruit_SPITFT13drawFastHLineEiiij>:
            done this way (rather than starting the transaction and calling
            writeFastHLine() to handle clipping and so forth) so that the
            transaction isn't performed at all if the line is rejected.
*/
void Adafruit_SPITFT::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                    uint16_t color) {
    341e:	8f 92       	push	r8
    3420:	9f 92       	push	r9
    3422:	af 92       	push	r10
    3424:	bf 92       	push	r11
    3426:	cf 92       	push	r12
    3428:	df 92       	push	r13
    342a:	ef 92       	push	r14
    342c:	ff 92       	push	r15
    342e:	0f 93       	push	r16
    3430:	1f 93       	push	r17
    3432:	cf 93       	push	r28
    3434:	df 93       	push	r29
    3436:	5c 01       	movw	r10, r24
    3438:	6b 01       	movw	r12, r22
    343a:	4a 01       	movw	r8, r20
    343c:	e9 01       	movw	r28, r18
  if ((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
    343e:	57 fd       	sbrc	r21, 7
    3440:	52 c0       	rjmp	.+164    	; 0x34e6 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    3442:	dc 01       	movw	r26, r24
    3444:	1a 96       	adiw	r26, 0x0a	; 10
    3446:	8d 91       	ld	r24, X+
    3448:	9c 91       	ld	r25, X
    344a:	1b 97       	sbiw	r26, 0x0b	; 11
    344c:	48 17       	cp	r20, r24
    344e:	59 07       	cpc	r21, r25
    3450:	0c f0       	brlt	.+2      	; 0x3454 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x36>
    3452:	49 c0       	rjmp	.+146    	; 0x34e6 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    3454:	20 97       	sbiw	r28, 0x00	; 0
    3456:	09 f4       	brne	.+2      	; 0x345a <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x3c>
    3458:	46 c0       	rjmp	.+140    	; 0x34e6 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
    if (w < 0) {                        // If negative width...
    345a:	37 ff       	sbrs	r19, 7
    345c:	07 c0       	rjmp	.+14     	; 0x346c <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x4e>
      x += w + 1;                       //   Move X to left edge
    345e:	c9 01       	movw	r24, r18
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	c8 0e       	add	r12, r24
    3464:	d9 1e       	adc	r13, r25
      w = -w;                           //   Use positive width
    3466:	d1 95       	neg	r29
    3468:	c1 95       	neg	r28
    346a:	d1 09       	sbc	r29, r1
    }
    if (x < _width) { // Not off right
    346c:	f5 01       	movw	r30, r10
    346e:	80 85       	ldd	r24, Z+8	; 0x08
    3470:	91 85       	ldd	r25, Z+9	; 0x09
    3472:	c8 16       	cp	r12, r24
    3474:	d9 06       	cpc	r13, r25
    3476:	bc f5       	brge	.+110    	; 0x34e6 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
      int16_t x2 = x + w - 1;
    3478:	a6 01       	movw	r20, r12
    347a:	4c 0f       	add	r20, r28
    347c:	5d 1f       	adc	r21, r29
    347e:	9a 01       	movw	r18, r20
    3480:	21 50       	subi	r18, 0x01	; 1
    3482:	31 09       	sbc	r19, r1
      if (x2 >= 0) { // Not off left
    3484:	37 fd       	sbrc	r19, 7
    3486:	2f c0       	rjmp	.+94     	; 0x34e6 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0xc8>
        // Line partly or fully overlaps screen
        if (x < 0) {
    3488:	d7 fe       	sbrs	r13, 7
    348a:	03 c0       	rjmp	.+6      	; 0x3492 <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x74>
          x = 0;
          w = x2 + 1;
    348c:	ea 01       	movw	r28, r20
    if (x < _width) { // Not off right
      int16_t x2 = x + w - 1;
      if (x2 >= 0) { // Not off left
        // Line partly or fully overlaps screen
        if (x < 0) {
          x = 0;
    348e:	c1 2c       	mov	r12, r1
    3490:	d1 2c       	mov	r13, r1
          w = x2 + 1;
        } // Clip left
        if (x2 >= _width) {
    3492:	28 17       	cp	r18, r24
    3494:	39 07       	cpc	r19, r25
    3496:	1c f0       	brlt	.+6      	; 0x349e <_ZN15Adafruit_SPITFT13drawFastHLineEiiij+0x80>
          w = _width - x;
    3498:	ec 01       	movw	r28, r24
    349a:	cc 19       	sub	r28, r12
    349c:	dd 09       	sbc	r29, r13
        } // Clip right
        startWrite();
    349e:	d5 01       	movw	r26, r10
    34a0:	ed 91       	ld	r30, X+
    34a2:	fc 91       	ld	r31, X
    34a4:	02 84       	ldd	r0, Z+10	; 0x0a
    34a6:	f3 85       	ldd	r31, Z+11	; 0x0b
    34a8:	e0 2d       	mov	r30, r0
    34aa:	c5 01       	movw	r24, r10
    34ac:	19 95       	eicall
        writeFillRectPreclipped(x, y, w, 1, color);
    34ae:	78 01       	movw	r14, r16
    34b0:	01 e0       	ldi	r16, 0x01	; 1
    34b2:	10 e0       	ldi	r17, 0x00	; 0
    34b4:	9e 01       	movw	r18, r28
    34b6:	a4 01       	movw	r20, r8
    34b8:	b6 01       	movw	r22, r12
    34ba:	c5 01       	movw	r24, r10
    34bc:	98 de       	rcall	.-720    	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
        endWrite();
    34be:	d5 01       	movw	r26, r10
    34c0:	ed 91       	ld	r30, X+
    34c2:	fc 91       	ld	r31, X
    34c4:	06 88       	ldd	r0, Z+22	; 0x16
    34c6:	f7 89       	ldd	r31, Z+23	; 0x17
    34c8:	e0 2d       	mov	r30, r0
    34ca:	c5 01       	movw	r24, r10
      }
    }
  }
}
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	ff 90       	pop	r15
    34d6:	ef 90       	pop	r14
    34d8:	df 90       	pop	r13
    34da:	cf 90       	pop	r12
    34dc:	bf 90       	pop	r11
    34de:	af 90       	pop	r10
    34e0:	9f 90       	pop	r9
    34e2:	8f 90       	pop	r8
        if (x2 >= _width) {
          w = _width - x;
        } // Clip right
        startWrite();
        writeFillRectPreclipped(x, y, w, 1, color);
        endWrite();
    34e4:	19 94       	eijmp
      }
    }
  }
}
    34e6:	df 91       	pop	r29
    34e8:	cf 91       	pop	r28
    34ea:	1f 91       	pop	r17
    34ec:	0f 91       	pop	r16
    34ee:	ff 90       	pop	r15
    34f0:	ef 90       	pop	r14
    34f2:	df 90       	pop	r13
    34f4:	cf 90       	pop	r12
    34f6:	bf 90       	pop	r11
    34f8:	af 90       	pop	r10
    34fa:	9f 90       	pop	r9
    34fc:	8f 90       	pop	r8
    34fe:	08 95       	ret

00003500 <_ZN15Adafruit_SPITFT8fillRectEiiiij>:
            to handle clipping and so forth) so that the transaction isn't
            performed at all if the rectangle is rejected. It's really not
            that much code.
*/
void Adafruit_SPITFT::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                               uint16_t color) {
    3500:	8f 92       	push	r8
    3502:	9f 92       	push	r9
    3504:	af 92       	push	r10
    3506:	bf 92       	push	r11
    3508:	cf 92       	push	r12
    350a:	df 92       	push	r13
    350c:	ef 92       	push	r14
    350e:	ff 92       	push	r15
    3510:	0f 93       	push	r16
    3512:	1f 93       	push	r17
    3514:	cf 93       	push	r28
    3516:	df 93       	push	r29
    3518:	4c 01       	movw	r8, r24
    351a:	6b 01       	movw	r12, r22
    351c:	5a 01       	movw	r10, r20
    351e:	e9 01       	movw	r28, r18
  if (w && h) {   // Nonzero width and height?
    3520:	20 97       	sbiw	r28, 0x00	; 0
    3522:	09 f4       	brne	.+2      	; 0x3526 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x26>
    3524:	6b c0       	rjmp	.+214    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
    3526:	01 15       	cp	r16, r1
    3528:	11 05       	cpc	r17, r1
    352a:	09 f4       	brne	.+2      	; 0x352e <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x2e>
    352c:	67 c0       	rjmp	.+206    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
    if (w < 0) {  // If negative width...
    352e:	37 ff       	sbrs	r19, 7
    3530:	07 c0       	rjmp	.+14     	; 0x3540 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x40>
      x += w + 1; //   Move X to left edge
    3532:	c9 01       	movw	r24, r18
    3534:	01 96       	adiw	r24, 0x01	; 1
    3536:	c8 0e       	add	r12, r24
    3538:	d9 1e       	adc	r13, r25
      w = -w;     //   Use positive width
    353a:	d1 95       	neg	r29
    353c:	c1 95       	neg	r28
    353e:	d1 09       	sbc	r29, r1
    }
    if (x < _width) { // Not off right
    3540:	f4 01       	movw	r30, r8
    3542:	a0 85       	ldd	r26, Z+8	; 0x08
    3544:	b1 85       	ldd	r27, Z+9	; 0x09
    3546:	ca 16       	cp	r12, r26
    3548:	db 06       	cpc	r13, r27
    354a:	0c f0       	brlt	.+2      	; 0x354e <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x4e>
    354c:	57 c0       	rjmp	.+174    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
      if (h < 0) {    // If negative height...
    354e:	17 ff       	sbrs	r17, 7
    3550:	07 c0       	rjmp	.+14     	; 0x3560 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x60>
        y += h + 1;   //   Move Y to top edge
    3552:	c8 01       	movw	r24, r16
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	a8 0e       	add	r10, r24
    3558:	b9 1e       	adc	r11, r25
        h = -h;       //   Use positive height
    355a:	11 95       	neg	r17
    355c:	01 95       	neg	r16
    355e:	11 09       	sbc	r17, r1
      }
      if (y < _height) { // Not off bottom
    3560:	f4 01       	movw	r30, r8
    3562:	82 85       	ldd	r24, Z+10	; 0x0a
    3564:	93 85       	ldd	r25, Z+11	; 0x0b
    3566:	a8 16       	cp	r10, r24
    3568:	b9 06       	cpc	r11, r25
    356a:	0c f0       	brlt	.+2      	; 0x356e <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x6e>
    356c:	47 c0       	rjmp	.+142    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
        int16_t x2 = x + w - 1;
    356e:	f6 01       	movw	r30, r12
    3570:	ec 0f       	add	r30, r28
    3572:	fd 1f       	adc	r31, r29
    3574:	af 01       	movw	r20, r30
    3576:	41 50       	subi	r20, 0x01	; 1
    3578:	51 09       	sbc	r21, r1
        if (x2 >= 0) { // Not off left
    357a:	57 fd       	sbrc	r21, 7
    357c:	3f c0       	rjmp	.+126    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
          int16_t y2 = y + h - 1;
    357e:	b5 01       	movw	r22, r10
    3580:	60 0f       	add	r22, r16
    3582:	71 1f       	adc	r23, r17
    3584:	9b 01       	movw	r18, r22
    3586:	21 50       	subi	r18, 0x01	; 1
    3588:	31 09       	sbc	r19, r1
          if (y2 >= 0) { // Not off top
    358a:	37 fd       	sbrc	r19, 7
    358c:	37 c0       	rjmp	.+110    	; 0x35fc <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xfc>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
    358e:	d7 fe       	sbrs	r13, 7
    3590:	03 c0       	rjmp	.+6      	; 0x3598 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0x98>
              x = 0;
              w = x2 + 1;
    3592:	ef 01       	movw	r28, r30
        if (x2 >= 0) { // Not off left
          int16_t y2 = y + h - 1;
          if (y2 >= 0) { // Not off top
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
              x = 0;
    3594:	c1 2c       	mov	r12, r1
    3596:	d1 2c       	mov	r13, r1
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
    3598:	b7 fe       	sbrs	r11, 7
    359a:	03 c0       	rjmp	.+6      	; 0x35a2 <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xa2>
              y = 0;
              h = y2 + 1;
    359c:	8b 01       	movw	r16, r22
            if (x < 0) {
              x = 0;
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
              y = 0;
    359e:	a1 2c       	mov	r10, r1
    35a0:	b1 2c       	mov	r11, r1
              h = y2 + 1;
            } // Clip top
            if (x2 >= _width) {
    35a2:	4a 17       	cp	r20, r26
    35a4:	5b 07       	cpc	r21, r27
    35a6:	1c f0       	brlt	.+6      	; 0x35ae <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xae>
              w = _width - x;
    35a8:	ed 01       	movw	r28, r26
    35aa:	cc 19       	sub	r28, r12
    35ac:	dd 09       	sbc	r29, r13
            } // Clip right
            if (y2 >= _height) {
    35ae:	28 17       	cp	r18, r24
    35b0:	39 07       	cpc	r19, r25
    35b2:	1c f0       	brlt	.+6      	; 0x35ba <_ZN15Adafruit_SPITFT8fillRectEiiiij+0xba>
              h = _height - y;
    35b4:	8c 01       	movw	r16, r24
    35b6:	0a 19       	sub	r16, r10
    35b8:	1b 09       	sbc	r17, r11
            } // Clip bottom
            startWrite();
    35ba:	d4 01       	movw	r26, r8
    35bc:	ed 91       	ld	r30, X+
    35be:	fc 91       	ld	r31, X
    35c0:	02 84       	ldd	r0, Z+10	; 0x0a
    35c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    35c4:	e0 2d       	mov	r30, r0
    35c6:	c4 01       	movw	r24, r8
    35c8:	19 95       	eicall
            writeFillRectPreclipped(x, y, w, h, color);
    35ca:	9e 01       	movw	r18, r28
    35cc:	a5 01       	movw	r20, r10
    35ce:	b6 01       	movw	r22, r12
    35d0:	c4 01       	movw	r24, r8
    35d2:	0d de       	rcall	.-998    	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
            endWrite();
    35d4:	d4 01       	movw	r26, r8
    35d6:	ed 91       	ld	r30, X+
    35d8:	fc 91       	ld	r31, X
    35da:	06 88       	ldd	r0, Z+22	; 0x16
    35dc:	f7 89       	ldd	r31, Z+23	; 0x17
    35de:	e0 2d       	mov	r30, r0
    35e0:	c4 01       	movw	r24, r8
          }
        }
      }
    }
  }
}
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	1f 91       	pop	r17
    35e8:	0f 91       	pop	r16
    35ea:	ff 90       	pop	r15
    35ec:	ef 90       	pop	r14
    35ee:	df 90       	pop	r13
    35f0:	cf 90       	pop	r12
    35f2:	bf 90       	pop	r11
    35f4:	af 90       	pop	r10
    35f6:	9f 90       	pop	r9
    35f8:	8f 90       	pop	r8
            if (y2 >= _height) {
              h = _height - y;
            } // Clip bottom
            startWrite();
            writeFillRectPreclipped(x, y, w, h, color);
            endWrite();
    35fa:	19 94       	eijmp
          }
        }
      }
    }
  }
}
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	ff 90       	pop	r15
    3606:	ef 90       	pop	r14
    3608:	df 90       	pop	r13
    360a:	cf 90       	pop	r12
    360c:	bf 90       	pop	r11
    360e:	af 90       	pop	r10
    3610:	9f 90       	pop	r9
    3612:	8f 90       	pop	r8
    3614:	08 95       	ret

00003616 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij>:
    @note   Written in this deep-nested way because C by definition will
            optimize for the 'if' case, not the 'else' -- avoids branches
            and rejects clipped rectangles at the least-work possibility.
*/
void Adafruit_SPITFT::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                                    uint16_t color) {
    3616:	8f 92       	push	r8
    3618:	9f 92       	push	r9
    361a:	af 92       	push	r10
    361c:	bf 92       	push	r11
    361e:	cf 92       	push	r12
    3620:	df 92       	push	r13
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	0f 93       	push	r16
    3628:	1f 93       	push	r17
    362a:	cf 93       	push	r28
    362c:	df 93       	push	r29
    362e:	47 01       	movw	r8, r14
  if (w && h) {   // Nonzero width and height?
    3630:	21 15       	cp	r18, r1
    3632:	31 05       	cpc	r19, r1
    3634:	09 f4       	brne	.+2      	; 0x3638 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x22>
    3636:	4c c0       	rjmp	.+152    	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
    3638:	01 15       	cp	r16, r1
    363a:	11 05       	cpc	r17, r1
    363c:	09 f4       	brne	.+2      	; 0x3640 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x2a>
    363e:	48 c0       	rjmp	.+144    	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
    if (w < 0) {  // If negative width...
    3640:	37 ff       	sbrs	r19, 7
    3642:	07 c0       	rjmp	.+14     	; 0x3652 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x3c>
      x += w + 1; //   Move X to left edge
    3644:	f9 01       	movw	r30, r18
    3646:	31 96       	adiw	r30, 0x01	; 1
    3648:	6e 0f       	add	r22, r30
    364a:	7f 1f       	adc	r23, r31
      w = -w;     //   Use positive width
    364c:	31 95       	neg	r19
    364e:	21 95       	neg	r18
    3650:	31 09       	sbc	r19, r1
    }
    if (x < _width) { // Not off right
    3652:	dc 01       	movw	r26, r24
    3654:	18 96       	adiw	r26, 0x08	; 8
    3656:	ad 90       	ld	r10, X+
    3658:	bc 90       	ld	r11, X
    365a:	19 97       	sbiw	r26, 0x09	; 9
    365c:	6a 15       	cp	r22, r10
    365e:	7b 05       	cpc	r23, r11
    3660:	bc f5       	brge	.+110    	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
      if (h < 0) {    // If negative height...
    3662:	17 ff       	sbrs	r17, 7
    3664:	07 c0       	rjmp	.+14     	; 0x3674 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x5e>
        y += h + 1;   //   Move Y to top edge
    3666:	f8 01       	movw	r30, r16
    3668:	31 96       	adiw	r30, 0x01	; 1
    366a:	4e 0f       	add	r20, r30
    366c:	5f 1f       	adc	r21, r31
        h = -h;       //   Use positive height
    366e:	11 95       	neg	r17
    3670:	01 95       	neg	r16
    3672:	11 09       	sbc	r17, r1
      }
      if (y < _height) { // Not off bottom
    3674:	dc 01       	movw	r26, r24
    3676:	1a 96       	adiw	r26, 0x0a	; 10
    3678:	ed 91       	ld	r30, X+
    367a:	fc 91       	ld	r31, X
    367c:	1b 97       	sbiw	r26, 0x0b	; 11
    367e:	4e 17       	cp	r20, r30
    3680:	5f 07       	cpc	r21, r31
    3682:	34 f5       	brge	.+76     	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
        int16_t x2 = x + w - 1;
    3684:	6b 01       	movw	r12, r22
    3686:	c2 0e       	add	r12, r18
    3688:	d3 1e       	adc	r13, r19
    368a:	e6 01       	movw	r28, r12
    368c:	21 97       	sbiw	r28, 0x01	; 1
        if (x2 >= 0) { // Not off left
    368e:	d7 fd       	sbrc	r29, 7
    3690:	1f c0       	rjmp	.+62     	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
          int16_t y2 = y + h - 1;
    3692:	7a 01       	movw	r14, r20
    3694:	e0 0e       	add	r14, r16
    3696:	f1 1e       	adc	r15, r17
    3698:	d7 01       	movw	r26, r14
    369a:	11 97       	sbiw	r26, 0x01	; 1
          if (y2 >= 0) { // Not off top
    369c:	b7 fd       	sbrc	r27, 7
    369e:	18 c0       	rjmp	.+48     	; 0x36d0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xba>
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
    36a0:	77 ff       	sbrs	r23, 7
    36a2:	03 c0       	rjmp	.+6      	; 0x36aa <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x94>
              x = 0;
              w = x2 + 1;
    36a4:	96 01       	movw	r18, r12
        if (x2 >= 0) { // Not off left
          int16_t y2 = y + h - 1;
          if (y2 >= 0) { // Not off top
            // Rectangle partly or fully overlaps screen
            if (x < 0) {
              x = 0;
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	70 e0       	ldi	r23, 0x00	; 0
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
    36aa:	57 ff       	sbrs	r21, 7
    36ac:	03 c0       	rjmp	.+6      	; 0x36b4 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0x9e>
              y = 0;
              h = y2 + 1;
    36ae:	87 01       	movw	r16, r14
            if (x < 0) {
              x = 0;
              w = x2 + 1;
            } // Clip left
            if (y < 0) {
              y = 0;
    36b0:	40 e0       	ldi	r20, 0x00	; 0
    36b2:	50 e0       	ldi	r21, 0x00	; 0
              h = y2 + 1;
            } // Clip top
            if (x2 >= _width) {
    36b4:	ca 15       	cp	r28, r10
    36b6:	db 05       	cpc	r29, r11
    36b8:	1c f0       	brlt	.+6      	; 0x36c0 <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xaa>
              w = _width - x;
    36ba:	95 01       	movw	r18, r10
    36bc:	26 1b       	sub	r18, r22
    36be:	37 0b       	sbc	r19, r23
            } // Clip right
            if (y2 >= _height) {
    36c0:	ae 17       	cp	r26, r30
    36c2:	bf 07       	cpc	r27, r31
    36c4:	1c f0       	brlt	.+6      	; 0x36cc <_ZN15Adafruit_SPITFT13writeFillRectEiiiij+0xb6>
              h = _height - y;
    36c6:	8f 01       	movw	r16, r30
    36c8:	04 1b       	sub	r16, r20
    36ca:	15 0b       	sbc	r17, r21
            } // Clip bottom
            writeFillRectPreclipped(x, y, w, h, color);
    36cc:	74 01       	movw	r14, r8
    36ce:	8f dd       	rcall	.-1250   	; 0x31ee <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEiiiij>
          }
        }
      }
    }
  }
}
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	bf 90       	pop	r11
    36e2:	af 90       	pop	r10
    36e4:	9f 90       	pop	r9
    36e6:	8f 90       	pop	r8
    36e8:	08 95       	ret

000036ea <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    36ea:	cf 93       	push	r28
  uint8_t sreg = SREG;
    36ec:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    36ee:	f8 94       	cli
  if (!initialized) {
    36f0:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN8SPIClass11initializedE>
    36f4:	81 11       	cpse	r24, r1
    36f6:	27 c0       	rjmp	.+78     	; 0x3746 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    36f8:	e1 ee       	ldi	r30, 0xE1	; 225
    36fa:	f1 e0       	ldi	r31, 0x01	; 1
    36fc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    36fe:	eb e9       	ldi	r30, 0x9B	; 155
    3700:	f1 e0       	ldi	r31, 0x01	; 1
    3702:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    3704:	e8 2f       	mov	r30, r24
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	ee 0f       	add	r30, r30
    370a:	ff 1f       	adc	r31, r31
    370c:	ea 5d       	subi	r30, 0xDA	; 218
    370e:	fd 4f       	sbci	r31, 0xFD	; 253
    3710:	a5 91       	lpm	r26, Z+
    3712:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    3714:	ec 91       	ld	r30, X
    3716:	e9 23       	and	r30, r25
    3718:	21 f4       	brne	.+8      	; 0x3722 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    371a:	61 e0       	ldi	r22, 0x01	; 1
    371c:	85 e3       	ldi	r24, 0x35	; 53
    371e:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    3722:	61 e0       	ldi	r22, 0x01	; 1
    3724:	85 e3       	ldi	r24, 0x35	; 53
    3726:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    372a:	8c b5       	in	r24, 0x2c	; 44
    372c:	80 61       	ori	r24, 0x10	; 16
    372e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    3730:	8c b5       	in	r24, 0x2c	; 44
    3732:	80 64       	ori	r24, 0x40	; 64
    3734:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    3736:	61 e0       	ldi	r22, 0x01	; 1
    3738:	84 e3       	ldi	r24, 0x34	; 52
    373a:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
    pinMode(MOSI, OUTPUT);
    373e:	61 e0       	ldi	r22, 0x01	; 1
    3740:	83 e3       	ldi	r24, 0x33	; 51
    3742:	0e 94 9b 09 	call	0x1336	; 0x1336 <pinMode>
  }
  initialized++; // reference count
    3746:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <_ZN8SPIClass11initializedE>
    374a:	8f 5f       	subi	r24, 0xFF	; 255
    374c:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <_ZN8SPIClass11initializedE>
  SREG = sreg;
    3750:	cf bf       	out	0x3f, r28	; 63
}
    3752:	cf 91       	pop	r28
    3754:	08 95       	ret

00003756 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3756:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_state>
    375a:	81 e0       	ldi	r24, 0x01	; 1
    375c:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <twi_sendStop>
    3760:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <twi_inRepStart>
    3764:	61 e0       	ldi	r22, 0x01	; 1
    3766:	84 e1       	ldi	r24, 0x14	; 20
    3768:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    376c:	61 e0       	ldi	r22, 0x01	; 1
    376e:	85 e1       	ldi	r24, 0x15	; 21
    3770:	0e 94 d7 09 	call	0x13ae	; 0x13ae <digitalWrite>
    3774:	e9 eb       	ldi	r30, 0xB9	; 185
    3776:	f0 e0       	ldi	r31, 0x00	; 0
    3778:	80 81       	ld	r24, Z
    377a:	8e 7f       	andi	r24, 0xFE	; 254
    377c:	80 83       	st	Z, r24
    377e:	80 81       	ld	r24, Z
    3780:	8d 7f       	andi	r24, 0xFD	; 253
    3782:	80 83       	st	Z, r24
    3784:	88 e4       	ldi	r24, 0x48	; 72
    3786:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    378a:	85 e4       	ldi	r24, 0x45	; 69
    378c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3790:	08 95       	ret

00003792 <twi_readFrom>:
    3792:	41 32       	cpi	r20, 0x21	; 33
    3794:	08 f0       	brcs	.+2      	; 0x3798 <twi_readFrom+0x6>
    3796:	43 c0       	rjmp	.+134    	; 0x381e <twi_readFrom+0x8c>
    3798:	90 91 1b 06 	lds	r25, 0x061B	; 0x80061b <twi_state>
    379c:	91 11       	cpse	r25, r1
    379e:	fc cf       	rjmp	.-8      	; 0x3798 <twi_readFrom+0x6>
    37a0:	91 e0       	ldi	r25, 0x01	; 1
    37a2:	90 93 1b 06 	sts	0x061B, r25	; 0x80061b <twi_state>
    37a6:	20 93 19 06 	sts	0x0619, r18	; 0x800619 <twi_sendStop>
    37aa:	2f ef       	ldi	r18, 0xFF	; 255
    37ac:	20 93 ae 05 	sts	0x05AE, r18	; 0x8005ae <twi_error>
    37b0:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_masterBufferIndex>
    37b4:	24 0f       	add	r18, r20
    37b6:	20 93 f2 05 	sts	0x05F2, r18	; 0x8005f2 <twi_masterBufferLength>
    37ba:	90 93 1a 06 	sts	0x061A, r25	; 0x80061a <twi_slarw>
    37be:	90 91 1a 06 	lds	r25, 0x061A	; 0x80061a <twi_slarw>
    37c2:	88 0f       	add	r24, r24
    37c4:	89 2b       	or	r24, r25
    37c6:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <twi_slarw>
    37ca:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <twi_inRepStart>
    37ce:	81 30       	cpi	r24, 0x01	; 1
    37d0:	61 f4       	brne	.+24     	; 0x37ea <twi_readFrom+0x58>
    37d2:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <twi_inRepStart>
    37d6:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <twi_slarw>
    37da:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    37de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    37e2:	83 fd       	sbrc	r24, 3
    37e4:	f8 cf       	rjmp	.-16     	; 0x37d6 <twi_readFrom+0x44>
    37e6:	85 ec       	ldi	r24, 0xC5	; 197
    37e8:	01 c0       	rjmp	.+2      	; 0x37ec <twi_readFrom+0x5a>
    37ea:	85 ee       	ldi	r24, 0xE5	; 229
    37ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    37f0:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_state>
    37f4:	81 30       	cpi	r24, 0x01	; 1
    37f6:	e1 f3       	breq	.-8      	; 0x37f0 <twi_readFrom+0x5e>
    37f8:	80 91 f3 05 	lds	r24, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    37fc:	84 17       	cp	r24, r20
    37fe:	10 f4       	brcc	.+4      	; 0x3804 <twi_readFrom+0x72>
    3800:	40 91 f3 05 	lds	r20, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3804:	a4 ef       	ldi	r26, 0xF4	; 244
    3806:	b5 e0       	ldi	r27, 0x05	; 5
    3808:	96 2f       	mov	r25, r22
    380a:	fb 01       	movw	r30, r22
    380c:	8e 2f       	mov	r24, r30
    380e:	89 1b       	sub	r24, r25
    3810:	84 17       	cp	r24, r20
    3812:	18 f4       	brcc	.+6      	; 0x381a <twi_readFrom+0x88>
    3814:	8d 91       	ld	r24, X+
    3816:	81 93       	st	Z+, r24
    3818:	f9 cf       	rjmp	.-14     	; 0x380c <twi_readFrom+0x7a>
    381a:	84 2f       	mov	r24, r20
    381c:	08 95       	ret
    381e:	80 e0       	ldi	r24, 0x00	; 0
    3820:	08 95       	ret

00003822 <twi_writeTo>:
    3822:	0f 93       	push	r16
    3824:	41 32       	cpi	r20, 0x21	; 33
    3826:	08 f0       	brcs	.+2      	; 0x382a <twi_writeTo+0x8>
    3828:	4a c0       	rjmp	.+148    	; 0x38be <twi_writeTo+0x9c>
    382a:	90 91 1b 06 	lds	r25, 0x061B	; 0x80061b <twi_state>
    382e:	91 11       	cpse	r25, r1
    3830:	fc cf       	rjmp	.-8      	; 0x382a <twi_writeTo+0x8>
    3832:	32 e0       	ldi	r19, 0x02	; 2
    3834:	30 93 1b 06 	sts	0x061B, r19	; 0x80061b <twi_state>
    3838:	00 93 19 06 	sts	0x0619, r16	; 0x800619 <twi_sendStop>
    383c:	3f ef       	ldi	r19, 0xFF	; 255
    383e:	30 93 ae 05 	sts	0x05AE, r19	; 0x8005ae <twi_error>
    3842:	10 92 f3 05 	sts	0x05F3, r1	; 0x8005f3 <twi_masterBufferIndex>
    3846:	40 93 f2 05 	sts	0x05F2, r20	; 0x8005f2 <twi_masterBufferLength>
    384a:	56 2f       	mov	r21, r22
    384c:	a4 ef       	ldi	r26, 0xF4	; 244
    384e:	b5 e0       	ldi	r27, 0x05	; 5
    3850:	fb 01       	movw	r30, r22
    3852:	3e 2f       	mov	r19, r30
    3854:	35 1b       	sub	r19, r21
    3856:	34 17       	cp	r19, r20
    3858:	18 f4       	brcc	.+6      	; 0x3860 <twi_writeTo+0x3e>
    385a:	31 91       	ld	r19, Z+
    385c:	3d 93       	st	X+, r19
    385e:	f9 cf       	rjmp	.-14     	; 0x3852 <twi_writeTo+0x30>
    3860:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <twi_slarw>
    3864:	30 91 1a 06 	lds	r19, 0x061A	; 0x80061a <twi_slarw>
    3868:	88 0f       	add	r24, r24
    386a:	83 2b       	or	r24, r19
    386c:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <twi_slarw>
    3870:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <twi_inRepStart>
    3874:	81 30       	cpi	r24, 0x01	; 1
    3876:	61 f4       	brne	.+24     	; 0x3890 <twi_writeTo+0x6e>
    3878:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <twi_inRepStart>
    387c:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <twi_slarw>
    3880:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3884:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3888:	83 fd       	sbrc	r24, 3
    388a:	f8 cf       	rjmp	.-16     	; 0x387c <twi_writeTo+0x5a>
    388c:	85 ec       	ldi	r24, 0xC5	; 197
    388e:	01 c0       	rjmp	.+2      	; 0x3892 <twi_writeTo+0x70>
    3890:	85 ee       	ldi	r24, 0xE5	; 229
    3892:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3896:	22 23       	and	r18, r18
    3898:	21 f0       	breq	.+8      	; 0x38a2 <twi_writeTo+0x80>
    389a:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <twi_state>
    389e:	82 30       	cpi	r24, 0x02	; 2
    38a0:	d1 f3       	breq	.-12     	; 0x3896 <twi_writeTo+0x74>
    38a2:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <twi_error>
    38a6:	8f 3f       	cpi	r24, 0xFF	; 255
    38a8:	79 f0       	breq	.+30     	; 0x38c8 <twi_writeTo+0xa6>
    38aa:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <twi_error>
    38ae:	80 32       	cpi	r24, 0x20	; 32
    38b0:	41 f0       	breq	.+16     	; 0x38c2 <twi_writeTo+0xa0>
    38b2:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <twi_error>
    38b6:	80 33       	cpi	r24, 0x30	; 48
    38b8:	31 f0       	breq	.+12     	; 0x38c6 <twi_writeTo+0xa4>
    38ba:	94 e0       	ldi	r25, 0x04	; 4
    38bc:	05 c0       	rjmp	.+10     	; 0x38c8 <twi_writeTo+0xa6>
    38be:	91 e0       	ldi	r25, 0x01	; 1
    38c0:	03 c0       	rjmp	.+6      	; 0x38c8 <twi_writeTo+0xa6>
    38c2:	92 e0       	ldi	r25, 0x02	; 2
    38c4:	01 c0       	rjmp	.+2      	; 0x38c8 <twi_writeTo+0xa6>
    38c6:	93 e0       	ldi	r25, 0x03	; 3
    38c8:	89 2f       	mov	r24, r25
    38ca:	0f 91       	pop	r16
    38cc:	08 95       	ret

000038ce <twi_transmit>:
    38ce:	40 91 d0 05 	lds	r20, 0x05D0	; 0x8005d0 <twi_txBufferLength>
    38d2:	26 2f       	mov	r18, r22
    38d4:	30 e0       	ldi	r19, 0x00	; 0
    38d6:	24 0f       	add	r18, r20
    38d8:	31 1d       	adc	r19, r1
    38da:	21 32       	cpi	r18, 0x21	; 33
    38dc:	31 05       	cpc	r19, r1
    38de:	dc f4       	brge	.+54     	; 0x3916 <twi_transmit+0x48>
    38e0:	20 91 1b 06 	lds	r18, 0x061B	; 0x80061b <twi_state>
    38e4:	24 30       	cpi	r18, 0x04	; 4
    38e6:	c9 f4       	brne	.+50     	; 0x391a <twi_transmit+0x4c>
    38e8:	fc 01       	movw	r30, r24
    38ea:	80 e0       	ldi	r24, 0x00	; 0
    38ec:	90 e0       	ldi	r25, 0x00	; 0
    38ee:	86 17       	cp	r24, r22
    38f0:	58 f4       	brcc	.+22     	; 0x3908 <twi_transmit+0x3a>
    38f2:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <twi_txBufferLength>
    38f6:	21 91       	ld	r18, Z+
    38f8:	dc 01       	movw	r26, r24
    38fa:	ae 52       	subi	r26, 0x2E	; 46
    38fc:	ba 4f       	sbci	r27, 0xFA	; 250
    38fe:	a3 0f       	add	r26, r19
    3900:	b1 1d       	adc	r27, r1
    3902:	2c 93       	st	X, r18
    3904:	01 96       	adiw	r24, 0x01	; 1
    3906:	f3 cf       	rjmp	.-26     	; 0x38ee <twi_transmit+0x20>
    3908:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_txBufferLength>
    390c:	68 0f       	add	r22, r24
    390e:	60 93 d0 05 	sts	0x05D0, r22	; 0x8005d0 <twi_txBufferLength>
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	08 95       	ret
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	08 95       	ret
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	08 95       	ret

0000391e <twi_attachSlaveRxEvent>:
    391e:	90 93 15 06 	sts	0x0615, r25	; 0x800615 <twi_onSlaveReceive+0x1>
    3922:	80 93 14 06 	sts	0x0614, r24	; 0x800614 <twi_onSlaveReceive>
    3926:	08 95       	ret

00003928 <twi_attachSlaveTxEvent>:
    3928:	90 93 17 06 	sts	0x0617, r25	; 0x800617 <twi_onSlaveTransmit+0x1>
    392c:	80 93 16 06 	sts	0x0616, r24	; 0x800616 <twi_onSlaveTransmit>
    3930:	08 95       	ret

00003932 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    3932:	85 ed       	ldi	r24, 0xD5	; 213
    3934:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    3938:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    393c:	84 fd       	sbrc	r24, 4
    393e:	fc cf       	rjmp	.-8      	; 0x3938 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    3940:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_state>
    3944:	08 95       	ret

00003946 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    3946:	85 ec       	ldi	r24, 0xC5	; 197
    3948:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    394c:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_state>
    3950:	08 95       	ret

00003952 <__vector_39>:
}

ISR(TWI_vect)
{
    3952:	1f 92       	push	r1
    3954:	0f 92       	push	r0
    3956:	0f b6       	in	r0, 0x3f	; 63
    3958:	0f 92       	push	r0
    395a:	11 24       	eor	r1, r1
    395c:	0b b6       	in	r0, 0x3b	; 59
    395e:	0f 92       	push	r0
    3960:	2f 93       	push	r18
    3962:	3f 93       	push	r19
    3964:	4f 93       	push	r20
    3966:	5f 93       	push	r21
    3968:	6f 93       	push	r22
    396a:	7f 93       	push	r23
    396c:	8f 93       	push	r24
    396e:	9f 93       	push	r25
    3970:	af 93       	push	r26
    3972:	bf 93       	push	r27
    3974:	ef 93       	push	r30
    3976:	ff 93       	push	r31
  switch(TW_STATUS){
    3978:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    397c:	88 7f       	andi	r24, 0xF8	; 248
    397e:	80 36       	cpi	r24, 0x60	; 96
    3980:	09 f4       	brne	.+2      	; 0x3984 <__vector_39+0x32>
    3982:	9d c0       	rjmp	.+314    	; 0x3abe <__vector_39+0x16c>
    3984:	70 f5       	brcc	.+92     	; 0x39e2 <__vector_39+0x90>
    3986:	88 32       	cpi	r24, 0x28	; 40
    3988:	09 f4       	brne	.+2      	; 0x398c <__vector_39+0x3a>
    398a:	5c c0       	rjmp	.+184    	; 0x3a44 <__vector_39+0xf2>
    398c:	90 f4       	brcc	.+36     	; 0x39b2 <__vector_39+0x60>
    398e:	80 31       	cpi	r24, 0x10	; 16
    3990:	09 f4       	brne	.+2      	; 0x3994 <__vector_39+0x42>
    3992:	55 c0       	rjmp	.+170    	; 0x3a3e <__vector_39+0xec>
    3994:	38 f4       	brcc	.+14     	; 0x39a4 <__vector_39+0x52>
    3996:	88 23       	and	r24, r24
    3998:	09 f4       	brne	.+2      	; 0x399c <__vector_39+0x4a>
    399a:	f3 c0       	rjmp	.+486    	; 0x3b82 <__vector_39+0x230>
    399c:	88 30       	cpi	r24, 0x08	; 8
    399e:	09 f4       	brne	.+2      	; 0x39a2 <__vector_39+0x50>
    39a0:	4e c0       	rjmp	.+156    	; 0x3a3e <__vector_39+0xec>
    39a2:	f2 c0       	rjmp	.+484    	; 0x3b88 <__vector_39+0x236>
    39a4:	88 31       	cpi	r24, 0x18	; 24
    39a6:	09 f4       	brne	.+2      	; 0x39aa <__vector_39+0x58>
    39a8:	4d c0       	rjmp	.+154    	; 0x3a44 <__vector_39+0xf2>
    39aa:	80 32       	cpi	r24, 0x20	; 32
    39ac:	09 f4       	brne	.+2      	; 0x39b0 <__vector_39+0x5e>
    39ae:	5e c0       	rjmp	.+188    	; 0x3a6c <__vector_39+0x11a>
    39b0:	eb c0       	rjmp	.+470    	; 0x3b88 <__vector_39+0x236>
    39b2:	80 34       	cpi	r24, 0x40	; 64
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <__vector_39+0x66>
    39b6:	69 c0       	rjmp	.+210    	; 0x3a8a <__vector_39+0x138>
    39b8:	50 f4       	brcc	.+20     	; 0x39ce <__vector_39+0x7c>
    39ba:	80 33       	cpi	r24, 0x30	; 48
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <__vector_39+0x6e>
    39be:	56 c0       	rjmp	.+172    	; 0x3a6c <__vector_39+0x11a>
    39c0:	88 33       	cpi	r24, 0x38	; 56
    39c2:	09 f0       	breq	.+2      	; 0x39c6 <__vector_39+0x74>
    39c4:	e1 c0       	rjmp	.+450    	; 0x3b88 <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    39c6:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <twi_error>
      twi_releaseBus();
    39ca:	bd df       	rcall	.-134    	; 0x3946 <twi_releaseBus>
      break;
    39cc:	dd c0       	rjmp	.+442    	; 0x3b88 <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    39ce:	80 35       	cpi	r24, 0x50	; 80
    39d0:	09 f4       	brne	.+2      	; 0x39d4 <__vector_39+0x82>
    39d2:	4f c0       	rjmp	.+158    	; 0x3a72 <__vector_39+0x120>
    39d4:	88 35       	cpi	r24, 0x58	; 88
    39d6:	09 f4       	brne	.+2      	; 0x39da <__vector_39+0x88>
    39d8:	5d c0       	rjmp	.+186    	; 0x3a94 <__vector_39+0x142>
    39da:	88 34       	cpi	r24, 0x48	; 72
    39dc:	09 f0       	breq	.+2      	; 0x39e0 <__vector_39+0x8e>
    39de:	d4 c0       	rjmp	.+424    	; 0x3b88 <__vector_39+0x236>
    39e0:	d2 c0       	rjmp	.+420    	; 0x3b86 <__vector_39+0x234>
    39e2:	88 39       	cpi	r24, 0x98	; 152
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <__vector_39+0x96>
    39e6:	c3 c0       	rjmp	.+390    	; 0x3b6e <__vector_39+0x21c>
    39e8:	a8 f4       	brcc	.+42     	; 0x3a14 <__vector_39+0xc2>
    39ea:	88 37       	cpi	r24, 0x78	; 120
    39ec:	09 f4       	brne	.+2      	; 0x39f0 <__vector_39+0x9e>
    39ee:	67 c0       	rjmp	.+206    	; 0x3abe <__vector_39+0x16c>
    39f0:	38 f4       	brcc	.+14     	; 0x3a00 <__vector_39+0xae>
    39f2:	88 36       	cpi	r24, 0x68	; 104
    39f4:	09 f4       	brne	.+2      	; 0x39f8 <__vector_39+0xa6>
    39f6:	63 c0       	rjmp	.+198    	; 0x3abe <__vector_39+0x16c>
    39f8:	80 37       	cpi	r24, 0x70	; 112
    39fa:	09 f4       	brne	.+2      	; 0x39fe <__vector_39+0xac>
    39fc:	60 c0       	rjmp	.+192    	; 0x3abe <__vector_39+0x16c>
    39fe:	c4 c0       	rjmp	.+392    	; 0x3b88 <__vector_39+0x236>
    3a00:	88 38       	cpi	r24, 0x88	; 136
    3a02:	09 f4       	brne	.+2      	; 0x3a06 <__vector_39+0xb4>
    3a04:	b4 c0       	rjmp	.+360    	; 0x3b6e <__vector_39+0x21c>
    3a06:	80 39       	cpi	r24, 0x90	; 144
    3a08:	09 f4       	brne	.+2      	; 0x3a0c <__vector_39+0xba>
    3a0a:	5f c0       	rjmp	.+190    	; 0x3aca <__vector_39+0x178>
    3a0c:	80 38       	cpi	r24, 0x80	; 128
    3a0e:	09 f0       	breq	.+2      	; 0x3a12 <__vector_39+0xc0>
    3a10:	bb c0       	rjmp	.+374    	; 0x3b88 <__vector_39+0x236>
    3a12:	5b c0       	rjmp	.+182    	; 0x3aca <__vector_39+0x178>
    3a14:	80 3b       	cpi	r24, 0xB0	; 176
    3a16:	09 f4       	brne	.+2      	; 0x3a1a <__vector_39+0xc8>
    3a18:	82 c0       	rjmp	.+260    	; 0x3b1e <__vector_39+0x1cc>
    3a1a:	38 f4       	brcc	.+14     	; 0x3a2a <__vector_39+0xd8>
    3a1c:	80 3a       	cpi	r24, 0xA0	; 160
    3a1e:	09 f4       	brne	.+2      	; 0x3a22 <__vector_39+0xd0>
    3a20:	66 c0       	rjmp	.+204    	; 0x3aee <__vector_39+0x19c>
    3a22:	88 3a       	cpi	r24, 0xA8	; 168
    3a24:	09 f4       	brne	.+2      	; 0x3a28 <__vector_39+0xd6>
    3a26:	7b c0       	rjmp	.+246    	; 0x3b1e <__vector_39+0x1cc>
    3a28:	af c0       	rjmp	.+350    	; 0x3b88 <__vector_39+0x236>
    3a2a:	80 3c       	cpi	r24, 0xC0	; 192
    3a2c:	09 f4       	brne	.+2      	; 0x3a30 <__vector_39+0xde>
    3a2e:	a3 c0       	rjmp	.+326    	; 0x3b76 <__vector_39+0x224>
    3a30:	88 3c       	cpi	r24, 0xC8	; 200
    3a32:	09 f4       	brne	.+2      	; 0x3a36 <__vector_39+0xe4>
    3a34:	a0 c0       	rjmp	.+320    	; 0x3b76 <__vector_39+0x224>
    3a36:	88 3b       	cpi	r24, 0xB8	; 184
    3a38:	09 f4       	brne	.+2      	; 0x3a3c <__vector_39+0xea>
    3a3a:	86 c0       	rjmp	.+268    	; 0x3b48 <__vector_39+0x1f6>
    3a3c:	a5 c0       	rjmp	.+330    	; 0x3b88 <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3a3e:	80 91 1a 06 	lds	r24, 0x061A	; 0x80061a <twi_slarw>
    3a42:	10 c0       	rjmp	.+32     	; 0x3a64 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3a44:	90 91 f3 05 	lds	r25, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3a48:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_masterBufferLength>
    3a4c:	98 17       	cp	r25, r24
    3a4e:	70 f5       	brcc	.+92     	; 0x3aac <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3a50:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3a54:	81 e0       	ldi	r24, 0x01	; 1
    3a56:	8e 0f       	add	r24, r30
    3a58:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <twi_masterBufferIndex>
    3a5c:	f0 e0       	ldi	r31, 0x00	; 0
    3a5e:	ec 50       	subi	r30, 0x0C	; 12
    3a60:	fa 4f       	sbci	r31, 0xFA	; 250
    3a62:	80 81       	ld	r24, Z
    3a64:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3a68:	85 ec       	ldi	r24, 0xC5	; 197
    3a6a:	82 c0       	rjmp	.+260    	; 0x3b70 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    3a6c:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <twi_error>
    3a70:	8a c0       	rjmp	.+276    	; 0x3b86 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a72:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3a76:	81 e0       	ldi	r24, 0x01	; 1
    3a78:	8e 0f       	add	r24, r30
    3a7a:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <twi_masterBufferIndex>
    3a7e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	ec 50       	subi	r30, 0x0C	; 12
    3a86:	fa 4f       	sbci	r31, 0xFA	; 250
    3a88:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3a8a:	90 91 f3 05 	lds	r25, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3a8e:	80 91 f2 05 	lds	r24, 0x05F2	; 0x8005f2 <twi_masterBufferLength>
    3a92:	6a c0       	rjmp	.+212    	; 0x3b68 <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3a94:	e0 91 f3 05 	lds	r30, 0x05F3	; 0x8005f3 <twi_masterBufferIndex>
    3a98:	81 e0       	ldi	r24, 0x01	; 1
    3a9a:	8e 0f       	add	r24, r30
    3a9c:	80 93 f3 05 	sts	0x05F3, r24	; 0x8005f3 <twi_masterBufferIndex>
    3aa0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3aa4:	f0 e0       	ldi	r31, 0x00	; 0
    3aa6:	ec 50       	subi	r30, 0x0C	; 12
    3aa8:	fa 4f       	sbci	r31, 0xFA	; 250
    3aaa:	80 83       	st	Z, r24
	if (twi_sendStop)
    3aac:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <twi_sendStop>
    3ab0:	81 11       	cpse	r24, r1
    3ab2:	69 c0       	rjmp	.+210    	; 0x3b86 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3aba:	84 ea       	ldi	r24, 0xA4	; 164
    3abc:	5d c0       	rjmp	.+186    	; 0x3b78 <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3abe:	83 e0       	ldi	r24, 0x03	; 3
    3ac0:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    3ac4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <twi_rxBufferIndex>
    3ac8:	cf cf       	rjmp	.-98     	; 0x3a68 <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3aca:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <twi_rxBufferIndex>
    3ace:	80 32       	cpi	r24, 0x20	; 32
    3ad0:	08 f0       	brcs	.+2      	; 0x3ad4 <__vector_39+0x182>
    3ad2:	4d c0       	rjmp	.+154    	; 0x3b6e <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    3ad4:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <twi_rxBufferIndex>
    3ad8:	81 e0       	ldi	r24, 0x01	; 1
    3ada:	8e 0f       	add	r24, r30
    3adc:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <twi_rxBufferIndex>
    3ae0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3ae4:	f0 e0       	ldi	r31, 0x00	; 0
    3ae6:	e0 55       	subi	r30, 0x50	; 80
    3ae8:	fa 4f       	sbci	r31, 0xFA	; 250
    3aea:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3aec:	bd cf       	rjmp	.-134    	; 0x3a68 <__vector_39+0x116>
    3aee:	2b df       	rcall	.-426    	; 0x3946 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3af0:	80 91 af 05 	lds	r24, 0x05AF	; 0x8005af <twi_rxBufferIndex>
    3af4:	80 32       	cpi	r24, 0x20	; 32
    3af6:	30 f4       	brcc	.+12     	; 0x3b04 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3af8:	e0 91 af 05 	lds	r30, 0x05AF	; 0x8005af <twi_rxBufferIndex>
    3afc:	f0 e0       	ldi	r31, 0x00	; 0
    3afe:	e0 55       	subi	r30, 0x50	; 80
    3b00:	fa 4f       	sbci	r31, 0xFA	; 250
    3b02:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    3b04:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <twi_rxBufferIndex>
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	e0 91 14 06 	lds	r30, 0x0614	; 0x800614 <twi_onSlaveReceive>
    3b0e:	f0 91 15 06 	lds	r31, 0x0615	; 0x800615 <twi_onSlaveReceive+0x1>
    3b12:	80 eb       	ldi	r24, 0xB0	; 176
    3b14:	95 e0       	ldi	r25, 0x05	; 5
    3b16:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3b18:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <twi_rxBufferIndex>
      break;
    3b1c:	35 c0       	rjmp	.+106    	; 0x3b88 <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3b1e:	84 e0       	ldi	r24, 0x04	; 4
    3b20:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3b24:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    3b28:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3b2c:	e0 91 16 06 	lds	r30, 0x0616	; 0x800616 <twi_onSlaveTransmit>
    3b30:	f0 91 17 06 	lds	r31, 0x0617	; 0x800617 <twi_onSlaveTransmit+0x1>
    3b34:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    3b36:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_txBufferLength>
    3b3a:	81 11       	cpse	r24, r1
    3b3c:	05 c0       	rjmp	.+10     	; 0x3b48 <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    3b3e:	81 e0       	ldi	r24, 0x01	; 1
    3b40:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    3b44:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3b48:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <twi_txBufferIndex>
    3b4c:	81 e0       	ldi	r24, 0x01	; 1
    3b4e:	8e 0f       	add	r24, r30
    3b50:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <twi_txBufferIndex>
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	ee 52       	subi	r30, 0x2E	; 46
    3b58:	fa 4f       	sbci	r31, 0xFA	; 250
    3b5a:	80 81       	ld	r24, Z
    3b5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3b60:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <twi_txBufferIndex>
    3b64:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_txBufferLength>
    3b68:	98 17       	cp	r25, r24
    3b6a:	08 f4       	brcc	.+2      	; 0x3b6e <__vector_39+0x21c>
    3b6c:	7d cf       	rjmp	.-262    	; 0x3a68 <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3b6e:	85 e8       	ldi	r24, 0x85	; 133
    3b70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3b74:	09 c0       	rjmp	.+18     	; 0x3b88 <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3b76:	85 ec       	ldi	r24, 0xC5	; 197
    3b78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3b7c:	10 92 1b 06 	sts	0x061B, r1	; 0x80061b <twi_state>
      break;
    3b80:	03 c0       	rjmp	.+6      	; 0x3b88 <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    3b82:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <twi_error>
      twi_stop();
    3b86:	d5 de       	rcall	.-598    	; 0x3932 <twi_stop>
      break;
  }
}
    3b88:	ff 91       	pop	r31
    3b8a:	ef 91       	pop	r30
    3b8c:	bf 91       	pop	r27
    3b8e:	af 91       	pop	r26
    3b90:	9f 91       	pop	r25
    3b92:	8f 91       	pop	r24
    3b94:	7f 91       	pop	r23
    3b96:	6f 91       	pop	r22
    3b98:	5f 91       	pop	r21
    3b9a:	4f 91       	pop	r20
    3b9c:	3f 91       	pop	r19
    3b9e:	2f 91       	pop	r18
    3ba0:	0f 90       	pop	r0
    3ba2:	0b be       	out	0x3b, r0	; 59
    3ba4:	0f 90       	pop	r0
    3ba6:	0f be       	out	0x3f, r0	; 63
    3ba8:	0f 90       	pop	r0
    3baa:	1f 90       	pop	r1
    3bac:	18 95       	reti

00003bae <__fp_inf>:
    3bae:	97 f9       	bld	r25, 7
    3bb0:	9f 67       	ori	r25, 0x7F	; 127
    3bb2:	80 e8       	ldi	r24, 0x80	; 128
    3bb4:	70 e0       	ldi	r23, 0x00	; 0
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	08 95       	ret

00003bba <__fp_nan>:
    3bba:	9f ef       	ldi	r25, 0xFF	; 255
    3bbc:	80 ec       	ldi	r24, 0xC0	; 192
    3bbe:	08 95       	ret

00003bc0 <__fp_pscA>:
    3bc0:	00 24       	eor	r0, r0
    3bc2:	0a 94       	dec	r0
    3bc4:	16 16       	cp	r1, r22
    3bc6:	17 06       	cpc	r1, r23
    3bc8:	18 06       	cpc	r1, r24
    3bca:	09 06       	cpc	r0, r25
    3bcc:	08 95       	ret

00003bce <__fp_pscB>:
    3bce:	00 24       	eor	r0, r0
    3bd0:	0a 94       	dec	r0
    3bd2:	12 16       	cp	r1, r18
    3bd4:	13 06       	cpc	r1, r19
    3bd6:	14 06       	cpc	r1, r20
    3bd8:	05 06       	cpc	r0, r21
    3bda:	08 95       	ret

00003bdc <__fp_round>:
    3bdc:	09 2e       	mov	r0, r25
    3bde:	03 94       	inc	r0
    3be0:	00 0c       	add	r0, r0
    3be2:	11 f4       	brne	.+4      	; 0x3be8 <__fp_round+0xc>
    3be4:	88 23       	and	r24, r24
    3be6:	52 f0       	brmi	.+20     	; 0x3bfc <__fp_round+0x20>
    3be8:	bb 0f       	add	r27, r27
    3bea:	40 f4       	brcc	.+16     	; 0x3bfc <__fp_round+0x20>
    3bec:	bf 2b       	or	r27, r31
    3bee:	11 f4       	brne	.+4      	; 0x3bf4 <__fp_round+0x18>
    3bf0:	60 ff       	sbrs	r22, 0
    3bf2:	04 c0       	rjmp	.+8      	; 0x3bfc <__fp_round+0x20>
    3bf4:	6f 5f       	subi	r22, 0xFF	; 255
    3bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfc:	08 95       	ret

00003bfe <__mulsf3>:
    3bfe:	0c d0       	rcall	.+24     	; 0x3c18 <__mulsf3x>
    3c00:	ed cf       	rjmp	.-38     	; 0x3bdc <__fp_round>
    3c02:	de df       	rcall	.-68     	; 0x3bc0 <__fp_pscA>
    3c04:	28 f0       	brcs	.+10     	; 0x3c10 <__mulsf3+0x12>
    3c06:	e3 df       	rcall	.-58     	; 0x3bce <__fp_pscB>
    3c08:	18 f0       	brcs	.+6      	; 0x3c10 <__mulsf3+0x12>
    3c0a:	95 23       	and	r25, r21
    3c0c:	09 f0       	breq	.+2      	; 0x3c10 <__mulsf3+0x12>
    3c0e:	cf cf       	rjmp	.-98     	; 0x3bae <__fp_inf>
    3c10:	d4 cf       	rjmp	.-88     	; 0x3bba <__fp_nan>
    3c12:	11 24       	eor	r1, r1
    3c14:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>

00003c18 <__mulsf3x>:
    3c18:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_split3>
    3c1c:	90 f3       	brcs	.-28     	; 0x3c02 <__mulsf3+0x4>

00003c1e <__mulsf3_pse>:
    3c1e:	95 9f       	mul	r25, r21
    3c20:	c1 f3       	breq	.-16     	; 0x3c12 <__mulsf3+0x14>
    3c22:	95 0f       	add	r25, r21
    3c24:	50 e0       	ldi	r21, 0x00	; 0
    3c26:	55 1f       	adc	r21, r21
    3c28:	62 9f       	mul	r22, r18
    3c2a:	f0 01       	movw	r30, r0
    3c2c:	72 9f       	mul	r23, r18
    3c2e:	bb 27       	eor	r27, r27
    3c30:	f0 0d       	add	r31, r0
    3c32:	b1 1d       	adc	r27, r1
    3c34:	63 9f       	mul	r22, r19
    3c36:	aa 27       	eor	r26, r26
    3c38:	f0 0d       	add	r31, r0
    3c3a:	b1 1d       	adc	r27, r1
    3c3c:	aa 1f       	adc	r26, r26
    3c3e:	64 9f       	mul	r22, r20
    3c40:	66 27       	eor	r22, r22
    3c42:	b0 0d       	add	r27, r0
    3c44:	a1 1d       	adc	r26, r1
    3c46:	66 1f       	adc	r22, r22
    3c48:	82 9f       	mul	r24, r18
    3c4a:	22 27       	eor	r18, r18
    3c4c:	b0 0d       	add	r27, r0
    3c4e:	a1 1d       	adc	r26, r1
    3c50:	62 1f       	adc	r22, r18
    3c52:	73 9f       	mul	r23, r19
    3c54:	b0 0d       	add	r27, r0
    3c56:	a1 1d       	adc	r26, r1
    3c58:	62 1f       	adc	r22, r18
    3c5a:	83 9f       	mul	r24, r19
    3c5c:	a0 0d       	add	r26, r0
    3c5e:	61 1d       	adc	r22, r1
    3c60:	22 1f       	adc	r18, r18
    3c62:	74 9f       	mul	r23, r20
    3c64:	33 27       	eor	r19, r19
    3c66:	a0 0d       	add	r26, r0
    3c68:	61 1d       	adc	r22, r1
    3c6a:	23 1f       	adc	r18, r19
    3c6c:	84 9f       	mul	r24, r20
    3c6e:	60 0d       	add	r22, r0
    3c70:	21 1d       	adc	r18, r1
    3c72:	82 2f       	mov	r24, r18
    3c74:	76 2f       	mov	r23, r22
    3c76:	6a 2f       	mov	r22, r26
    3c78:	11 24       	eor	r1, r1
    3c7a:	9f 57       	subi	r25, 0x7F	; 127
    3c7c:	50 40       	sbci	r21, 0x00	; 0
    3c7e:	92 f0       	brmi	.+36     	; 0x3ca4 <__mulsf3_pse+0x86>
    3c80:	e9 f0       	breq	.+58     	; 0x3cbc <__mulsf3_pse+0x9e>
    3c82:	88 23       	and	r24, r24
    3c84:	4a f0       	brmi	.+18     	; 0x3c98 <__mulsf3_pse+0x7a>
    3c86:	ee 0f       	add	r30, r30
    3c88:	ff 1f       	adc	r31, r31
    3c8a:	bb 1f       	adc	r27, r27
    3c8c:	66 1f       	adc	r22, r22
    3c8e:	77 1f       	adc	r23, r23
    3c90:	88 1f       	adc	r24, r24
    3c92:	91 50       	subi	r25, 0x01	; 1
    3c94:	50 40       	sbci	r21, 0x00	; 0
    3c96:	a9 f7       	brne	.-22     	; 0x3c82 <__mulsf3_pse+0x64>
    3c98:	9e 3f       	cpi	r25, 0xFE	; 254
    3c9a:	51 05       	cpc	r21, r1
    3c9c:	78 f0       	brcs	.+30     	; 0x3cbc <__mulsf3_pse+0x9e>
    3c9e:	87 cf       	rjmp	.-242    	; 0x3bae <__fp_inf>
    3ca0:	0c 94 6b 05 	jmp	0xad6	; 0xad6 <__fp_szero>
    3ca4:	5f 3f       	cpi	r21, 0xFF	; 255
    3ca6:	e4 f3       	brlt	.-8      	; 0x3ca0 <__mulsf3_pse+0x82>
    3ca8:	98 3e       	cpi	r25, 0xE8	; 232
    3caa:	d4 f3       	brlt	.-12     	; 0x3ca0 <__mulsf3_pse+0x82>
    3cac:	86 95       	lsr	r24
    3cae:	77 95       	ror	r23
    3cb0:	67 95       	ror	r22
    3cb2:	b7 95       	ror	r27
    3cb4:	f7 95       	ror	r31
    3cb6:	e7 95       	ror	r30
    3cb8:	9f 5f       	subi	r25, 0xFF	; 255
    3cba:	c1 f7       	brne	.-16     	; 0x3cac <__mulsf3_pse+0x8e>
    3cbc:	fe 2b       	or	r31, r30
    3cbe:	88 0f       	add	r24, r24
    3cc0:	91 1d       	adc	r25, r1
    3cc2:	96 95       	lsr	r25
    3cc4:	87 95       	ror	r24
    3cc6:	97 f9       	bld	r25, 7
    3cc8:	08 95       	ret

00003cca <__divmodhi4>:
    3cca:	97 fb       	bst	r25, 7
    3ccc:	07 2e       	mov	r0, r23
    3cce:	16 f4       	brtc	.+4      	; 0x3cd4 <__divmodhi4+0xa>
    3cd0:	00 94       	com	r0
    3cd2:	06 d0       	rcall	.+12     	; 0x3ce0 <__divmodhi4_neg1>
    3cd4:	77 fd       	sbrc	r23, 7
    3cd6:	08 d0       	rcall	.+16     	; 0x3ce8 <__divmodhi4_neg2>
    3cd8:	50 d0       	rcall	.+160    	; 0x3d7a <__udivmodhi4>
    3cda:	07 fc       	sbrc	r0, 7
    3cdc:	05 d0       	rcall	.+10     	; 0x3ce8 <__divmodhi4_neg2>
    3cde:	3e f4       	brtc	.+14     	; 0x3cee <__divmodhi4_exit>

00003ce0 <__divmodhi4_neg1>:
    3ce0:	90 95       	com	r25
    3ce2:	81 95       	neg	r24
    3ce4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce6:	08 95       	ret

00003ce8 <__divmodhi4_neg2>:
    3ce8:	70 95       	com	r23
    3cea:	61 95       	neg	r22
    3cec:	7f 4f       	sbci	r23, 0xFF	; 255

00003cee <__divmodhi4_exit>:
    3cee:	08 95       	ret

00003cf0 <__udivmodsi4>:
    3cf0:	a1 e2       	ldi	r26, 0x21	; 33
    3cf2:	1a 2e       	mov	r1, r26
    3cf4:	aa 1b       	sub	r26, r26
    3cf6:	bb 1b       	sub	r27, r27
    3cf8:	fd 01       	movw	r30, r26
    3cfa:	0d c0       	rjmp	.+26     	; 0x3d16 <__udivmodsi4_ep>

00003cfc <__udivmodsi4_loop>:
    3cfc:	aa 1f       	adc	r26, r26
    3cfe:	bb 1f       	adc	r27, r27
    3d00:	ee 1f       	adc	r30, r30
    3d02:	ff 1f       	adc	r31, r31
    3d04:	a2 17       	cp	r26, r18
    3d06:	b3 07       	cpc	r27, r19
    3d08:	e4 07       	cpc	r30, r20
    3d0a:	f5 07       	cpc	r31, r21
    3d0c:	20 f0       	brcs	.+8      	; 0x3d16 <__udivmodsi4_ep>
    3d0e:	a2 1b       	sub	r26, r18
    3d10:	b3 0b       	sbc	r27, r19
    3d12:	e4 0b       	sbc	r30, r20
    3d14:	f5 0b       	sbc	r31, r21

00003d16 <__udivmodsi4_ep>:
    3d16:	66 1f       	adc	r22, r22
    3d18:	77 1f       	adc	r23, r23
    3d1a:	88 1f       	adc	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	1a 94       	dec	r1
    3d20:	69 f7       	brne	.-38     	; 0x3cfc <__udivmodsi4_loop>
    3d22:	60 95       	com	r22
    3d24:	70 95       	com	r23
    3d26:	80 95       	com	r24
    3d28:	90 95       	com	r25
    3d2a:	9b 01       	movw	r18, r22
    3d2c:	ac 01       	movw	r20, r24
    3d2e:	bd 01       	movw	r22, r26
    3d30:	cf 01       	movw	r24, r30
    3d32:	08 95       	ret

00003d34 <__tablejump2__>:
    3d34:	ee 0f       	add	r30, r30
    3d36:	ff 1f       	adc	r31, r31
    3d38:	88 1f       	adc	r24, r24
    3d3a:	8b bf       	out	0x3b, r24	; 59
    3d3c:	07 90       	elpm	r0, Z+
    3d3e:	f6 91       	elpm	r31, Z
    3d40:	e0 2d       	mov	r30, r0
    3d42:	19 94       	eijmp

00003d44 <__mulhisi3>:
    3d44:	05 d0       	rcall	.+10     	; 0x3d50 <__umulhisi3>
    3d46:	33 23       	and	r19, r19
    3d48:	12 f4       	brpl	.+4      	; 0x3d4e <__mulhisi3+0xa>
    3d4a:	8a 1b       	sub	r24, r26
    3d4c:	9b 0b       	sbc	r25, r27
    3d4e:	10 c0       	rjmp	.+32     	; 0x3d70 <__usmulhisi3_tail>

00003d50 <__umulhisi3>:
    3d50:	a2 9f       	mul	r26, r18
    3d52:	b0 01       	movw	r22, r0
    3d54:	b3 9f       	mul	r27, r19
    3d56:	c0 01       	movw	r24, r0
    3d58:	a3 9f       	mul	r26, r19
    3d5a:	70 0d       	add	r23, r0
    3d5c:	81 1d       	adc	r24, r1
    3d5e:	11 24       	eor	r1, r1
    3d60:	91 1d       	adc	r25, r1
    3d62:	b2 9f       	mul	r27, r18
    3d64:	70 0d       	add	r23, r0
    3d66:	81 1d       	adc	r24, r1
    3d68:	11 24       	eor	r1, r1
    3d6a:	91 1d       	adc	r25, r1
    3d6c:	08 95       	ret

00003d6e <__usmulhisi3>:
    3d6e:	f0 df       	rcall	.-32     	; 0x3d50 <__umulhisi3>

00003d70 <__usmulhisi3_tail>:
    3d70:	b7 ff       	sbrs	r27, 7
    3d72:	08 95       	ret
    3d74:	82 1b       	sub	r24, r18
    3d76:	93 0b       	sbc	r25, r19
    3d78:	08 95       	ret

00003d7a <__udivmodhi4>:
    3d7a:	aa 1b       	sub	r26, r26
    3d7c:	bb 1b       	sub	r27, r27
    3d7e:	51 e1       	ldi	r21, 0x11	; 17
    3d80:	07 c0       	rjmp	.+14     	; 0x3d90 <__udivmodhi4_ep>

00003d82 <__udivmodhi4_loop>:
    3d82:	aa 1f       	adc	r26, r26
    3d84:	bb 1f       	adc	r27, r27
    3d86:	a6 17       	cp	r26, r22
    3d88:	b7 07       	cpc	r27, r23
    3d8a:	10 f0       	brcs	.+4      	; 0x3d90 <__udivmodhi4_ep>
    3d8c:	a6 1b       	sub	r26, r22
    3d8e:	b7 0b       	sbc	r27, r23

00003d90 <__udivmodhi4_ep>:
    3d90:	88 1f       	adc	r24, r24
    3d92:	99 1f       	adc	r25, r25
    3d94:	5a 95       	dec	r21
    3d96:	a9 f7       	brne	.-22     	; 0x3d82 <__udivmodhi4_loop>
    3d98:	80 95       	com	r24
    3d9a:	90 95       	com	r25
    3d9c:	bc 01       	movw	r22, r24
    3d9e:	cd 01       	movw	r24, r26
    3da0:	08 95       	ret

00003da2 <abort>:
    3da2:	81 e0       	ldi	r24, 0x01	; 1
    3da4:	90 e0       	ldi	r25, 0x00	; 0
    3da6:	f8 94       	cli
    3da8:	00 c0       	rjmp	.+0      	; 0x3daa <_exit>

00003daa <_exit>:
    3daa:	f8 94       	cli

00003dac <__stop_program>:
    3dac:	ff cf       	rjmp	.-2      	; 0x3dac <__stop_program>
