
SDP_test_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ac  00800200  00002e36  00002eca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003a9  008003ac  008003ac  00003076  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003076  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000008d0  00000000  00000000  000030e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00017da1  00000000  00000000  000039b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003e48  00000000  00000000  0001b759  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004e69  00000000  00000000  0001f5a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001c7c  00000000  00000000  0002440c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e8a  00000000  00000000  00026088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a202  00000000  00000000  00029f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008a8  00000000  00000000  00034114  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__dtors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_10>
      28:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_10>
      2c:	0c 94 fe 0e 	jmp	0x1dfc	; 0x1dfc <__vector_10>
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f3 c7       	rjmp	.+4070   	; 0x1044 <__vector_23>
      5e:	00 00       	nop
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	54 c5       	rjmp	.+2728   	; 0xb0e <__vector_25>
      66:	00 00       	nop
      68:	88 c5       	rjmp	.+2832   	; 0xb7a <__vector_26>
      6a:	00 00       	nop
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ff c0       	rjmp	.+510    	; 0x290 <__bad_interrupt>
      92:	00 00       	nop
      94:	fd c0       	rjmp	.+506    	; 0x290 <__bad_interrupt>
      96:	00 00       	nop
      98:	fb c0       	rjmp	.+502    	; 0x290 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 52 12 	jmp	0x24a4	; 0x24a4 <__vector_39>
      a0:	f7 c0       	rjmp	.+494    	; 0x290 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f5 c0       	rjmp	.+490    	; 0x290 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f3 c0       	rjmp	.+486    	; 0x290 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f1 c0       	rjmp	.+482    	; 0x290 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ef c0       	rjmp	.+478    	; 0x290 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ed c0       	rjmp	.+474    	; 0x290 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	eb c0       	rjmp	.+470    	; 0x290 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e9 c0       	rjmp	.+466    	; 0x290 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e7 c0       	rjmp	.+462    	; 0x290 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e5 c0       	rjmp	.+458    	; 0x290 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e3 c0       	rjmp	.+454    	; 0x290 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e1 c0       	rjmp	.+450    	; 0x290 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	df c0       	rjmp	.+446    	; 0x290 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	dd c0       	rjmp	.+442    	; 0x290 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	db c0       	rjmp	.+438    	; 0x290 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d9 c0       	rjmp	.+434    	; 0x290 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d7 c0       	rjmp	.+430    	; 0x290 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5f 09       	sbc	r21, r15
      e6:	62 09       	sbc	r22, r2
      e8:	51 09       	sbc	r21, r1
      ea:	55 09       	sbc	r21, r5
      ec:	5b 09       	sbc	r21, r11
      ee:	99 09       	sbc	r25, r9
      f0:	66 09       	sbc	r22, r6
      f2:	6a 09       	sbc	r22, r10
      f4:	70 09       	sbc	r23, r0
      f6:	74 09       	sbc	r23, r4
      f8:	78 09       	sbc	r23, r8
      fa:	7e 09       	sbc	r23, r14
      fc:	82 09       	sbc	r24, r2
      fe:	86 09       	sbc	r24, r6
     100:	99 09       	sbc	r25, r9
     102:	8c 09       	sbc	r24, r12
     104:	90 09       	sbc	r25, r0
     106:	94 09       	sbc	r25, r4

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	af 02       	muls	r26, r31
     22a:	ef 05       	cpc	r30, r15
     22c:	52 11       	cpse	r21, r2

0000022e <__ctors_end>:
     22e:	c7 02       	muls	r28, r23

00000230 <__dtors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e6 e3       	ldi	r30, 0x36	; 54
     248:	fe e2       	ldi	r31, 0x2E	; 46
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	ac 3a       	cpi	r26, 0xAC	; 172
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	27 e0       	ldi	r18, 0x07	; 7
     25c:	ac ea       	ldi	r26, 0xAC	; 172
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	a5 35       	cpi	r26, 0x55	; 85
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c7 e1       	ldi	r28, 0x17	; 23
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 89 14 	call	0x2912	; 0x2912 <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	d7 d4       	rcall	.+2478   	; 0xc3a <main>
     28c:	0c 94 0a 17 	jmp	0x2e14	; 0x2e14 <__do_global_dtors>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <_Z12Camera_setup16Adafruit_AMG88xx>:
 */ 
#include "Camera.h"
#include "SoftwareSerial.h"
#include <Arduino.h>

void Camera_setup(Adafruit_AMG88xx amg){
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
	bool status;
	
	digitalWrite(Camera_enable_pin, HIGH);
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	89 e0       	ldi	r24, 0x09	; 9
     29c:	0e 94 d6 09 	call	0x13ac	; 0x13ac <digitalWrite>
	delay(100);
     2a0:	64 e6       	ldi	r22, 0x64	; 100
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	48 d7       	rcall	.+3728   	; 0x113a <delay>
	
	// default settings
	status = amg.begin();
     2aa:	69 e6       	ldi	r22, 0x69	; 105
     2ac:	ce 01       	movw	r24, r28
     2ae:	0e 94 88 0c 	call	0x1910	; 0x1910 <_ZN16Adafruit_AMG88xx5beginEh>
	if (!status) {
     2b2:	81 11       	cpse	r24, r1
     2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <_Z12Camera_setup16Adafruit_AMG88xx+0x30>
		Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
     2b6:	66 e0       	ldi	r22, 0x06	; 6
     2b8:	72 e0       	ldi	r23, 0x02	; 2
     2ba:	83 ee       	ldi	r24, 0xE3	; 227
     2bc:	94 e0       	ldi	r25, 0x04	; 4
     2be:	2f d5       	rcall	.+2654   	; 0xd1e <_ZN5Print7printlnEPKc>
     2c0:	ff cf       	rjmp	.-2      	; 0x2c0 <_Z12Camera_setup16Adafruit_AMG88xx+0x2e>
		while (1);
	}
	
	Serial.println("-- Pixels Test --");
     2c2:	6b e3       	ldi	r22, 0x3B	; 59
     2c4:	72 e0       	ldi	r23, 0x02	; 2
     2c6:	83 ee       	ldi	r24, 0xE3	; 227
     2c8:	94 e0       	ldi	r25, 0x04	; 4
     2ca:	29 d5       	rcall	.+2642   	; 0xd1e <_ZN5Print7printlnEPKc>

	Serial.println();
     2cc:	83 ee       	ldi	r24, 0xE3	; 227
     2ce:	94 e0       	ldi	r25, 0x04	; 4
     2d0:	13 d5       	rcall	.+2598   	; 0xcf8 <_ZN5Print7printlnEv>
     2d2:	64 e6       	ldi	r22, 0x64	; 100

	delay(100); // let sensor boot up
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	90 e0       	ldi	r25, 0x00	; 0
}
     2da:	df 91       	pop	r29
     2dc:	cf 91       	pop	r28
	
	Serial.println("-- Pixels Test --");

	Serial.println();

	delay(100); // let sensor boot up
     2de:	2d c7       	rjmp	.+3674   	; 0x113a <delay>

000002e0 <_Z11Camera_read16Adafruit_AMG88xxPf>:
     2e0:	0f 93       	push	r16
}

void Camera_read(Adafruit_AMG88xx amg, float *pixels){
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	d6 2f       	mov	r29, r22
     2ea:	c7 2f       	mov	r28, r23
	//read all the pixels
	amg.readPixels(pixels);
     2ec:	40 e4       	ldi	r20, 0x40	; 64
     2ee:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <_ZN16Adafruit_AMG88xx10readPixelsEPfh>

	Serial.print("[");
     2f2:	6d e4       	ldi	r22, 0x4D	; 77
     2f4:	72 e0       	ldi	r23, 0x02	; 2
     2f6:	83 ee       	ldi	r24, 0xE3	; 227
     2f8:	94 e0       	ldi	r25, 0x04	; 4
     2fa:	f6 d4       	rcall	.+2540   	; 0xce8 <_ZN5Print5printEPKc>
     2fc:	0d 2f       	mov	r16, r29
     2fe:	1c 2f       	mov	r17, r28
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
     300:	c1 e0       	ldi	r28, 0x01	; 1
     302:	d0 e0       	ldi	r29, 0x00	; 0
		Serial.print(pixels[i-1]);
     304:	f8 01       	movw	r30, r16
     306:	41 91       	ld	r20, Z+
     308:	51 91       	ld	r21, Z+
     30a:	61 91       	ld	r22, Z+
     30c:	71 91       	ld	r23, Z+
     30e:	8f 01       	movw	r16, r30
     310:	22 e0       	ldi	r18, 0x02	; 2
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	83 ee       	ldi	r24, 0xE3	; 227
     316:	94 e0       	ldi	r25, 0x04	; 4
     318:	94 d6       	rcall	.+3368   	; 0x1042 <_ZN5Print5printEdi>
		Serial.print(", ");
     31a:	6f e4       	ldi	r22, 0x4F	; 79
     31c:	72 e0       	ldi	r23, 0x02	; 2
     31e:	83 ee       	ldi	r24, 0xE3	; 227
     320:	94 e0       	ldi	r25, 0x04	; 4
     322:	e2 d4       	rcall	.+2500   	; 0xce8 <_ZN5Print5printEPKc>
		if( i%8 == 0 ) Serial.println();
     324:	ce 01       	movw	r24, r28
     326:	87 70       	andi	r24, 0x07	; 7
     328:	99 27       	eor	r25, r25
     32a:	89 2b       	or	r24, r25
     32c:	19 f4       	brne	.+6      	; 0x334 <_Z11Camera_read16Adafruit_AMG88xxPf+0x54>
     32e:	83 ee       	ldi	r24, 0xE3	; 227
     330:	94 e0       	ldi	r25, 0x04	; 4
     332:	e2 d4       	rcall	.+2500   	; 0xcf8 <_ZN5Print7printlnEv>
void Camera_read(Adafruit_AMG88xx amg, float *pixels){
	//read all the pixels
	amg.readPixels(pixels);

	Serial.print("[");
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
     334:	21 96       	adiw	r28, 0x01	; 1
     336:	c1 34       	cpi	r28, 0x41	; 65
     338:	d1 05       	cpc	r29, r1
     33a:	21 f7       	brne	.-56     	; 0x304 <_Z11Camera_read16Adafruit_AMG88xxPf+0x24>
		Serial.print(pixels[i-1]);
		Serial.print(", ");
		if( i%8 == 0 ) Serial.println();
	}
	Serial.println("]");
     33c:	62 e5       	ldi	r22, 0x52	; 82
     33e:	72 e0       	ldi	r23, 0x02	; 2
     340:	83 ee       	ldi	r24, 0xE3	; 227
     342:	94 e0       	ldi	r25, 0x04	; 4
	Serial.println();
     344:	ec d4       	rcall	.+2520   	; 0xd1e <_ZN5Print7printlnEPKc>
     346:	83 ee       	ldi	r24, 0xE3	; 227
     348:	94 e0       	ldi	r25, 0x04	; 4
     34a:	d6 d4       	rcall	.+2476   	; 0xcf8 <_ZN5Print7printlnEv>
	
	digitalWrite(Camera_enable_pin, LOW);
     34c:	60 e0       	ldi	r22, 0x00	; 0
     34e:	89 e0       	ldi	r24, 0x09	; 9
     350:	0e 94 d6 09 	call	0x13ac	; 0x13ac <digitalWrite>

	//delay a second
	delay(1000);
     354:	68 ee       	ldi	r22, 0xE8	; 232
     356:	73 e0       	ldi	r23, 0x03	; 3
     358:	80 e0       	ldi	r24, 0x00	; 0
}
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	df 91       	pop	r29
     35e:	cf 91       	pop	r28
     360:	1f 91       	pop	r17
	Serial.println();
	
	digitalWrite(Camera_enable_pin, LOW);

	//delay a second
	delay(1000);
     362:	0f 91       	pop	r16
     364:	ea c6       	rjmp	.+3540   	; 0x113a <delay>

00000366 <_Z16Occupancy_detectv>:
  
  Occupancy_detect();
  delay (1000);
}

int Occupancy_detect(){
     366:	cf 92       	push	r12
     368:	df 92       	push	r13
     36a:	ef 92       	push	r14
     36c:	ff 92       	push	r15
     36e:	1f 93       	push	r17
     370:	cf 93       	push	r28
     372:	df 93       	push	r29
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	60 97       	sbiw	r28, 0x10	; 16
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	de bf       	out	0x3e, r29	; 62
     380:	0f be       	out	0x3f, r0	; 63
     382:	cd bf       	out	0x3d, r28	; 61
	//int Distance;
	char PIR;
	int Temperature;
	int j;
	
	digitalWrite(Ping_PIR_enable_pin, HIGH); //turn on sensors for read
     384:	61 e0       	ldi	r22, 0x01	; 1
     386:	8b e0       	ldi	r24, 0x0B	; 11
     388:	0e 94 d6 09 	call	0x13ac	; 0x13ac <digitalWrite>
	delay(100);
     38c:	64 e6       	ldi	r22, 0x64	; 100
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	80 e0       	ldi	r24, 0x00	; 0
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	d2 d6       	rcall	.+3492   	; 0x113a <delay>
	//Distance = hcsr04.ToString()); //read ping sensor
	PIR = digitalRead(PIR_read_pin); //read PIR sensor
     396:	8a e0       	ldi	r24, 0x0A	; 10
     398:	0e 94 04 0a 	call	0x1408	; 0x1408 <digitalRead>
     39c:	18 2f       	mov	r17, r24
	
	Temperature = amg.readThermistor();
     39e:	83 ed       	ldi	r24, 0xD3	; 211
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <_ZN16Adafruit_AMG88xx14readThermistorEv>
     3a6:	6b 01       	movw	r12, r22
     3a8:	7c 01       	movw	r14, r24
	Camera_read(amg, pixels);
     3aa:	80 e1       	ldi	r24, 0x10	; 16
     3ac:	e3 ed       	ldi	r30, 0xD3	; 211
     3ae:	f4 e0       	ldi	r31, 0x04	; 4
     3b0:	de 01       	movw	r26, r28
     3b2:	11 96       	adiw	r26, 0x01	; 1
     3b4:	01 90       	ld	r0, Z+
     3b6:	0d 92       	st	X+, r0
     3b8:	8a 95       	dec	r24
     3ba:	e1 f7       	brne	.-8      	; 0x3b4 <_Z16Occupancy_detectv+0x4e>
     3bc:	63 ed       	ldi	r22, 0xD3	; 211
     3be:	73 e0       	ldi	r23, 0x03	; 3
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	8d df       	rcall	.-230    	; 0x2e0 <_Z11Camera_read16Adafruit_AMG88xxPf>
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
		if ((pixels[i-1] - Temperature) > Detect_temp){
     3c6:	c7 01       	movw	r24, r14
     3c8:	b6 01       	movw	r22, r12
     3ca:	4a d1       	rcall	.+660    	; 0x660 <__fixsfsi>
     3cc:	07 2e       	mov	r0, r23
     3ce:	00 0c       	add	r0, r0
     3d0:	88 0b       	sbc	r24, r24
     3d2:	99 0b       	sbc	r25, r25
     3d4:	78 d1       	rcall	.+752    	; 0x6c6 <__floatsisf>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 91 d3 03 	lds	r22, 0x03D3	; 0x8003d3 <pixels>
     3de:	70 91 d4 03 	lds	r23, 0x03D4	; 0x8003d4 <pixels+0x1>
     3e2:	80 91 d5 03 	lds	r24, 0x03D5	; 0x8003d5 <pixels+0x2>
     3e6:	90 91 d6 03 	lds	r25, 0x03D6	; 0x8003d6 <pixels+0x3>
     3ea:	d5 d0       	rcall	.+426    	; 0x596 <__subsf3>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	30 e0       	ldi	r19, 0x00	; 0
     3f0:	40 ea       	ldi	r20, 0xA0	; 160
     3f2:	50 e4       	ldi	r21, 0x40	; 64
     3f4:	f4 d1       	rcall	.+1000   	; 0x7de <__gesf2>
			j++;
		}		
	
	if((j > Detect_pixels) && (PIR != 0)){
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	84 30       	cpi	r24, 0x04	; 4
     3fc:	91 05       	cpc	r25, r1
     3fe:	2c f0       	brlt	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		return 1;
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	11 11       	cpse	r17, r1
     404:	04 c0       	rjmp	.+8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	} else{
		return 0;
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
	}
	}
		}
     40e:	60 96       	adiw	r28, 0x10	; 16
     410:	0f b6       	in	r0, 0x3f	; 63
     412:	f8 94       	cli
     414:	de bf       	out	0x3e, r29	; 62
     416:	0f be       	out	0x3f, r0	; 63
     418:	cd bf       	out	0x3d, r28	; 61
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	ff 90       	pop	r15
     422:	ef 90       	pop	r14
     424:	df 90       	pop	r13
     426:	cf 90       	pop	r12
     428:	08 95       	ret

0000042a <loop>:

void loop() {
  // put your main code here, to run repeatedly:
  //updateSerial(); //Telecom module read
  
  Occupancy_detect();
     42a:	9d df       	rcall	.-198    	; 0x366 <_Z16Occupancy_detectv>
  delay (1000);
     42c:	68 ee       	ldi	r22, 0xE8	; 232
     42e:	73 e0       	ldi	r23, 0x03	; 3
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	82 c6       	rjmp	.+3332   	; 0x113a <delay>

00000436 <_Z15Enable_pin_initv>:
  return success;
}

void Enable_pin_init(){
  //pinMode(Telecom_enable_pin, OUTPUT);
  pinMode(Ping_PIR_enable_pin, OUTPUT);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	8b e0       	ldi	r24, 0x0B	; 11
     43a:	7c d7       	rcall	.+3832   	; 0x1334 <pinMode>
  pinMode(Camera_enable_pin, OUTPUT);
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	89 e0       	ldi	r24, 0x09	; 9
     440:	79 d7       	rcall	.+3826   	; 0x1334 <pinMode>
  //digitalWrite(Telecom_enable_pin, HIGH);
  digitalWrite(Ping_PIR_enable_pin, LOW);
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	8b e0       	ldi	r24, 0x0B	; 11
     446:	b2 d7       	rcall	.+3940   	; 0x13ac <digitalWrite>
  digitalWrite(Camera_enable_pin, LOW);
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	89 e0       	ldi	r24, 0x09	; 9
     44c:	af c7       	rjmp	.+3934   	; 0x13ac <digitalWrite>

0000044e <_Z9PIR_setupv>:
     44e:	60 e0       	ldi	r22, 0x00	; 0
}


void PIR_setup(){
  pinMode(PIR_read_pin, INPUT);
     450:	8a e0       	ldi	r24, 0x0A	; 10
     452:	70 c7       	rjmp	.+3808   	; 0x1334 <pinMode>

00000454 <setup>:
int Setup_4G();


int Occupancy_detect();

void setup() {
     454:	8f 92       	push	r8
     456:	9f 92       	push	r9
     458:	af 92       	push	r10
     45a:	bf 92       	push	r11
     45c:	cf 92       	push	r12
     45e:	df 92       	push	r13
     460:	ef 92       	push	r14
     462:	ff 92       	push	r15
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
     46c:	60 97       	sbiw	r28, 0x10	; 16
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
  // put your setup code here, to run once:
  int Initial_time = millis();
     478:	2f d6       	rcall	.+3166   	; 0x10d8 <millis>
     47a:	4b 01       	movw	r8, r22
     47c:	5c 01       	movw	r10, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     47e:	26 e0       	ldi	r18, 0x06	; 6
     480:	40 e8       	ldi	r20, 0x80	; 128
     482:	55 e2       	ldi	r21, 0x25	; 37
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	83 ee       	ldi	r24, 0xE3	; 227
     48a:	94 e0       	ldi	r25, 0x04	; 4
  
  Serial.begin(9600); //setup USB
  while (!Serial);
  
  Enable_pin_init();
     48c:	d8 d2       	rcall	.+1456   	; 0xa3e <_ZN14HardwareSerial5beginEmh>
     48e:	d3 df       	rcall	.-90     	; 0x436 <_Z15Enable_pin_initv>
  
  //Setup_4G(); //setup telecom unit
  
  Camera_setup(amg); //setup IR camera
     490:	80 e1       	ldi	r24, 0x10	; 16
     492:	e3 ed       	ldi	r30, 0xD3	; 211
     494:	f4 e0       	ldi	r31, 0x04	; 4
     496:	de 01       	movw	r26, r28
     498:	11 96       	adiw	r26, 0x01	; 1
     49a:	01 90       	ld	r0, Z+
     49c:	0d 92       	st	X+, r0
     49e:	8a 95       	dec	r24
     4a0:	e1 f7       	brne	.-8      	; 0x49a <setup+0x46>
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
  
  PIR_setup(); //setup PIR pin
     4a6:	f5 de       	rcall	.-534    	; 0x292 <_Z12Camera_setup16Adafruit_AMG88xx>
  
  delay (100);
     4a8:	d2 df       	rcall	.-92     	; 0x44e <_Z9PIR_setupv>
     4aa:	64 e6       	ldi	r22, 0x64	; 100
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	43 d6       	rcall	.+3206   	; 0x113a <delay>
  
  Camera_read(amg, pixels); //IR camera read, fills array pixels with 64 temperature values. 
     4b4:	80 e1       	ldi	r24, 0x10	; 16
     4b6:	e3 ed       	ldi	r30, 0xD3	; 211
     4b8:	f4 e0       	ldi	r31, 0x04	; 4
     4ba:	de 01       	movw	r26, r28
     4bc:	11 96       	adiw	r26, 0x01	; 1
     4be:	01 90       	ld	r0, Z+
     4c0:	0d 92       	st	X+, r0
     4c2:	8a 95       	dec	r24
     4c4:	e1 f7       	brne	.-8      	; 0x4be <setup+0x6a>
     4c6:	63 ed       	ldi	r22, 0xD3	; 211
     4c8:	73 e0       	ldi	r23, 0x03	; 3
     4ca:	ce 01       	movw	r24, r28
     4cc:	01 96       	adiw	r24, 0x01	; 1
  
  digitalWrite(Ping_PIR_enable_pin, HIGH); //turn on sensors for read
     4ce:	08 df       	rcall	.-496    	; 0x2e0 <_Z11Camera_read16Adafruit_AMG88xxPf>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	8b e0       	ldi	r24, 0x0B	; 11
  delay(100);
     4d4:	6b d7       	rcall	.+3798   	; 0x13ac <digitalWrite>
     4d6:	64 e6       	ldi	r22, 0x64	; 100
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	2d d6       	rcall	.+3162   	; 0x113a <delay>
  Serial.println(hcsr04.ToString()); //read ping sensor
     4e0:	6c ea       	ldi	r22, 0xAC	; 172
     4e2:	73 e0       	ldi	r23, 0x03	; 3
     4e4:	ce 01       	movw	r24, r28
     4e6:	01 96       	adiw	r24, 0x01	; 1
     4e8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <_ZN6HCSR048ToStringEv>
     4ec:	be 01       	movw	r22, r28
     4ee:	6f 5f       	subi	r22, 0xFF	; 255
     4f0:	7f 4f       	sbci	r23, 0xFF	; 255
     4f2:	83 ee       	ldi	r24, 0xE3	; 227
     4f4:	94 e0       	ldi	r25, 0x04	; 4
     4f6:	03 d4       	rcall	.+2054   	; 0xcfe <_ZN5Print7printlnERK6String>
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
  if( digitalRead(PIR_read_pin) != 0){ //read PIR sensor
     4fc:	ad d7       	rcall	.+3930   	; 0x1458 <_ZN6StringD1Ev>
     4fe:	8a e0       	ldi	r24, 0x0A	; 10
     500:	83 d7       	rcall	.+3846   	; 0x1408 <digitalRead>
    Serial.println("PIR positive detect");
     502:	89 2b       	or	r24, r25
     504:	19 f0       	breq	.+6      	; 0x50c <setup+0xb8>
     506:	64 e5       	ldi	r22, 0x54	; 84
  }
  else {
    Serial.println("PIR negative detect");
     508:	72 e0       	ldi	r23, 0x02	; 2
     50a:	02 c0       	rjmp	.+4      	; 0x510 <setup+0xbc>
     50c:	68 e6       	ldi	r22, 0x68	; 104
     50e:	72 e0       	ldi	r23, 0x02	; 2
     510:	83 ee       	ldi	r24, 0xE3	; 227
  }
  
  int Setup_time = millis() - Initial_time;
     512:	94 e0       	ldi	r25, 0x04	; 4
     514:	04 d4       	rcall	.+2056   	; 0xd1e <_ZN5Print7printlnEPKc>
     516:	e0 d5       	rcall	.+3008   	; 0x10d8 <millis>
  
  Serial.print("Setup time: ");
     518:	6b 01       	movw	r12, r22
     51a:	7c 01       	movw	r14, r24
     51c:	6c e7       	ldi	r22, 0x7C	; 124
     51e:	72 e0       	ldi	r23, 0x02	; 2
     520:	83 ee       	ldi	r24, 0xE3	; 227
  Serial.println(Setup_time);
     522:	94 e0       	ldi	r25, 0x04	; 4
     524:	e1 d3       	rcall	.+1986   	; 0xce8 <_ZN5Print5printEPKc>
     526:	b6 01       	movw	r22, r12
     528:	68 19       	sub	r22, r8
     52a:	79 09       	sbc	r23, r9
     52c:	4a e0       	ldi	r20, 0x0A	; 10
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	83 ee       	ldi	r24, 0xE3	; 227
     532:	94 e0       	ldi	r25, 0x04	; 4
  
  digitalWrite(Ping_PIR_enable_pin, LOW);
     534:	a8 d4       	rcall	.+2384   	; 0xe86 <_ZN5Print7printlnEii>
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	8b e0       	ldi	r24, 0x0B	; 11
     53a:	38 d7       	rcall	.+3696   	; 0x13ac <digitalWrite>
}
     53c:	60 96       	adiw	r28, 0x10	; 16
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
     548:	df 91       	pop	r29
     54a:	cf 91       	pop	r28
     54c:	ff 90       	pop	r15
     54e:	ef 90       	pop	r14
     550:	df 90       	pop	r13
     552:	cf 90       	pop	r12
     554:	bf 90       	pop	r11
     556:	af 90       	pop	r10
     558:	9f 90       	pop	r9
     55a:	8f 90       	pop	r8
     55c:	08 95       	ret

0000055e <_GLOBAL__sub_I_amg>:
}


void PIR_setup(){
  pinMode(PIR_read_pin, INPUT);
}
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
#define Detect_range 100 //detection threshold for ping sensor, dummy value
#define Detect_temp 5 //degrees celcius above background needed for IR camera detect, dummy value
#define Detect_pixels 3 //amount of pixels needed for IR camera detect, dummy value


SoftwareSerial Telecom_serial(Telecom_RX, Telecom_TX); //set up serial port for telecom module
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	42 e3       	ldi	r20, 0x32	; 50
     566:	63 e3       	ldi	r22, 0x33	; 51
     568:	84 eb       	ldi	r24, 0xB4	; 180
     56a:	93 e0       	ldi	r25, 0x03	; 3
     56c:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <_ZN14SoftwareSerialC1Ehhb>
HCSR04 hcsr04(TRIG_PIN, ECHO_PIN, 20, 4000); //setup ping sensor
     570:	00 ea       	ldi	r16, 0xA0	; 160
     572:	1f e0       	ldi	r17, 0x0F	; 15
     574:	24 e1       	ldi	r18, 0x14	; 20
     576:	30 e0       	ldi	r19, 0x00	; 0
     578:	45 e0       	ldi	r20, 0x05	; 5
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	64 e0       	ldi	r22, 0x04	; 4
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	8c ea       	ldi	r24, 0xAC	; 172
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <_ZN6HCSR04C1Eiiii>
}


void PIR_setup(){
  pinMode(PIR_read_pin, INPUT);
}
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	08 95       	ret

0000058e <_GLOBAL__sub_D_amg>:
#define Detect_range 100 //detection threshold for ping sensor, dummy value
#define Detect_temp 5 //degrees celcius above background needed for IR camera detect, dummy value
#define Detect_pixels 3 //amount of pixels needed for IR camera detect, dummy value


SoftwareSerial Telecom_serial(Telecom_RX, Telecom_TX); //set up serial port for telecom module
     58e:	84 eb       	ldi	r24, 0xB4	; 180
     590:	93 e0       	ldi	r25, 0x03	; 3
     592:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <_ZN14SoftwareSerialD1Ev>

00000596 <__subsf3>:
     596:	50 58       	subi	r21, 0x80	; 128

00000598 <__addsf3>:
     598:	bb 27       	eor	r27, r27
     59a:	aa 27       	eor	r26, r26
     59c:	0e d0       	rcall	.+28     	; 0x5ba <__addsf3x>
     59e:	e5 c0       	rjmp	.+458    	; 0x76a <__fp_round>
     5a0:	d6 d0       	rcall	.+428    	; 0x74e <__fp_pscA>
     5a2:	30 f0       	brcs	.+12     	; 0x5b0 <__addsf3+0x18>
     5a4:	db d0       	rcall	.+438    	; 0x75c <__fp_pscB>
     5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__addsf3+0x18>
     5a8:	31 f4       	brne	.+12     	; 0x5b6 <__addsf3+0x1e>
     5aa:	9f 3f       	cpi	r25, 0xFF	; 255
     5ac:	11 f4       	brne	.+4      	; 0x5b2 <__addsf3+0x1a>
     5ae:	1e f4       	brtc	.+6      	; 0x5b6 <__addsf3+0x1e>
     5b0:	cb c0       	rjmp	.+406    	; 0x748 <__fp_nan>
     5b2:	0e f4       	brtc	.+2      	; 0x5b6 <__addsf3+0x1e>
     5b4:	e0 95       	com	r30
     5b6:	e7 fb       	bst	r30, 7
     5b8:	c1 c0       	rjmp	.+386    	; 0x73c <__fp_inf>

000005ba <__addsf3x>:
     5ba:	e9 2f       	mov	r30, r25
     5bc:	e7 d0       	rcall	.+462    	; 0x78c <__fp_split3>
     5be:	80 f3       	brcs	.-32     	; 0x5a0 <__addsf3+0x8>
     5c0:	ba 17       	cp	r27, r26
     5c2:	62 07       	cpc	r22, r18
     5c4:	73 07       	cpc	r23, r19
     5c6:	84 07       	cpc	r24, r20
     5c8:	95 07       	cpc	r25, r21
     5ca:	18 f0       	brcs	.+6      	; 0x5d2 <__addsf3x+0x18>
     5cc:	71 f4       	brne	.+28     	; 0x5ea <__addsf3x+0x30>
     5ce:	9e f5       	brtc	.+102    	; 0x636 <__addsf3x+0x7c>
     5d0:	ff c0       	rjmp	.+510    	; 0x7d0 <__fp_zero>
     5d2:	0e f4       	brtc	.+2      	; 0x5d6 <__addsf3x+0x1c>
     5d4:	e0 95       	com	r30
     5d6:	0b 2e       	mov	r0, r27
     5d8:	ba 2f       	mov	r27, r26
     5da:	a0 2d       	mov	r26, r0
     5dc:	0b 01       	movw	r0, r22
     5de:	b9 01       	movw	r22, r18
     5e0:	90 01       	movw	r18, r0
     5e2:	0c 01       	movw	r0, r24
     5e4:	ca 01       	movw	r24, r20
     5e6:	a0 01       	movw	r20, r0
     5e8:	11 24       	eor	r1, r1
     5ea:	ff 27       	eor	r31, r31
     5ec:	59 1b       	sub	r21, r25
     5ee:	99 f0       	breq	.+38     	; 0x616 <__addsf3x+0x5c>
     5f0:	59 3f       	cpi	r21, 0xF9	; 249
     5f2:	50 f4       	brcc	.+20     	; 0x608 <__addsf3x+0x4e>
     5f4:	50 3e       	cpi	r21, 0xE0	; 224
     5f6:	68 f1       	brcs	.+90     	; 0x652 <__addsf3x+0x98>
     5f8:	1a 16       	cp	r1, r26
     5fa:	f0 40       	sbci	r31, 0x00	; 0
     5fc:	a2 2f       	mov	r26, r18
     5fe:	23 2f       	mov	r18, r19
     600:	34 2f       	mov	r19, r20
     602:	44 27       	eor	r20, r20
     604:	58 5f       	subi	r21, 0xF8	; 248
     606:	f3 cf       	rjmp	.-26     	; 0x5ee <__addsf3x+0x34>
     608:	46 95       	lsr	r20
     60a:	37 95       	ror	r19
     60c:	27 95       	ror	r18
     60e:	a7 95       	ror	r26
     610:	f0 40       	sbci	r31, 0x00	; 0
     612:	53 95       	inc	r21
     614:	c9 f7       	brne	.-14     	; 0x608 <__addsf3x+0x4e>
     616:	7e f4       	brtc	.+30     	; 0x636 <__addsf3x+0x7c>
     618:	1f 16       	cp	r1, r31
     61a:	ba 0b       	sbc	r27, r26
     61c:	62 0b       	sbc	r22, r18
     61e:	73 0b       	sbc	r23, r19
     620:	84 0b       	sbc	r24, r20
     622:	ba f0       	brmi	.+46     	; 0x652 <__addsf3x+0x98>
     624:	91 50       	subi	r25, 0x01	; 1
     626:	a1 f0       	breq	.+40     	; 0x650 <__addsf3x+0x96>
     628:	ff 0f       	add	r31, r31
     62a:	bb 1f       	adc	r27, r27
     62c:	66 1f       	adc	r22, r22
     62e:	77 1f       	adc	r23, r23
     630:	88 1f       	adc	r24, r24
     632:	c2 f7       	brpl	.-16     	; 0x624 <__addsf3x+0x6a>
     634:	0e c0       	rjmp	.+28     	; 0x652 <__addsf3x+0x98>
     636:	ba 0f       	add	r27, r26
     638:	62 1f       	adc	r22, r18
     63a:	73 1f       	adc	r23, r19
     63c:	84 1f       	adc	r24, r20
     63e:	48 f4       	brcc	.+18     	; 0x652 <__addsf3x+0x98>
     640:	87 95       	ror	r24
     642:	77 95       	ror	r23
     644:	67 95       	ror	r22
     646:	b7 95       	ror	r27
     648:	f7 95       	ror	r31
     64a:	9e 3f       	cpi	r25, 0xFE	; 254
     64c:	08 f0       	brcs	.+2      	; 0x650 <__addsf3x+0x96>
     64e:	b3 cf       	rjmp	.-154    	; 0x5b6 <__addsf3+0x1e>
     650:	93 95       	inc	r25
     652:	88 0f       	add	r24, r24
     654:	08 f0       	brcs	.+2      	; 0x658 <__addsf3x+0x9e>
     656:	99 27       	eor	r25, r25
     658:	ee 0f       	add	r30, r30
     65a:	97 95       	ror	r25
     65c:	87 95       	ror	r24
     65e:	08 95       	ret

00000660 <__fixsfsi>:
     660:	04 d0       	rcall	.+8      	; 0x66a <__fixunssfsi>
     662:	68 94       	set
     664:	b1 11       	cpse	r27, r1
     666:	b5 c0       	rjmp	.+362    	; 0x7d2 <__fp_szero>
     668:	08 95       	ret

0000066a <__fixunssfsi>:
     66a:	98 d0       	rcall	.+304    	; 0x79c <__fp_splitA>
     66c:	88 f0       	brcs	.+34     	; 0x690 <__fixunssfsi+0x26>
     66e:	9f 57       	subi	r25, 0x7F	; 127
     670:	90 f0       	brcs	.+36     	; 0x696 <__fixunssfsi+0x2c>
     672:	b9 2f       	mov	r27, r25
     674:	99 27       	eor	r25, r25
     676:	b7 51       	subi	r27, 0x17	; 23
     678:	a0 f0       	brcs	.+40     	; 0x6a2 <__fixunssfsi+0x38>
     67a:	d1 f0       	breq	.+52     	; 0x6b0 <__fixunssfsi+0x46>
     67c:	66 0f       	add	r22, r22
     67e:	77 1f       	adc	r23, r23
     680:	88 1f       	adc	r24, r24
     682:	99 1f       	adc	r25, r25
     684:	1a f0       	brmi	.+6      	; 0x68c <__fixunssfsi+0x22>
     686:	ba 95       	dec	r27
     688:	c9 f7       	brne	.-14     	; 0x67c <__fixunssfsi+0x12>
     68a:	12 c0       	rjmp	.+36     	; 0x6b0 <__fixunssfsi+0x46>
     68c:	b1 30       	cpi	r27, 0x01	; 1
     68e:	81 f0       	breq	.+32     	; 0x6b0 <__fixunssfsi+0x46>
     690:	9f d0       	rcall	.+318    	; 0x7d0 <__fp_zero>
     692:	b1 e0       	ldi	r27, 0x01	; 1
     694:	08 95       	ret
     696:	9c c0       	rjmp	.+312    	; 0x7d0 <__fp_zero>
     698:	67 2f       	mov	r22, r23
     69a:	78 2f       	mov	r23, r24
     69c:	88 27       	eor	r24, r24
     69e:	b8 5f       	subi	r27, 0xF8	; 248
     6a0:	39 f0       	breq	.+14     	; 0x6b0 <__fixunssfsi+0x46>
     6a2:	b9 3f       	cpi	r27, 0xF9	; 249
     6a4:	cc f3       	brlt	.-14     	; 0x698 <__fixunssfsi+0x2e>
     6a6:	86 95       	lsr	r24
     6a8:	77 95       	ror	r23
     6aa:	67 95       	ror	r22
     6ac:	b3 95       	inc	r27
     6ae:	d9 f7       	brne	.-10     	; 0x6a6 <__fixunssfsi+0x3c>
     6b0:	3e f4       	brtc	.+14     	; 0x6c0 <__fixunssfsi+0x56>
     6b2:	90 95       	com	r25
     6b4:	80 95       	com	r24
     6b6:	70 95       	com	r23
     6b8:	61 95       	neg	r22
     6ba:	7f 4f       	sbci	r23, 0xFF	; 255
     6bc:	8f 4f       	sbci	r24, 0xFF	; 255
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
     6c0:	08 95       	ret

000006c2 <__floatunsisf>:
     6c2:	e8 94       	clt
     6c4:	09 c0       	rjmp	.+18     	; 0x6d8 <__floatsisf+0x12>

000006c6 <__floatsisf>:
     6c6:	97 fb       	bst	r25, 7
     6c8:	3e f4       	brtc	.+14     	; 0x6d8 <__floatsisf+0x12>
     6ca:	90 95       	com	r25
     6cc:	80 95       	com	r24
     6ce:	70 95       	com	r23
     6d0:	61 95       	neg	r22
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	8f 4f       	sbci	r24, 0xFF	; 255
     6d6:	9f 4f       	sbci	r25, 0xFF	; 255
     6d8:	99 23       	and	r25, r25
     6da:	a9 f0       	breq	.+42     	; 0x706 <__floatsisf+0x40>
     6dc:	f9 2f       	mov	r31, r25
     6de:	96 e9       	ldi	r25, 0x96	; 150
     6e0:	bb 27       	eor	r27, r27
     6e2:	93 95       	inc	r25
     6e4:	f6 95       	lsr	r31
     6e6:	87 95       	ror	r24
     6e8:	77 95       	ror	r23
     6ea:	67 95       	ror	r22
     6ec:	b7 95       	ror	r27
     6ee:	f1 11       	cpse	r31, r1
     6f0:	f8 cf       	rjmp	.-16     	; 0x6e2 <__floatsisf+0x1c>
     6f2:	fa f4       	brpl	.+62     	; 0x732 <__floatsisf+0x6c>
     6f4:	bb 0f       	add	r27, r27
     6f6:	11 f4       	brne	.+4      	; 0x6fc <__floatsisf+0x36>
     6f8:	60 ff       	sbrs	r22, 0
     6fa:	1b c0       	rjmp	.+54     	; 0x732 <__floatsisf+0x6c>
     6fc:	6f 5f       	subi	r22, 0xFF	; 255
     6fe:	7f 4f       	sbci	r23, 0xFF	; 255
     700:	8f 4f       	sbci	r24, 0xFF	; 255
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	16 c0       	rjmp	.+44     	; 0x732 <__floatsisf+0x6c>
     706:	88 23       	and	r24, r24
     708:	11 f0       	breq	.+4      	; 0x70e <__floatsisf+0x48>
     70a:	96 e9       	ldi	r25, 0x96	; 150
     70c:	11 c0       	rjmp	.+34     	; 0x730 <__floatsisf+0x6a>
     70e:	77 23       	and	r23, r23
     710:	21 f0       	breq	.+8      	; 0x71a <__floatsisf+0x54>
     712:	9e e8       	ldi	r25, 0x8E	; 142
     714:	87 2f       	mov	r24, r23
     716:	76 2f       	mov	r23, r22
     718:	05 c0       	rjmp	.+10     	; 0x724 <__floatsisf+0x5e>
     71a:	66 23       	and	r22, r22
     71c:	71 f0       	breq	.+28     	; 0x73a <__floatsisf+0x74>
     71e:	96 e8       	ldi	r25, 0x86	; 134
     720:	86 2f       	mov	r24, r22
     722:	70 e0       	ldi	r23, 0x00	; 0
     724:	60 e0       	ldi	r22, 0x00	; 0
     726:	2a f0       	brmi	.+10     	; 0x732 <__floatsisf+0x6c>
     728:	9a 95       	dec	r25
     72a:	66 0f       	add	r22, r22
     72c:	77 1f       	adc	r23, r23
     72e:	88 1f       	adc	r24, r24
     730:	da f7       	brpl	.-10     	; 0x728 <__floatsisf+0x62>
     732:	88 0f       	add	r24, r24
     734:	96 95       	lsr	r25
     736:	87 95       	ror	r24
     738:	97 f9       	bld	r25, 7
     73a:	08 95       	ret

0000073c <__fp_inf>:
     73c:	97 f9       	bld	r25, 7
     73e:	9f 67       	ori	r25, 0x7F	; 127
     740:	80 e8       	ldi	r24, 0x80	; 128
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	08 95       	ret

00000748 <__fp_nan>:
     748:	9f ef       	ldi	r25, 0xFF	; 255
     74a:	80 ec       	ldi	r24, 0xC0	; 192
     74c:	08 95       	ret

0000074e <__fp_pscA>:
     74e:	00 24       	eor	r0, r0
     750:	0a 94       	dec	r0
     752:	16 16       	cp	r1, r22
     754:	17 06       	cpc	r1, r23
     756:	18 06       	cpc	r1, r24
     758:	09 06       	cpc	r0, r25
     75a:	08 95       	ret

0000075c <__fp_pscB>:
     75c:	00 24       	eor	r0, r0
     75e:	0a 94       	dec	r0
     760:	12 16       	cp	r1, r18
     762:	13 06       	cpc	r1, r19
     764:	14 06       	cpc	r1, r20
     766:	05 06       	cpc	r0, r21
     768:	08 95       	ret

0000076a <__fp_round>:
     76a:	09 2e       	mov	r0, r25
     76c:	03 94       	inc	r0
     76e:	00 0c       	add	r0, r0
     770:	11 f4       	brne	.+4      	; 0x776 <__fp_round+0xc>
     772:	88 23       	and	r24, r24
     774:	52 f0       	brmi	.+20     	; 0x78a <__fp_round+0x20>
     776:	bb 0f       	add	r27, r27
     778:	40 f4       	brcc	.+16     	; 0x78a <__fp_round+0x20>
     77a:	bf 2b       	or	r27, r31
     77c:	11 f4       	brne	.+4      	; 0x782 <__fp_round+0x18>
     77e:	60 ff       	sbrs	r22, 0
     780:	04 c0       	rjmp	.+8      	; 0x78a <__fp_round+0x20>
     782:	6f 5f       	subi	r22, 0xFF	; 255
     784:	7f 4f       	sbci	r23, 0xFF	; 255
     786:	8f 4f       	sbci	r24, 0xFF	; 255
     788:	9f 4f       	sbci	r25, 0xFF	; 255
     78a:	08 95       	ret

0000078c <__fp_split3>:
     78c:	57 fd       	sbrc	r21, 7
     78e:	90 58       	subi	r25, 0x80	; 128
     790:	44 0f       	add	r20, r20
     792:	55 1f       	adc	r21, r21
     794:	59 f0       	breq	.+22     	; 0x7ac <__fp_splitA+0x10>
     796:	5f 3f       	cpi	r21, 0xFF	; 255
     798:	71 f0       	breq	.+28     	; 0x7b6 <__fp_splitA+0x1a>
     79a:	47 95       	ror	r20

0000079c <__fp_splitA>:
     79c:	88 0f       	add	r24, r24
     79e:	97 fb       	bst	r25, 7
     7a0:	99 1f       	adc	r25, r25
     7a2:	61 f0       	breq	.+24     	; 0x7bc <__fp_splitA+0x20>
     7a4:	9f 3f       	cpi	r25, 0xFF	; 255
     7a6:	79 f0       	breq	.+30     	; 0x7c6 <__fp_splitA+0x2a>
     7a8:	87 95       	ror	r24
     7aa:	08 95       	ret
     7ac:	12 16       	cp	r1, r18
     7ae:	13 06       	cpc	r1, r19
     7b0:	14 06       	cpc	r1, r20
     7b2:	55 1f       	adc	r21, r21
     7b4:	f2 cf       	rjmp	.-28     	; 0x79a <__fp_split3+0xe>
     7b6:	46 95       	lsr	r20
     7b8:	f1 df       	rcall	.-30     	; 0x79c <__fp_splitA>
     7ba:	08 c0       	rjmp	.+16     	; 0x7cc <__fp_splitA+0x30>
     7bc:	16 16       	cp	r1, r22
     7be:	17 06       	cpc	r1, r23
     7c0:	18 06       	cpc	r1, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	f1 cf       	rjmp	.-30     	; 0x7a8 <__fp_splitA+0xc>
     7c6:	86 95       	lsr	r24
     7c8:	71 05       	cpc	r23, r1
     7ca:	61 05       	cpc	r22, r1
     7cc:	08 94       	sec
     7ce:	08 95       	ret

000007d0 <__fp_zero>:
     7d0:	e8 94       	clt

000007d2 <__fp_szero>:
     7d2:	bb 27       	eor	r27, r27
     7d4:	66 27       	eor	r22, r22
     7d6:	77 27       	eor	r23, r23
     7d8:	cb 01       	movw	r24, r22
     7da:	97 f9       	bld	r25, 7
     7dc:	08 95       	ret

000007de <__gesf2>:
     7de:	03 d0       	rcall	.+6      	; 0x7e6 <__fp_cmp>
     7e0:	08 f4       	brcc	.+2      	; 0x7e4 <__gesf2+0x6>
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	08 95       	ret

000007e6 <__fp_cmp>:
     7e6:	99 0f       	add	r25, r25
     7e8:	00 08       	sbc	r0, r0
     7ea:	55 0f       	add	r21, r21
     7ec:	aa 0b       	sbc	r26, r26
     7ee:	e0 e8       	ldi	r30, 0x80	; 128
     7f0:	fe ef       	ldi	r31, 0xFE	; 254
     7f2:	16 16       	cp	r1, r22
     7f4:	17 06       	cpc	r1, r23
     7f6:	e8 07       	cpc	r30, r24
     7f8:	f9 07       	cpc	r31, r25
     7fa:	c0 f0       	brcs	.+48     	; 0x82c <__fp_cmp+0x46>
     7fc:	12 16       	cp	r1, r18
     7fe:	13 06       	cpc	r1, r19
     800:	e4 07       	cpc	r30, r20
     802:	f5 07       	cpc	r31, r21
     804:	98 f0       	brcs	.+38     	; 0x82c <__fp_cmp+0x46>
     806:	62 1b       	sub	r22, r18
     808:	73 0b       	sbc	r23, r19
     80a:	84 0b       	sbc	r24, r20
     80c:	95 0b       	sbc	r25, r21
     80e:	39 f4       	brne	.+14     	; 0x81e <__fp_cmp+0x38>
     810:	0a 26       	eor	r0, r26
     812:	61 f0       	breq	.+24     	; 0x82c <__fp_cmp+0x46>
     814:	23 2b       	or	r18, r19
     816:	24 2b       	or	r18, r20
     818:	25 2b       	or	r18, r21
     81a:	21 f4       	brne	.+8      	; 0x824 <__fp_cmp+0x3e>
     81c:	08 95       	ret
     81e:	0a 26       	eor	r0, r26
     820:	09 f4       	brne	.+2      	; 0x824 <__fp_cmp+0x3e>
     822:	a1 40       	sbci	r26, 0x01	; 1
     824:	a6 95       	lsr	r26
     826:	8f ef       	ldi	r24, 0xFF	; 255
     828:	81 1d       	adc	r24, r1
     82a:	81 1d       	adc	r24, r1
     82c:	08 95       	ret

0000082e <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     82e:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     830:	91 8d       	ldd	r25, Z+25	; 0x19
     832:	22 8d       	ldd	r18, Z+26	; 0x1a
     834:	89 2f       	mov	r24, r25
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	80 5c       	subi	r24, 0xC0	; 192
     83a:	9f 4f       	sbci	r25, 0xFF	; 255
     83c:	82 1b       	sub	r24, r18
     83e:	91 09       	sbc	r25, r1
}
     840:	8f 73       	andi	r24, 0x3F	; 63
     842:	99 27       	eor	r25, r25
     844:	08 95       	ret

00000846 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     846:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     848:	91 8d       	ldd	r25, Z+25	; 0x19
     84a:	82 8d       	ldd	r24, Z+26	; 0x1a
     84c:	98 17       	cp	r25, r24
     84e:	31 f0       	breq	.+12     	; 0x85c <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     850:	82 8d       	ldd	r24, Z+26	; 0x1a
     852:	e8 0f       	add	r30, r24
     854:	f1 1d       	adc	r31, r1
     856:	85 8d       	ldd	r24, Z+29	; 0x1d
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     860:	08 95       	ret

00000862 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     862:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     864:	91 8d       	ldd	r25, Z+25	; 0x19
     866:	82 8d       	ldd	r24, Z+26	; 0x1a
     868:	98 17       	cp	r25, r24
     86a:	61 f0       	breq	.+24     	; 0x884 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     86c:	82 8d       	ldd	r24, Z+26	; 0x1a
     86e:	df 01       	movw	r26, r30
     870:	a8 0f       	add	r26, r24
     872:	b1 1d       	adc	r27, r1
     874:	5d 96       	adiw	r26, 0x1d	; 29
     876:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     878:	92 8d       	ldd	r25, Z+26	; 0x1a
     87a:	9f 5f       	subi	r25, 0xFF	; 255
     87c:	9f 73       	andi	r25, 0x3F	; 63
     87e:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     884:	8f ef       	ldi	r24, 0xFF	; 255
     886:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     888:	08 95       	ret

0000088a <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     88a:	fc 01       	movw	r30, r24
     88c:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     88e:	44 8d       	ldd	r20, Z+28	; 0x1c
     890:	25 2f       	mov	r18, r21
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	84 2f       	mov	r24, r20
     896:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     898:	82 1b       	sub	r24, r18
     89a:	93 0b       	sbc	r25, r19
     89c:	54 17       	cp	r21, r20
     89e:	10 f0       	brcs	.+4      	; 0x8a4 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     8a0:	cf 96       	adiw	r24, 0x3f	; 63
     8a2:	08 95       	ret
  return tail - head - 1;
     8a4:	01 97       	sbiw	r24, 0x01	; 1
}
     8a6:	08 95       	ret

000008a8 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     8a8:	86 ee       	ldi	r24, 0xE6	; 230
     8aa:	95 e0       	ldi	r25, 0x05	; 5
     8ac:	89 2b       	or	r24, r25
     8ae:	39 f0       	breq	.+14     	; 0x8be <_Z14serialEventRunv+0x16>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	89 2b       	or	r24, r25
     8b6:	19 f0       	breq	.+6      	; 0x8be <_Z14serialEventRunv+0x16>
     8b8:	89 d1       	rcall	.+786    	; 0xbcc <_Z17Serial0_availablev>
     8ba:	81 11       	cpse	r24, r1
     8bc:	25 c0       	rjmp	.+74     	; 0x908 <_Z14serialEventRunv+0x60>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	89 2b       	or	r24, r25
     8c4:	41 f0       	breq	.+16     	; 0x8d6 <_Z14serialEventRunv+0x2e>
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	89 2b       	or	r24, r25
     8cc:	21 f0       	breq	.+8      	; 0x8d6 <_Z14serialEventRunv+0x2e>
     8ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     8d2:	81 11       	cpse	r24, r1
     8d4:	1c c0       	rjmp	.+56     	; 0x90e <_Z14serialEventRunv+0x66>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	89 2b       	or	r24, r25
     8dc:	41 f0       	breq	.+16     	; 0x8ee <_Z14serialEventRunv+0x46>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	89 2b       	or	r24, r25
     8e4:	21 f0       	breq	.+8      	; 0x8ee <_Z14serialEventRunv+0x46>
     8e6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     8ea:	81 11       	cpse	r24, r1
     8ec:	13 c0       	rjmp	.+38     	; 0x914 <_Z14serialEventRunv+0x6c>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     8ee:	80 e0       	ldi	r24, 0x00	; 0
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	89 2b       	or	r24, r25
     8f4:	a1 f0       	breq	.+40     	; 0x91e <_Z14serialEventRunv+0x76>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	89 2b       	or	r24, r25
     8fc:	81 f0       	breq	.+32     	; 0x91e <_Z14serialEventRunv+0x76>
     8fe:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     902:	81 11       	cpse	r24, r1
     904:	0a c0       	rjmp	.+20     	; 0x91a <_Z14serialEventRunv+0x72>
     906:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     908:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     90c:	d8 cf       	rjmp	.-80     	; 0x8be <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     90e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     912:	e1 cf       	rjmp	.-62     	; 0x8d6 <_Z14serialEventRunv+0x2e>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     914:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     918:	ea cf       	rjmp	.-44     	; 0x8ee <_Z14serialEventRunv+0x46>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     91a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     91e:	08 95       	ret

00000920 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     920:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     922:	84 8d       	ldd	r24, Z+28	; 0x1c
     924:	df 01       	movw	r26, r30
     926:	a8 0f       	add	r26, r24
     928:	b1 1d       	adc	r27, r1
     92a:	a3 5a       	subi	r26, 0xA3	; 163
     92c:	bf 4f       	sbci	r27, 0xFF	; 255
     92e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     930:	84 8d       	ldd	r24, Z+28	; 0x1c
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	8f 73       	andi	r24, 0x3F	; 63
     938:	99 27       	eor	r25, r25
     93a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     93c:	a6 89       	ldd	r26, Z+22	; 0x16
     93e:	b7 89       	ldd	r27, Z+23	; 0x17
     940:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     942:	a0 89       	ldd	r26, Z+16	; 0x10
     944:	b1 89       	ldd	r27, Z+17	; 0x11
     946:	8c 91       	ld	r24, X
     948:	83 70       	andi	r24, 0x03	; 3
     94a:	80 64       	ori	r24, 0x40	; 64
     94c:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     94e:	93 8d       	ldd	r25, Z+27	; 0x1b
     950:	84 8d       	ldd	r24, Z+28	; 0x1c
     952:	98 13       	cpse	r25, r24
     954:	06 c0       	rjmp	.+12     	; 0x962 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     956:	02 88       	ldd	r0, Z+18	; 0x12
     958:	f3 89       	ldd	r31, Z+19	; 0x13
     95a:	e0 2d       	mov	r30, r0
     95c:	80 81       	ld	r24, Z
     95e:	8f 7d       	andi	r24, 0xDF	; 223
     960:	80 83       	st	Z, r24
     962:	08 95       	ret

00000964 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     964:	ef 92       	push	r14
     966:	ff 92       	push	r15
     968:	0f 93       	push	r16
     96a:	1f 93       	push	r17
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	ec 01       	movw	r28, r24
  _written = true;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     976:	9b 8d       	ldd	r25, Y+27	; 0x1b
     978:	8c 8d       	ldd	r24, Y+28	; 0x1c
     97a:	98 13       	cpse	r25, r24
     97c:	05 c0       	rjmp	.+10     	; 0x988 <_ZN14HardwareSerial5writeEh+0x24>
     97e:	e8 89       	ldd	r30, Y+16	; 0x10
     980:	f9 89       	ldd	r31, Y+17	; 0x11
     982:	80 81       	ld	r24, Z
     984:	85 fd       	sbrc	r24, 5
     986:	25 c0       	rjmp	.+74     	; 0x9d2 <_ZN14HardwareSerial5writeEh+0x6e>
     988:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     98a:	0b 8d       	ldd	r16, Y+27	; 0x1b
     98c:	10 e0       	ldi	r17, 0x00	; 0
     98e:	0f 5f       	subi	r16, 0xFF	; 255
     990:	1f 4f       	sbci	r17, 0xFF	; 255
     992:	0f 73       	andi	r16, 0x3F	; 63
     994:	11 27       	eor	r17, r17
     996:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     998:	8c 8d       	ldd	r24, Y+28	; 0x1c
     99a:	e8 12       	cpse	r14, r24
     99c:	0b c0       	rjmp	.+22     	; 0x9b4 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	07 fc       	sbrc	r0, 7
     9a2:	fa cf       	rjmp	.-12     	; 0x998 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     9a4:	e8 89       	ldd	r30, Y+16	; 0x10
     9a6:	f9 89       	ldd	r31, Y+17	; 0x11
     9a8:	80 81       	ld	r24, Z
     9aa:	85 ff       	sbrs	r24, 5
     9ac:	f5 cf       	rjmp	.-22     	; 0x998 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     9ae:	ce 01       	movw	r24, r28
     9b0:	b7 df       	rcall	.-146    	; 0x920 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     9b2:	f2 cf       	rjmp	.-28     	; 0x998 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     9b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b6:	fe 01       	movw	r30, r28
     9b8:	e8 0f       	add	r30, r24
     9ba:	f1 1d       	adc	r31, r1
     9bc:	e3 5a       	subi	r30, 0xA3	; 163
     9be:	ff 4f       	sbci	r31, 0xFF	; 255
     9c0:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9c2:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     9c4:	f8 94       	cli
    _tx_buffer_head = i;
     9c6:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     9c8:	ea 89       	ldd	r30, Y+18	; 0x12
     9ca:	fb 89       	ldd	r31, Y+19	; 0x13
     9cc:	80 81       	ld	r24, Z
     9ce:	80 62       	ori	r24, 0x20	; 32
     9d0:	0a c0       	rjmp	.+20     	; 0x9e6 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     9d2:	9f b7       	in	r25, 0x3f	; 63
     9d4:	f8 94       	cli
      *_udr = c;
     9d6:	ee 89       	ldd	r30, Y+22	; 0x16
     9d8:	ff 89       	ldd	r31, Y+23	; 0x17
     9da:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9dc:	e8 89       	ldd	r30, Y+16	; 0x10
     9de:	f9 89       	ldd	r31, Y+17	; 0x11
     9e0:	80 81       	ld	r24, Z
     9e2:	83 70       	andi	r24, 0x03	; 3
     9e4:	80 64       	ori	r24, 0x40	; 64
     9e6:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     9e8:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	1f 91       	pop	r17
     9f4:	0f 91       	pop	r16
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	08 95       	ret

000009fc <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a02:	88 8d       	ldd	r24, Y+24	; 0x18
     a04:	88 23       	and	r24, r24
     a06:	c1 f0       	breq	.+48     	; 0xa38 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a08:	ea 89       	ldd	r30, Y+18	; 0x12
     a0a:	fb 89       	ldd	r31, Y+19	; 0x13
     a0c:	80 81       	ld	r24, Z
     a0e:	85 fd       	sbrc	r24, 5
     a10:	05 c0       	rjmp	.+10     	; 0xa1c <_ZN14HardwareSerial5flushEv+0x20>
     a12:	a8 89       	ldd	r26, Y+16	; 0x10
     a14:	b9 89       	ldd	r27, Y+17	; 0x11
     a16:	8c 91       	ld	r24, X
     a18:	86 fd       	sbrc	r24, 6
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	07 fc       	sbrc	r0, 7
     a20:	f5 cf       	rjmp	.-22     	; 0xa0c <_ZN14HardwareSerial5flushEv+0x10>
     a22:	80 81       	ld	r24, Z
     a24:	85 ff       	sbrs	r24, 5
     a26:	f2 cf       	rjmp	.-28     	; 0xa0c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a28:	a8 89       	ldd	r26, Y+16	; 0x10
     a2a:	b9 89       	ldd	r27, Y+17	; 0x11
     a2c:	8c 91       	ld	r24, X
     a2e:	85 ff       	sbrs	r24, 5
     a30:	ed cf       	rjmp	.-38     	; 0xa0c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a32:	ce 01       	movw	r24, r28
     a34:	75 df       	rcall	.-278    	; 0x920 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a36:	e8 cf       	rjmp	.-48     	; 0xa08 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a3e:	cf 92       	push	r12
     a40:	df 92       	push	r13
     a42:	ef 92       	push	r14
     a44:	ff 92       	push	r15
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	ec 01       	movw	r28, r24
     a4e:	6a 01       	movw	r12, r20
     a50:	7b 01       	movw	r14, r22
     a52:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     a54:	e8 89       	ldd	r30, Y+16	; 0x10
     a56:	f9 89       	ldd	r31, Y+17	; 0x11
     a58:	82 e0       	ldi	r24, 0x02	; 2
     a5a:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a5c:	41 15       	cp	r20, r1
     a5e:	51 4e       	sbci	r21, 0xE1	; 225
     a60:	61 05       	cpc	r22, r1
     a62:	71 05       	cpc	r23, r1
     a64:	b1 f0       	breq	.+44     	; 0xa92 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	79 e0       	ldi	r23, 0x09	; 9
     a6a:	8d e3       	ldi	r24, 0x3D	; 61
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a7 01       	movw	r20, r14
     a70:	96 01       	movw	r18, r12
     a72:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
     a76:	da 01       	movw	r26, r20
     a78:	c9 01       	movw	r24, r18
     a7a:	01 97       	sbiw	r24, 0x01	; 1
     a7c:	a1 09       	sbc	r26, r1
     a7e:	b1 09       	sbc	r27, r1
     a80:	b6 95       	lsr	r27
     a82:	a7 95       	ror	r26
     a84:	97 95       	ror	r25
     a86:	87 95       	ror	r24
     a88:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     a8a:	21 15       	cp	r18, r1
     a8c:	80 e1       	ldi	r24, 0x10	; 16
     a8e:	38 07       	cpc	r19, r24
     a90:	a8 f0       	brcs	.+42     	; 0xabc <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     a92:	e8 89       	ldd	r30, Y+16	; 0x10
     a94:	f9 89       	ldd	r31, Y+17	; 0x11
     a96:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a98:	60 e8       	ldi	r22, 0x80	; 128
     a9a:	74 e8       	ldi	r23, 0x84	; 132
     a9c:	8e e1       	ldi	r24, 0x1E	; 30
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	a7 01       	movw	r20, r14
     aa2:	96 01       	movw	r18, r12
     aa4:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
     aa8:	da 01       	movw	r26, r20
     aaa:	c9 01       	movw	r24, r18
     aac:	01 97       	sbiw	r24, 0x01	; 1
     aae:	a1 09       	sbc	r26, r1
     ab0:	b1 09       	sbc	r27, r1
     ab2:	b6 95       	lsr	r27
     ab4:	a7 95       	ror	r26
     ab6:	97 95       	ror	r25
     ab8:	87 95       	ror	r24
     aba:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     abc:	ec 85       	ldd	r30, Y+12	; 0x0c
     abe:	fd 85       	ldd	r31, Y+13	; 0x0d
     ac0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     ac2:	ee 85       	ldd	r30, Y+14	; 0x0e
     ac4:	ff 85       	ldd	r31, Y+15	; 0x0f
     ac6:	20 83       	st	Z, r18

  _written = false;
     ac8:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     aca:	ec 89       	ldd	r30, Y+20	; 0x14
     acc:	fd 89       	ldd	r31, Y+21	; 0x15
     ace:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     ad0:	ea 89       	ldd	r30, Y+18	; 0x12
     ad2:	fb 89       	ldd	r31, Y+19	; 0x13
     ad4:	80 81       	ld	r24, Z
     ad6:	80 61       	ori	r24, 0x10	; 16
     ad8:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     ada:	ea 89       	ldd	r30, Y+18	; 0x12
     adc:	fb 89       	ldd	r31, Y+19	; 0x13
     ade:	80 81       	ld	r24, Z
     ae0:	88 60       	ori	r24, 0x08	; 8
     ae2:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     ae4:	ea 89       	ldd	r30, Y+18	; 0x12
     ae6:	fb 89       	ldd	r31, Y+19	; 0x13
     ae8:	80 81       	ld	r24, Z
     aea:	80 68       	ori	r24, 0x80	; 128
     aec:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     aee:	ea 89       	ldd	r30, Y+18	; 0x12
     af0:	fb 89       	ldd	r31, Y+19	; 0x13
     af2:	80 81       	ld	r24, Z
     af4:	8f 7d       	andi	r24, 0xDF	; 223
     af6:	80 83       	st	Z, r24
}
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	ff 90       	pop	r15
     b00:	ef 90       	pop	r14
     b02:	df 90       	pop	r13
     b04:	cf 90       	pop	r12
     b06:	08 95       	ret

00000b08 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	08 95       	ret

00000b0e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b0e:	1f 92       	push	r1
     b10:	0f 92       	push	r0
     b12:	0f b6       	in	r0, 0x3f	; 63
     b14:	0f 92       	push	r0
     b16:	11 24       	eor	r1, r1
     b18:	0b b6       	in	r0, 0x3b	; 59
     b1a:	0f 92       	push	r0
     b1c:	2f 93       	push	r18
     b1e:	8f 93       	push	r24
     b20:	9f 93       	push	r25
     b22:	ef 93       	push	r30
     b24:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b26:	e0 91 f3 04 	lds	r30, 0x04F3	; 0x8004f3 <Serial+0x10>
     b2a:	f0 91 f4 04 	lds	r31, 0x04F4	; 0x8004f4 <Serial+0x11>
     b2e:	80 81       	ld	r24, Z
     b30:	e0 91 f9 04 	lds	r30, 0x04F9	; 0x8004f9 <Serial+0x16>
     b34:	f0 91 fa 04 	lds	r31, 0x04FA	; 0x8004fa <Serial+0x17>
     b38:	82 fd       	sbrc	r24, 2
     b3a:	12 c0       	rjmp	.+36     	; 0xb60 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b3c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b3e:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <Serial+0x19>
     b42:	8f 5f       	subi	r24, 0xFF	; 255
     b44:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     b46:	20 91 fd 04 	lds	r18, 0x04FD	; 0x8004fd <Serial+0x1a>
     b4a:	82 17       	cp	r24, r18
     b4c:	51 f0       	breq	.+20     	; 0xb62 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     b4e:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <Serial+0x19>
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	ed 51       	subi	r30, 0x1D	; 29
     b56:	fb 4f       	sbci	r31, 0xFB	; 251
     b58:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     b5a:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <Serial+0x19>
     b5e:	01 c0       	rjmp	.+2      	; 0xb62 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     b60:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     b62:	ff 91       	pop	r31
     b64:	ef 91       	pop	r30
     b66:	9f 91       	pop	r25
     b68:	8f 91       	pop	r24
     b6a:	2f 91       	pop	r18
     b6c:	0f 90       	pop	r0
     b6e:	0b be       	out	0x3b, r0	; 59
     b70:	0f 90       	pop	r0
     b72:	0f be       	out	0x3f, r0	; 63
     b74:	0f 90       	pop	r0
     b76:	1f 90       	pop	r1
     b78:	18 95       	reti

00000b7a <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     b7a:	1f 92       	push	r1
     b7c:	0f 92       	push	r0
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	0f 92       	push	r0
     b82:	11 24       	eor	r1, r1
     b84:	0b b6       	in	r0, 0x3b	; 59
     b86:	0f 92       	push	r0
     b88:	2f 93       	push	r18
     b8a:	3f 93       	push	r19
     b8c:	4f 93       	push	r20
     b8e:	5f 93       	push	r21
     b90:	6f 93       	push	r22
     b92:	7f 93       	push	r23
     b94:	8f 93       	push	r24
     b96:	9f 93       	push	r25
     b98:	af 93       	push	r26
     b9a:	bf 93       	push	r27
     b9c:	ef 93       	push	r30
     b9e:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     ba0:	83 ee       	ldi	r24, 0xE3	; 227
     ba2:	94 e0       	ldi	r25, 0x04	; 4
     ba4:	bd de       	rcall	.-646    	; 0x920 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	0b be       	out	0x3b, r0	; 59
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     bcc:	83 ee       	ldi	r24, 0xE3	; 227
     bce:	94 e0       	ldi	r25, 0x04	; 4
     bd0:	2e de       	rcall	.-932    	; 0x82e <_ZN14HardwareSerial9availableEv>
     bd2:	21 e0       	ldi	r18, 0x01	; 1
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f4       	brne	.+2      	; 0xbda <_Z17Serial0_availablev+0xe>
     bd8:	20 e0       	ldi	r18, 0x00	; 0
}
     bda:	82 2f       	mov	r24, r18
     bdc:	08 95       	ret

00000bde <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     bde:	e3 ee       	ldi	r30, 0xE3	; 227
     be0:	f4 e0       	ldi	r31, 0x04	; 4
     be2:	13 82       	std	Z+3, r1	; 0x03
     be4:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     be6:	88 ee       	ldi	r24, 0xE8	; 232
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	84 83       	std	Z+4, r24	; 0x04
     bf0:	95 83       	std	Z+5, r25	; 0x05
     bf2:	a6 83       	std	Z+6, r26	; 0x06
     bf4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     bf6:	84 ef       	ldi	r24, 0xF4	; 244
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	91 83       	std	Z+1, r25	; 0x01
     bfc:	80 83       	st	Z, r24
     bfe:	85 ec       	ldi	r24, 0xC5	; 197
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	95 87       	std	Z+13, r25	; 0x0d
     c04:	84 87       	std	Z+12, r24	; 0x0c
     c06:	84 ec       	ldi	r24, 0xC4	; 196
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	97 87       	std	Z+15, r25	; 0x0f
     c0c:	86 87       	std	Z+14, r24	; 0x0e
     c0e:	80 ec       	ldi	r24, 0xC0	; 192
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	91 8b       	std	Z+17, r25	; 0x11
     c14:	80 8b       	std	Z+16, r24	; 0x10
     c16:	81 ec       	ldi	r24, 0xC1	; 193
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	93 8b       	std	Z+19, r25	; 0x13
     c1c:	82 8b       	std	Z+18, r24	; 0x12
     c1e:	82 ec       	ldi	r24, 0xC2	; 194
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	95 8b       	std	Z+21, r25	; 0x15
     c24:	84 8b       	std	Z+20, r24	; 0x14
     c26:	86 ec       	ldi	r24, 0xC6	; 198
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	97 8b       	std	Z+23, r25	; 0x17
     c2c:	86 8b       	std	Z+22, r24	; 0x16
     c2e:	11 8e       	std	Z+25, r1	; 0x19
     c30:	12 8e       	std	Z+26, r1	; 0x1a
     c32:	13 8e       	std	Z+27, r1	; 0x1b
     c34:	14 8e       	std	Z+28, r1	; 0x1c
     c36:	08 95       	ret

00000c38 <initVariant>:
     c38:	08 95       	ret

00000c3a <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     c3a:	c4 d2       	rcall	.+1416   	; 0x11c4 <init>

	initVariant();
     c3c:	fd df       	rcall	.-6      	; 0xc38 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     c3e:	0a dc       	rcall	.-2028   	; 0x454 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     c40:	c4 e5       	ldi	r28, 0x54	; 84
     c42:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     c44:	f2 db       	rcall	.-2076   	; 0x42a <loop>
		if (serialEventRun) serialEventRun();
     c46:	20 97       	sbiw	r28, 0x00	; 0
     c48:	e9 f3       	breq	.-6      	; 0xc44 <main+0xa>
     c4a:	2e de       	rcall	.-932    	; 0x8a8 <_Z14serialEventRunv>
     c4c:	fb cf       	rjmp	.-10     	; 0xc44 <main+0xa>

00000c4e <_ZN5Print5writeEPKhj>:
     c4e:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	6c 01       	movw	r12, r24
     c60:	7a 01       	movw	r14, r20
     c62:	8b 01       	movw	r16, r22
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
     c68:	ce 15       	cp	r28, r14
     c6a:	df 05       	cpc	r29, r15
     c6c:	81 f0       	breq	.+32     	; 0xc8e <_ZN5Print5writeEPKhj+0x40>
     c6e:	d8 01       	movw	r26, r16
     c70:	6d 91       	ld	r22, X+
     c72:	8d 01       	movw	r16, r26
     c74:	d6 01       	movw	r26, r12
     c76:	ed 91       	ld	r30, X+
     c78:	fc 91       	ld	r31, X
     c7a:	01 90       	ld	r0, Z+
     c7c:	f0 81       	ld	r31, Z
     c7e:	e0 2d       	mov	r30, r0
     c80:	c6 01       	movw	r24, r12
     c82:	19 95       	eicall
     c84:	89 2b       	or	r24, r25
     c86:	11 f0       	breq	.+4      	; 0xc8c <_ZN5Print5writeEPKhj+0x3e>
     c88:	21 96       	adiw	r28, 0x01	; 1
     c8a:	ee cf       	rjmp	.-36     	; 0xc68 <_ZN5Print5writeEPKhj+0x1a>
     c8c:	7e 01       	movw	r14, r28
     c8e:	c7 01       	movw	r24, r14
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	ff 90       	pop	r15
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	08 95       	ret

00000ca2 <_ZN5Print5writeEPKc>:
     ca2:	61 15       	cp	r22, r1
     ca4:	71 05       	cpc	r23, r1
     ca6:	79 f0       	breq	.+30     	; 0xcc6 <_ZN5Print5writeEPKc+0x24>
     ca8:	fb 01       	movw	r30, r22
     caa:	01 90       	ld	r0, Z+
     cac:	00 20       	and	r0, r0
     cae:	e9 f7       	brne	.-6      	; 0xcaa <_ZN5Print5writeEPKc+0x8>
     cb0:	31 97       	sbiw	r30, 0x01	; 1
     cb2:	af 01       	movw	r20, r30
     cb4:	46 1b       	sub	r20, r22
     cb6:	57 0b       	sbc	r21, r23
     cb8:	dc 01       	movw	r26, r24
     cba:	ed 91       	ld	r30, X+
     cbc:	fc 91       	ld	r31, X
     cbe:	02 80       	ldd	r0, Z+2	; 0x02
     cc0:	f3 81       	ldd	r31, Z+3	; 0x03
     cc2:	e0 2d       	mov	r30, r0
     cc4:	19 94       	eijmp
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	08 95       	ret

00000ccc <_ZN5Print5printERK6String>:
     ccc:	db 01       	movw	r26, r22
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	4d 91       	ld	r20, X+
     cd2:	5c 91       	ld	r21, X
     cd4:	15 97       	sbiw	r26, 0x05	; 5
     cd6:	6d 91       	ld	r22, X+
     cd8:	7c 91       	ld	r23, X
     cda:	dc 01       	movw	r26, r24
     cdc:	ed 91       	ld	r30, X+
     cde:	fc 91       	ld	r31, X
     ce0:	02 80       	ldd	r0, Z+2	; 0x02
     ce2:	f3 81       	ldd	r31, Z+3	; 0x03
     ce4:	e0 2d       	mov	r30, r0
     ce6:	19 94       	eijmp

00000ce8 <_ZN5Print5printEPKc>:
     ce8:	dc cf       	rjmp	.-72     	; 0xca2 <_ZN5Print5writeEPKc>

00000cea <_ZN5Print5printEc>:
     cea:	dc 01       	movw	r26, r24
     cec:	ed 91       	ld	r30, X+
     cee:	fc 91       	ld	r31, X
     cf0:	01 90       	ld	r0, Z+
     cf2:	f0 81       	ld	r31, Z
     cf4:	e0 2d       	mov	r30, r0
     cf6:	19 94       	eijmp

00000cf8 <_ZN5Print7printlnEv>:
     cf8:	62 e0       	ldi	r22, 0x02	; 2
     cfa:	73 e0       	ldi	r23, 0x03	; 3
     cfc:	d2 cf       	rjmp	.-92     	; 0xca2 <_ZN5Print5writeEPKc>

00000cfe <_ZN5Print7printlnERK6String>:
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	ec 01       	movw	r28, r24
     d08:	e1 df       	rcall	.-62     	; 0xccc <_ZN5Print5printERK6String>
     d0a:	8c 01       	movw	r16, r24
     d0c:	ce 01       	movw	r24, r28
     d0e:	f4 df       	rcall	.-24     	; 0xcf8 <_ZN5Print7printlnEv>
     d10:	80 0f       	add	r24, r16
     d12:	91 1f       	adc	r25, r17
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <_ZN5Print7printlnEPKc>:
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ec 01       	movw	r28, r24
     d28:	bc df       	rcall	.-136    	; 0xca2 <_ZN5Print5writeEPKc>
     d2a:	8c 01       	movw	r16, r24
     d2c:	ce 01       	movw	r24, r28
     d2e:	e4 df       	rcall	.-56     	; 0xcf8 <_ZN5Print7printlnEv>
     d30:	80 0f       	add	r24, r16
     d32:	91 1f       	adc	r25, r17
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	08 95       	ret

00000d3e <_ZN5Print11printNumberEmh>:
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	cd b7       	in	r28, 0x3d	; 61
     d54:	de b7       	in	r29, 0x3e	; 62
     d56:	a1 97       	sbiw	r28, 0x21	; 33
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	7c 01       	movw	r14, r24
     d64:	fa 01       	movw	r30, r20
     d66:	cb 01       	movw	r24, r22
     d68:	19 a2       	std	Y+33, r1	; 0x21
     d6a:	22 30       	cpi	r18, 0x02	; 2
     d6c:	08 f4       	brcc	.+2      	; 0xd70 <_ZN5Print11printNumberEmh+0x32>
     d6e:	2a e0       	ldi	r18, 0x0A	; 10
     d70:	8e 01       	movw	r16, r28
     d72:	0f 5d       	subi	r16, 0xDF	; 223
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	82 2e       	mov	r8, r18
     d78:	91 2c       	mov	r9, r1
     d7a:	a1 2c       	mov	r10, r1
     d7c:	b1 2c       	mov	r11, r1
     d7e:	bf 01       	movw	r22, r30
     d80:	a5 01       	movw	r20, r10
     d82:	94 01       	movw	r18, r8
     d84:	0e 94 67 14 	call	0x28ce	; 0x28ce <__udivmodsi4>
     d88:	f9 01       	movw	r30, r18
     d8a:	ca 01       	movw	r24, r20
     d8c:	01 50       	subi	r16, 0x01	; 1
     d8e:	11 09       	sbc	r17, r1
     d90:	6a 30       	cpi	r22, 0x0A	; 10
     d92:	10 f4       	brcc	.+4      	; 0xd98 <_ZN5Print11printNumberEmh+0x5a>
     d94:	60 5d       	subi	r22, 0xD0	; 208
     d96:	01 c0       	rjmp	.+2      	; 0xd9a <_ZN5Print11printNumberEmh+0x5c>
     d98:	69 5c       	subi	r22, 0xC9	; 201
     d9a:	d8 01       	movw	r26, r16
     d9c:	6c 93       	st	X, r22
     d9e:	23 2b       	or	r18, r19
     da0:	24 2b       	or	r18, r20
     da2:	25 2b       	or	r18, r21
     da4:	61 f7       	brne	.-40     	; 0xd7e <_ZN5Print11printNumberEmh+0x40>
     da6:	b8 01       	movw	r22, r16
     da8:	c7 01       	movw	r24, r14
     daa:	7b df       	rcall	.-266    	; 0xca2 <_ZN5Print5writeEPKc>
     dac:	a1 96       	adiw	r28, 0x21	; 33
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	bf 90       	pop	r11
     dc6:	af 90       	pop	r10
     dc8:	9f 90       	pop	r9
     dca:	8f 90       	pop	r8
     dcc:	08 95       	ret

00000dce <_ZN5Print5printEmi>:
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	41 f4       	brne	.+16     	; 0xde4 <_ZN5Print5printEmi+0x16>
     dd4:	dc 01       	movw	r26, r24
     dd6:	ed 91       	ld	r30, X+
     dd8:	fc 91       	ld	r31, X
     dda:	01 90       	ld	r0, Z+
     ddc:	f0 81       	ld	r31, Z
     dde:	e0 2d       	mov	r30, r0
     de0:	64 2f       	mov	r22, r20
     de2:	19 94       	eijmp
     de4:	ac cf       	rjmp	.-168    	; 0xd3e <_ZN5Print11printNumberEmh>

00000de6 <_ZN5Print5printEji>:
     de6:	9a 01       	movw	r18, r20
     de8:	ab 01       	movw	r20, r22
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	70 e0       	ldi	r23, 0x00	; 0
     dee:	ef cf       	rjmp	.-34     	; 0xdce <_ZN5Print5printEmi>

00000df0 <_ZN5Print5printEli>:
     df0:	cf 92       	push	r12
     df2:	df 92       	push	r13
     df4:	ef 92       	push	r14
     df6:	ff 92       	push	r15
     df8:	0f 93       	push	r16
     dfa:	1f 93       	push	r17
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
     e00:	21 15       	cp	r18, r1
     e02:	31 05       	cpc	r19, r1
     e04:	81 f4       	brne	.+32     	; 0xe26 <_ZN5Print5printEli+0x36>
     e06:	dc 01       	movw	r26, r24
     e08:	ed 91       	ld	r30, X+
     e0a:	fc 91       	ld	r31, X
     e0c:	01 90       	ld	r0, Z+
     e0e:	f0 81       	ld	r31, Z
     e10:	e0 2d       	mov	r30, r0
     e12:	64 2f       	mov	r22, r20
     e14:	df 91       	pop	r29
     e16:	cf 91       	pop	r28
     e18:	1f 91       	pop	r17
     e1a:	0f 91       	pop	r16
     e1c:	ff 90       	pop	r15
     e1e:	ef 90       	pop	r14
     e20:	df 90       	pop	r13
     e22:	cf 90       	pop	r12
     e24:	19 94       	eijmp
     e26:	2a 30       	cpi	r18, 0x0A	; 10
     e28:	31 05       	cpc	r19, r1
     e2a:	f1 f4       	brne	.+60     	; 0xe68 <_ZN5Print5printEli+0x78>
     e2c:	77 ff       	sbrs	r23, 7
     e2e:	1b c0       	rjmp	.+54     	; 0xe66 <_ZN5Print5printEli+0x76>
     e30:	6a 01       	movw	r12, r20
     e32:	7b 01       	movw	r14, r22
     e34:	ec 01       	movw	r28, r24
     e36:	6d e2       	ldi	r22, 0x2D	; 45
     e38:	58 df       	rcall	.-336    	; 0xcea <_ZN5Print5printEc>
     e3a:	8c 01       	movw	r16, r24
     e3c:	44 27       	eor	r20, r20
     e3e:	55 27       	eor	r21, r21
     e40:	ba 01       	movw	r22, r20
     e42:	4c 19       	sub	r20, r12
     e44:	5d 09       	sbc	r21, r13
     e46:	6e 09       	sbc	r22, r14
     e48:	7f 09       	sbc	r23, r15
     e4a:	2a e0       	ldi	r18, 0x0A	; 10
     e4c:	ce 01       	movw	r24, r28
     e4e:	77 df       	rcall	.-274    	; 0xd3e <_ZN5Print11printNumberEmh>
     e50:	80 0f       	add	r24, r16
     e52:	91 1f       	adc	r25, r17
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	df 90       	pop	r13
     e62:	cf 90       	pop	r12
     e64:	08 95       	ret
     e66:	2a e0       	ldi	r18, 0x0A	; 10
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	ff 90       	pop	r15
     e72:	ef 90       	pop	r14
     e74:	df 90       	pop	r13
     e76:	cf 90       	pop	r12
     e78:	62 cf       	rjmp	.-316    	; 0xd3e <_ZN5Print11printNumberEmh>

00000e7a <_ZN5Print5printEii>:
     e7a:	9a 01       	movw	r18, r20
     e7c:	ab 01       	movw	r20, r22
     e7e:	77 0f       	add	r23, r23
     e80:	66 0b       	sbc	r22, r22
     e82:	77 0b       	sbc	r23, r23
     e84:	b5 cf       	rjmp	.-150    	; 0xdf0 <_ZN5Print5printEli>

00000e86 <_ZN5Print7printlnEii>:
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
     e8e:	ec 01       	movw	r28, r24
     e90:	f4 df       	rcall	.-24     	; 0xe7a <_ZN5Print5printEii>
     e92:	8c 01       	movw	r16, r24
     e94:	ce 01       	movw	r24, r28
     e96:	30 df       	rcall	.-416    	; 0xcf8 <_ZN5Print7printlnEv>
     e98:	80 0f       	add	r24, r16
     e9a:	91 1f       	adc	r25, r17
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	08 95       	ret

00000ea6 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     ea6:	7f 92       	push	r7
     ea8:	8f 92       	push	r8
     eaa:	9f 92       	push	r9
     eac:	af 92       	push	r10
     eae:	bf 92       	push	r11
     eb0:	cf 92       	push	r12
     eb2:	df 92       	push	r13
     eb4:	ef 92       	push	r14
     eb6:	ff 92       	push	r15
     eb8:	0f 93       	push	r16
     eba:	1f 93       	push	r17
     ebc:	cf 93       	push	r28
     ebe:	df 93       	push	r29
     ec0:	8c 01       	movw	r16, r24
     ec2:	6a 01       	movw	r12, r20
     ec4:	7b 01       	movw	r14, r22
     ec6:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
     ec8:	9a 01       	movw	r18, r20
     eca:	ab 01       	movw	r20, r22
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__unordsf2>
     ed4:	88 23       	and	r24, r24
     ed6:	19 f0       	breq	.+6      	; 0xede <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     ed8:	65 e0       	ldi	r22, 0x05	; 5
     eda:	73 e0       	ldi	r23, 0x03	; 3
     edc:	26 c0       	rjmp	.+76     	; 0xf2a <_ZN5Print10printFloatEdh+0x84>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
     ede:	46 01       	movw	r8, r12
     ee0:	57 01       	movw	r10, r14
     ee2:	e8 94       	clt
     ee4:	b7 f8       	bld	r11, 7
     ee6:	2f ef       	ldi	r18, 0xFF	; 255
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	5f e7       	ldi	r21, 0x7F	; 127
     eee:	c5 01       	movw	r24, r10
     ef0:	b4 01       	movw	r22, r8
     ef2:	0e 94 62 14 	call	0x28c4	; 0x28c4 <__unordsf2>
     ef6:	81 11       	cpse	r24, r1
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <_ZN5Print10printFloatEdh+0x6e>
     efa:	2f ef       	ldi	r18, 0xFF	; 255
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	5f e7       	ldi	r21, 0x7F	; 127
     f02:	c5 01       	movw	r24, r10
     f04:	b4 01       	movw	r22, r8
     f06:	0e 94 80 13 	call	0x2700	; 0x2700 <__cmpsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	1c f4       	brge	.+6      	; 0xf14 <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f0e:	69 e0       	ldi	r22, 0x09	; 9
     f10:	73 e0       	ldi	r23, 0x03	; 3
     f12:	0b c0       	rjmp	.+22     	; 0xf2a <_ZN5Print10printFloatEdh+0x84>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
     f14:	2f ef       	ldi	r18, 0xFF	; 255
     f16:	3f ef       	ldi	r19, 0xFF	; 255
     f18:	4f e7       	ldi	r20, 0x7F	; 127
     f1a:	5f e4       	ldi	r21, 0x4F	; 79
     f1c:	c7 01       	movw	r24, r14
     f1e:	b6 01       	movw	r22, r12
     f20:	5e dc       	rcall	.-1860   	; 0x7de <__gesf2>
     f22:	18 16       	cp	r1, r24
     f24:	8c f4       	brge	.+34     	; 0xf48 <_ZN5Print10printFloatEdh+0xa2>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f26:	6d e0       	ldi	r22, 0x0D	; 13
     f28:	73 e0       	ldi	r23, 0x03	; 3
     f2a:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	1f 91       	pop	r17
     f32:	0f 91       	pop	r16
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	bf 90       	pop	r11
     f3e:	af 90       	pop	r10
     f40:	9f 90       	pop	r9
     f42:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
     f44:	7f 90       	pop	r7
     f46:	ad ce       	rjmp	.-678    	; 0xca2 <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
     f48:	2f ef       	ldi	r18, 0xFF	; 255
     f4a:	3f ef       	ldi	r19, 0xFF	; 255
     f4c:	4f e7       	ldi	r20, 0x7F	; 127
     f4e:	5f ec       	ldi	r21, 0xCF	; 207
     f50:	c7 01       	movw	r24, r14
     f52:	b6 01       	movw	r22, r12
     f54:	0e 94 80 13 	call	0x2700	; 0x2700 <__cmpsf2>
     f58:	87 fd       	sbrc	r24, 7
     f5a:	e5 cf       	rjmp	.-54     	; 0xf26 <_ZN5Print10printFloatEdh+0x80>
  
  // Handle negative numbers
  if (number < 0.0)
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	a9 01       	movw	r20, r18
     f62:	c7 01       	movw	r24, r14
     f64:	b6 01       	movw	r22, r12
     f66:	0e 94 80 13 	call	0x2700	; 0x2700 <__cmpsf2>
     f6a:	87 ff       	sbrs	r24, 7
     f6c:	09 c0       	rjmp	.+18     	; 0xf80 <_ZN5Print10printFloatEdh+0xda>
  {
     n += print('-');
     f6e:	6d e2       	ldi	r22, 0x2D	; 45
     f70:	c8 01       	movw	r24, r16
     f72:	bb de       	rcall	.-650    	; 0xcea <_ZN5Print5printEc>
     f74:	ec 01       	movw	r28, r24
     number = -number;
     f76:	f7 fa       	bst	r15, 7
     f78:	f0 94       	com	r15
     f7a:	f7 f8       	bld	r15, 7
     f7c:	f0 94       	com	r15
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <_ZN5Print10printFloatEdh+0xde>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     f80:	c0 e0       	ldi	r28, 0x00	; 0
     f82:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     f84:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	80 e0       	ldi	r24, 0x00	; 0
     f8c:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     f8e:	7b 14       	cp	r7, r11
     f90:	41 f0       	breq	.+16     	; 0xfa2 <_ZN5Print10printFloatEdh+0xfc>
    rounding /= 10.0;
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 85 13 	call	0x270a	; 0x270a <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     f9e:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
     fa0:	f6 cf       	rjmp	.-20     	; 0xf8e <_ZN5Print10printFloatEdh+0xe8>
     fa2:	a7 01       	movw	r20, r14
     fa4:	96 01       	movw	r18, r12
     fa6:	f8 da       	rcall	.-2576   	; 0x598 <__addsf3>
     fa8:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     faa:	7c 01       	movw	r14, r24
     fac:	5e db       	rcall	.-2372   	; 0x66a <__fixunssfsi>
     fae:	4b 01       	movw	r8, r22
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
     fb0:	5c 01       	movw	r10, r24
     fb2:	2a e0       	ldi	r18, 0x0A	; 10
     fb4:	ab 01       	movw	r20, r22
     fb6:	bc 01       	movw	r22, r24
     fb8:	c8 01       	movw	r24, r16
     fba:	c1 de       	rcall	.-638    	; 0xd3e <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
     fbc:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     fbe:	d9 1f       	adc	r29, r25
     fc0:	77 20       	and	r7, r7
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
     fc2:	81 f1       	breq	.+96     	; 0x1024 <_ZN5Print10printFloatEdh+0x17e>
     fc4:	c5 01       	movw	r24, r10
     fc6:	b4 01       	movw	r22, r8
     fc8:	7c db       	rcall	.-2312   	; 0x6c2 <__floatunsisf>
     fca:	9b 01       	movw	r18, r22
     fcc:	ac 01       	movw	r20, r24
     fce:	c7 01       	movw	r24, r14
     fd0:	b6 01       	movw	r22, r12
     fd2:	e1 da       	rcall	.-2622   	; 0x596 <__subsf3>
     fd4:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
     fd6:	7c 01       	movw	r14, r24
     fd8:	6e e2       	ldi	r22, 0x2E	; 46
     fda:	c8 01       	movw	r24, r16
     fdc:	86 de       	rcall	.-756    	; 0xcea <_ZN5Print5printEc>
     fde:	c8 0f       	add	r28, r24
     fe0:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e2       	ldi	r20, 0x20	; 32
     fe8:	51 e4       	ldi	r21, 0x41	; 65
     fea:	c7 01       	movw	r24, r14
     fec:	b6 01       	movw	r22, r12
     fee:	0e 94 f6 13 	call	0x27ec	; 0x27ec <__mulsf3>
    unsigned int toPrint = (unsigned int)(remainder);
     ff2:	4b 01       	movw	r8, r22
     ff4:	5c 01       	movw	r10, r24
     ff6:	39 db       	rcall	.-2446   	; 0x66a <__fixunssfsi>
    n += print(toPrint);
     ff8:	6b 01       	movw	r12, r22
     ffa:	7c 01       	movw	r14, r24
     ffc:	4a e0       	ldi	r20, 0x0A	; 10
     ffe:	50 e0       	ldi	r21, 0x00	; 0
    1000:	c8 01       	movw	r24, r16
    1002:	f1 de       	rcall	.-542    	; 0xde6 <_ZN5Print5printEji>
    remainder -= toPrint; 
    1004:	c8 0f       	add	r28, r24
    1006:	d9 1f       	adc	r29, r25
    1008:	b6 01       	movw	r22, r12
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	59 db       	rcall	.-2382   	; 0x6c2 <__floatunsisf>
    1010:	9b 01       	movw	r18, r22
    1012:	ac 01       	movw	r20, r24
    1014:	c5 01       	movw	r24, r10
    1016:	b4 01       	movw	r22, r8
    1018:	be da       	rcall	.-2692   	; 0x596 <__subsf3>
    101a:	6b 01       	movw	r12, r22
    101c:	7c 01       	movw	r14, r24
    101e:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1020:	71 10       	cpse	r7, r1
    1022:	df cf       	rjmp	.-66     	; 0xfe2 <_ZN5Print10printFloatEdh+0x13c>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1024:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	08 95       	ret

00001042 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1042:	31 cf       	rjmp	.-414    	; 0xea6 <_ZN5Print10printFloatEdh>

00001044 <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	2f 93       	push	r18
    1050:	3f 93       	push	r19
    1052:	8f 93       	push	r24
    1054:	9f 93       	push	r25
    1056:	af 93       	push	r26
    1058:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    105a:	80 91 81 05 	lds	r24, 0x0581	; 0x800581 <timer0_millis>
    105e:	90 91 82 05 	lds	r25, 0x0582	; 0x800582 <timer0_millis+0x1>
    1062:	a0 91 83 05 	lds	r26, 0x0583	; 0x800583 <timer0_millis+0x2>
    1066:	b0 91 84 05 	lds	r27, 0x0584	; 0x800584 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    106a:	30 91 80 05 	lds	r19, 0x0580	; 0x800580 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    106e:	23 e0       	ldi	r18, 0x03	; 3
    1070:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1072:	2d 37       	cpi	r18, 0x7D	; 125
    1074:	20 f4       	brcc	.+8      	; 0x107e <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	a1 1d       	adc	r26, r1
    107a:	b1 1d       	adc	r27, r1
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    107e:	26 e8       	ldi	r18, 0x86	; 134
    1080:	23 0f       	add	r18, r19
		m += 1;
    1082:	02 96       	adiw	r24, 0x02	; 2
    1084:	a1 1d       	adc	r26, r1
    1086:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1088:	20 93 80 05 	sts	0x0580, r18	; 0x800580 <timer0_fract>
	timer0_millis = m;
    108c:	80 93 81 05 	sts	0x0581, r24	; 0x800581 <timer0_millis>
    1090:	90 93 82 05 	sts	0x0582, r25	; 0x800582 <timer0_millis+0x1>
    1094:	a0 93 83 05 	sts	0x0583, r26	; 0x800583 <timer0_millis+0x2>
    1098:	b0 93 84 05 	sts	0x0584, r27	; 0x800584 <timer0_millis+0x3>
	timer0_overflow_count++;
    109c:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <timer0_overflow_count>
    10a0:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <timer0_overflow_count+0x1>
    10a4:	a0 91 87 05 	lds	r26, 0x0587	; 0x800587 <timer0_overflow_count+0x2>
    10a8:	b0 91 88 05 	lds	r27, 0x0588	; 0x800588 <timer0_overflow_count+0x3>
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	a1 1d       	adc	r26, r1
    10b0:	b1 1d       	adc	r27, r1
    10b2:	80 93 85 05 	sts	0x0585, r24	; 0x800585 <timer0_overflow_count>
    10b6:	90 93 86 05 	sts	0x0586, r25	; 0x800586 <timer0_overflow_count+0x1>
    10ba:	a0 93 87 05 	sts	0x0587, r26	; 0x800587 <timer0_overflow_count+0x2>
    10be:	b0 93 88 05 	sts	0x0588, r27	; 0x800588 <timer0_overflow_count+0x3>
}
    10c2:	bf 91       	pop	r27
    10c4:	af 91       	pop	r26
    10c6:	9f 91       	pop	r25
    10c8:	8f 91       	pop	r24
    10ca:	3f 91       	pop	r19
    10cc:	2f 91       	pop	r18
    10ce:	0f 90       	pop	r0
    10d0:	0f be       	out	0x3f, r0	; 63
    10d2:	0f 90       	pop	r0
    10d4:	1f 90       	pop	r1
    10d6:	18 95       	reti

000010d8 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    10d8:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    10da:	f8 94       	cli
	m = timer0_millis;
    10dc:	60 91 81 05 	lds	r22, 0x0581	; 0x800581 <timer0_millis>
    10e0:	70 91 82 05 	lds	r23, 0x0582	; 0x800582 <timer0_millis+0x1>
    10e4:	80 91 83 05 	lds	r24, 0x0583	; 0x800583 <timer0_millis+0x2>
    10e8:	90 91 84 05 	lds	r25, 0x0584	; 0x800584 <timer0_millis+0x3>
	SREG = oldSREG;
    10ec:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    10ee:	08 95       	ret

000010f0 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10f0:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    10f2:	f8 94       	cli
	m = timer0_overflow_count;
    10f4:	80 91 85 05 	lds	r24, 0x0585	; 0x800585 <timer0_overflow_count>
    10f8:	90 91 86 05 	lds	r25, 0x0586	; 0x800586 <timer0_overflow_count+0x1>
    10fc:	a0 91 87 05 	lds	r26, 0x0587	; 0x800587 <timer0_overflow_count+0x2>
    1100:	b0 91 88 05 	lds	r27, 0x0588	; 0x800588 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1104:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1106:	a8 9b       	sbis	0x15, 0	; 21
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <micros+0x24>
    110a:	2f 3f       	cpi	r18, 0xFF	; 255
    110c:	19 f0       	breq	.+6      	; 0x1114 <micros+0x24>
		m++;
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	a1 1d       	adc	r26, r1
    1112:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1114:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1116:	ba 2f       	mov	r27, r26
    1118:	a9 2f       	mov	r26, r25
    111a:	98 2f       	mov	r25, r24
    111c:	88 27       	eor	r24, r24
    111e:	82 0f       	add	r24, r18
    1120:	91 1d       	adc	r25, r1
    1122:	a1 1d       	adc	r26, r1
    1124:	b1 1d       	adc	r27, r1
    1126:	bc 01       	movw	r22, r24
    1128:	cd 01       	movw	r24, r26
    112a:	42 e0       	ldi	r20, 0x02	; 2
    112c:	66 0f       	add	r22, r22
    112e:	77 1f       	adc	r23, r23
    1130:	88 1f       	adc	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	4a 95       	dec	r20
    1136:	d1 f7       	brne	.-12     	; 0x112c <micros+0x3c>
}
    1138:	08 95       	ret

0000113a <delay>:

void delay(unsigned long ms)
{
    113a:	8f 92       	push	r8
    113c:	9f 92       	push	r9
    113e:	af 92       	push	r10
    1140:	bf 92       	push	r11
    1142:	cf 92       	push	r12
    1144:	df 92       	push	r13
    1146:	ef 92       	push	r14
    1148:	ff 92       	push	r15
    114a:	6b 01       	movw	r12, r22
    114c:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    114e:	d0 df       	rcall	.-96     	; 0x10f0 <micros>
    1150:	4b 01       	movw	r8, r22
    1152:	5c 01       	movw	r10, r24

	while (ms > 0) {
    1154:	c1 14       	cp	r12, r1
    1156:	d1 04       	cpc	r13, r1
    1158:	e1 04       	cpc	r14, r1
    115a:	f1 04       	cpc	r15, r1
    115c:	f9 f0       	breq	.+62     	; 0x119c <delay+0x62>
		yield();
    115e:	0e 94 55 11 	call	0x22aa	; 0x22aa <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    1162:	c6 df       	rcall	.-116    	; 0x10f0 <micros>
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	88 19       	sub	r24, r8
    116a:	99 09       	sbc	r25, r9
    116c:	aa 09       	sbc	r26, r10
    116e:	bb 09       	sbc	r27, r11
    1170:	88 3e       	cpi	r24, 0xE8	; 232
    1172:	93 40       	sbci	r25, 0x03	; 3
    1174:	a1 05       	cpc	r26, r1
    1176:	b1 05       	cpc	r27, r1
    1178:	68 f3       	brcs	.-38     	; 0x1154 <delay+0x1a>
			ms--;
    117a:	21 e0       	ldi	r18, 0x01	; 1
    117c:	c2 1a       	sub	r12, r18
    117e:	d1 08       	sbc	r13, r1
    1180:	e1 08       	sbc	r14, r1
    1182:	f1 08       	sbc	r15, r1
			start += 1000;
    1184:	88 ee       	ldi	r24, 0xE8	; 232
    1186:	88 0e       	add	r8, r24
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	98 1e       	adc	r9, r24
    118c:	a1 1c       	adc	r10, r1
    118e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1190:	c1 14       	cp	r12, r1
    1192:	d1 04       	cpc	r13, r1
    1194:	e1 04       	cpc	r14, r1
    1196:	f1 04       	cpc	r15, r1
    1198:	21 f7       	brne	.-56     	; 0x1162 <delay+0x28>
    119a:	dc cf       	rjmp	.-72     	; 0x1154 <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	df 90       	pop	r13
    11a2:	cf 90       	pop	r12
    11a4:	bf 90       	pop	r11
    11a6:	af 90       	pop	r10
    11a8:	9f 90       	pop	r9
    11aa:	8f 90       	pop	r8
    11ac:	08 95       	ret

000011ae <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    11ae:	82 30       	cpi	r24, 0x02	; 2
    11b0:	91 05       	cpc	r25, r1
    11b2:	38 f0       	brcs	.+14     	; 0x11c2 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    11bc:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    11be:	01 97       	sbiw	r24, 0x01	; 1
    11c0:	f1 f7       	brne	.-4      	; 0x11be <delayMicroseconds+0x10>
    11c2:	08 95       	ret

000011c4 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    11c4:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    11c6:	84 b5       	in	r24, 0x24	; 36
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11cc:	84 b5       	in	r24, 0x24	; 36
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11d2:	85 b5       	in	r24, 0x25	; 37
    11d4:	82 60       	ori	r24, 0x02	; 2
    11d6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11d8:	85 b5       	in	r24, 0x25	; 37
    11da:	81 60       	ori	r24, 0x01	; 1
    11dc:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11de:	ee e6       	ldi	r30, 0x6E	; 110
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11e8:	e1 e8       	ldi	r30, 0x81	; 129
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11ee:	80 81       	ld	r24, Z
    11f0:	82 60       	ori	r24, 0x02	; 2
    11f2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11f4:	80 81       	ld	r24, Z
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11fa:	e0 e8       	ldi	r30, 0x80	; 128
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	81 60       	ori	r24, 0x01	; 1
    1202:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    1204:	e1 eb       	ldi	r30, 0xB1	; 177
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	84 60       	ori	r24, 0x04	; 4
    120c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    120e:	e0 eb       	ldi	r30, 0xB0	; 176
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    1218:	e1 e9       	ldi	r30, 0x91	; 145
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	82 60       	ori	r24, 0x02	; 2
    1220:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    1222:	80 81       	ld	r24, Z
    1224:	81 60       	ori	r24, 0x01	; 1
    1226:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    1228:	e0 e9       	ldi	r30, 0x90	; 144
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	81 60       	ori	r24, 0x01	; 1
    1230:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    1232:	e1 ea       	ldi	r30, 0xA1	; 161
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	80 81       	ld	r24, Z
    1238:	82 60       	ori	r24, 0x02	; 2
    123a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    123c:	80 81       	ld	r24, Z
    123e:	81 60       	ori	r24, 0x01	; 1
    1240:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    1242:	e0 ea       	ldi	r30, 0xA0	; 160
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	81 60       	ori	r24, 0x01	; 1
    124a:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    124c:	e1 e2       	ldi	r30, 0x21	; 33
    124e:	f1 e0       	ldi	r31, 0x01	; 1
    1250:	80 81       	ld	r24, Z
    1252:	82 60       	ori	r24, 0x02	; 2
    1254:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    1256:	80 81       	ld	r24, Z
    1258:	81 60       	ori	r24, 0x01	; 1
    125a:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    125c:	e0 e2       	ldi	r30, 0x20	; 32
    125e:	f1 e0       	ldi	r31, 0x01	; 1
    1260:	80 81       	ld	r24, Z
    1262:	81 60       	ori	r24, 0x01	; 1
    1264:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    1266:	ea e7       	ldi	r30, 0x7A	; 122
    1268:	f0 e0       	ldi	r31, 0x00	; 0
    126a:	80 81       	ld	r24, Z
    126c:	84 60       	ori	r24, 0x04	; 4
    126e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    1270:	80 81       	ld	r24, Z
    1272:	82 60       	ori	r24, 0x02	; 2
    1274:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    1276:	80 81       	ld	r24, Z
    1278:	81 60       	ori	r24, 0x01	; 1
    127a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    127c:	80 81       	ld	r24, Z
    127e:	80 68       	ori	r24, 0x80	; 128
    1280:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1282:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    1286:	08 95       	ret

00001288 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	fc 01       	movw	r30, r24
    128c:	31 97       	sbiw	r30, 0x01	; 1
    128e:	e2 31       	cpi	r30, 0x12	; 18
    1290:	f1 05       	cpc	r31, r1
    1292:	08 f0       	brcs	.+2      	; 0x1296 <turnOffPWM+0xe>
    1294:	4e c0       	rjmp	.+156    	; 0x1332 <turnOffPWM+0xaa>
    1296:	88 27       	eor	r24, r24
    1298:	ee 58       	subi	r30, 0x8E	; 142
    129a:	ff 4f       	sbci	r31, 0xFF	; 255
    129c:	8f 4f       	sbci	r24, 0xFF	; 255
    129e:	0c 94 89 14 	jmp	0x2912	; 0x2912 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    12a2:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12a6:	8f 77       	andi	r24, 0x7F	; 127
    12a8:	03 c0       	rjmp	.+6      	; 0x12b0 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    12aa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12ae:	8f 7d       	andi	r24, 0xDF	; 223
    12b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12b4:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    12b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    12ba:	87 7f       	andi	r24, 0xF7	; 247
    12bc:	f9 cf       	rjmp	.-14     	; 0x12b0 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    12be:	84 b5       	in	r24, 0x24	; 36
    12c0:	8f 77       	andi	r24, 0x7F	; 127
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    12c4:	84 b5       	in	r24, 0x24	; 36
    12c6:	8f 7d       	andi	r24, 0xDF	; 223
    12c8:	84 bd       	out	0x24, r24	; 36
    12ca:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    12cc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12d0:	8f 77       	andi	r24, 0x7F	; 127
    12d2:	03 c0       	rjmp	.+6      	; 0x12da <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    12d4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12d8:	8f 7d       	andi	r24, 0xDF	; 223
    12da:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    12de:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    12e0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12e4:	8f 77       	andi	r24, 0x7F	; 127
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    12e8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12ec:	8f 7d       	andi	r24, 0xDF	; 223
    12ee:	03 c0       	rjmp	.+6      	; 0x12f6 <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    12f0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12f4:	87 7f       	andi	r24, 0xF7	; 247
    12f6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    12fa:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    12fc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1300:	8f 77       	andi	r24, 0x7F	; 127
    1302:	07 c0       	rjmp	.+14     	; 0x1312 <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    1304:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    130c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1310:	87 7f       	andi	r24, 0xF7	; 247
    1312:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1316:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    1318:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    131c:	8f 77       	andi	r24, 0x7F	; 127
    131e:	07 c0       	rjmp	.+14     	; 0x132e <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    1320:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1324:	8f 7d       	andi	r24, 0xDF	; 223
    1326:	03 c0       	rjmp	.+6      	; 0x132e <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    1328:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    132c:	87 7f       	andi	r24, 0xF7	; 247
    132e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    1332:	08 95       	ret

00001334 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	fc 01       	movw	r30, r24
    133c:	e2 5b       	subi	r30, 0xB2	; 178
    133e:	fe 4f       	sbci	r31, 0xFE	; 254
    1340:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1342:	fc 01       	movw	r30, r24
    1344:	ec 56       	subi	r30, 0x6C	; 108
    1346:	fe 4f       	sbci	r31, 0xFE	; 254
    1348:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    134a:	88 23       	and	r24, r24
    134c:	61 f1       	breq	.+88     	; 0x13a6 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	fc 01       	movw	r30, r24
    1356:	e2 5f       	subi	r30, 0xF2	; 242
    1358:	fd 4f       	sbci	r31, 0xFD	; 253
    135a:	c5 91       	lpm	r28, Z+
    135c:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    135e:	fc 01       	movw	r30, r24
    1360:	ec 50       	subi	r30, 0x0C	; 12
    1362:	fe 4f       	sbci	r31, 0xFE	; 254
    1364:	a5 91       	lpm	r26, Z+
    1366:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    1368:	61 11       	cpse	r22, r1
    136a:	09 c0       	rjmp	.+18     	; 0x137e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    136c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    136e:	f8 94       	cli
		*reg &= ~bit;
    1370:	88 81       	ld	r24, Y
    1372:	20 95       	com	r18
    1374:	82 23       	and	r24, r18
    1376:	88 83       	st	Y, r24
		*out &= ~bit;
    1378:	ec 91       	ld	r30, X
    137a:	2e 23       	and	r18, r30
    137c:	0b c0       	rjmp	.+22     	; 0x1394 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    137e:	62 30       	cpi	r22, 0x02	; 2
    1380:	61 f4       	brne	.+24     	; 0x139a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    1382:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1384:	f8 94       	cli
		*reg &= ~bit;
    1386:	88 81       	ld	r24, Y
    1388:	32 2f       	mov	r19, r18
    138a:	30 95       	com	r19
    138c:	83 23       	and	r24, r19
    138e:	88 83       	st	Y, r24
		*out |= bit;
    1390:	ec 91       	ld	r30, X
    1392:	2e 2b       	or	r18, r30
    1394:	2c 93       	st	X, r18
		SREG = oldSREG;
    1396:	9f bf       	out	0x3f, r25	; 63
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    139a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    139c:	f8 94       	cli
		*reg |= bit;
    139e:	e8 81       	ld	r30, Y
    13a0:	2e 2b       	or	r18, r30
    13a2:	28 83       	st	Y, r18
		SREG = oldSREG;
    13a4:	8f bf       	out	0x3f, r24	; 63
	}
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	08 95       	ret

000013ac <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	f9 01       	movw	r30, r18
    13b8:	e8 5f       	subi	r30, 0xF8	; 248
    13ba:	fe 4f       	sbci	r31, 0xFE	; 254
    13bc:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    13be:	f9 01       	movw	r30, r18
    13c0:	e2 5b       	subi	r30, 0xB2	; 178
    13c2:	fe 4f       	sbci	r31, 0xFE	; 254
    13c4:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    13c6:	f9 01       	movw	r30, r18
    13c8:	ec 56       	subi	r30, 0x6C	; 108
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    13ce:	cc 23       	and	r28, r28
    13d0:	b9 f0       	breq	.+46     	; 0x1400 <digitalWrite+0x54>
    13d2:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13d4:	81 11       	cpse	r24, r1
    13d6:	58 df       	rcall	.-336    	; 0x1288 <turnOffPWM>

	out = portOutputRegister(port);
    13d8:	ec 2f       	mov	r30, r28
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	ee 0f       	add	r30, r30
    13de:	ff 1f       	adc	r31, r31
    13e0:	ec 50       	subi	r30, 0x0C	; 12
    13e2:	fe 4f       	sbci	r31, 0xFE	; 254
    13e4:	a5 91       	lpm	r26, Z+
    13e6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    13e8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    13ea:	f8 94       	cli

	if (val == LOW) {
    13ec:	11 11       	cpse	r17, r1
    13ee:	04 c0       	rjmp	.+8      	; 0x13f8 <digitalWrite+0x4c>
		*out &= ~bit;
    13f0:	8c 91       	ld	r24, X
    13f2:	d0 95       	com	r29
    13f4:	d8 23       	and	r29, r24
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <digitalWrite+0x50>
	} else {
		*out |= bit;
    13f8:	ec 91       	ld	r30, X
    13fa:	de 2b       	or	r29, r30
    13fc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    13fe:	9f bf       	out	0x3f, r25	; 63
}
    1400:	df 91       	pop	r29
    1402:	cf 91       	pop	r28
    1404:	1f 91       	pop	r17
    1406:	08 95       	ret

00001408 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	f9 01       	movw	r30, r18
    1412:	e8 5f       	subi	r30, 0xF8	; 248
    1414:	fe 4f       	sbci	r31, 0xFE	; 254
    1416:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1418:	f9 01       	movw	r30, r18
    141a:	e2 5b       	subi	r30, 0xB2	; 178
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    1420:	f9 01       	movw	r30, r18
    1422:	ec 56       	subi	r30, 0x6C	; 108
    1424:	fe 4f       	sbci	r31, 0xFE	; 254
    1426:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    1428:	cc 23       	and	r28, r28
    142a:	89 f0       	breq	.+34     	; 0x144e <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    142c:	81 11       	cpse	r24, r1
    142e:	2c df       	rcall	.-424    	; 0x1288 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1430:	ec 2f       	mov	r30, r28
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e6 52       	subi	r30, 0x26	; 38
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	a5 91       	lpm	r26, Z+
    143e:	b4 91       	lpm	r27, Z
    1440:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1442:	ed 23       	and	r30, r29
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	21 f4       	brne	.+8      	; 0x1452 <digitalRead+0x4a>
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	02 c0       	rjmp	.+4      	; 0x1452 <digitalRead+0x4a>
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <_ZN6StringD1Ev>:
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    1458:	fc 01       	movw	r30, r24
    145a:	80 81       	ld	r24, Z
    145c:	91 81       	ldd	r25, Z+1	; 0x01
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	11 f0       	breq	.+4      	; 0x1466 <_ZN6StringD1Ev+0xe>
    1462:	0c 94 29 15 	jmp	0x2a52	; 0x2a52 <free>
    1466:	08 95       	ret

00001468 <_ZN6String10invalidateEv>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	88 81       	ld	r24, Y
    1470:	99 81       	ldd	r25, Y+1	; 0x01
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	11 f0       	breq	.+4      	; 0x147a <_ZN6String10invalidateEv+0x12>
    1476:	0e 94 29 15 	call	0x2a52	; 0x2a52 <free>
    147a:	19 82       	std	Y+1, r1	; 0x01
    147c:	18 82       	st	Y, r1
    147e:	1d 82       	std	Y+5, r1	; 0x05
    1480:	1c 82       	std	Y+4, r1	; 0x04
    1482:	1b 82       	std	Y+3, r1	; 0x03
    1484:	1a 82       	std	Y+2, r1	; 0x02
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <_ZN6String12changeBufferEj>:
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	8b 01       	movw	r16, r22
    1498:	6f 5f       	subi	r22, 0xFF	; 255
    149a:	7f 4f       	sbci	r23, 0xFF	; 255
    149c:	88 81       	ld	r24, Y
    149e:	99 81       	ldd	r25, Y+1	; 0x01
    14a0:	0e 94 b2 15 	call	0x2b64	; 0x2b64 <realloc>
    14a4:	00 97       	sbiw	r24, 0x00	; 0
    14a6:	31 f0       	breq	.+12     	; 0x14b4 <_ZN6String12changeBufferEj+0x28>
    14a8:	99 83       	std	Y+1, r25	; 0x01
    14aa:	88 83       	st	Y, r24
    14ac:	1b 83       	std	Y+3, r17	; 0x03
    14ae:	0a 83       	std	Y+2, r16	; 0x02
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	01 c0       	rjmp	.+2      	; 0x14b6 <_ZN6String12changeBufferEj+0x2a>
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	df 91       	pop	r29
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <_ZN6String7reserveEj>:
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	ec 01       	movw	r28, r24
    14c6:	88 81       	ld	r24, Y
    14c8:	99 81       	ldd	r25, Y+1	; 0x01
    14ca:	89 2b       	or	r24, r25
    14cc:	29 f0       	breq	.+10     	; 0x14d8 <_ZN6String7reserveEj+0x18>
    14ce:	8a 81       	ldd	r24, Y+2	; 0x02
    14d0:	9b 81       	ldd	r25, Y+3	; 0x03
    14d2:	86 17       	cp	r24, r22
    14d4:	97 07       	cpc	r25, r23
    14d6:	58 f4       	brcc	.+22     	; 0x14ee <_ZN6String7reserveEj+0x2e>
    14d8:	ce 01       	movw	r24, r28
    14da:	d8 df       	rcall	.-80     	; 0x148c <_ZN6String12changeBufferEj>
    14dc:	88 23       	and	r24, r24
    14de:	41 f0       	breq	.+16     	; 0x14f0 <_ZN6String7reserveEj+0x30>
    14e0:	8c 81       	ldd	r24, Y+4	; 0x04
    14e2:	9d 81       	ldd	r25, Y+5	; 0x05
    14e4:	89 2b       	or	r24, r25
    14e6:	19 f4       	brne	.+6      	; 0x14ee <_ZN6String7reserveEj+0x2e>
    14e8:	e8 81       	ld	r30, Y
    14ea:	f9 81       	ldd	r31, Y+1	; 0x01
    14ec:	10 82       	st	Z, r1
    14ee:	81 e0       	ldi	r24, 0x01	; 1
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	08 95       	ret

000014f6 <_ZN6String4copyEPKcj>:
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	ec 01       	movw	r28, r24
    1504:	7b 01       	movw	r14, r22
    1506:	8a 01       	movw	r16, r20
    1508:	ba 01       	movw	r22, r20
    150a:	da df       	rcall	.-76     	; 0x14c0 <_ZN6String7reserveEj>
    150c:	81 11       	cpse	r24, r1
    150e:	03 c0       	rjmp	.+6      	; 0x1516 <_ZN6String4copyEPKcj+0x20>
    1510:	ce 01       	movw	r24, r28
    1512:	aa df       	rcall	.-172    	; 0x1468 <_ZN6String10invalidateEv>
    1514:	07 c0       	rjmp	.+14     	; 0x1524 <_ZN6String4copyEPKcj+0x2e>
    1516:	1d 83       	std	Y+5, r17	; 0x05
    1518:	0c 83       	std	Y+4, r16	; 0x04
    151a:	b7 01       	movw	r22, r14
    151c:	88 81       	ld	r24, Y
    151e:	99 81       	ldd	r25, Y+1	; 0x01
    1520:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <strcpy>
    1524:	ce 01       	movw	r24, r28
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	ff 90       	pop	r15
    1530:	ef 90       	pop	r14
    1532:	08 95       	ret

00001534 <_ZN6StringC1EPKc>:
    1534:	fc 01       	movw	r30, r24
    1536:	11 82       	std	Z+1, r1	; 0x01
    1538:	10 82       	st	Z, r1
    153a:	13 82       	std	Z+3, r1	; 0x03
    153c:	12 82       	std	Z+2, r1	; 0x02
    153e:	15 82       	std	Z+5, r1	; 0x05
    1540:	14 82       	std	Z+4, r1	; 0x04
    1542:	61 15       	cp	r22, r1
    1544:	71 05       	cpc	r23, r1
    1546:	49 f0       	breq	.+18     	; 0x155a <_ZN6StringC1EPKc+0x26>
    1548:	fb 01       	movw	r30, r22
    154a:	01 90       	ld	r0, Z+
    154c:	00 20       	and	r0, r0
    154e:	e9 f7       	brne	.-6      	; 0x154a <_ZN6StringC1EPKc+0x16>
    1550:	31 97       	sbiw	r30, 0x01	; 1
    1552:	af 01       	movw	r20, r30
    1554:	46 1b       	sub	r20, r22
    1556:	57 0b       	sbc	r21, r23
    1558:	ce cf       	rjmp	.-100    	; 0x14f6 <_ZN6String4copyEPKcj>
    155a:	08 95       	ret

0000155c <_ZN6StringaSEPKc>:
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	ec 01       	movw	r28, r24
    1562:	61 15       	cp	r22, r1
    1564:	71 05       	cpc	r23, r1
    1566:	51 f0       	breq	.+20     	; 0x157c <_ZN6StringaSEPKc+0x20>
    1568:	fb 01       	movw	r30, r22
    156a:	01 90       	ld	r0, Z+
    156c:	00 20       	and	r0, r0
    156e:	e9 f7       	brne	.-6      	; 0x156a <_ZN6StringaSEPKc+0xe>
    1570:	31 97       	sbiw	r30, 0x01	; 1
    1572:	af 01       	movw	r20, r30
    1574:	46 1b       	sub	r20, r22
    1576:	57 0b       	sbc	r21, r23
    1578:	be df       	rcall	.-132    	; 0x14f6 <_ZN6String4copyEPKcj>
    157a:	01 c0       	rjmp	.+2      	; 0x157e <_ZN6StringaSEPKc+0x22>
    157c:	75 df       	rcall	.-278    	; 0x1468 <_ZN6String10invalidateEv>
    157e:	ce 01       	movw	r24, r28
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <_ZN6StringC1Eih>:
    1586:	0f 93       	push	r16
    1588:	1f 93       	push	r17
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	62 97       	sbiw	r28, 0x12	; 18
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	8c 01       	movw	r16, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	f8 01       	movw	r30, r16
    15a4:	11 82       	std	Z+1, r1	; 0x01
    15a6:	10 82       	st	Z, r1
    15a8:	13 82       	std	Z+3, r1	; 0x03
    15aa:	12 82       	std	Z+2, r1	; 0x02
    15ac:	15 82       	std	Z+5, r1	; 0x05
    15ae:	14 82       	std	Z+4, r1	; 0x04
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	be 01       	movw	r22, r28
    15b4:	6f 5f       	subi	r22, 0xFF	; 255
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255
    15b8:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <itoa>
    15bc:	be 01       	movw	r22, r28
    15be:	6f 5f       	subi	r22, 0xFF	; 255
    15c0:	7f 4f       	sbci	r23, 0xFF	; 255
    15c2:	c8 01       	movw	r24, r16
    15c4:	cb df       	rcall	.-106    	; 0x155c <_ZN6StringaSEPKc>
    15c6:	62 96       	adiw	r28, 0x12	; 18
    15c8:	0f b6       	in	r0, 0x3f	; 63
    15ca:	f8 94       	cli
    15cc:	de bf       	out	0x3e, r29	; 62
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	cd bf       	out	0x3d, r28	; 61
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	08 95       	ret

000015dc <_ZNK6String11lastIndexOfERKS_j>:
    15dc:	af 92       	push	r10
    15de:	bf 92       	push	r11
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	7b 01       	movw	r14, r22
    15f2:	8a 01       	movw	r16, r20
    15f4:	fb 01       	movw	r30, r22
    15f6:	44 81       	ldd	r20, Z+4	; 0x04
    15f8:	55 81       	ldd	r21, Z+5	; 0x05
    15fa:	41 15       	cp	r20, r1
    15fc:	51 05       	cpc	r21, r1
    15fe:	61 f1       	breq	.+88     	; 0x1658 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    1600:	fc 01       	movw	r30, r24
    1602:	24 81       	ldd	r18, Z+4	; 0x04
    1604:	35 81       	ldd	r19, Z+5	; 0x05
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	31 f1       	breq	.+76     	; 0x1658 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    160c:	24 17       	cp	r18, r20
    160e:	35 07       	cpc	r19, r21
    1610:	18 f1       	brcs	.+70     	; 0x1658 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    1612:	02 17       	cp	r16, r18
    1614:	13 07       	cpc	r17, r19
    1616:	18 f0       	brcs	.+6      	; 0x161e <_ZNK6String11lastIndexOfERKS_j+0x42>
    1618:	89 01       	movw	r16, r18
    161a:	01 50       	subi	r16, 0x01	; 1
    161c:	11 09       	sbc	r17, r1
    161e:	fc 01       	movw	r30, r24
    1620:	a0 80       	ld	r10, Z
    1622:	b1 80       	ldd	r11, Z+1	; 0x01
    1624:	c5 01       	movw	r24, r10
    1626:	df ef       	ldi	r29, 0xFF	; 255
    1628:	cf ef       	ldi	r28, 0xFF	; 255
    162a:	65 01       	movw	r12, r10
    162c:	c0 0e       	add	r12, r16
    162e:	d1 1e       	adc	r13, r17
    1630:	c8 16       	cp	r12, r24
    1632:	d9 06       	cpc	r13, r25
    1634:	a0 f0       	brcs	.+40     	; 0x165e <_ZNK6String11lastIndexOfERKS_j+0x82>
    1636:	f7 01       	movw	r30, r14
    1638:	60 81       	ld	r22, Z
    163a:	71 81       	ldd	r23, Z+1	; 0x01
    163c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <strstr>
    1640:	00 97       	sbiw	r24, 0x00	; 0
    1642:	69 f0       	breq	.+26     	; 0x165e <_ZNK6String11lastIndexOfERKS_j+0x82>
    1644:	9c 01       	movw	r18, r24
    1646:	2a 19       	sub	r18, r10
    1648:	3b 09       	sbc	r19, r11
    164a:	02 17       	cp	r16, r18
    164c:	13 07       	cpc	r17, r19
    164e:	10 f0       	brcs	.+4      	; 0x1654 <_ZNK6String11lastIndexOfERKS_j+0x78>
    1650:	d2 2f       	mov	r29, r18
    1652:	c3 2f       	mov	r28, r19
    1654:	01 96       	adiw	r24, 0x01	; 1
    1656:	ec cf       	rjmp	.-40     	; 0x1630 <_ZNK6String11lastIndexOfERKS_j+0x54>
    1658:	8f ef       	ldi	r24, 0xFF	; 255
    165a:	9f ef       	ldi	r25, 0xFF	; 255
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <_ZNK6String11lastIndexOfERKS_j+0x86>
    165e:	8d 2f       	mov	r24, r29
    1660:	9c 2f       	mov	r25, r28
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	df 90       	pop	r13
    1670:	cf 90       	pop	r12
    1672:	bf 90       	pop	r11
    1674:	af 90       	pop	r10
    1676:	08 95       	ret

00001678 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    1678:	2f 92       	push	r2
    167a:	3f 92       	push	r3
    167c:	4f 92       	push	r4
    167e:	5f 92       	push	r5
    1680:	6f 92       	push	r6
    1682:	7f 92       	push	r7
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	ff 92       	push	r15
    1694:	0f 93       	push	r16
    1696:	1f 93       	push	r17
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
	if (len == 0 || find.len == 0) return;
    169c:	fc 01       	movw	r30, r24
    169e:	44 80       	ldd	r4, Z+4	; 0x04
    16a0:	55 80       	ldd	r5, Z+5	; 0x05
    16a2:	41 14       	cp	r4, r1
    16a4:	51 04       	cpc	r5, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <_ZN6String7replaceERKS_S1_+0x32>
    16a8:	cc c0       	rjmp	.+408    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
    16aa:	fb 01       	movw	r30, r22
    16ac:	84 80       	ldd	r8, Z+4	; 0x04
    16ae:	95 80       	ldd	r9, Z+5	; 0x05
    16b0:	81 14       	cp	r8, r1
    16b2:	91 04       	cpc	r9, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <_ZN6String7replaceERKS_S1_+0x40>
    16b6:	c5 c0       	rjmp	.+394    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
    16b8:	7a 01       	movw	r14, r20
    16ba:	6b 01       	movw	r12, r22
    16bc:	8c 01       	movw	r16, r24
	int diff = replace.len - find.len;
    16be:	fa 01       	movw	r30, r20
    16c0:	64 80       	ldd	r6, Z+4	; 0x04
    16c2:	75 80       	ldd	r7, Z+5	; 0x05
    16c4:	68 18       	sub	r6, r8
    16c6:	79 08       	sbc	r7, r9
	char *readFrom = buffer;
    16c8:	fc 01       	movw	r30, r24
    16ca:	c0 81       	ld	r28, Z
    16cc:	d1 81       	ldd	r29, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    16ce:	61 14       	cp	r6, r1
    16d0:	71 04       	cpc	r7, r1
    16d2:	b9 f4       	brne	.+46     	; 0x1702 <_ZN6String7replaceERKS_S1_+0x8a>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    16d4:	f6 01       	movw	r30, r12
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <strstr>
    16e0:	ec 01       	movw	r28, r24
    16e2:	00 97       	sbiw	r24, 0x00	; 0
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <_ZN6String7replaceERKS_S1_+0x70>
    16e6:	ad c0       	rjmp	.+346    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
			memcpy(foundAt, replace.buffer, replace.len);
    16e8:	f7 01       	movw	r30, r14
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	44 81       	ldd	r20, Z+4	; 0x04
    16f0:	55 81       	ldd	r21, Z+5	; 0x05
    16f2:	0e 94 92 16 	call	0x2d24	; 0x2d24 <memcpy>
			readFrom = foundAt + replace.len;
    16f6:	f7 01       	movw	r30, r14
    16f8:	84 81       	ldd	r24, Z+4	; 0x04
    16fa:	95 81       	ldd	r25, Z+5	; 0x05
    16fc:	c8 0f       	add	r28, r24
    16fe:	d9 1f       	adc	r29, r25
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1700:	e9 cf       	rjmp	.-46     	; 0x16d4 <_ZN6String7replaceERKS_S1_+0x5c>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    1702:	77 fe       	sbrs	r7, 7
    1704:	44 c0       	rjmp	.+136    	; 0x178e <_ZN6String7replaceERKS_S1_+0x116>
    1706:	5e 01       	movw	r10, r28
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1708:	f6 01       	movw	r30, r12
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	c5 01       	movw	r24, r10
    1710:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <strstr>
    1714:	2c 01       	movw	r4, r24
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	21 f1       	breq	.+72     	; 0x1762 <_ZN6String7replaceERKS_S1_+0xea>
			unsigned int n = foundAt - readFrom;
    171a:	4c 01       	movw	r8, r24
    171c:	8a 18       	sub	r8, r10
    171e:	9b 08       	sbc	r9, r11
			memcpy(writeTo, readFrom, n);
    1720:	a4 01       	movw	r20, r8
    1722:	b5 01       	movw	r22, r10
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 92 16 	call	0x2d24	; 0x2d24 <memcpy>
			writeTo += n;
    172a:	c8 0d       	add	r28, r8
    172c:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    172e:	f7 01       	movw	r30, r14
    1730:	60 81       	ld	r22, Z
    1732:	71 81       	ldd	r23, Z+1	; 0x01
    1734:	44 81       	ldd	r20, Z+4	; 0x04
    1736:	55 81       	ldd	r21, Z+5	; 0x05
    1738:	ce 01       	movw	r24, r28
    173a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <memcpy>
			writeTo += replace.len;
    173e:	f7 01       	movw	r30, r14
    1740:	84 81       	ldd	r24, Z+4	; 0x04
    1742:	95 81       	ldd	r25, Z+5	; 0x05
    1744:	c8 0f       	add	r28, r24
    1746:	d9 1f       	adc	r29, r25
			readFrom = foundAt + find.len;
    1748:	f6 01       	movw	r30, r12
    174a:	a4 80       	ldd	r10, Z+4	; 0x04
    174c:	b5 80       	ldd	r11, Z+5	; 0x05
    174e:	a4 0c       	add	r10, r4
    1750:	b5 1c       	adc	r11, r5
			len += diff;
    1752:	f8 01       	movw	r30, r16
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	95 81       	ldd	r25, Z+5	; 0x05
    1758:	86 0d       	add	r24, r6
    175a:	97 1d       	adc	r25, r7
    175c:	95 83       	std	Z+5, r25	; 0x05
    175e:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1760:	d3 cf       	rjmp	.-90     	; 0x1708 <_ZN6String7replaceERKS_S1_+0x90>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    1762:	b5 01       	movw	r22, r10
    1764:	ce 01       	movw	r24, r28
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	1f 91       	pop	r17
    176c:	0f 91       	pop	r16
    176e:	ff 90       	pop	r15
    1770:	ef 90       	pop	r14
    1772:	df 90       	pop	r13
    1774:	cf 90       	pop	r12
    1776:	bf 90       	pop	r11
    1778:	af 90       	pop	r10
    177a:	9f 90       	pop	r9
    177c:	8f 90       	pop	r8
    177e:	7f 90       	pop	r7
    1780:	6f 90       	pop	r6
    1782:	5f 90       	pop	r5
    1784:	4f 90       	pop	r4
    1786:	3f 90       	pop	r3
    1788:	2f 90       	pop	r2
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    178a:	0c 94 ac 16 	jmp	0x2d58	; 0x2d58 <strcpy>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    178e:	fb 01       	movw	r30, r22
    1790:	20 80       	ld	r2, Z
    1792:	31 80       	ldd	r3, Z+1	; 0x01
    1794:	52 01       	movw	r10, r4
    1796:	b1 01       	movw	r22, r2
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <strstr>
    179e:	00 97       	sbiw	r24, 0x00	; 0
    17a0:	31 f0       	breq	.+12     	; 0x17ae <_ZN6String7replaceERKS_S1_+0x136>
			readFrom = foundAt + find.len;
    17a2:	ec 01       	movw	r28, r24
    17a4:	c8 0d       	add	r28, r8
    17a6:	d9 1d       	adc	r29, r9
			size += diff;
    17a8:	a6 0c       	add	r10, r6
    17aa:	b7 1c       	adc	r11, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    17ac:	f4 cf       	rjmp	.-24     	; 0x1796 <_ZN6String7replaceERKS_S1_+0x11e>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    17ae:	a4 14       	cp	r10, r4
    17b0:	b5 04       	cpc	r11, r5
    17b2:	09 f4       	brne	.+2      	; 0x17b6 <_ZN6String7replaceERKS_S1_+0x13e>
    17b4:	46 c0       	rjmp	.+140    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    17b6:	f8 01       	movw	r30, r16
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	8a 15       	cp	r24, r10
    17be:	9b 05       	cpc	r25, r11
    17c0:	28 f4       	brcc	.+10     	; 0x17cc <_ZN6String7replaceERKS_S1_+0x154>
    17c2:	b5 01       	movw	r22, r10
    17c4:	c8 01       	movw	r24, r16
    17c6:	62 de       	rcall	.-828    	; 0x148c <_ZN6String12changeBufferEj>
    17c8:	88 23       	and	r24, r24
    17ca:	d9 f1       	breq	.+118    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
		int index = len - 1;
    17cc:	f8 01       	movw	r30, r16
    17ce:	44 81       	ldd	r20, Z+4	; 0x04
    17d0:	55 81       	ldd	r21, Z+5	; 0x05
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
    17d2:	41 50       	subi	r20, 0x01	; 1
    17d4:	51 09       	sbc	r21, r1
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    17d6:	57 fd       	sbrc	r21, 7
    17d8:	34 c0       	rjmp	.+104    	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
    17da:	b6 01       	movw	r22, r12
    17dc:	c8 01       	movw	r24, r16
    17de:	fe de       	rcall	.-516    	; 0x15dc <_ZNK6String11lastIndexOfERKS_j>
    17e0:	ec 01       	movw	r28, r24
    17e2:	97 fd       	sbrc	r25, 7
    17e4:	2e c0       	rjmp	.+92     	; 0x1842 <_ZN6String7replaceERKS_S1_+0x1ca>
			readFrom = buffer + index + find.len;
    17e6:	f6 01       	movw	r30, r12
    17e8:	24 81       	ldd	r18, Z+4	; 0x04
    17ea:	35 81       	ldd	r19, Z+5	; 0x05
    17ec:	28 0f       	add	r18, r24
    17ee:	39 1f       	adc	r19, r25
    17f0:	f8 01       	movw	r30, r16
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
    17f6:	82 0f       	add	r24, r18
    17f8:	93 1f       	adc	r25, r19
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    17fa:	44 81       	ldd	r20, Z+4	; 0x04
    17fc:	55 81       	ldd	r21, Z+5	; 0x05
    17fe:	42 1b       	sub	r20, r18
    1800:	53 0b       	sbc	r21, r19
    1802:	bc 01       	movw	r22, r24
    1804:	86 0d       	add	r24, r6
    1806:	97 1d       	adc	r25, r7
    1808:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <memmove>
			len += diff;
    180c:	f8 01       	movw	r30, r16
    180e:	84 81       	ldd	r24, Z+4	; 0x04
    1810:	95 81       	ldd	r25, Z+5	; 0x05
    1812:	86 0d       	add	r24, r6
    1814:	97 1d       	adc	r25, r7
    1816:	95 83       	std	Z+5, r25	; 0x05
    1818:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    181a:	20 81       	ld	r18, Z
    181c:	31 81       	ldd	r19, Z+1	; 0x01
    181e:	f9 01       	movw	r30, r18
    1820:	e8 0f       	add	r30, r24
    1822:	f9 1f       	adc	r31, r25
    1824:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    1826:	f8 01       	movw	r30, r16
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	f7 01       	movw	r30, r14
    182e:	60 81       	ld	r22, Z
    1830:	71 81       	ldd	r23, Z+1	; 0x01
    1832:	44 81       	ldd	r20, Z+4	; 0x04
    1834:	55 81       	ldd	r21, Z+5	; 0x05
    1836:	8c 0f       	add	r24, r28
    1838:	9d 1f       	adc	r25, r29
    183a:	0e 94 92 16 	call	0x2d24	; 0x2d24 <memcpy>
			index--;
    183e:	ae 01       	movw	r20, r28
    1840:	c8 cf       	rjmp	.-112    	; 0x17d2 <_ZN6String7replaceERKS_S1_+0x15a>
		}
	}
}
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	bf 90       	pop	r11
    1854:	af 90       	pop	r10
    1856:	9f 90       	pop	r9
    1858:	8f 90       	pop	r8
    185a:	7f 90       	pop	r7
    185c:	6f 90       	pop	r6
    185e:	5f 90       	pop	r5
    1860:	4f 90       	pop	r4
    1862:	3f 90       	pop	r3
    1864:	2f 90       	pop	r2
    1866:	08 95       	ret

00001868 <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj>:
/**************************************************************************/
void Adafruit_AMG88xx::getInterrupt(uint8_t *buf, uint8_t size)
{
	uint8_t bytesToRead = min(size, (uint8_t)8);
	
	this->read(AMG88xx_INT_OFFSET, buf, bytesToRead);
    1868:	9b 01       	movw	r18, r22
    186a:	77 70       	andi	r23, 0x07	; 7
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	33 ff       	sbrs	r19, 3
    1872:	09 c0       	rjmp	.+18     	; 0x1886 <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj+0x1e>
    1874:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__floatunsisf>
    1878:	9b 01       	movw	r18, r22
    187a:	ac 01       	movw	r20, r24
    187c:	60 e0       	ldi	r22, 0x00	; 0
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	cb 01       	movw	r24, r22
    1882:	0c 94 cb 02 	jmp	0x596	; 0x596 <__subsf3>
    1886:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__floatunsisf>

0000188a <_ZN16Adafruit_AMG88xx5writeEhPhh>:
    188a:	ef 92       	push	r14
    188c:	ff 92       	push	r15
    188e:	0f 93       	push	r16
    1890:	1f 93       	push	r17
    1892:	cf 93       	push	r28
    1894:	df 93       	push	r29
    1896:	c6 2f       	mov	r28, r22
    1898:	7a 01       	movw	r14, r20
    189a:	02 2f       	mov	r16, r18
    189c:	fc 01       	movw	r30, r24
    189e:	60 81       	ld	r22, Z
    18a0:	8d e8       	ldi	r24, 0x8D	; 141
    18a2:	96 e0       	ldi	r25, 0x06	; 6
    18a4:	7f d4       	rcall	.+2302   	; 0x21a4 <_ZN7TwoWire17beginTransmissionEh>
    18a6:	6c 2f       	mov	r22, r28
    18a8:	8d e8       	ldi	r24, 0x8D	; 141
    18aa:	96 e0       	ldi	r25, 0x06	; 6
    18ac:	2e d4       	rcall	.+2140   	; 0x210a <_ZN7TwoWire5writeEh>
    18ae:	e7 01       	movw	r28, r14
    18b0:	10 e0       	ldi	r17, 0x00	; 0
    18b2:	ce 01       	movw	r24, r28
    18b4:	8e 19       	sub	r24, r14
    18b6:	9f 09       	sbc	r25, r15
    18b8:	80 17       	cp	r24, r16
    18ba:	91 07       	cpc	r25, r17
    18bc:	2c f4       	brge	.+10     	; 0x18c8 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x3e>
    18be:	69 91       	ld	r22, Y+
    18c0:	8d e8       	ldi	r24, 0x8D	; 141
    18c2:	96 e0       	ldi	r25, 0x06	; 6
    18c4:	22 d4       	rcall	.+2116   	; 0x210a <_ZN7TwoWire5writeEh>
    18c6:	f5 cf       	rjmp	.-22     	; 0x18b2 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x28>
    18c8:	8d e8       	ldi	r24, 0x8D	; 141
    18ca:	96 e0       	ldi	r25, 0x06	; 6
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	1f 91       	pop	r17
    18d2:	0f 91       	pop	r16
    18d4:	ff 90       	pop	r15
    18d6:	ef 90       	pop	r14
    18d8:	e3 c4       	rjmp	.+2502   	; 0x22a0 <_ZN7TwoWire15endTransmissionEv>

000018da <_ZN16Adafruit_AMG88xx6write8Ehh>:
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	1f 92       	push	r1
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	49 83       	std	Y+1, r20	; 0x01
    18e6:	21 e0       	ldi	r18, 0x01	; 1
    18e8:	ae 01       	movw	r20, r28
    18ea:	4f 5f       	subi	r20, 0xFF	; 255
    18ec:	5f 4f       	sbci	r21, 0xFF	; 255
    18ee:	cd df       	rcall	.-102    	; 0x188a <_ZN16Adafruit_AMG88xx5writeEhPhh>
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <_ZN16Adafruit_AMG88xx16disableInterruptEv>:
    18f8:	fc 01       	movw	r30, r24
    18fa:	24 81       	ldd	r18, Z+4	; 0x04
    18fc:	2e 7f       	andi	r18, 0xFE	; 254
    18fe:	24 83       	std	Z+4, r18	; 0x04
    1900:	21 fb       	bst	r18, 1
    1902:	44 27       	eor	r20, r20
    1904:	40 f9       	bld	r20, 0
    1906:	50 e0       	ldi	r21, 0x00	; 0
    1908:	44 0f       	add	r20, r20
    190a:	55 1f       	adc	r21, r21
    190c:	63 e0       	ldi	r22, 0x03	; 3
    190e:	e5 cf       	rjmp	.-54     	; 0x18da <_ZN16Adafruit_AMG88xx6write8Ehh>

00001910 <_ZN16Adafruit_AMG88xx5beginEh>:
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	ec 01       	movw	r28, r24
    1916:	68 83       	st	Y, r22
    1918:	8d e8       	ldi	r24, 0x8D	; 141
    191a:	96 e0       	ldi	r25, 0x06	; 6
    191c:	34 d4       	rcall	.+2152   	; 0x2186 <_ZN7TwoWire5beginEv>
    191e:	19 82       	std	Y+1, r1	; 0x01
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	ce 01       	movw	r24, r28
    1926:	d9 df       	rcall	.-78     	; 0x18da <_ZN16Adafruit_AMG88xx6write8Ehh>
    1928:	8f e3       	ldi	r24, 0x3F	; 63
    192a:	8a 83       	std	Y+2, r24	; 0x02
    192c:	4f e3       	ldi	r20, 0x3F	; 63
    192e:	61 e0       	ldi	r22, 0x01	; 1
    1930:	ce 01       	movw	r24, r28
    1932:	d3 df       	rcall	.-90     	; 0x18da <_ZN16Adafruit_AMG88xx6write8Ehh>
    1934:	ce 01       	movw	r24, r28
    1936:	e0 df       	rcall	.-64     	; 0x18f8 <_ZN16Adafruit_AMG88xx16disableInterruptEv>
    1938:	8b 81       	ldd	r24, Y+3	; 0x03
    193a:	8e 7f       	andi	r24, 0xFE	; 254
    193c:	8b 83       	std	Y+3, r24	; 0x03
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	62 e0       	ldi	r22, 0x02	; 2
    1942:	ce 01       	movw	r24, r28
    1944:	ca df       	rcall	.-108    	; 0x18da <_ZN16Adafruit_AMG88xx6write8Ehh>
    1946:	64 e6       	ldi	r22, 0x64	; 100
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	f5 db       	rcall	.-2070   	; 0x113a <delay>
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	df 91       	pop	r29
    1954:	cf 91       	pop	r28
    1956:	08 95       	ret

00001958 <_ZN16Adafruit_AMG88xx4readEhPhh>:
    1958:	6f 92       	push	r6
    195a:	7f 92       	push	r7
    195c:	8f 92       	push	r8
    195e:	9f 92       	push	r9
    1960:	af 92       	push	r10
    1962:	bf 92       	push	r11
    1964:	cf 92       	push	r12
    1966:	df 92       	push	r13
    1968:	ef 92       	push	r14
    196a:	ff 92       	push	r15
    196c:	0f 93       	push	r16
    196e:	1f 93       	push	r17
    1970:	cf 93       	push	r28
    1972:	df 93       	push	r29
    1974:	8c 01       	movw	r16, r24
    1976:	66 2e       	mov	r6, r22
    1978:	6a 01       	movw	r12, r20
    197a:	72 2e       	mov	r7, r18
    197c:	c0 e0       	ldi	r28, 0x00	; 0
    197e:	c7 15       	cp	r28, r7
    1980:	78 f5       	brcc	.+94     	; 0x19e0 <_ZN16Adafruit_AMG88xx4readEhPhh+0x88>
    1982:	d7 2d       	mov	r29, r7
    1984:	dc 1b       	sub	r29, r28
    1986:	d1 32       	cpi	r29, 0x21	; 33
    1988:	08 f0       	brcs	.+2      	; 0x198c <_ZN16Adafruit_AMG88xx4readEhPhh+0x34>
    198a:	d0 e2       	ldi	r29, 0x20	; 32
    198c:	f8 01       	movw	r30, r16
    198e:	60 81       	ld	r22, Z
    1990:	8d e8       	ldi	r24, 0x8D	; 141
    1992:	96 e0       	ldi	r25, 0x06	; 6
    1994:	07 d4       	rcall	.+2062   	; 0x21a4 <_ZN7TwoWire17beginTransmissionEh>
    1996:	6c 2f       	mov	r22, r28
    1998:	66 0d       	add	r22, r6
    199a:	8d e8       	ldi	r24, 0x8D	; 141
    199c:	96 e0       	ldi	r25, 0x06	; 6
    199e:	b5 d3       	rcall	.+1898   	; 0x210a <_ZN7TwoWire5writeEh>
    19a0:	8d e8       	ldi	r24, 0x8D	; 141
    19a2:	96 e0       	ldi	r25, 0x06	; 6
    19a4:	7d d4       	rcall	.+2298   	; 0x22a0 <_ZN7TwoWire15endTransmissionEv>
    19a6:	4d 2f       	mov	r20, r29
    19a8:	f8 01       	movw	r30, r16
    19aa:	60 81       	ld	r22, Z
    19ac:	8d e8       	ldi	r24, 0x8D	; 141
    19ae:	96 e0       	ldi	r25, 0x06	; 6
    19b0:	75 d4       	rcall	.+2282   	; 0x229c <_ZN7TwoWire11requestFromEhh>
    19b2:	81 2c       	mov	r8, r1
    19b4:	91 2c       	mov	r9, r1
    19b6:	ad 2e       	mov	r10, r29
    19b8:	b1 2c       	mov	r11, r1
    19ba:	8c 2f       	mov	r24, r28
    19bc:	88 0d       	add	r24, r8
    19be:	8a 14       	cp	r8, r10
    19c0:	9b 04       	cpc	r9, r11
    19c2:	14 f0       	brlt	.+4      	; 0x19c8 <_ZN16Adafruit_AMG88xx4readEhPhh+0x70>
    19c4:	cd 0f       	add	r28, r29
    19c6:	db cf       	rjmp	.-74     	; 0x197e <_ZN16Adafruit_AMG88xx4readEhPhh+0x26>
    19c8:	76 01       	movw	r14, r12
    19ca:	e8 0e       	add	r14, r24
    19cc:	f1 1c       	adc	r15, r1
    19ce:	8d e8       	ldi	r24, 0x8D	; 141
    19d0:	96 e0       	ldi	r25, 0x06	; 6
    19d2:	15 d3       	rcall	.+1578   	; 0x1ffe <_ZN7TwoWire4readEv>
    19d4:	f7 01       	movw	r30, r14
    19d6:	80 83       	st	Z, r24
    19d8:	ff ef       	ldi	r31, 0xFF	; 255
    19da:	8f 1a       	sub	r8, r31
    19dc:	9f 0a       	sbc	r9, r31
    19de:	ed cf       	rjmp	.-38     	; 0x19ba <_ZN16Adafruit_AMG88xx4readEhPhh+0x62>
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	ff 90       	pop	r15
    19ea:	ef 90       	pop	r14
    19ec:	df 90       	pop	r13
    19ee:	cf 90       	pop	r12
    19f0:	bf 90       	pop	r11
    19f2:	af 90       	pop	r10
    19f4:	9f 90       	pop	r9
    19f6:	8f 90       	pop	r8
    19f8:	7f 90       	pop	r7
    19fa:	6f 90       	pop	r6
    19fc:	08 95       	ret

000019fe <_ZN16Adafruit_AMG88xx14readThermistorEv>:
    @brief  read the onboard thermistor
    @returns a the floating point temperature in degrees Celsius
*/
/**************************************************************************/
float Adafruit_AMG88xx::readThermistor()
{
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	cf 93       	push	r28
    1a04:	df 93       	push	r29
    1a06:	1f 92       	push	r1
    1a08:	1f 92       	push	r1
    1a0a:	cd b7       	in	r28, 0x3d	; 61
    1a0c:	de b7       	in	r29, 0x3e	; 62
    1a0e:	8c 01       	movw	r16, r24
	uint8_t raw[2];
	this->read(AMG88xx_TTHL, raw, 2);
    1a10:	22 e0       	ldi	r18, 0x02	; 2
    1a12:	ae 01       	movw	r20, r28
    1a14:	4f 5f       	subi	r20, 0xFF	; 255
    1a16:	5f 4f       	sbci	r21, 0xFF	; 255
    1a18:	6e e0       	ldi	r22, 0x0E	; 14
    1a1a:	9e df       	rcall	.-196    	; 0x1958 <_ZN16Adafruit_AMG88xx4readEhPhh>
	uint16_t recast = ((uint16_t)raw[1] << 8) | ((uint16_t)raw[0]);

	return signedMag12ToFloat(recast) * AMG88xx_THERMISTOR_CONVERSION;
    1a1c:	69 81       	ldd	r22, Y+1	; 0x01
    1a1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1a20:	c8 01       	movw	r24, r16
    1a22:	22 df       	rcall	.-444    	; 0x1868 <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj>
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e8       	ldi	r20, 0x80	; 128
    1a2a:	5d e3       	ldi	r21, 0x3D	; 61
    1a2c:	df d6       	rcall	.+3518   	; 0x27ec <__mulsf3>
}
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <_ZN16Adafruit_AMG88xx10readPixelsEPfh>:
    @param  size Optionsl number of bytes to read (up to 64). Default is 64 bytes.
    @return up to 64 bytes of pixel data in buf
*/
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
    1a3c:	8f 92       	push	r8
    1a3e:	9f 92       	push	r9
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	f6 2e       	mov	r15, r22
    1a5a:	17 2f       	mov	r17, r23
    1a5c:	04 2f       	mov	r16, r20
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    1a5e:	8d b6       	in	r8, 0x3d	; 61
    1a60:	9e b6       	in	r9, 0x3e	; 62
/**************************************************************************/
void Adafruit_AMG88xx::readPixels(float *buf, uint8_t size)
{
	uint16_t recast;
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
    1a62:	24 2f       	mov	r18, r20
    1a64:	22 0f       	add	r18, r18
    1a66:	46 fd       	sbrc	r20, 6
    1a68:	20 e8       	ldi	r18, 0x80	; 128
	uint8_t rawArray[bytesToRead];
    1a6a:	4d b7       	in	r20, 0x3d	; 61
    1a6c:	5e b7       	in	r21, 0x3e	; 62
    1a6e:	42 1b       	sub	r20, r18
    1a70:	51 09       	sbc	r21, r1
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	5e bf       	out	0x3e, r21	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	4d bf       	out	0x3d, r20	; 61
    1a7c:	ed b7       	in	r30, 0x3d	; 61
    1a7e:	fe b7       	in	r31, 0x3e	; 62
    1a80:	31 96       	adiw	r30, 0x01	; 1
    1a82:	5f 01       	movw	r10, r30
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
    1a84:	af 01       	movw	r20, r30
    1a86:	60 e8       	ldi	r22, 0x80	; 128
    1a88:	67 df       	rcall	.-306    	; 0x1958 <_ZN16Adafruit_AMG88xx4readEhPhh>
    1a8a:	cf 2c       	mov	r12, r15
    1a8c:	d1 2e       	mov	r13, r17
	
	for(int i=0; i<size; i++){
    1a8e:	e1 2c       	mov	r14, r1
    1a90:	f1 2c       	mov	r15, r1
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	e0 16       	cp	r14, r16
    1a96:	f1 06       	cpc	r15, r17
    1a98:	54 f5       	brge	.+84     	; 0x1aee <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0xb2>
		uint8_t pos = i << 1;
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
    1a9a:	8e 2d       	mov	r24, r14
    1a9c:	88 0f       	add	r24, r24
    1a9e:	f5 01       	movw	r30, r10
    1aa0:	e8 0f       	add	r30, r24
    1aa2:	f1 1d       	adc	r31, r1
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
    1aa4:	61 81       	ldd	r22, Z+1	; 0x01
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	76 2f       	mov	r23, r22
    1aaa:	66 27       	eor	r22, r22
    1aac:	80 81       	ld	r24, Z
    1aae:	68 2b       	or	r22, r24
    1ab0:	94 e0       	ldi	r25, 0x04	; 4
    1ab2:	66 0f       	add	r22, r22
    1ab4:	77 1f       	adc	r23, r23
    1ab6:	9a 95       	dec	r25
    1ab8:	e1 f7       	brne	.-8      	; 0x1ab2 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x76>
    1aba:	24 e0       	ldi	r18, 0x04	; 4
    1abc:	75 95       	asr	r23
    1abe:	67 95       	ror	r22
    1ac0:	2a 95       	dec	r18
    1ac2:	e1 f7       	brne	.-8      	; 0x1abc <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x80>
    1ac4:	07 2e       	mov	r0, r23
    1ac6:	00 0c       	add	r0, r0
    1ac8:	88 0b       	sbc	r24, r24
    1aca:	99 0b       	sbc	r25, r25
    1acc:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__floatsisf>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	40 e8       	ldi	r20, 0x80	; 128
    1ad6:	5e e3       	ldi	r21, 0x3E	; 62
    1ad8:	89 d6       	rcall	.+3346   	; 0x27ec <__mulsf3>
    1ada:	f6 01       	movw	r30, r12
    1adc:	61 93       	st	Z+, r22
    1ade:	71 93       	st	Z+, r23
    1ae0:	81 93       	st	Z+, r24
    1ae2:	91 93       	st	Z+, r25
    1ae4:	6f 01       	movw	r12, r30
	float converted;
	uint8_t bytesToRead = min((uint8_t)(size << 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE << 1));
	uint8_t rawArray[bytesToRead];
	this->read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);
	
	for(int i=0; i<size; i++){
    1ae6:	ff ef       	ldi	r31, 0xFF	; 255
    1ae8:	ef 1a       	sub	r14, r31
    1aea:	ff 0a       	sbc	r15, r31
    1aec:	d3 cf       	rjmp	.-90     	; 0x1a94 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x58>
		recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
		
		converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
		buf[i] = converted;
	}
}
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	9e be       	out	0x3e, r9	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	8d be       	out	0x3d, r8	; 61
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	df 90       	pop	r13
    1b06:	cf 90       	pop	r12
    1b08:	bf 90       	pop	r11
    1b0a:	af 90       	pop	r10
    1b0c:	9f 90       	pop	r9
    1b0e:	8f 90       	pop	r8
    1b10:	08 95       	ret

00001b12 <_ZN6HCSR04C1Eiiii>:
    pinMode(echo, INPUT);
    _trigger = trigger;
    _echo = echo;
}

HCSR04::HCSR04(int trigger, int echo, int minRange, int maxRange)
    1b12:	af 92       	push	r10
    1b14:	bf 92       	push	r11
    1b16:	cf 92       	push	r12
    1b18:	df 92       	push	r13
    1b1a:	ef 92       	push	r14
    1b1c:	ff 92       	push	r15
    1b1e:	0f 93       	push	r16
    1b20:	1f 93       	push	r17
    1b22:	cf 93       	push	r28
    1b24:	df 93       	push	r29
    1b26:	ec 01       	movw	r28, r24
    1b28:	e6 2e       	mov	r14, r22
    1b2a:	a7 2e       	mov	r10, r23
    1b2c:	f4 2e       	mov	r15, r20
    1b2e:	b5 2e       	mov	r11, r21
    1b30:	69 01       	movw	r12, r18
    1b32:	8f ef       	ldi	r24, 0xFF	; 255
    1b34:	9f ef       	ldi	r25, 0xFF	; 255
    1b36:	9d 83       	std	Y+5, r25	; 0x05
    1b38:	8c 83       	std	Y+4, r24	; 0x04
    1b3a:	9f 83       	std	Y+7, r25	; 0x07
    1b3c:	8e 83       	std	Y+6, r24	; 0x06
{
    pinMode(trigger, OUTPUT);
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	8e 2d       	mov	r24, r14
    1b42:	f8 db       	rcall	.-2064   	; 0x1334 <pinMode>
    pinMode(echo, INPUT);
    1b44:	60 e0       	ldi	r22, 0x00	; 0
    1b46:	8f 2d       	mov	r24, r15
    1b48:	f5 db       	rcall	.-2070   	; 0x1334 <pinMode>
    _trigger = trigger;
    1b4a:	e8 82       	st	Y, r14
    1b4c:	a9 82       	std	Y+1, r10	; 0x01
    _echo = echo;
    1b4e:	fa 82       	std	Y+2, r15	; 0x02
    1b50:	bb 82       	std	Y+3, r11	; 0x03
	_minRange = minRange;
    1b52:	dd 82       	std	Y+5, r13	; 0x05
    1b54:	cc 82       	std	Y+4, r12	; 0x04
    _maxRange = maxRange;
    1b56:	1f 83       	std	Y+7, r17	; 0x07
    1b58:	0e 83       	std	Y+6, r16	; 0x06
}
    1b5a:	df 91       	pop	r29
    1b5c:	cf 91       	pop	r28
    1b5e:	1f 91       	pop	r17
    1b60:	0f 91       	pop	r16
    1b62:	ff 90       	pop	r15
    1b64:	ef 90       	pop	r14
    1b66:	df 90       	pop	r13
    1b68:	cf 90       	pop	r12
    1b6a:	bf 90       	pop	r11
    1b6c:	af 90       	pop	r10
    1b6e:	08 95       	ret

00001b70 <_ZN6HCSR0418echoInMicrosecondsEv>:

unsigned int HCSR04::echoInMicroseconds()
{
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	cf 93       	push	r28
    1b7a:	df 93       	push	r29
    1b7c:	ec 01       	movw	r28, r24
    digitalWrite(_trigger, LOW);
    1b7e:	60 e0       	ldi	r22, 0x00	; 0
    1b80:	88 81       	ld	r24, Y
    1b82:	14 dc       	rcall	.-2008   	; 0x13ac <digitalWrite>
    delayMicroseconds(5);
    1b84:	85 e0       	ldi	r24, 0x05	; 5
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	12 db       	rcall	.-2524   	; 0x11ae <delayMicroseconds>
    digitalWrite(_trigger, HIGH);
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	88 81       	ld	r24, Y
    1b8e:	0e dc       	rcall	.-2020   	; 0x13ac <digitalWrite>
    delayMicroseconds(10);
    1b90:	8a e0       	ldi	r24, 0x0A	; 10
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	0c db       	rcall	.-2536   	; 0x11ae <delayMicroseconds>
    digitalWrite(_trigger, LOW);  
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	88 81       	ld	r24, Y
    1b9a:	08 dc       	rcall	.-2032   	; 0x13ac <digitalWrite>
    // Why don't I just use? "return pulseIn(_echo, HIGH);"
	// Arduino Primo doesn't have access to pulseIn.
    while(digitalRead(_echo) == LOW);
    1b9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9e:	34 dc       	rcall	.-1944   	; 0x1408 <digitalRead>
    1ba0:	89 2b       	or	r24, r25
    1ba2:	e1 f3       	breq	.-8      	; 0x1b9c <_ZN6HCSR0418echoInMicrosecondsEv+0x2c>

    int pulseStart = micros();
    1ba4:	a5 da       	rcall	.-2742   	; 0x10f0 <micros>
    1ba6:	6b 01       	movw	r12, r22
    1ba8:	7c 01       	movw	r14, r24

    while(digitalRead(_echo) == HIGH);
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	2d dc       	rcall	.-1958   	; 0x1408 <digitalRead>
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	e1 f3       	breq	.-8      	; 0x1baa <_ZN6HCSR0418echoInMicrosecondsEv+0x3a>
    1bb2:	9e da       	rcall	.-2756   	; 0x10f0 <micros>

    return micros() - pulseStart;
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	8c 19       	sub	r24, r12
}
    1bb8:	9d 09       	sbc	r25, r13
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	08 95       	ret

00001bc8 <_ZN6HCSR0421distanceInMillimetersEv>:
    1bc8:	cf 93       	push	r28
    1bca:	df 93       	push	r29

int HCSR04::distanceInMillimeters()
{
    1bcc:	ec 01       	movw	r28, r24
    int duration = echoInMicroseconds();
    1bce:	d0 df       	rcall	.-96     	; 0x1b70 <_ZN6HCSR0418echoInMicrosecondsEv>
    
    // Given the speed of sound in air is 332m/s = 3320cm/s = 0.0332cm/us).
    int distance = (duration / 2) * 0.332;
    1bd0:	97 fd       	sbrc	r25, 7
    1bd2:	01 96       	adiw	r24, 0x01	; 1
    1bd4:	bc 01       	movw	r22, r24
    1bd6:	75 95       	asr	r23
    1bd8:	67 95       	ror	r22
    1bda:	07 2e       	mov	r0, r23
    1bdc:	00 0c       	add	r0, r0
    1bde:	88 0b       	sbc	r24, r24
    1be0:	99 0b       	sbc	r25, r25
    1be2:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__floatsisf>
    1be6:	27 ee       	ldi	r18, 0xE7	; 231
    1be8:	3b ef       	ldi	r19, 0xFB	; 251
    1bea:	49 ea       	ldi	r20, 0xA9	; 169
    1bec:	5e e3       	ldi	r21, 0x3E	; 62
    1bee:	fe d5       	rcall	.+3068   	; 0x27ec <__mulsf3>
    1bf0:	0e 94 30 03 	call	0x660	; 0x660 <__fixsfsi>
    1bf4:	9b 01       	movw	r18, r22
	
	if (_minRange == -1 && _maxRange == -1)
    1bf6:	4c 81       	ldd	r20, Y+4	; 0x04
    1bf8:	5d 81       	ldd	r21, Y+5	; 0x05
    1bfa:	4f 3f       	cpi	r20, 0xFF	; 255
    1bfc:	af ef       	ldi	r26, 0xFF	; 255
    1bfe:	5a 07       	cpc	r21, r26
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <_ZN6HCSR0421distanceInMillimetersEv+0x42>
    1c02:	ee 81       	ldd	r30, Y+6	; 0x06
    1c04:	ff 81       	ldd	r31, Y+7	; 0x07
    1c06:	31 96       	adiw	r30, 0x01	; 1
    1c08:	59 f0       	breq	.+22     	; 0x1c20 <_ZN6HCSR0421distanceInMillimetersEv+0x58>
	{
		return distance;
	}
	
	if (distance > _minRange && distance < _maxRange)
    1c0a:	42 17       	cp	r20, r18
    1c0c:	53 07       	cpc	r21, r19
    1c0e:	2c f4       	brge	.+10     	; 0x1c1a <_ZN6HCSR0421distanceInMillimetersEv+0x52>
    1c10:	4e 81       	ldd	r20, Y+6	; 0x06
    1c12:	5f 81       	ldd	r21, Y+7	; 0x07
    1c14:	24 17       	cp	r18, r20
    1c16:	35 07       	cpc	r19, r21
    1c18:	1c f0       	brlt	.+6      	; 0x1c20 <_ZN6HCSR0421distanceInMillimetersEv+0x58>
	{
		return distance;
	}	
	
	return -1;
    1c1a:	8f ef       	ldi	r24, 0xFF	; 255
    1c1c:	9f ef       	ldi	r25, 0xFF	; 255
    1c1e:	01 c0       	rjmp	.+2      	; 0x1c22 <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
    1c20:	cb 01       	movw	r24, r22
}
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	08 95       	ret

00001c28 <_ZN6HCSR048ToStringEv>:
{
    Serial.println(ToString());
}

String HCSR04::ToString()
{
    1c28:	ef 92       	push	r14
    1c2a:	ff 92       	push	r15
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	2c 97       	sbiw	r28, 0x0c	; 12
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	8c 01       	movw	r16, r24
    1c46:	7b 01       	movw	r14, r22
    String distanceString = "{\"Protocol\":\"Bifrost\",\"Device\":\"HCSR04\",\"Driver version\":\"2.0.0\",\"Properties\":{\"Distance\":<<DISTANCE>>}}";
    1c48:	61 e1       	ldi	r22, 0x11	; 17
    1c4a:	73 e0       	ldi	r23, 0x03	; 3
    1c4c:	73 dc       	rcall	.-1818   	; 0x1534 <_ZN6StringC1EPKc>
    distanceString.replace("<<DISTANCE>>", String(distanceInMillimeters()));
    1c4e:	c7 01       	movw	r24, r14
    1c50:	bb df       	rcall	.-138    	; 0x1bc8 <_ZN6HCSR0421distanceInMillimetersEv>
    1c52:	4a e0       	ldi	r20, 0x0A	; 10
    1c54:	bc 01       	movw	r22, r24
    1c56:	ce 01       	movw	r24, r28
    1c58:	07 96       	adiw	r24, 0x07	; 7
    1c5a:	95 dc       	rcall	.-1750   	; 0x1586 <_ZN6StringC1Eih>
    1c5c:	6a e7       	ldi	r22, 0x7A	; 122
    1c5e:	73 e0       	ldi	r23, 0x03	; 3
    1c60:	ce 01       	movw	r24, r28
    1c62:	01 96       	adiw	r24, 0x01	; 1
    1c64:	67 dc       	rcall	.-1842   	; 0x1534 <_ZN6StringC1EPKc>
    1c66:	ae 01       	movw	r20, r28
    1c68:	49 5f       	subi	r20, 0xF9	; 249
    1c6a:	5f 4f       	sbci	r21, 0xFF	; 255
    1c6c:	be 01       	movw	r22, r28
    1c6e:	6f 5f       	subi	r22, 0xFF	; 255
    1c70:	7f 4f       	sbci	r23, 0xFF	; 255
    1c72:	c8 01       	movw	r24, r16
    1c74:	01 dd       	rcall	.-1534   	; 0x1678 <_ZN6String7replaceERKS_S1_>
    1c76:	ce 01       	movw	r24, r28
    1c78:	01 96       	adiw	r24, 0x01	; 1
    1c7a:	ee db       	rcall	.-2084   	; 0x1458 <_ZN6StringD1Ev>
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	07 96       	adiw	r24, 0x07	; 7
    1c80:	eb db       	rcall	.-2090   	; 0x1458 <_ZN6StringD1Ev>

    return distanceString;
    1c82:	c8 01       	movw	r24, r16
    1c84:	2c 96       	adiw	r28, 0x0c	; 12
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	1f 91       	pop	r17
    1c96:	0f 91       	pop	r16
    1c98:	ff 90       	pop	r15
    1c9a:	ef 90       	pop	r14
    1c9c:	08 95       	ret

00001c9e <_ZN14SoftwareSerial4readEv>:
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
}
    1c9e:	20 91 8b 06 	lds	r18, 0x068B	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1ca2:	30 91 8c 06 	lds	r19, 0x068C	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1ca6:	28 17       	cp	r18, r24
    1ca8:	39 07       	cpc	r19, r25
    1caa:	a9 f4       	brne	.+42     	; 0x1cd6 <_ZN14SoftwareSerial4readEv+0x38>
    1cac:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cb0:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1cb4:	98 17       	cp	r25, r24
    1cb6:	79 f0       	breq	.+30     	; 0x1cd6 <_ZN14SoftwareSerial4readEv+0x38>
    1cb8:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	e5 57       	subi	r30, 0x75	; 117
    1cc0:	fa 4f       	sbci	r31, 0xFA	; 250
    1cc2:	80 81       	ld	r24, Z
    1cc4:	20 91 89 05 	lds	r18, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	2f 5f       	subi	r18, 0xFF	; 255
    1ccc:	3f 4f       	sbci	r19, 0xFF	; 255
    1cce:	20 93 89 05 	sts	0x0589, r18	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	08 95       	ret
    1cd6:	8f ef       	ldi	r24, 0xFF	; 255
    1cd8:	9f ef       	ldi	r25, 0xFF	; 255
    1cda:	08 95       	ret

00001cdc <_ZN14SoftwareSerial5writeEh>:
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	5c 96       	adiw	r26, 0x1c	; 28
    1ce6:	8d 91       	ld	r24, X+
    1ce8:	9c 91       	ld	r25, X
    1cea:	5d 97       	sbiw	r26, 0x1d	; 29
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	39 f4       	brne	.+14     	; 0x1cfe <_ZN14SoftwareSerial5writeEh+0x22>
    1cf0:	21 e0       	ldi	r18, 0x01	; 1
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	13 96       	adiw	r26, 0x03	; 3
    1cf6:	3c 93       	st	X, r19
    1cf8:	2e 93       	st	-X, r18
    1cfa:	12 97       	sbiw	r26, 0x02	; 2
    1cfc:	3b c0       	rjmp	.+118    	; 0x1d74 <_ZN14SoftwareSerial5writeEh+0x98>
    1cfe:	51 96       	adiw	r26, 0x11	; 17
    1d00:	ed 91       	ld	r30, X+
    1d02:	fc 91       	ld	r31, X
    1d04:	52 97       	sbiw	r26, 0x12	; 18
    1d06:	50 96       	adiw	r26, 0x10	; 16
    1d08:	2c 91       	ld	r18, X
    1d0a:	50 97       	sbiw	r26, 0x10	; 16
    1d0c:	32 2f       	mov	r19, r18
    1d0e:	30 95       	com	r19
    1d10:	1f b7       	in	r17, 0x3f	; 63
    1d12:	5e 96       	adiw	r26, 0x1e	; 30
    1d14:	4c 91       	ld	r20, X
    1d16:	5e 97       	sbiw	r26, 0x1e	; 30
    1d18:	74 2f       	mov	r23, r20
    1d1a:	72 70       	andi	r23, 0x02	; 2
    1d1c:	41 fd       	sbrc	r20, 1
    1d1e:	60 95       	com	r22
    1d20:	f8 94       	cli
    1d22:	40 81       	ld	r20, Z
    1d24:	77 23       	and	r23, r23
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <_ZN14SoftwareSerial5writeEh+0x50>
    1d28:	42 2b       	or	r20, r18
    1d2a:	01 c0       	rjmp	.+2      	; 0x1d2e <_ZN14SoftwareSerial5writeEh+0x52>
    1d2c:	43 23       	and	r20, r19
    1d2e:	40 83       	st	Z, r20
    1d30:	ec 01       	movw	r28, r24
    1d32:	21 97       	sbiw	r28, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <_ZN14SoftwareSerial5writeEh+0x56>
    1d36:	48 e0       	ldi	r20, 0x08	; 8
    1d38:	50 81       	ld	r21, Z
    1d3a:	60 ff       	sbrs	r22, 0
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <_ZN14SoftwareSerial5writeEh+0x66>
    1d3e:	52 2b       	or	r21, r18
    1d40:	01 c0       	rjmp	.+2      	; 0x1d44 <_ZN14SoftwareSerial5writeEh+0x68>
    1d42:	53 23       	and	r21, r19
    1d44:	50 83       	st	Z, r21
    1d46:	ec 01       	movw	r28, r24
    1d48:	21 97       	sbiw	r28, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <_ZN14SoftwareSerial5writeEh+0x6c>
    1d4c:	66 95       	lsr	r22
    1d4e:	41 50       	subi	r20, 0x01	; 1
    1d50:	99 f7       	brne	.-26     	; 0x1d38 <_ZN14SoftwareSerial5writeEh+0x5c>
    1d52:	80 81       	ld	r24, Z
    1d54:	77 23       	and	r23, r23
    1d56:	19 f0       	breq	.+6      	; 0x1d5e <_ZN14SoftwareSerial5writeEh+0x82>
    1d58:	83 23       	and	r24, r19
    1d5a:	80 83       	st	Z, r24
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <_ZN14SoftwareSerial5writeEh+0x86>
    1d5e:	28 2b       	or	r18, r24
    1d60:	20 83       	st	Z, r18
    1d62:	1f bf       	out	0x3f, r17	; 63
    1d64:	5c 96       	adiw	r26, 0x1c	; 28
    1d66:	8d 91       	ld	r24, X+
    1d68:	9c 91       	ld	r25, X
    1d6a:	5d 97       	sbiw	r26, 0x1d	; 29
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <_ZN14SoftwareSerial5writeEh+0x90>
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	08 95       	ret

00001d7c <_ZN14SoftwareSerial5flushEv>:
    1d7c:	08 95       	ret

00001d7e <_ZN14SoftwareSerial4peekEv>:
    1d7e:	20 91 8b 06 	lds	r18, 0x068B	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1d82:	30 91 8c 06 	lds	r19, 0x068C	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1d86:	28 17       	cp	r18, r24
    1d88:	39 07       	cpc	r19, r25
    1d8a:	71 f4       	brne	.+28     	; 0x1da8 <_ZN14SoftwareSerial4peekEv+0x2a>
    1d8c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1d90:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1d94:	98 17       	cp	r25, r24
    1d96:	41 f0       	breq	.+16     	; 0x1da8 <_ZN14SoftwareSerial4peekEv+0x2a>
    1d98:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	e5 57       	subi	r30, 0x75	; 117
    1da0:	fa 4f       	sbci	r31, 0xFA	; 250
    1da2:	80 81       	ld	r24, Z
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	08 95       	ret
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	9f ef       	ldi	r25, 0xFF	; 255
    1dac:	08 95       	ret

00001dae <_ZN14SoftwareSerial9availableEv>:
    1dae:	20 91 8b 06 	lds	r18, 0x068B	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1db2:	30 91 8c 06 	lds	r19, 0x068C	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1db6:	28 17       	cp	r18, r24
    1db8:	39 07       	cpc	r19, r25
    1dba:	39 f4       	brne	.+14     	; 0x1dca <_ZN14SoftwareSerial9availableEv+0x1c>
    1dbc:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1dc0:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1dc4:	89 1b       	sub	r24, r25
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	08 95       	ret
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	08 95       	ret

00001dd0 <_ZN14SoftwareSerial13stopListeningEv>:
    1dd0:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1dd4:	f0 91 8c 06 	lds	r31, 0x068C	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1dd8:	e8 17       	cp	r30, r24
    1dda:	f9 07       	cpc	r31, r25
    1ddc:	69 f4       	brne	.+26     	; 0x1df8 <_ZN14SoftwareSerial13stopListeningEv+0x28>
    1dde:	a3 89       	ldd	r26, Z+19	; 0x13
    1de0:	b4 89       	ldd	r27, Z+20	; 0x14
    1de2:	9c 91       	ld	r25, X
    1de4:	85 89       	ldd	r24, Z+21	; 0x15
    1de6:	80 95       	com	r24
    1de8:	89 23       	and	r24, r25
    1dea:	8c 93       	st	X, r24
    1dec:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1df0:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	08 95       	ret
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	08 95       	ret

00001dfc <__vector_10>:
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
    1dfc:	1f 92       	push	r1
    1dfe:	0f 92       	push	r0
    1e00:	0f b6       	in	r0, 0x3f	; 63
    1e02:	0f 92       	push	r0
    1e04:	11 24       	eor	r1, r1
    1e06:	0b b6       	in	r0, 0x3b	; 59
    1e08:	0f 92       	push	r0
    1e0a:	2f 93       	push	r18
    1e0c:	3f 93       	push	r19
    1e0e:	4f 93       	push	r20
    1e10:	5f 93       	push	r21
    1e12:	6f 93       	push	r22
    1e14:	7f 93       	push	r23
    1e16:	8f 93       	push	r24
    1e18:	9f 93       	push	r25
    1e1a:	af 93       	push	r26
    1e1c:	bf 93       	push	r27
    1e1e:	ef 93       	push	r30
    1e20:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
    1e22:	e0 91 8b 06 	lds	r30, 0x068B	; 0x80068b <_ZN14SoftwareSerial13active_objectE>
    1e26:	f0 91 8c 06 	lds	r31, 0x068C	; 0x80068c <_ZN14SoftwareSerial13active_objectE+0x1>
    1e2a:	30 97       	sbiw	r30, 0x00	; 0
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <__vector_10+0x34>
    1e2e:	4f c0       	rjmp	.+158    	; 0x1ece <__vector_10+0xd2>

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e30:	96 8d       	ldd	r25, Z+30	; 0x1e
    1e32:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e34:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e36:	85 85       	ldd	r24, Z+13	; 0x0d
    1e38:	91 ff       	sbrs	r25, 1
    1e3a:	04 c0       	rjmp	.+8      	; 0x1e44 <__vector_10+0x48>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e3c:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e3e:	89 23       	and	r24, r25
    1e40:	29 f4       	brne	.+10     	; 0x1e4c <__vector_10+0x50>
    1e42:	45 c0       	rjmp	.+138    	; 0x1ece <__vector_10+0xd2>
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e44:	9c 91       	ld	r25, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
    1e46:	89 23       	and	r24, r25
    1e48:	09 f0       	breq	.+2      	; 0x1e4c <__vector_10+0x50>
    1e4a:	41 c0       	rjmp	.+130    	; 0x1ece <__vector_10+0xd2>
void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    else
      *_pcint_maskreg &= ~_pcint_maskvalue;
    1e4c:	a3 89       	ldd	r26, Z+19	; 0x13
    1e4e:	b4 89       	ldd	r27, Z+20	; 0x14
    1e50:	9c 91       	ld	r25, X
    1e52:	85 89       	ldd	r24, Z+21	; 0x15
    1e54:	80 95       	com	r24
    1e56:	89 23       	and	r24, r25
    1e58:	8c 93       	st	X, r24
	__asm__ volatile (
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1e5a:	86 89       	ldd	r24, Z+22	; 0x16
    1e5c:	97 89       	ldd	r25, Z+23	; 0x17
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <__vector_10+0x62>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
    1e62:	60 8d       	ldd	r22, Z+24	; 0x18
    1e64:	71 8d       	ldd	r23, Z+25	; 0x19
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e66:	a6 85       	ldd	r26, Z+14	; 0x0e
    1e68:	b7 85       	ldd	r27, Z+15	; 0x0f
    1e6a:	55 85       	ldd	r21, Z+13	; 0x0d
    1e6c:	38 e0       	ldi	r19, 0x08	; 8
    "push r26 \n\t"
    "push r27 \n\t"
    ::);
#endif  

  uint8_t d = 0;
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	cb 01       	movw	r24, r22
    1e72:	01 97       	sbiw	r24, 0x01	; 1
    1e74:	f1 f7       	brne	.-4      	; 0x1e72 <__vector_10+0x76>

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
    1e76:	82 2f       	mov	r24, r18
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	95 95       	asr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	28 2f       	mov	r18, r24
#endif
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
    1e80:	4c 91       	ld	r20, X
    for (uint8_t i=8; i > 0; --i)
    {
      tunedDelay(_rx_delay_intrabit);
      d >>= 1;
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
    1e82:	45 23       	and	r20, r21
    1e84:	09 f0       	breq	.+2      	; 0x1e88 <__vector_10+0x8c>
        d |= 0x80;
    1e86:	20 68       	ori	r18, 0x80	; 128
    1e88:	31 50       	subi	r19, 0x01	; 1
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=8; i > 0; --i)
    1e8a:	91 f7       	brne	.-28     	; 0x1e70 <__vector_10+0x74>
      DebugPulse(_DEBUG_PIN2, 1);
      if (rx_pin_read())
        d |= 0x80;
    }

    if (_inverse_logic)
    1e8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e8e:	81 fd       	sbrc	r24, 1
      d = ~d;
    1e90:	20 95       	com	r18

    // if buffer full, set the overflow flag and return
    uint8_t next = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
    1e92:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	01 96       	adiw	r24, 0x01	; 1
    if (next != _receive_buffer_head)
    1e9a:	30 91 89 05 	lds	r19, 0x0589	; 0x800589 <_ZN14SoftwareSerial20_receive_buffer_headE>
    1e9e:	38 17       	cp	r19, r24
    1ea0:	49 f0       	breq	.+18     	; 0x1eb4 <__vector_10+0xb8>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
    1ea2:	a0 91 8a 05 	lds	r26, 0x058A	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	a5 57       	subi	r26, 0x75	; 117
    1eaa:	ba 4f       	sbci	r27, 0xFA	; 250
    1eac:	2c 93       	st	X, r18
      _receive_buffer_tail = next;
    1eae:	80 93 8a 05 	sts	0x058A, r24	; 0x80058a <_ZN14SoftwareSerial20_receive_buffer_tailE>
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <__vector_10+0xbe>
    } 
    else 
    {
      DebugPulse(_DEBUG_PIN1, 1);
      _buffer_overflow = true;
    1eb4:	86 8d       	ldd	r24, Z+30	; 0x1e
    1eb6:	81 60       	ori	r24, 0x01	; 1
    1eb8:	86 8f       	std	Z+30, r24	; 0x1e
    1eba:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ebc:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <__vector_10+0xc2>
}

void SoftwareSerial::setRxIntMsk(bool enable)
{
    if (enable)
      *_pcint_maskreg |= _pcint_maskvalue;
    1ec2:	a3 89       	ldd	r26, Z+19	; 0x13
    1ec4:	b4 89       	ldd	r27, Z+20	; 0x14
    1ec6:	9c 91       	ld	r25, X
    1ec8:	85 89       	ldd	r24, Z+21	; 0x15
    1eca:	89 2b       	or	r24, r25
    1ecc:	8c 93       	st	X, r24

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
    1ece:	ff 91       	pop	r31
    1ed0:	ef 91       	pop	r30
    1ed2:	bf 91       	pop	r27
    1ed4:	af 91       	pop	r26
    1ed6:	9f 91       	pop	r25
    1ed8:	8f 91       	pop	r24
    1eda:	7f 91       	pop	r23
    1edc:	6f 91       	pop	r22
    1ede:	5f 91       	pop	r21
    1ee0:	4f 91       	pop	r20
    1ee2:	3f 91       	pop	r19
    1ee4:	2f 91       	pop	r18
    1ee6:	0f 90       	pop	r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
    1ef4:	2b e8       	ldi	r18, 0x8B	; 139
    1ef6:	33 e0       	ldi	r19, 0x03	; 3
    1ef8:	fc 01       	movw	r30, r24
    1efa:	31 83       	std	Z+1, r19	; 0x01
    1efc:	20 83       	st	Z, r18
      *_pcint_maskreg &= ~_pcint_maskvalue;
}

void SoftwareSerial::end()
{
  stopListening();
    1efe:	68 cf       	rjmp	.-304    	; 0x1dd0 <_ZN14SoftwareSerial13stopListeningEv>

00001f00 <_ZN14SoftwareSerial5setTXEh>:
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
{
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	ec 01       	movw	r28, r24
    1f08:	16 2f       	mov	r17, r22
  // First write, then set output. If we do this the other way around,
  // the pin would be output low for a short while before switching to
  // output high. Now, it is input with pullup for a short while, which
  // is fine. With inverse logic, either order is fine.
  digitalWrite(tx, _inverse_logic ? LOW : HIGH);
    1f0a:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f0c:	66 95       	lsr	r22
    1f0e:	61 70       	andi	r22, 0x01	; 1
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	68 27       	eor	r22, r24
    1f14:	81 2f       	mov	r24, r17
    1f16:	4a da       	rcall	.-2924   	; 0x13ac <digitalWrite>
  pinMode(tx, OUTPUT);
    1f18:	61 e0       	ldi	r22, 0x01	; 1
    1f1a:	81 2f       	mov	r24, r17
    1f1c:	0b da       	rcall	.-3050   	; 0x1334 <pinMode>
  _transmitBitMask = digitalPinToBitMask(tx);
    1f1e:	81 2f       	mov	r24, r17
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	fc 01       	movw	r30, r24
    1f24:	e2 5b       	subi	r30, 0xB2	; 178
    1f26:	fe 4f       	sbci	r31, 0xFE	; 254
    1f28:	e4 91       	lpm	r30, Z
    1f2a:	e8 8b       	std	Y+16, r30	; 0x10
  uint8_t port = digitalPinToPort(tx);
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	ec 56       	subi	r30, 0x6C	; 108
    1f30:	fe 4f       	sbci	r31, 0xFE	; 254
    1f32:	e4 91       	lpm	r30, Z
  _transmitPortRegister = portOutputRegister(port);
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	ec 50       	subi	r30, 0x0C	; 12
    1f3c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f3e:	85 91       	lpm	r24, Z+
    1f40:	94 91       	lpm	r25, Z
    1f42:	9a 8b       	std	Y+18, r25	; 0x12
    1f44:	89 8b       	std	Y+17, r24	; 0x11
}
    1f46:	df 91       	pop	r29
    1f48:	cf 91       	pop	r28
    1f4a:	1f 91       	pop	r17
    1f4c:	08 95       	ret

00001f4e <_ZN14SoftwareSerial5setRXEh>:

void SoftwareSerial::setRX(uint8_t rx)
{
    1f4e:	1f 93       	push	r17
    1f50:	cf 93       	push	r28
    1f52:	df 93       	push	r29
    1f54:	ec 01       	movw	r28, r24
    1f56:	16 2f       	mov	r17, r22
  pinMode(rx, INPUT);
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	81 2f       	mov	r24, r17
    1f5c:	eb d9       	rcall	.-3114   	; 0x1334 <pinMode>
  if (!_inverse_logic)
    1f5e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f60:	81 fd       	sbrc	r24, 1
    1f62:	03 c0       	rjmp	.+6      	; 0x1f6a <_ZN14SoftwareSerial5setRXEh+0x1c>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	81 2f       	mov	r24, r17
    1f68:	21 da       	rcall	.-3006   	; 0x13ac <digitalWrite>
  _receivePin = rx;
    1f6a:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
    1f6c:	81 2f       	mov	r24, r17
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	fc 01       	movw	r30, r24
    1f72:	e2 5b       	subi	r30, 0xB2	; 178
    1f74:	fe 4f       	sbci	r31, 0xFE	; 254
    1f76:	e4 91       	lpm	r30, Z
    1f78:	ed 87       	std	Y+13, r30	; 0x0d
  uint8_t port = digitalPinToPort(rx);
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	ec 56       	subi	r30, 0x6C	; 108
    1f7e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f80:	e4 91       	lpm	r30, Z
  _receivePortRegister = portInputRegister(port);
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e6 52       	subi	r30, 0x26	; 38
    1f8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8c:	85 91       	lpm	r24, Z+
    1f8e:	94 91       	lpm	r25, Z
    1f90:	9f 87       	std	Y+15, r25	; 0x0f
    1f92:	8e 87       	std	Y+14, r24	; 0x0e
}
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	08 95       	ret

00001f9c <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	ec 01       	movw	r28, r24
    1fa4:	16 2f       	mov	r17, r22
    1fa6:	1b 82       	std	Y+3, r1	; 0x03
    1fa8:	1a 82       	std	Y+2, r1	; 0x02
    1faa:	88 ee       	ldi	r24, 0xE8	; 232
    1fac:	93 e0       	ldi	r25, 0x03	; 3
    1fae:	a0 e0       	ldi	r26, 0x00	; 0
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	8c 83       	std	Y+4, r24	; 0x04
    1fb4:	9d 83       	std	Y+5, r25	; 0x05
    1fb6:	ae 83       	std	Y+6, r26	; 0x06
    1fb8:	bf 83       	std	Y+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
    1fba:	8b e8       	ldi	r24, 0x8B	; 139
    1fbc:	93 e0       	ldi	r25, 0x03	; 3
    1fbe:	99 83       	std	Y+1, r25	; 0x01
    1fc0:	88 83       	st	Y, r24
    1fc2:	1f 8a       	std	Y+23, r1	; 0x17
    1fc4:	1e 8a       	std	Y+22, r1	; 0x16
    1fc6:	19 8e       	std	Y+25, r1	; 0x19
    1fc8:	18 8e       	std	Y+24, r1	; 0x18
    1fca:	1b 8e       	std	Y+27, r1	; 0x1b
    1fcc:	1a 8e       	std	Y+26, r1	; 0x1a
    1fce:	1d 8e       	std	Y+29, r1	; 0x1d
    1fd0:	1c 8e       	std	Y+28, r1	; 0x1c
    1fd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fd4:	8e 7f       	andi	r24, 0xFE	; 254
    1fd6:	20 fb       	bst	r18, 0
    1fd8:	81 f9       	bld	r24, 1
    1fda:	8e 8f       	std	Y+30, r24	; 0x1e
{
  setTX(transmitPin);
    1fdc:	64 2f       	mov	r22, r20
    1fde:	ce 01       	movw	r24, r28
    1fe0:	8f df       	rcall	.-226    	; 0x1f00 <_ZN14SoftwareSerial5setTXEh>
  setRX(receivePin);
    1fe2:	61 2f       	mov	r22, r17
    1fe4:	ce 01       	movw	r24, r28
}
    1fe6:	df 91       	pop	r29
    1fe8:	cf 91       	pop	r28
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
{
  setTX(transmitPin);
  setRX(receivePin);
    1fea:	1f 91       	pop	r17
    1fec:	b0 cf       	rjmp	.-160    	; 0x1f4e <_ZN14SoftwareSerial5setRXEh>

00001fee <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    1fee:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	20 91 c2 06 	lds	r18, 0x06C2	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    1ff8:	82 1b       	sub	r24, r18
    1ffa:	91 09       	sbc	r25, r1
    1ffc:	08 95       	ret

00001ffe <_ZN7TwoWire4readEv>:
    1ffe:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    2002:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    2006:	98 17       	cp	r25, r24
    2008:	50 f4       	brcc	.+20     	; 0x201e <_ZN7TwoWire4readEv+0x20>
    200a:	e9 2f       	mov	r30, r25
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	ed 53       	subi	r30, 0x3D	; 61
    2010:	f9 4f       	sbci	r31, 0xF9	; 249
    2012:	20 81       	ld	r18, Z
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	9f 5f       	subi	r25, 0xFF	; 255
    2018:	90 93 c2 06 	sts	0x06C2, r25	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    201c:	02 c0       	rjmp	.+4      	; 0x2022 <_ZN7TwoWire4readEv+0x24>
    201e:	2f ef       	ldi	r18, 0xFF	; 255
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	c9 01       	movw	r24, r18
    2024:	08 95       	ret

00002026 <_ZN7TwoWire4peekEv>:
    2026:	e0 91 c2 06 	lds	r30, 0x06C2	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    202a:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    202e:	e8 17       	cp	r30, r24
    2030:	30 f4       	brcc	.+12     	; 0x203e <_ZN7TwoWire4peekEv+0x18>
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	ed 53       	subi	r30, 0x3D	; 61
    2036:	f9 4f       	sbci	r31, 0xF9	; 249
    2038:	80 81       	ld	r24, Z
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	08 95       	ret
    203e:	8f ef       	ldi	r24, 0xFF	; 255
    2040:	9f ef       	ldi	r25, 0xFF	; 255
    2042:	08 95       	ret

00002044 <_ZN7TwoWire5flushEv>:
    2044:	08 95       	ret

00002046 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	ec 01       	movw	r28, r24
    204c:	e0 91 99 06 	lds	r30, 0x0699	; 0x800699 <_ZN7TwoWire14user_onReceiveE>
    2050:	f0 91 9a 06 	lds	r31, 0x069A	; 0x80069a <_ZN7TwoWire14user_onReceiveE+0x1>
    2054:	30 97       	sbiw	r30, 0x00	; 0
    2056:	f1 f0       	breq	.+60     	; 0x2094 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2058:	90 91 c2 06 	lds	r25, 0x06C2	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    205c:	80 91 c1 06 	lds	r24, 0x06C1	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    2060:	98 17       	cp	r25, r24
    2062:	c0 f0       	brcs	.+48     	; 0x2094 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	29 2f       	mov	r18, r25
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	26 17       	cp	r18, r22
    206c:	37 07       	cpc	r19, r23
    206e:	54 f4       	brge	.+20     	; 0x2084 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2070:	de 01       	movw	r26, r28
    2072:	a2 0f       	add	r26, r18
    2074:	b3 1f       	adc	r27, r19
    2076:	4c 91       	ld	r20, X
    2078:	d9 01       	movw	r26, r18
    207a:	ad 53       	subi	r26, 0x3D	; 61
    207c:	b9 4f       	sbci	r27, 0xF9	; 249
    207e:	4c 93       	st	X, r20
    2080:	9f 5f       	subi	r25, 0xFF	; 255
    2082:	f1 cf       	rjmp	.-30     	; 0x2066 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2084:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    2088:	60 93 c1 06 	sts	0x06C1, r22	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    208c:	cb 01       	movw	r24, r22
    208e:	df 91       	pop	r29
    2090:	cf 91       	pop	r28
    2092:	19 94       	eijmp
    2094:	df 91       	pop	r29
    2096:	cf 91       	pop	r28
    2098:	08 95       	ret

0000209a <_ZN7TwoWire16onRequestServiceEv>:
    209a:	e0 91 9b 06 	lds	r30, 0x069B	; 0x80069b <_ZN7TwoWire14user_onRequestE>
    209e:	f0 91 9c 06 	lds	r31, 0x069C	; 0x80069c <_ZN7TwoWire14user_onRequestE+0x1>
    20a2:	30 97       	sbiw	r30, 0x00	; 0
    20a4:	29 f0       	breq	.+10     	; 0x20b0 <_ZN7TwoWire16onRequestServiceEv+0x16>
    20a6:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    20aa:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    20ae:	19 94       	eijmp
    20b0:	08 95       	ret

000020b2 <_ZN7TwoWire5writeEPKhj>:
    20b2:	cf 92       	push	r12
    20b4:	df 92       	push	r13
    20b6:	ef 92       	push	r14
    20b8:	ff 92       	push	r15
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	7c 01       	movw	r14, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8a 01       	movw	r16, r20
    20c8:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <_ZN7TwoWire12transmittingE>
    20cc:	22 23       	and	r18, r18
    20ce:	89 f0       	breq	.+34     	; 0x20f2 <_ZN7TwoWire5writeEPKhj+0x40>
    20d0:	eb 01       	movw	r28, r22
    20d2:	6b 01       	movw	r12, r22
    20d4:	c4 0e       	add	r12, r20
    20d6:	d5 1e       	adc	r13, r21
    20d8:	cc 15       	cp	r28, r12
    20da:	dd 05       	cpc	r29, r13
    20dc:	61 f0       	breq	.+24     	; 0x20f6 <_ZN7TwoWire5writeEPKhj+0x44>
    20de:	69 91       	ld	r22, Y+
    20e0:	d7 01       	movw	r26, r14
    20e2:	ed 91       	ld	r30, X+
    20e4:	fc 91       	ld	r31, X
    20e6:	01 90       	ld	r0, Z+
    20e8:	f0 81       	ld	r31, Z
    20ea:	e0 2d       	mov	r30, r0
    20ec:	c7 01       	movw	r24, r14
    20ee:	19 95       	eicall
    20f0:	f3 cf       	rjmp	.-26     	; 0x20d8 <_ZN7TwoWire5writeEPKhj+0x26>
    20f2:	64 2f       	mov	r22, r20
    20f4:	95 d1       	rcall	.+810    	; 0x2420 <twi_transmit>
    20f6:	c8 01       	movw	r24, r16
    20f8:	df 91       	pop	r29
    20fa:	cf 91       	pop	r28
    20fc:	1f 91       	pop	r17
    20fe:	0f 91       	pop	r16
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	08 95       	ret

0000210a <_ZN7TwoWire5writeEh>:
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	1f 92       	push	r1
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	69 83       	std	Y+1, r22	; 0x01
    2116:	20 91 9d 06 	lds	r18, 0x069D	; 0x80069d <_ZN7TwoWire12transmittingE>
    211a:	22 23       	and	r18, r18
    211c:	d1 f0       	breq	.+52     	; 0x2152 <_ZN7TwoWire5writeEh+0x48>
    211e:	20 91 9e 06 	lds	r18, 0x069E	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    2122:	20 32       	cpi	r18, 0x20	; 32
    2124:	40 f0       	brcs	.+16     	; 0x2136 <_ZN7TwoWire5writeEh+0x2c>
    2126:	21 e0       	ldi	r18, 0x01	; 1
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	fc 01       	movw	r30, r24
    212c:	33 83       	std	Z+3, r19	; 0x03
    212e:	22 83       	std	Z+2, r18	; 0x02
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	14 c0       	rjmp	.+40     	; 0x215e <_ZN7TwoWire5writeEh+0x54>
    2136:	80 91 9f 06 	lds	r24, 0x069F	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    213a:	e8 2f       	mov	r30, r24
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	e0 56       	subi	r30, 0x60	; 96
    2140:	f9 4f       	sbci	r31, 0xF9	; 249
    2142:	99 81       	ldd	r25, Y+1	; 0x01
    2144:	90 83       	st	Z, r25
    2146:	8f 5f       	subi	r24, 0xFF	; 255
    2148:	80 93 9f 06 	sts	0x069F, r24	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    214c:	80 93 9e 06 	sts	0x069E, r24	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    2150:	04 c0       	rjmp	.+8      	; 0x215a <_ZN7TwoWire5writeEh+0x50>
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	ce 01       	movw	r24, r28
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	63 d1       	rcall	.+710    	; 0x2420 <twi_transmit>
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	0f 90       	pop	r0
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	08 95       	ret

00002166 <_ZN7TwoWireC1Ev>:
    2166:	fc 01       	movw	r30, r24
    2168:	13 82       	std	Z+3, r1	; 0x03
    216a:	12 82       	std	Z+2, r1	; 0x02
    216c:	88 ee       	ldi	r24, 0xE8	; 232
    216e:	93 e0       	ldi	r25, 0x03	; 3
    2170:	a0 e0       	ldi	r26, 0x00	; 0
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	84 83       	std	Z+4, r24	; 0x04
    2176:	95 83       	std	Z+5, r25	; 0x05
    2178:	a6 83       	std	Z+6, r26	; 0x06
    217a:	b7 83       	std	Z+7, r27	; 0x07
    217c:	8d e9       	ldi	r24, 0x9D	; 157
    217e:	93 e0       	ldi	r25, 0x03	; 3
    2180:	91 83       	std	Z+1, r25	; 0x01
    2182:	80 83       	st	Z, r24
    2184:	08 95       	ret

00002186 <_ZN7TwoWire5beginEv>:
    2186:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    218a:	10 92 c1 06 	sts	0x06C1, r1	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    218e:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    2192:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    2196:	8a d0       	rcall	.+276    	; 0x22ac <twi_init>
    2198:	8d e4       	ldi	r24, 0x4D	; 77
    219a:	90 e1       	ldi	r25, 0x10	; 16
    219c:	6e d1       	rcall	.+732    	; 0x247a <twi_attachSlaveTxEvent>
    219e:	83 e2       	ldi	r24, 0x23	; 35
    21a0:	90 e1       	ldi	r25, 0x10	; 16
    21a2:	66 c1       	rjmp	.+716    	; 0x2470 <twi_attachSlaveRxEvent>

000021a4 <_ZN7TwoWire17beginTransmissionEh>:
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	80 93 9d 06 	sts	0x069D, r24	; 0x80069d <_ZN7TwoWire12transmittingE>
    21aa:	60 93 c0 06 	sts	0x06C0, r22	; 0x8006c0 <_ZN7TwoWire9txAddressE>
    21ae:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    21b2:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    21b6:	08 95       	ret

000021b8 <_ZN7TwoWire15endTransmissionEh>:
    21b8:	0f 93       	push	r16
    21ba:	06 2f       	mov	r16, r22
    21bc:	21 e0       	ldi	r18, 0x01	; 1
    21be:	40 91 9e 06 	lds	r20, 0x069E	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    21c2:	60 ea       	ldi	r22, 0xA0	; 160
    21c4:	76 e0       	ldi	r23, 0x06	; 6
    21c6:	80 91 c0 06 	lds	r24, 0x06C0	; 0x8006c0 <_ZN7TwoWire9txAddressE>
    21ca:	d4 d0       	rcall	.+424    	; 0x2374 <twi_writeTo>
    21cc:	10 92 9f 06 	sts	0x069F, r1	; 0x80069f <_ZN7TwoWire13txBufferIndexE>
    21d0:	10 92 9e 06 	sts	0x069E, r1	; 0x80069e <_ZN7TwoWire14txBufferLengthE>
    21d4:	10 92 9d 06 	sts	0x069D, r1	; 0x80069d <_ZN7TwoWire12transmittingE>
    21d8:	0f 91       	pop	r16
    21da:	08 95       	ret

000021dc <_ZN7TwoWire11requestFromEhhmhh>:
    21dc:	4f 92       	push	r4
    21de:	5f 92       	push	r5
    21e0:	6f 92       	push	r6
    21e2:	7f 92       	push	r7
    21e4:	af 92       	push	r10
    21e6:	bf 92       	push	r11
    21e8:	cf 92       	push	r12
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	5c 01       	movw	r10, r24
    21f8:	f6 2e       	mov	r15, r22
    21fa:	d4 2f       	mov	r29, r20
    21fc:	28 01       	movw	r4, r16
    21fe:	39 01       	movw	r6, r18
    2200:	ee 20       	and	r14, r14
    2202:	11 f1       	breq	.+68     	; 0x2248 <__stack+0x49>
    2204:	cf df       	rcall	.-98     	; 0x21a4 <_ZN7TwoWire17beginTransmissionEh>
    2206:	ce 2d       	mov	r28, r14
    2208:	c4 30       	cpi	r28, 0x04	; 4
    220a:	08 f0       	brcs	.+2      	; 0x220e <__stack+0xf>
    220c:	c3 e0       	ldi	r28, 0x03	; 3
    220e:	c1 50       	subi	r28, 0x01	; 1
    2210:	c0 f0       	brcs	.+48     	; 0x2242 <__stack+0x43>
    2212:	28 e0       	ldi	r18, 0x08	; 8
    2214:	c2 9f       	mul	r28, r18
    2216:	c0 01       	movw	r24, r0
    2218:	11 24       	eor	r1, r1
    221a:	a3 01       	movw	r20, r6
    221c:	92 01       	movw	r18, r4
    221e:	04 c0       	rjmp	.+8      	; 0x2228 <__stack+0x29>
    2220:	56 95       	lsr	r21
    2222:	47 95       	ror	r20
    2224:	37 95       	ror	r19
    2226:	27 95       	ror	r18
    2228:	8a 95       	dec	r24
    222a:	d2 f7       	brpl	.-12     	; 0x2220 <__stack+0x21>
    222c:	ca 01       	movw	r24, r20
    222e:	b9 01       	movw	r22, r18
    2230:	d5 01       	movw	r26, r10
    2232:	ed 91       	ld	r30, X+
    2234:	fc 91       	ld	r31, X
    2236:	01 90       	ld	r0, Z+
    2238:	f0 81       	ld	r31, Z
    223a:	e0 2d       	mov	r30, r0
    223c:	c5 01       	movw	r24, r10
    223e:	19 95       	eicall
    2240:	e6 cf       	rjmp	.-52     	; 0x220e <__stack+0xf>
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	c5 01       	movw	r24, r10
    2246:	b8 df       	rcall	.-144    	; 0x21b8 <_ZN7TwoWire15endTransmissionEh>
    2248:	4d 2f       	mov	r20, r29
    224a:	d1 32       	cpi	r29, 0x21	; 33
    224c:	08 f0       	brcs	.+2      	; 0x2250 <__stack+0x51>
    224e:	40 e2       	ldi	r20, 0x20	; 32
    2250:	2c 2d       	mov	r18, r12
    2252:	63 ec       	ldi	r22, 0xC3	; 195
    2254:	76 e0       	ldi	r23, 0x06	; 6
    2256:	8f 2d       	mov	r24, r15
    2258:	45 d0       	rcall	.+138    	; 0x22e4 <twi_readFrom>
    225a:	10 92 c2 06 	sts	0x06C2, r1	; 0x8006c2 <_ZN7TwoWire13rxBufferIndexE>
    225e:	80 93 c1 06 	sts	0x06C1, r24	; 0x8006c1 <_ZN7TwoWire14rxBufferLengthE>
    2262:	df 91       	pop	r29
    2264:	cf 91       	pop	r28
    2266:	1f 91       	pop	r17
    2268:	0f 91       	pop	r16
    226a:	ff 90       	pop	r15
    226c:	ef 90       	pop	r14
    226e:	cf 90       	pop	r12
    2270:	bf 90       	pop	r11
    2272:	af 90       	pop	r10
    2274:	7f 90       	pop	r7
    2276:	6f 90       	pop	r6
    2278:	5f 90       	pop	r5
    227a:	4f 90       	pop	r4
    227c:	08 95       	ret

0000227e <_ZN7TwoWire11requestFromEhhh>:
    227e:	cf 92       	push	r12
    2280:	ef 92       	push	r14
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	c2 2e       	mov	r12, r18
    2288:	e1 2c       	mov	r14, r1
    228a:	00 e0       	ldi	r16, 0x00	; 0
    228c:	10 e0       	ldi	r17, 0x00	; 0
    228e:	98 01       	movw	r18, r16
    2290:	a5 df       	rcall	.-182    	; 0x21dc <_ZN7TwoWire11requestFromEhhmhh>
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ef 90       	pop	r14
    2298:	cf 90       	pop	r12
    229a:	08 95       	ret

0000229c <_ZN7TwoWire11requestFromEhh>:
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	ef cf       	rjmp	.-34     	; 0x227e <_ZN7TwoWire11requestFromEhhh>

000022a0 <_ZN7TwoWire15endTransmissionEv>:
    22a0:	61 e0       	ldi	r22, 0x01	; 1
    22a2:	8a cf       	rjmp	.-236    	; 0x21b8 <_ZN7TwoWire15endTransmissionEh>

000022a4 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    22a4:	8d e8       	ldi	r24, 0x8D	; 141
    22a6:	96 e0       	ldi	r25, 0x06	; 6
    22a8:	5e cf       	rjmp	.-324    	; 0x2166 <_ZN7TwoWireC1Ev>

000022aa <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    22aa:	08 95       	ret

000022ac <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22ac:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <twi_state>
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <twi_sendStop>
    22b6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <twi_inRepStart>
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	84 e1       	ldi	r24, 0x14	; 20
    22be:	76 d8       	rcall	.-3860   	; 0x13ac <digitalWrite>
    22c0:	61 e0       	ldi	r22, 0x01	; 1
    22c2:	85 e1       	ldi	r24, 0x15	; 21
    22c4:	73 d8       	rcall	.-3866   	; 0x13ac <digitalWrite>
    22c6:	e9 eb       	ldi	r30, 0xB9	; 185
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	80 81       	ld	r24, Z
    22cc:	8e 7f       	andi	r24, 0xFE	; 254
    22ce:	80 83       	st	Z, r24
    22d0:	80 81       	ld	r24, Z
    22d2:	8d 7f       	andi	r24, 0xFD	; 253
    22d4:	80 83       	st	Z, r24
    22d6:	88 e4       	ldi	r24, 0x48	; 72
    22d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    22dc:	85 e4       	ldi	r24, 0x45	; 69
    22de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22e2:	08 95       	ret

000022e4 <twi_readFrom>:
    22e4:	41 32       	cpi	r20, 0x21	; 33
    22e6:	08 f0       	brcs	.+2      	; 0x22ea <twi_readFrom+0x6>
    22e8:	43 c0       	rjmp	.+134    	; 0x2370 <twi_readFrom+0x8c>
    22ea:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <twi_state>
    22ee:	91 11       	cpse	r25, r1
    22f0:	fc cf       	rjmp	.-8      	; 0x22ea <twi_readFrom+0x6>
    22f2:	91 e0       	ldi	r25, 0x01	; 1
    22f4:	90 93 50 07 	sts	0x0750, r25	; 0x800750 <twi_state>
    22f8:	20 93 4e 07 	sts	0x074E, r18	; 0x80074e <twi_sendStop>
    22fc:	2f ef       	ldi	r18, 0xFF	; 255
    22fe:	20 93 e3 06 	sts	0x06E3, r18	; 0x8006e3 <twi_error>
    2302:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_masterBufferIndex>
    2306:	24 0f       	add	r18, r20
    2308:	20 93 27 07 	sts	0x0727, r18	; 0x800727 <twi_masterBufferLength>
    230c:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <twi_slarw>
    2310:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <twi_slarw>
    2314:	88 0f       	add	r24, r24
    2316:	89 2b       	or	r24, r25
    2318:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <twi_slarw>
    231c:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <twi_inRepStart>
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	61 f4       	brne	.+24     	; 0x233c <twi_readFrom+0x58>
    2324:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <twi_inRepStart>
    2328:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <twi_slarw>
    232c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2330:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2334:	83 fd       	sbrc	r24, 3
    2336:	f8 cf       	rjmp	.-16     	; 0x2328 <twi_readFrom+0x44>
    2338:	85 ec       	ldi	r24, 0xC5	; 197
    233a:	01 c0       	rjmp	.+2      	; 0x233e <twi_readFrom+0x5a>
    233c:	85 ee       	ldi	r24, 0xE5	; 229
    233e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2342:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <twi_state>
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	e1 f3       	breq	.-8      	; 0x2342 <twi_readFrom+0x5e>
    234a:	80 91 28 07 	lds	r24, 0x0728	; 0x800728 <twi_masterBufferIndex>
    234e:	84 17       	cp	r24, r20
    2350:	10 f4       	brcc	.+4      	; 0x2356 <twi_readFrom+0x72>
    2352:	40 91 28 07 	lds	r20, 0x0728	; 0x800728 <twi_masterBufferIndex>
    2356:	a9 e2       	ldi	r26, 0x29	; 41
    2358:	b7 e0       	ldi	r27, 0x07	; 7
    235a:	96 2f       	mov	r25, r22
    235c:	fb 01       	movw	r30, r22
    235e:	8e 2f       	mov	r24, r30
    2360:	89 1b       	sub	r24, r25
    2362:	84 17       	cp	r24, r20
    2364:	18 f4       	brcc	.+6      	; 0x236c <twi_readFrom+0x88>
    2366:	8d 91       	ld	r24, X+
    2368:	81 93       	st	Z+, r24
    236a:	f9 cf       	rjmp	.-14     	; 0x235e <twi_readFrom+0x7a>
    236c:	84 2f       	mov	r24, r20
    236e:	08 95       	ret
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	08 95       	ret

00002374 <twi_writeTo>:
    2374:	0f 93       	push	r16
    2376:	41 32       	cpi	r20, 0x21	; 33
    2378:	08 f0       	brcs	.+2      	; 0x237c <twi_writeTo+0x8>
    237a:	4a c0       	rjmp	.+148    	; 0x2410 <twi_writeTo+0x9c>
    237c:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <twi_state>
    2380:	91 11       	cpse	r25, r1
    2382:	fc cf       	rjmp	.-8      	; 0x237c <twi_writeTo+0x8>
    2384:	32 e0       	ldi	r19, 0x02	; 2
    2386:	30 93 50 07 	sts	0x0750, r19	; 0x800750 <twi_state>
    238a:	00 93 4e 07 	sts	0x074E, r16	; 0x80074e <twi_sendStop>
    238e:	3f ef       	ldi	r19, 0xFF	; 255
    2390:	30 93 e3 06 	sts	0x06E3, r19	; 0x8006e3 <twi_error>
    2394:	10 92 28 07 	sts	0x0728, r1	; 0x800728 <twi_masterBufferIndex>
    2398:	40 93 27 07 	sts	0x0727, r20	; 0x800727 <twi_masterBufferLength>
    239c:	56 2f       	mov	r21, r22
    239e:	a9 e2       	ldi	r26, 0x29	; 41
    23a0:	b7 e0       	ldi	r27, 0x07	; 7
    23a2:	fb 01       	movw	r30, r22
    23a4:	3e 2f       	mov	r19, r30
    23a6:	35 1b       	sub	r19, r21
    23a8:	34 17       	cp	r19, r20
    23aa:	18 f4       	brcc	.+6      	; 0x23b2 <twi_writeTo+0x3e>
    23ac:	31 91       	ld	r19, Z+
    23ae:	3d 93       	st	X+, r19
    23b0:	f9 cf       	rjmp	.-14     	; 0x23a4 <twi_writeTo+0x30>
    23b2:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <twi_slarw>
    23b6:	30 91 4f 07 	lds	r19, 0x074F	; 0x80074f <twi_slarw>
    23ba:	88 0f       	add	r24, r24
    23bc:	83 2b       	or	r24, r19
    23be:	80 93 4f 07 	sts	0x074F, r24	; 0x80074f <twi_slarw>
    23c2:	80 91 4d 07 	lds	r24, 0x074D	; 0x80074d <twi_inRepStart>
    23c6:	81 30       	cpi	r24, 0x01	; 1
    23c8:	61 f4       	brne	.+24     	; 0x23e2 <twi_writeTo+0x6e>
    23ca:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <twi_inRepStart>
    23ce:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <twi_slarw>
    23d2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    23d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23da:	83 fd       	sbrc	r24, 3
    23dc:	f8 cf       	rjmp	.-16     	; 0x23ce <twi_writeTo+0x5a>
    23de:	85 ec       	ldi	r24, 0xC5	; 197
    23e0:	01 c0       	rjmp	.+2      	; 0x23e4 <twi_writeTo+0x70>
    23e2:	85 ee       	ldi	r24, 0xE5	; 229
    23e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    23e8:	22 23       	and	r18, r18
    23ea:	21 f0       	breq	.+8      	; 0x23f4 <twi_writeTo+0x80>
    23ec:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <twi_state>
    23f0:	82 30       	cpi	r24, 0x02	; 2
    23f2:	d1 f3       	breq	.-12     	; 0x23e8 <twi_writeTo+0x74>
    23f4:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <twi_error>
    23f8:	8f 3f       	cpi	r24, 0xFF	; 255
    23fa:	79 f0       	breq	.+30     	; 0x241a <twi_writeTo+0xa6>
    23fc:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <twi_error>
    2400:	80 32       	cpi	r24, 0x20	; 32
    2402:	41 f0       	breq	.+16     	; 0x2414 <twi_writeTo+0xa0>
    2404:	80 91 e3 06 	lds	r24, 0x06E3	; 0x8006e3 <twi_error>
    2408:	80 33       	cpi	r24, 0x30	; 48
    240a:	31 f0       	breq	.+12     	; 0x2418 <twi_writeTo+0xa4>
    240c:	94 e0       	ldi	r25, 0x04	; 4
    240e:	05 c0       	rjmp	.+10     	; 0x241a <twi_writeTo+0xa6>
    2410:	91 e0       	ldi	r25, 0x01	; 1
    2412:	03 c0       	rjmp	.+6      	; 0x241a <twi_writeTo+0xa6>
    2414:	92 e0       	ldi	r25, 0x02	; 2
    2416:	01 c0       	rjmp	.+2      	; 0x241a <twi_writeTo+0xa6>
    2418:	93 e0       	ldi	r25, 0x03	; 3
    241a:	89 2f       	mov	r24, r25
    241c:	0f 91       	pop	r16
    241e:	08 95       	ret

00002420 <twi_transmit>:
    2420:	40 91 05 07 	lds	r20, 0x0705	; 0x800705 <twi_txBufferLength>
    2424:	26 2f       	mov	r18, r22
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	24 0f       	add	r18, r20
    242a:	31 1d       	adc	r19, r1
    242c:	21 32       	cpi	r18, 0x21	; 33
    242e:	31 05       	cpc	r19, r1
    2430:	dc f4       	brge	.+54     	; 0x2468 <twi_transmit+0x48>
    2432:	20 91 50 07 	lds	r18, 0x0750	; 0x800750 <twi_state>
    2436:	24 30       	cpi	r18, 0x04	; 4
    2438:	c9 f4       	brne	.+50     	; 0x246c <twi_transmit+0x4c>
    243a:	fc 01       	movw	r30, r24
    243c:	80 e0       	ldi	r24, 0x00	; 0
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	86 17       	cp	r24, r22
    2442:	58 f4       	brcc	.+22     	; 0x245a <twi_transmit+0x3a>
    2444:	30 91 05 07 	lds	r19, 0x0705	; 0x800705 <twi_txBufferLength>
    2448:	21 91       	ld	r18, Z+
    244a:	dc 01       	movw	r26, r24
    244c:	a9 5f       	subi	r26, 0xF9	; 249
    244e:	b8 4f       	sbci	r27, 0xF8	; 248
    2450:	a3 0f       	add	r26, r19
    2452:	b1 1d       	adc	r27, r1
    2454:	2c 93       	st	X, r18
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	f3 cf       	rjmp	.-26     	; 0x2440 <twi_transmit+0x20>
    245a:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <twi_txBufferLength>
    245e:	68 0f       	add	r22, r24
    2460:	60 93 05 07 	sts	0x0705, r22	; 0x800705 <twi_txBufferLength>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	08 95       	ret
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	08 95       	ret
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	08 95       	ret

00002470 <twi_attachSlaveRxEvent>:
    2470:	90 93 4a 07 	sts	0x074A, r25	; 0x80074a <twi_onSlaveReceive+0x1>
    2474:	80 93 49 07 	sts	0x0749, r24	; 0x800749 <twi_onSlaveReceive>
    2478:	08 95       	ret

0000247a <twi_attachSlaveTxEvent>:
    247a:	90 93 4c 07 	sts	0x074C, r25	; 0x80074c <twi_onSlaveTransmit+0x1>
    247e:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <twi_onSlaveTransmit>
    2482:	08 95       	ret

00002484 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2484:	85 ed       	ldi	r24, 0xD5	; 213
    2486:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    248a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    248e:	84 fd       	sbrc	r24, 4
    2490:	fc cf       	rjmp	.-8      	; 0x248a <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2492:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <twi_state>
    2496:	08 95       	ret

00002498 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2498:	85 ec       	ldi	r24, 0xC5	; 197
    249a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

  // update twi state
  twi_state = TWI_READY;
    249e:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <twi_state>
    24a2:	08 95       	ret

000024a4 <__vector_39>:
}

ISR(TWI_vect)
{
    24a4:	1f 92       	push	r1
    24a6:	0f 92       	push	r0
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	0f 92       	push	r0
    24ac:	11 24       	eor	r1, r1
    24ae:	0b b6       	in	r0, 0x3b	; 59
    24b0:	0f 92       	push	r0
    24b2:	2f 93       	push	r18
    24b4:	3f 93       	push	r19
    24b6:	4f 93       	push	r20
    24b8:	5f 93       	push	r21
    24ba:	6f 93       	push	r22
    24bc:	7f 93       	push	r23
    24be:	8f 93       	push	r24
    24c0:	9f 93       	push	r25
    24c2:	af 93       	push	r26
    24c4:	bf 93       	push	r27
    24c6:	ef 93       	push	r30
    24c8:	ff 93       	push	r31
  switch(TW_STATUS){
    24ca:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    24ce:	88 7f       	andi	r24, 0xF8	; 248
    24d0:	80 36       	cpi	r24, 0x60	; 96
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <__vector_39+0x32>
    24d4:	9d c0       	rjmp	.+314    	; 0x2610 <__vector_39+0x16c>
    24d6:	70 f5       	brcc	.+92     	; 0x2534 <__vector_39+0x90>
    24d8:	88 32       	cpi	r24, 0x28	; 40
    24da:	09 f4       	brne	.+2      	; 0x24de <__vector_39+0x3a>
    24dc:	5c c0       	rjmp	.+184    	; 0x2596 <__vector_39+0xf2>
    24de:	90 f4       	brcc	.+36     	; 0x2504 <__vector_39+0x60>
    24e0:	80 31       	cpi	r24, 0x10	; 16
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <__vector_39+0x42>
    24e4:	55 c0       	rjmp	.+170    	; 0x2590 <__vector_39+0xec>
    24e6:	38 f4       	brcc	.+14     	; 0x24f6 <__vector_39+0x52>
    24e8:	88 23       	and	r24, r24
    24ea:	09 f4       	brne	.+2      	; 0x24ee <__vector_39+0x4a>
    24ec:	f3 c0       	rjmp	.+486    	; 0x26d4 <__vector_39+0x230>
    24ee:	88 30       	cpi	r24, 0x08	; 8
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <__vector_39+0x50>
    24f2:	4e c0       	rjmp	.+156    	; 0x2590 <__vector_39+0xec>
    24f4:	f2 c0       	rjmp	.+484    	; 0x26da <__vector_39+0x236>
    24f6:	88 31       	cpi	r24, 0x18	; 24
    24f8:	09 f4       	brne	.+2      	; 0x24fc <__vector_39+0x58>
    24fa:	4d c0       	rjmp	.+154    	; 0x2596 <__vector_39+0xf2>
    24fc:	80 32       	cpi	r24, 0x20	; 32
    24fe:	09 f4       	brne	.+2      	; 0x2502 <__vector_39+0x5e>
    2500:	5e c0       	rjmp	.+188    	; 0x25be <__vector_39+0x11a>
    2502:	eb c0       	rjmp	.+470    	; 0x26da <__vector_39+0x236>
    2504:	80 34       	cpi	r24, 0x40	; 64
    2506:	09 f4       	brne	.+2      	; 0x250a <__vector_39+0x66>
    2508:	69 c0       	rjmp	.+210    	; 0x25dc <__vector_39+0x138>
    250a:	50 f4       	brcc	.+20     	; 0x2520 <__vector_39+0x7c>
    250c:	80 33       	cpi	r24, 0x30	; 48
    250e:	09 f4       	brne	.+2      	; 0x2512 <__vector_39+0x6e>
    2510:	56 c0       	rjmp	.+172    	; 0x25be <__vector_39+0x11a>
    2512:	88 33       	cpi	r24, 0x38	; 56
    2514:	09 f0       	breq	.+2      	; 0x2518 <__vector_39+0x74>
    2516:	e1 c0       	rjmp	.+450    	; 0x26da <__vector_39+0x236>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2518:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <twi_error>
      twi_releaseBus();
    251c:	bd df       	rcall	.-134    	; 0x2498 <twi_releaseBus>
      break;
    251e:	dd c0       	rjmp	.+442    	; 0x26da <__vector_39+0x236>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2520:	80 35       	cpi	r24, 0x50	; 80
    2522:	09 f4       	brne	.+2      	; 0x2526 <__vector_39+0x82>
    2524:	4f c0       	rjmp	.+158    	; 0x25c4 <__vector_39+0x120>
    2526:	88 35       	cpi	r24, 0x58	; 88
    2528:	09 f4       	brne	.+2      	; 0x252c <__vector_39+0x88>
    252a:	5d c0       	rjmp	.+186    	; 0x25e6 <__vector_39+0x142>
    252c:	88 34       	cpi	r24, 0x48	; 72
    252e:	09 f0       	breq	.+2      	; 0x2532 <__vector_39+0x8e>
    2530:	d4 c0       	rjmp	.+424    	; 0x26da <__vector_39+0x236>
    2532:	d2 c0       	rjmp	.+420    	; 0x26d8 <__vector_39+0x234>
    2534:	88 39       	cpi	r24, 0x98	; 152
    2536:	09 f4       	brne	.+2      	; 0x253a <__vector_39+0x96>
    2538:	c3 c0       	rjmp	.+390    	; 0x26c0 <__vector_39+0x21c>
    253a:	a8 f4       	brcc	.+42     	; 0x2566 <__vector_39+0xc2>
    253c:	88 37       	cpi	r24, 0x78	; 120
    253e:	09 f4       	brne	.+2      	; 0x2542 <__vector_39+0x9e>
    2540:	67 c0       	rjmp	.+206    	; 0x2610 <__vector_39+0x16c>
    2542:	38 f4       	brcc	.+14     	; 0x2552 <__vector_39+0xae>
    2544:	88 36       	cpi	r24, 0x68	; 104
    2546:	09 f4       	brne	.+2      	; 0x254a <__vector_39+0xa6>
    2548:	63 c0       	rjmp	.+198    	; 0x2610 <__vector_39+0x16c>
    254a:	80 37       	cpi	r24, 0x70	; 112
    254c:	09 f4       	brne	.+2      	; 0x2550 <__vector_39+0xac>
    254e:	60 c0       	rjmp	.+192    	; 0x2610 <__vector_39+0x16c>
    2550:	c4 c0       	rjmp	.+392    	; 0x26da <__vector_39+0x236>
    2552:	88 38       	cpi	r24, 0x88	; 136
    2554:	09 f4       	brne	.+2      	; 0x2558 <__vector_39+0xb4>
    2556:	b4 c0       	rjmp	.+360    	; 0x26c0 <__vector_39+0x21c>
    2558:	80 39       	cpi	r24, 0x90	; 144
    255a:	09 f4       	brne	.+2      	; 0x255e <__vector_39+0xba>
    255c:	5f c0       	rjmp	.+190    	; 0x261c <__vector_39+0x178>
    255e:	80 38       	cpi	r24, 0x80	; 128
    2560:	09 f0       	breq	.+2      	; 0x2564 <__vector_39+0xc0>
    2562:	bb c0       	rjmp	.+374    	; 0x26da <__vector_39+0x236>
    2564:	5b c0       	rjmp	.+182    	; 0x261c <__vector_39+0x178>
    2566:	80 3b       	cpi	r24, 0xB0	; 176
    2568:	09 f4       	brne	.+2      	; 0x256c <__vector_39+0xc8>
    256a:	82 c0       	rjmp	.+260    	; 0x2670 <__vector_39+0x1cc>
    256c:	38 f4       	brcc	.+14     	; 0x257c <__vector_39+0xd8>
    256e:	80 3a       	cpi	r24, 0xA0	; 160
    2570:	09 f4       	brne	.+2      	; 0x2574 <__vector_39+0xd0>
    2572:	66 c0       	rjmp	.+204    	; 0x2640 <__vector_39+0x19c>
    2574:	88 3a       	cpi	r24, 0xA8	; 168
    2576:	09 f4       	brne	.+2      	; 0x257a <__vector_39+0xd6>
    2578:	7b c0       	rjmp	.+246    	; 0x2670 <__vector_39+0x1cc>
    257a:	af c0       	rjmp	.+350    	; 0x26da <__vector_39+0x236>
    257c:	80 3c       	cpi	r24, 0xC0	; 192
    257e:	09 f4       	brne	.+2      	; 0x2582 <__vector_39+0xde>
    2580:	a3 c0       	rjmp	.+326    	; 0x26c8 <__vector_39+0x224>
    2582:	88 3c       	cpi	r24, 0xC8	; 200
    2584:	09 f4       	brne	.+2      	; 0x2588 <__vector_39+0xe4>
    2586:	a0 c0       	rjmp	.+320    	; 0x26c8 <__vector_39+0x224>
    2588:	88 3b       	cpi	r24, 0xB8	; 184
    258a:	09 f4       	brne	.+2      	; 0x258e <__vector_39+0xea>
    258c:	86 c0       	rjmp	.+268    	; 0x269a <__vector_39+0x1f6>
    258e:	a5 c0       	rjmp	.+330    	; 0x26da <__vector_39+0x236>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2590:	80 91 4f 07 	lds	r24, 0x074F	; 0x80074f <twi_slarw>
    2594:	10 c0       	rjmp	.+32     	; 0x25b6 <__vector_39+0x112>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2596:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <twi_masterBufferIndex>
    259a:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <twi_masterBufferLength>
    259e:	98 17       	cp	r25, r24
    25a0:	70 f5       	brcc	.+92     	; 0x25fe <__vector_39+0x15a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    25a2:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <twi_masterBufferIndex>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	8e 0f       	add	r24, r30
    25aa:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_masterBufferIndex>
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	e7 5d       	subi	r30, 0xD7	; 215
    25b2:	f8 4f       	sbci	r31, 0xF8	; 248
    25b4:	80 81       	ld	r24, Z
    25b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    25ba:	85 ec       	ldi	r24, 0xC5	; 197
    25bc:	82 c0       	rjmp	.+260    	; 0x26c2 <__vector_39+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    25be:	80 93 e3 06 	sts	0x06E3, r24	; 0x8006e3 <twi_error>
    25c2:	8a c0       	rjmp	.+276    	; 0x26d8 <__vector_39+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    25c4:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <twi_masterBufferIndex>
    25c8:	81 e0       	ldi	r24, 0x01	; 1
    25ca:	8e 0f       	add	r24, r30
    25cc:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_masterBufferIndex>
    25d0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    25d4:	f0 e0       	ldi	r31, 0x00	; 0
    25d6:	e7 5d       	subi	r30, 0xD7	; 215
    25d8:	f8 4f       	sbci	r31, 0xF8	; 248
    25da:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    25dc:	90 91 28 07 	lds	r25, 0x0728	; 0x800728 <twi_masterBufferIndex>
    25e0:	80 91 27 07 	lds	r24, 0x0727	; 0x800727 <twi_masterBufferLength>
    25e4:	6a c0       	rjmp	.+212    	; 0x26ba <__vector_39+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    25e6:	e0 91 28 07 	lds	r30, 0x0728	; 0x800728 <twi_masterBufferIndex>
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	8e 0f       	add	r24, r30
    25ee:	80 93 28 07 	sts	0x0728, r24	; 0x800728 <twi_masterBufferIndex>
    25f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	e7 5d       	subi	r30, 0xD7	; 215
    25fa:	f8 4f       	sbci	r31, 0xF8	; 248
    25fc:	80 83       	st	Z, r24
	if (twi_sendStop)
    25fe:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <twi_sendStop>
    2602:	81 11       	cpse	r24, r1
    2604:	69 c0       	rjmp	.+210    	; 0x26d8 <__vector_39+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2606:	81 e0       	ldi	r24, 0x01	; 1
    2608:	80 93 4d 07 	sts	0x074D, r24	; 0x80074d <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    260c:	84 ea       	ldi	r24, 0xA4	; 164
    260e:	5d c0       	rjmp	.+186    	; 0x26ca <__vector_39+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2610:	83 e0       	ldi	r24, 0x03	; 3
    2612:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2616:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <twi_rxBufferIndex>
    261a:	cf cf       	rjmp	.-98     	; 0x25ba <__vector_39+0x116>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    261c:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <twi_rxBufferIndex>
    2620:	80 32       	cpi	r24, 0x20	; 32
    2622:	08 f0       	brcs	.+2      	; 0x2626 <__vector_39+0x182>
    2624:	4d c0       	rjmp	.+154    	; 0x26c0 <__vector_39+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2626:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <twi_rxBufferIndex>
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	8e 0f       	add	r24, r30
    262e:	80 93 e4 06 	sts	0x06E4, r24	; 0x8006e4 <twi_rxBufferIndex>
    2632:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	eb 51       	subi	r30, 0x1B	; 27
    263a:	f9 4f       	sbci	r31, 0xF9	; 249
    263c:	80 83       	st	Z, r24
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    263e:	bd cf       	rjmp	.-134    	; 0x25ba <__vector_39+0x116>
    2640:	2b df       	rcall	.-426    	; 0x2498 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2642:	80 91 e4 06 	lds	r24, 0x06E4	; 0x8006e4 <twi_rxBufferIndex>
    2646:	80 32       	cpi	r24, 0x20	; 32
    2648:	30 f4       	brcc	.+12     	; 0x2656 <__vector_39+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    264a:	e0 91 e4 06 	lds	r30, 0x06E4	; 0x8006e4 <twi_rxBufferIndex>
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	eb 51       	subi	r30, 0x1B	; 27
    2652:	f9 4f       	sbci	r31, 0xF9	; 249
    2654:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2656:	60 91 e4 06 	lds	r22, 0x06E4	; 0x8006e4 <twi_rxBufferIndex>
    265a:	70 e0       	ldi	r23, 0x00	; 0
    265c:	e0 91 49 07 	lds	r30, 0x0749	; 0x800749 <twi_onSlaveReceive>
    2660:	f0 91 4a 07 	lds	r31, 0x074A	; 0x80074a <twi_onSlaveReceive+0x1>
    2664:	85 ee       	ldi	r24, 0xE5	; 229
    2666:	96 e0       	ldi	r25, 0x06	; 6
    2668:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    266a:	10 92 e4 06 	sts	0x06E4, r1	; 0x8006e4 <twi_rxBufferIndex>
      break;
    266e:	35 c0       	rjmp	.+106    	; 0x26da <__vector_39+0x236>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2670:	84 e0       	ldi	r24, 0x04	; 4
    2672:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2676:	10 92 06 07 	sts	0x0706, r1	; 0x800706 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    267a:	10 92 05 07 	sts	0x0705, r1	; 0x800705 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    267e:	e0 91 4b 07 	lds	r30, 0x074B	; 0x80074b <twi_onSlaveTransmit>
    2682:	f0 91 4c 07 	lds	r31, 0x074C	; 0x80074c <twi_onSlaveTransmit+0x1>
    2686:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2688:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <twi_txBufferLength>
    268c:	81 11       	cpse	r24, r1
    268e:	05 c0       	rjmp	.+10     	; 0x269a <__vector_39+0x1f6>
        twi_txBufferLength = 1;
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	80 93 05 07 	sts	0x0705, r24	; 0x800705 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    2696:	10 92 07 07 	sts	0x0707, r1	; 0x800707 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    269a:	e0 91 06 07 	lds	r30, 0x0706	; 0x800706 <twi_txBufferIndex>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	8e 0f       	add	r24, r30
    26a2:	80 93 06 07 	sts	0x0706, r24	; 0x800706 <twi_txBufferIndex>
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	e9 5f       	subi	r30, 0xF9	; 249
    26aa:	f8 4f       	sbci	r31, 0xF8	; 248
    26ac:	80 81       	ld	r24, Z
    26ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    26b2:	90 91 06 07 	lds	r25, 0x0706	; 0x800706 <twi_txBufferIndex>
    26b6:	80 91 05 07 	lds	r24, 0x0705	; 0x800705 <twi_txBufferLength>
    26ba:	98 17       	cp	r25, r24
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <__vector_39+0x21c>
    26be:	7d cf       	rjmp	.-262    	; 0x25ba <__vector_39+0x116>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    26c0:	85 e8       	ldi	r24, 0x85	; 133
    26c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    26c6:	09 c0       	rjmp	.+18     	; 0x26da <__vector_39+0x236>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26c8:	85 ec       	ldi	r24, 0xC5	; 197
    26ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    26ce:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <twi_state>
      break;
    26d2:	03 c0       	rjmp	.+6      	; 0x26da <__vector_39+0x236>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    26d4:	10 92 e3 06 	sts	0x06E3, r1	; 0x8006e3 <twi_error>
      twi_stop();
    26d8:	d5 de       	rcall	.-598    	; 0x2484 <twi_stop>
      break;
  }
}
    26da:	ff 91       	pop	r31
    26dc:	ef 91       	pop	r30
    26de:	bf 91       	pop	r27
    26e0:	af 91       	pop	r26
    26e2:	9f 91       	pop	r25
    26e4:	8f 91       	pop	r24
    26e6:	7f 91       	pop	r23
    26e8:	6f 91       	pop	r22
    26ea:	5f 91       	pop	r21
    26ec:	4f 91       	pop	r20
    26ee:	3f 91       	pop	r19
    26f0:	2f 91       	pop	r18
    26f2:	0f 90       	pop	r0
    26f4:	0b be       	out	0x3b, r0	; 59
    26f6:	0f 90       	pop	r0
    26f8:	0f be       	out	0x3f, r0	; 63
    26fa:	0f 90       	pop	r0
    26fc:	1f 90       	pop	r1
    26fe:	18 95       	reti

00002700 <__cmpsf2>:
    2700:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_cmp>
    2704:	08 f4       	brcc	.+2      	; 0x2708 <__cmpsf2+0x8>
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	08 95       	ret

0000270a <__divsf3>:
    270a:	12 d0       	rcall	.+36     	; 0x2730 <__divsf3x>
    270c:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_round>
    2710:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscB>
    2714:	58 f0       	brcs	.+22     	; 0x272c <__divsf3+0x22>
    2716:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_pscA>
    271a:	40 f0       	brcs	.+16     	; 0x272c <__divsf3+0x22>
    271c:	29 f4       	brne	.+10     	; 0x2728 <__divsf3+0x1e>
    271e:	5f 3f       	cpi	r21, 0xFF	; 255
    2720:	29 f0       	breq	.+10     	; 0x272c <__divsf3+0x22>
    2722:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
    2726:	51 11       	cpse	r21, r1
    2728:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_szero>
    272c:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_nan>

00002730 <__divsf3x>:
    2730:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_split3>
    2734:	68 f3       	brcs	.-38     	; 0x2710 <__divsf3+0x6>

00002736 <__divsf3_pse>:
    2736:	99 23       	and	r25, r25
    2738:	b1 f3       	breq	.-20     	; 0x2726 <__divsf3+0x1c>
    273a:	55 23       	and	r21, r21
    273c:	91 f3       	breq	.-28     	; 0x2722 <__divsf3+0x18>
    273e:	95 1b       	sub	r25, r21
    2740:	55 0b       	sbc	r21, r21
    2742:	bb 27       	eor	r27, r27
    2744:	aa 27       	eor	r26, r26
    2746:	62 17       	cp	r22, r18
    2748:	73 07       	cpc	r23, r19
    274a:	84 07       	cpc	r24, r20
    274c:	38 f0       	brcs	.+14     	; 0x275c <__divsf3_pse+0x26>
    274e:	9f 5f       	subi	r25, 0xFF	; 255
    2750:	5f 4f       	sbci	r21, 0xFF	; 255
    2752:	22 0f       	add	r18, r18
    2754:	33 1f       	adc	r19, r19
    2756:	44 1f       	adc	r20, r20
    2758:	aa 1f       	adc	r26, r26
    275a:	a9 f3       	breq	.-22     	; 0x2746 <__divsf3_pse+0x10>
    275c:	35 d0       	rcall	.+106    	; 0x27c8 <__divsf3_pse+0x92>
    275e:	0e 2e       	mov	r0, r30
    2760:	3a f0       	brmi	.+14     	; 0x2770 <__divsf3_pse+0x3a>
    2762:	e0 e8       	ldi	r30, 0x80	; 128
    2764:	32 d0       	rcall	.+100    	; 0x27ca <__divsf3_pse+0x94>
    2766:	91 50       	subi	r25, 0x01	; 1
    2768:	50 40       	sbci	r21, 0x00	; 0
    276a:	e6 95       	lsr	r30
    276c:	00 1c       	adc	r0, r0
    276e:	ca f7       	brpl	.-14     	; 0x2762 <__divsf3_pse+0x2c>
    2770:	2b d0       	rcall	.+86     	; 0x27c8 <__divsf3_pse+0x92>
    2772:	fe 2f       	mov	r31, r30
    2774:	29 d0       	rcall	.+82     	; 0x27c8 <__divsf3_pse+0x92>
    2776:	66 0f       	add	r22, r22
    2778:	77 1f       	adc	r23, r23
    277a:	88 1f       	adc	r24, r24
    277c:	bb 1f       	adc	r27, r27
    277e:	26 17       	cp	r18, r22
    2780:	37 07       	cpc	r19, r23
    2782:	48 07       	cpc	r20, r24
    2784:	ab 07       	cpc	r26, r27
    2786:	b0 e8       	ldi	r27, 0x80	; 128
    2788:	09 f0       	breq	.+2      	; 0x278c <__divsf3_pse+0x56>
    278a:	bb 0b       	sbc	r27, r27
    278c:	80 2d       	mov	r24, r0
    278e:	bf 01       	movw	r22, r30
    2790:	ff 27       	eor	r31, r31
    2792:	93 58       	subi	r25, 0x83	; 131
    2794:	5f 4f       	sbci	r21, 0xFF	; 255
    2796:	3a f0       	brmi	.+14     	; 0x27a6 <__divsf3_pse+0x70>
    2798:	9e 3f       	cpi	r25, 0xFE	; 254
    279a:	51 05       	cpc	r21, r1
    279c:	78 f0       	brcs	.+30     	; 0x27bc <__divsf3_pse+0x86>
    279e:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
    27a2:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_szero>
    27a6:	5f 3f       	cpi	r21, 0xFF	; 255
    27a8:	e4 f3       	brlt	.-8      	; 0x27a2 <__divsf3_pse+0x6c>
    27aa:	98 3e       	cpi	r25, 0xE8	; 232
    27ac:	d4 f3       	brlt	.-12     	; 0x27a2 <__divsf3_pse+0x6c>
    27ae:	86 95       	lsr	r24
    27b0:	77 95       	ror	r23
    27b2:	67 95       	ror	r22
    27b4:	b7 95       	ror	r27
    27b6:	f7 95       	ror	r31
    27b8:	9f 5f       	subi	r25, 0xFF	; 255
    27ba:	c9 f7       	brne	.-14     	; 0x27ae <__divsf3_pse+0x78>
    27bc:	88 0f       	add	r24, r24
    27be:	91 1d       	adc	r25, r1
    27c0:	96 95       	lsr	r25
    27c2:	87 95       	ror	r24
    27c4:	97 f9       	bld	r25, 7
    27c6:	08 95       	ret
    27c8:	e1 e0       	ldi	r30, 0x01	; 1
    27ca:	66 0f       	add	r22, r22
    27cc:	77 1f       	adc	r23, r23
    27ce:	88 1f       	adc	r24, r24
    27d0:	bb 1f       	adc	r27, r27
    27d2:	62 17       	cp	r22, r18
    27d4:	73 07       	cpc	r23, r19
    27d6:	84 07       	cpc	r24, r20
    27d8:	ba 07       	cpc	r27, r26
    27da:	20 f0       	brcs	.+8      	; 0x27e4 <__divsf3_pse+0xae>
    27dc:	62 1b       	sub	r22, r18
    27de:	73 0b       	sbc	r23, r19
    27e0:	84 0b       	sbc	r24, r20
    27e2:	ba 0b       	sbc	r27, r26
    27e4:	ee 1f       	adc	r30, r30
    27e6:	88 f7       	brcc	.-30     	; 0x27ca <__divsf3_pse+0x94>
    27e8:	e0 95       	com	r30
    27ea:	08 95       	ret

000027ec <__mulsf3>:
    27ec:	11 d0       	rcall	.+34     	; 0x2810 <__mulsf3x>
    27ee:	0c 94 b5 03 	jmp	0x76a	; 0x76a <__fp_round>
    27f2:	0e 94 a7 03 	call	0x74e	; 0x74e <__fp_pscA>
    27f6:	38 f0       	brcs	.+14     	; 0x2806 <__mulsf3+0x1a>
    27f8:	0e 94 ae 03 	call	0x75c	; 0x75c <__fp_pscB>
    27fc:	20 f0       	brcs	.+8      	; 0x2806 <__mulsf3+0x1a>
    27fe:	95 23       	and	r25, r21
    2800:	11 f0       	breq	.+4      	; 0x2806 <__mulsf3+0x1a>
    2802:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
    2806:	0c 94 a4 03 	jmp	0x748	; 0x748 <__fp_nan>
    280a:	11 24       	eor	r1, r1
    280c:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_szero>

00002810 <__mulsf3x>:
    2810:	0e 94 c6 03 	call	0x78c	; 0x78c <__fp_split3>
    2814:	70 f3       	brcs	.-36     	; 0x27f2 <__mulsf3+0x6>

00002816 <__mulsf3_pse>:
    2816:	95 9f       	mul	r25, r21
    2818:	c1 f3       	breq	.-16     	; 0x280a <__mulsf3+0x1e>
    281a:	95 0f       	add	r25, r21
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	55 1f       	adc	r21, r21
    2820:	62 9f       	mul	r22, r18
    2822:	f0 01       	movw	r30, r0
    2824:	72 9f       	mul	r23, r18
    2826:	bb 27       	eor	r27, r27
    2828:	f0 0d       	add	r31, r0
    282a:	b1 1d       	adc	r27, r1
    282c:	63 9f       	mul	r22, r19
    282e:	aa 27       	eor	r26, r26
    2830:	f0 0d       	add	r31, r0
    2832:	b1 1d       	adc	r27, r1
    2834:	aa 1f       	adc	r26, r26
    2836:	64 9f       	mul	r22, r20
    2838:	66 27       	eor	r22, r22
    283a:	b0 0d       	add	r27, r0
    283c:	a1 1d       	adc	r26, r1
    283e:	66 1f       	adc	r22, r22
    2840:	82 9f       	mul	r24, r18
    2842:	22 27       	eor	r18, r18
    2844:	b0 0d       	add	r27, r0
    2846:	a1 1d       	adc	r26, r1
    2848:	62 1f       	adc	r22, r18
    284a:	73 9f       	mul	r23, r19
    284c:	b0 0d       	add	r27, r0
    284e:	a1 1d       	adc	r26, r1
    2850:	62 1f       	adc	r22, r18
    2852:	83 9f       	mul	r24, r19
    2854:	a0 0d       	add	r26, r0
    2856:	61 1d       	adc	r22, r1
    2858:	22 1f       	adc	r18, r18
    285a:	74 9f       	mul	r23, r20
    285c:	33 27       	eor	r19, r19
    285e:	a0 0d       	add	r26, r0
    2860:	61 1d       	adc	r22, r1
    2862:	23 1f       	adc	r18, r19
    2864:	84 9f       	mul	r24, r20
    2866:	60 0d       	add	r22, r0
    2868:	21 1d       	adc	r18, r1
    286a:	82 2f       	mov	r24, r18
    286c:	76 2f       	mov	r23, r22
    286e:	6a 2f       	mov	r22, r26
    2870:	11 24       	eor	r1, r1
    2872:	9f 57       	subi	r25, 0x7F	; 127
    2874:	50 40       	sbci	r21, 0x00	; 0
    2876:	9a f0       	brmi	.+38     	; 0x289e <__mulsf3_pse+0x88>
    2878:	f1 f0       	breq	.+60     	; 0x28b6 <__mulsf3_pse+0xa0>
    287a:	88 23       	and	r24, r24
    287c:	4a f0       	brmi	.+18     	; 0x2890 <__mulsf3_pse+0x7a>
    287e:	ee 0f       	add	r30, r30
    2880:	ff 1f       	adc	r31, r31
    2882:	bb 1f       	adc	r27, r27
    2884:	66 1f       	adc	r22, r22
    2886:	77 1f       	adc	r23, r23
    2888:	88 1f       	adc	r24, r24
    288a:	91 50       	subi	r25, 0x01	; 1
    288c:	50 40       	sbci	r21, 0x00	; 0
    288e:	a9 f7       	brne	.-22     	; 0x287a <__mulsf3_pse+0x64>
    2890:	9e 3f       	cpi	r25, 0xFE	; 254
    2892:	51 05       	cpc	r21, r1
    2894:	80 f0       	brcs	.+32     	; 0x28b6 <__mulsf3_pse+0xa0>
    2896:	0c 94 9e 03 	jmp	0x73c	; 0x73c <__fp_inf>
    289a:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__fp_szero>
    289e:	5f 3f       	cpi	r21, 0xFF	; 255
    28a0:	e4 f3       	brlt	.-8      	; 0x289a <__mulsf3_pse+0x84>
    28a2:	98 3e       	cpi	r25, 0xE8	; 232
    28a4:	d4 f3       	brlt	.-12     	; 0x289a <__mulsf3_pse+0x84>
    28a6:	86 95       	lsr	r24
    28a8:	77 95       	ror	r23
    28aa:	67 95       	ror	r22
    28ac:	b7 95       	ror	r27
    28ae:	f7 95       	ror	r31
    28b0:	e7 95       	ror	r30
    28b2:	9f 5f       	subi	r25, 0xFF	; 255
    28b4:	c1 f7       	brne	.-16     	; 0x28a6 <__mulsf3_pse+0x90>
    28b6:	fe 2b       	or	r31, r30
    28b8:	88 0f       	add	r24, r24
    28ba:	91 1d       	adc	r25, r1
    28bc:	96 95       	lsr	r25
    28be:	87 95       	ror	r24
    28c0:	97 f9       	bld	r25, 7
    28c2:	08 95       	ret

000028c4 <__unordsf2>:
    28c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__fp_cmp>
    28c8:	88 0b       	sbc	r24, r24
    28ca:	99 0b       	sbc	r25, r25
    28cc:	08 95       	ret

000028ce <__udivmodsi4>:
    28ce:	a1 e2       	ldi	r26, 0x21	; 33
    28d0:	1a 2e       	mov	r1, r26
    28d2:	aa 1b       	sub	r26, r26
    28d4:	bb 1b       	sub	r27, r27
    28d6:	fd 01       	movw	r30, r26
    28d8:	0d c0       	rjmp	.+26     	; 0x28f4 <__udivmodsi4_ep>

000028da <__udivmodsi4_loop>:
    28da:	aa 1f       	adc	r26, r26
    28dc:	bb 1f       	adc	r27, r27
    28de:	ee 1f       	adc	r30, r30
    28e0:	ff 1f       	adc	r31, r31
    28e2:	a2 17       	cp	r26, r18
    28e4:	b3 07       	cpc	r27, r19
    28e6:	e4 07       	cpc	r30, r20
    28e8:	f5 07       	cpc	r31, r21
    28ea:	20 f0       	brcs	.+8      	; 0x28f4 <__udivmodsi4_ep>
    28ec:	a2 1b       	sub	r26, r18
    28ee:	b3 0b       	sbc	r27, r19
    28f0:	e4 0b       	sbc	r30, r20
    28f2:	f5 0b       	sbc	r31, r21

000028f4 <__udivmodsi4_ep>:
    28f4:	66 1f       	adc	r22, r22
    28f6:	77 1f       	adc	r23, r23
    28f8:	88 1f       	adc	r24, r24
    28fa:	99 1f       	adc	r25, r25
    28fc:	1a 94       	dec	r1
    28fe:	69 f7       	brne	.-38     	; 0x28da <__udivmodsi4_loop>
    2900:	60 95       	com	r22
    2902:	70 95       	com	r23
    2904:	80 95       	com	r24
    2906:	90 95       	com	r25
    2908:	9b 01       	movw	r18, r22
    290a:	ac 01       	movw	r20, r24
    290c:	bd 01       	movw	r22, r26
    290e:	cf 01       	movw	r24, r30
    2910:	08 95       	ret

00002912 <__tablejump2__>:
    2912:	ee 0f       	add	r30, r30
    2914:	ff 1f       	adc	r31, r31
    2916:	88 1f       	adc	r24, r24
    2918:	8b bf       	out	0x3b, r24	; 59
    291a:	07 90       	elpm	r0, Z+
    291c:	f6 91       	elpm	r31, Z
    291e:	e0 2d       	mov	r30, r0
    2920:	19 94       	eijmp

00002922 <malloc>:
    2922:	0f 93       	push	r16
    2924:	1f 93       	push	r17
    2926:	cf 93       	push	r28
    2928:	df 93       	push	r29
    292a:	82 30       	cpi	r24, 0x02	; 2
    292c:	91 05       	cpc	r25, r1
    292e:	10 f4       	brcc	.+4      	; 0x2934 <malloc+0x12>
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	e0 91 53 07 	lds	r30, 0x0753	; 0x800753 <__flp>
    2938:	f0 91 54 07 	lds	r31, 0x0754	; 0x800754 <__flp+0x1>
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	30 97       	sbiw	r30, 0x00	; 0
    2946:	19 f1       	breq	.+70     	; 0x298e <malloc+0x6c>
    2948:	40 81       	ld	r20, Z
    294a:	51 81       	ldd	r21, Z+1	; 0x01
    294c:	02 81       	ldd	r16, Z+2	; 0x02
    294e:	13 81       	ldd	r17, Z+3	; 0x03
    2950:	48 17       	cp	r20, r24
    2952:	59 07       	cpc	r21, r25
    2954:	c8 f0       	brcs	.+50     	; 0x2988 <malloc+0x66>
    2956:	84 17       	cp	r24, r20
    2958:	95 07       	cpc	r25, r21
    295a:	69 f4       	brne	.+26     	; 0x2976 <malloc+0x54>
    295c:	10 97       	sbiw	r26, 0x00	; 0
    295e:	31 f0       	breq	.+12     	; 0x296c <malloc+0x4a>
    2960:	12 96       	adiw	r26, 0x02	; 2
    2962:	0c 93       	st	X, r16
    2964:	12 97       	sbiw	r26, 0x02	; 2
    2966:	13 96       	adiw	r26, 0x03	; 3
    2968:	1c 93       	st	X, r17
    296a:	27 c0       	rjmp	.+78     	; 0x29ba <malloc+0x98>
    296c:	00 93 53 07 	sts	0x0753, r16	; 0x800753 <__flp>
    2970:	10 93 54 07 	sts	0x0754, r17	; 0x800754 <__flp+0x1>
    2974:	22 c0       	rjmp	.+68     	; 0x29ba <malloc+0x98>
    2976:	21 15       	cp	r18, r1
    2978:	31 05       	cpc	r19, r1
    297a:	19 f0       	breq	.+6      	; 0x2982 <malloc+0x60>
    297c:	42 17       	cp	r20, r18
    297e:	53 07       	cpc	r21, r19
    2980:	18 f4       	brcc	.+6      	; 0x2988 <malloc+0x66>
    2982:	9a 01       	movw	r18, r20
    2984:	bd 01       	movw	r22, r26
    2986:	ef 01       	movw	r28, r30
    2988:	df 01       	movw	r26, r30
    298a:	f8 01       	movw	r30, r16
    298c:	db cf       	rjmp	.-74     	; 0x2944 <malloc+0x22>
    298e:	21 15       	cp	r18, r1
    2990:	31 05       	cpc	r19, r1
    2992:	f9 f0       	breq	.+62     	; 0x29d2 <malloc+0xb0>
    2994:	28 1b       	sub	r18, r24
    2996:	39 0b       	sbc	r19, r25
    2998:	24 30       	cpi	r18, 0x04	; 4
    299a:	31 05       	cpc	r19, r1
    299c:	80 f4       	brcc	.+32     	; 0x29be <malloc+0x9c>
    299e:	8a 81       	ldd	r24, Y+2	; 0x02
    29a0:	9b 81       	ldd	r25, Y+3	; 0x03
    29a2:	61 15       	cp	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <malloc+0x8e>
    29a8:	fb 01       	movw	r30, r22
    29aa:	93 83       	std	Z+3, r25	; 0x03
    29ac:	82 83       	std	Z+2, r24	; 0x02
    29ae:	04 c0       	rjmp	.+8      	; 0x29b8 <malloc+0x96>
    29b0:	90 93 54 07 	sts	0x0754, r25	; 0x800754 <__flp+0x1>
    29b4:	80 93 53 07 	sts	0x0753, r24	; 0x800753 <__flp>
    29b8:	fe 01       	movw	r30, r28
    29ba:	32 96       	adiw	r30, 0x02	; 2
    29bc:	44 c0       	rjmp	.+136    	; 0x2a46 <malloc+0x124>
    29be:	fe 01       	movw	r30, r28
    29c0:	e2 0f       	add	r30, r18
    29c2:	f3 1f       	adc	r31, r19
    29c4:	81 93       	st	Z+, r24
    29c6:	91 93       	st	Z+, r25
    29c8:	22 50       	subi	r18, 0x02	; 2
    29ca:	31 09       	sbc	r19, r1
    29cc:	39 83       	std	Y+1, r19	; 0x01
    29ce:	28 83       	st	Y, r18
    29d0:	3a c0       	rjmp	.+116    	; 0x2a46 <malloc+0x124>
    29d2:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <__brkval>
    29d6:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <__brkval+0x1>
    29da:	23 2b       	or	r18, r19
    29dc:	41 f4       	brne	.+16     	; 0x29ee <malloc+0xcc>
    29de:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    29e2:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    29e6:	30 93 52 07 	sts	0x0752, r19	; 0x800752 <__brkval+0x1>
    29ea:	20 93 51 07 	sts	0x0751, r18	; 0x800751 <__brkval>
    29ee:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    29f2:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    29f6:	21 15       	cp	r18, r1
    29f8:	31 05       	cpc	r19, r1
    29fa:	41 f4       	brne	.+16     	; 0x2a0c <malloc+0xea>
    29fc:	2d b7       	in	r18, 0x3d	; 61
    29fe:	3e b7       	in	r19, 0x3e	; 62
    2a00:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2a04:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2a08:	24 1b       	sub	r18, r20
    2a0a:	35 0b       	sbc	r19, r21
    2a0c:	e0 91 51 07 	lds	r30, 0x0751	; 0x800751 <__brkval>
    2a10:	f0 91 52 07 	lds	r31, 0x0752	; 0x800752 <__brkval+0x1>
    2a14:	e2 17       	cp	r30, r18
    2a16:	f3 07       	cpc	r31, r19
    2a18:	a0 f4       	brcc	.+40     	; 0x2a42 <malloc+0x120>
    2a1a:	2e 1b       	sub	r18, r30
    2a1c:	3f 0b       	sbc	r19, r31
    2a1e:	28 17       	cp	r18, r24
    2a20:	39 07       	cpc	r19, r25
    2a22:	78 f0       	brcs	.+30     	; 0x2a42 <malloc+0x120>
    2a24:	ac 01       	movw	r20, r24
    2a26:	4e 5f       	subi	r20, 0xFE	; 254
    2a28:	5f 4f       	sbci	r21, 0xFF	; 255
    2a2a:	24 17       	cp	r18, r20
    2a2c:	35 07       	cpc	r19, r21
    2a2e:	48 f0       	brcs	.+18     	; 0x2a42 <malloc+0x120>
    2a30:	4e 0f       	add	r20, r30
    2a32:	5f 1f       	adc	r21, r31
    2a34:	50 93 52 07 	sts	0x0752, r21	; 0x800752 <__brkval+0x1>
    2a38:	40 93 51 07 	sts	0x0751, r20	; 0x800751 <__brkval>
    2a3c:	81 93       	st	Z+, r24
    2a3e:	91 93       	st	Z+, r25
    2a40:	02 c0       	rjmp	.+4      	; 0x2a46 <malloc+0x124>
    2a42:	e0 e0       	ldi	r30, 0x00	; 0
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	cf 01       	movw	r24, r30
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	08 95       	ret

00002a52 <free>:
    2a52:	cf 93       	push	r28
    2a54:	df 93       	push	r29
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	09 f4       	brne	.+2      	; 0x2a5c <free+0xa>
    2a5a:	81 c0       	rjmp	.+258    	; 0x2b5e <free+0x10c>
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	32 97       	sbiw	r30, 0x02	; 2
    2a60:	13 82       	std	Z+3, r1	; 0x03
    2a62:	12 82       	std	Z+2, r1	; 0x02
    2a64:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <__flp>
    2a68:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <__flp+0x1>
    2a6c:	10 97       	sbiw	r26, 0x00	; 0
    2a6e:	81 f4       	brne	.+32     	; 0x2a90 <free+0x3e>
    2a70:	20 81       	ld	r18, Z
    2a72:	31 81       	ldd	r19, Z+1	; 0x01
    2a74:	82 0f       	add	r24, r18
    2a76:	93 1f       	adc	r25, r19
    2a78:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <__brkval>
    2a7c:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <__brkval+0x1>
    2a80:	28 17       	cp	r18, r24
    2a82:	39 07       	cpc	r19, r25
    2a84:	51 f5       	brne	.+84     	; 0x2ada <free+0x88>
    2a86:	f0 93 52 07 	sts	0x0752, r31	; 0x800752 <__brkval+0x1>
    2a8a:	e0 93 51 07 	sts	0x0751, r30	; 0x800751 <__brkval>
    2a8e:	67 c0       	rjmp	.+206    	; 0x2b5e <free+0x10c>
    2a90:	ed 01       	movw	r28, r26
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	ce 17       	cp	r28, r30
    2a98:	df 07       	cpc	r29, r31
    2a9a:	40 f4       	brcc	.+16     	; 0x2aac <free+0x5a>
    2a9c:	4a 81       	ldd	r20, Y+2	; 0x02
    2a9e:	5b 81       	ldd	r21, Y+3	; 0x03
    2aa0:	9e 01       	movw	r18, r28
    2aa2:	41 15       	cp	r20, r1
    2aa4:	51 05       	cpc	r21, r1
    2aa6:	f1 f0       	breq	.+60     	; 0x2ae4 <free+0x92>
    2aa8:	ea 01       	movw	r28, r20
    2aaa:	f5 cf       	rjmp	.-22     	; 0x2a96 <free+0x44>
    2aac:	d3 83       	std	Z+3, r29	; 0x03
    2aae:	c2 83       	std	Z+2, r28	; 0x02
    2ab0:	40 81       	ld	r20, Z
    2ab2:	51 81       	ldd	r21, Z+1	; 0x01
    2ab4:	84 0f       	add	r24, r20
    2ab6:	95 1f       	adc	r25, r21
    2ab8:	c8 17       	cp	r28, r24
    2aba:	d9 07       	cpc	r29, r25
    2abc:	59 f4       	brne	.+22     	; 0x2ad4 <free+0x82>
    2abe:	88 81       	ld	r24, Y
    2ac0:	99 81       	ldd	r25, Y+1	; 0x01
    2ac2:	84 0f       	add	r24, r20
    2ac4:	95 1f       	adc	r25, r21
    2ac6:	02 96       	adiw	r24, 0x02	; 2
    2ac8:	91 83       	std	Z+1, r25	; 0x01
    2aca:	80 83       	st	Z, r24
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad0:	93 83       	std	Z+3, r25	; 0x03
    2ad2:	82 83       	std	Z+2, r24	; 0x02
    2ad4:	21 15       	cp	r18, r1
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <free+0x92>
    2ada:	f0 93 54 07 	sts	0x0754, r31	; 0x800754 <__flp+0x1>
    2ade:	e0 93 53 07 	sts	0x0753, r30	; 0x800753 <__flp>
    2ae2:	3d c0       	rjmp	.+122    	; 0x2b5e <free+0x10c>
    2ae4:	e9 01       	movw	r28, r18
    2ae6:	fb 83       	std	Y+3, r31	; 0x03
    2ae8:	ea 83       	std	Y+2, r30	; 0x02
    2aea:	49 91       	ld	r20, Y+
    2aec:	59 91       	ld	r21, Y+
    2aee:	c4 0f       	add	r28, r20
    2af0:	d5 1f       	adc	r29, r21
    2af2:	ec 17       	cp	r30, r28
    2af4:	fd 07       	cpc	r31, r29
    2af6:	61 f4       	brne	.+24     	; 0x2b10 <free+0xbe>
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	84 0f       	add	r24, r20
    2afe:	95 1f       	adc	r25, r21
    2b00:	02 96       	adiw	r24, 0x02	; 2
    2b02:	e9 01       	movw	r28, r18
    2b04:	99 83       	std	Y+1, r25	; 0x01
    2b06:	88 83       	st	Y, r24
    2b08:	82 81       	ldd	r24, Z+2	; 0x02
    2b0a:	93 81       	ldd	r25, Z+3	; 0x03
    2b0c:	9b 83       	std	Y+3, r25	; 0x03
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	e0 e0       	ldi	r30, 0x00	; 0
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	12 96       	adiw	r26, 0x02	; 2
    2b16:	8d 91       	ld	r24, X+
    2b18:	9c 91       	ld	r25, X
    2b1a:	13 97       	sbiw	r26, 0x03	; 3
    2b1c:	00 97       	sbiw	r24, 0x00	; 0
    2b1e:	19 f0       	breq	.+6      	; 0x2b26 <free+0xd4>
    2b20:	fd 01       	movw	r30, r26
    2b22:	dc 01       	movw	r26, r24
    2b24:	f7 cf       	rjmp	.-18     	; 0x2b14 <free+0xc2>
    2b26:	8d 91       	ld	r24, X+
    2b28:	9c 91       	ld	r25, X
    2b2a:	11 97       	sbiw	r26, 0x01	; 1
    2b2c:	9d 01       	movw	r18, r26
    2b2e:	2e 5f       	subi	r18, 0xFE	; 254
    2b30:	3f 4f       	sbci	r19, 0xFF	; 255
    2b32:	82 0f       	add	r24, r18
    2b34:	93 1f       	adc	r25, r19
    2b36:	20 91 51 07 	lds	r18, 0x0751	; 0x800751 <__brkval>
    2b3a:	30 91 52 07 	lds	r19, 0x0752	; 0x800752 <__brkval+0x1>
    2b3e:	28 17       	cp	r18, r24
    2b40:	39 07       	cpc	r19, r25
    2b42:	69 f4       	brne	.+26     	; 0x2b5e <free+0x10c>
    2b44:	30 97       	sbiw	r30, 0x00	; 0
    2b46:	29 f4       	brne	.+10     	; 0x2b52 <free+0x100>
    2b48:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <__flp+0x1>
    2b4c:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <__flp>
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <free+0x104>
    2b52:	13 82       	std	Z+3, r1	; 0x03
    2b54:	12 82       	std	Z+2, r1	; 0x02
    2b56:	b0 93 52 07 	sts	0x0752, r27	; 0x800752 <__brkval+0x1>
    2b5a:	a0 93 51 07 	sts	0x0751, r26	; 0x800751 <__brkval>
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	08 95       	ret

00002b64 <realloc>:
    2b64:	6f 92       	push	r6
    2b66:	7f 92       	push	r7
    2b68:	8f 92       	push	r8
    2b6a:	9f 92       	push	r9
    2b6c:	af 92       	push	r10
    2b6e:	bf 92       	push	r11
    2b70:	cf 92       	push	r12
    2b72:	df 92       	push	r13
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	81 f4       	brne	.+32     	; 0x2ba4 <realloc+0x40>
    2b84:	cb 01       	movw	r24, r22
    2b86:	df 91       	pop	r29
    2b88:	cf 91       	pop	r28
    2b8a:	1f 91       	pop	r17
    2b8c:	0f 91       	pop	r16
    2b8e:	ff 90       	pop	r15
    2b90:	ef 90       	pop	r14
    2b92:	df 90       	pop	r13
    2b94:	cf 90       	pop	r12
    2b96:	bf 90       	pop	r11
    2b98:	af 90       	pop	r10
    2b9a:	9f 90       	pop	r9
    2b9c:	8f 90       	pop	r8
    2b9e:	7f 90       	pop	r7
    2ba0:	6f 90       	pop	r6
    2ba2:	bf ce       	rjmp	.-642    	; 0x2922 <malloc>
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	e6 0f       	add	r30, r22
    2ba8:	f7 1f       	adc	r31, r23
    2baa:	9c 01       	movw	r18, r24
    2bac:	22 50       	subi	r18, 0x02	; 2
    2bae:	31 09       	sbc	r19, r1
    2bb0:	e2 17       	cp	r30, r18
    2bb2:	f3 07       	cpc	r31, r19
    2bb4:	08 f4       	brcc	.+2      	; 0x2bb8 <realloc+0x54>
    2bb6:	a5 c0       	rjmp	.+330    	; 0x2d02 <realloc+0x19e>
    2bb8:	ec 01       	movw	r28, r24
    2bba:	d9 01       	movw	r26, r18
    2bbc:	0d 91       	ld	r16, X+
    2bbe:	1c 91       	ld	r17, X
    2bc0:	11 97       	sbiw	r26, 0x01	; 1
    2bc2:	06 17       	cp	r16, r22
    2bc4:	17 07       	cpc	r17, r23
    2bc6:	a8 f0       	brcs	.+42     	; 0x2bf2 <realloc+0x8e>
    2bc8:	05 30       	cpi	r16, 0x05	; 5
    2bca:	11 05       	cpc	r17, r1
    2bcc:	08 f4       	brcc	.+2      	; 0x2bd0 <realloc+0x6c>
    2bce:	97 c0       	rjmp	.+302    	; 0x2cfe <realloc+0x19a>
    2bd0:	c8 01       	movw	r24, r16
    2bd2:	04 97       	sbiw	r24, 0x04	; 4
    2bd4:	86 17       	cp	r24, r22
    2bd6:	97 07       	cpc	r25, r23
    2bd8:	08 f4       	brcc	.+2      	; 0x2bdc <realloc+0x78>
    2bda:	91 c0       	rjmp	.+290    	; 0x2cfe <realloc+0x19a>
    2bdc:	02 50       	subi	r16, 0x02	; 2
    2bde:	11 09       	sbc	r17, r1
    2be0:	06 1b       	sub	r16, r22
    2be2:	17 0b       	sbc	r17, r23
    2be4:	01 93       	st	Z+, r16
    2be6:	11 93       	st	Z+, r17
    2be8:	6d 93       	st	X+, r22
    2bea:	7c 93       	st	X, r23
    2bec:	cf 01       	movw	r24, r30
    2bee:	31 df       	rcall	.-414    	; 0x2a52 <free>
    2bf0:	86 c0       	rjmp	.+268    	; 0x2cfe <realloc+0x19a>
    2bf2:	5b 01       	movw	r10, r22
    2bf4:	a0 1a       	sub	r10, r16
    2bf6:	b1 0a       	sbc	r11, r17
    2bf8:	4c 01       	movw	r8, r24
    2bfa:	80 0e       	add	r8, r16
    2bfc:	91 1e       	adc	r9, r17
    2bfe:	a0 91 53 07 	lds	r26, 0x0753	; 0x800753 <__flp>
    2c02:	b0 91 54 07 	lds	r27, 0x0754	; 0x800754 <__flp+0x1>
    2c06:	61 2c       	mov	r6, r1
    2c08:	71 2c       	mov	r7, r1
    2c0a:	e1 2c       	mov	r14, r1
    2c0c:	f1 2c       	mov	r15, r1
    2c0e:	10 97       	sbiw	r26, 0x00	; 0
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <realloc+0xb0>
    2c12:	46 c0       	rjmp	.+140    	; 0x2ca0 <realloc+0x13c>
    2c14:	8d 91       	ld	r24, X+
    2c16:	9c 91       	ld	r25, X
    2c18:	11 97       	sbiw	r26, 0x01	; 1
    2c1a:	a8 15       	cp	r26, r8
    2c1c:	b9 05       	cpc	r27, r9
    2c1e:	b1 f5       	brne	.+108    	; 0x2c8c <realloc+0x128>
    2c20:	6c 01       	movw	r12, r24
    2c22:	42 e0       	ldi	r20, 0x02	; 2
    2c24:	c4 0e       	add	r12, r20
    2c26:	d1 1c       	adc	r13, r1
    2c28:	ca 14       	cp	r12, r10
    2c2a:	db 04       	cpc	r13, r11
    2c2c:	78 f1       	brcs	.+94     	; 0x2c8c <realloc+0x128>
    2c2e:	4c 01       	movw	r8, r24
    2c30:	8a 18       	sub	r8, r10
    2c32:	9b 08       	sbc	r9, r11
    2c34:	64 01       	movw	r12, r8
    2c36:	42 e0       	ldi	r20, 0x02	; 2
    2c38:	c4 0e       	add	r12, r20
    2c3a:	d1 1c       	adc	r13, r1
    2c3c:	12 96       	adiw	r26, 0x02	; 2
    2c3e:	bc 90       	ld	r11, X
    2c40:	12 97       	sbiw	r26, 0x02	; 2
    2c42:	13 96       	adiw	r26, 0x03	; 3
    2c44:	ac 91       	ld	r26, X
    2c46:	b5 e0       	ldi	r27, 0x05	; 5
    2c48:	cb 16       	cp	r12, r27
    2c4a:	d1 04       	cpc	r13, r1
    2c4c:	40 f0       	brcs	.+16     	; 0x2c5e <realloc+0xfa>
    2c4e:	b2 82       	std	Z+2, r11	; 0x02
    2c50:	a3 83       	std	Z+3, r26	; 0x03
    2c52:	91 82       	std	Z+1, r9	; 0x01
    2c54:	80 82       	st	Z, r8
    2c56:	d9 01       	movw	r26, r18
    2c58:	6d 93       	st	X+, r22
    2c5a:	7c 93       	st	X, r23
    2c5c:	09 c0       	rjmp	.+18     	; 0x2c70 <realloc+0x10c>
    2c5e:	0e 5f       	subi	r16, 0xFE	; 254
    2c60:	1f 4f       	sbci	r17, 0xFF	; 255
    2c62:	80 0f       	add	r24, r16
    2c64:	91 1f       	adc	r25, r17
    2c66:	f9 01       	movw	r30, r18
    2c68:	91 83       	std	Z+1, r25	; 0x01
    2c6a:	80 83       	st	Z, r24
    2c6c:	eb 2d       	mov	r30, r11
    2c6e:	fa 2f       	mov	r31, r26
    2c70:	e1 14       	cp	r14, r1
    2c72:	f1 04       	cpc	r15, r1
    2c74:	31 f0       	breq	.+12     	; 0x2c82 <realloc+0x11e>
    2c76:	d7 01       	movw	r26, r14
    2c78:	13 96       	adiw	r26, 0x03	; 3
    2c7a:	fc 93       	st	X, r31
    2c7c:	ee 93       	st	-X, r30
    2c7e:	12 97       	sbiw	r26, 0x02	; 2
    2c80:	3e c0       	rjmp	.+124    	; 0x2cfe <realloc+0x19a>
    2c82:	f0 93 54 07 	sts	0x0754, r31	; 0x800754 <__flp+0x1>
    2c86:	e0 93 53 07 	sts	0x0753, r30	; 0x800753 <__flp>
    2c8a:	39 c0       	rjmp	.+114    	; 0x2cfe <realloc+0x19a>
    2c8c:	68 16       	cp	r6, r24
    2c8e:	79 06       	cpc	r7, r25
    2c90:	08 f4       	brcc	.+2      	; 0x2c94 <realloc+0x130>
    2c92:	3c 01       	movw	r6, r24
    2c94:	7d 01       	movw	r14, r26
    2c96:	12 96       	adiw	r26, 0x02	; 2
    2c98:	0d 90       	ld	r0, X+
    2c9a:	bc 91       	ld	r27, X
    2c9c:	a0 2d       	mov	r26, r0
    2c9e:	b7 cf       	rjmp	.-146    	; 0x2c0e <realloc+0xaa>
    2ca0:	80 91 51 07 	lds	r24, 0x0751	; 0x800751 <__brkval>
    2ca4:	90 91 52 07 	lds	r25, 0x0752	; 0x800752 <__brkval+0x1>
    2ca8:	88 16       	cp	r8, r24
    2caa:	99 06       	cpc	r9, r25
    2cac:	e1 f4       	brne	.+56     	; 0x2ce6 <realloc+0x182>
    2cae:	66 16       	cp	r6, r22
    2cb0:	77 06       	cpc	r7, r23
    2cb2:	c8 f4       	brcc	.+50     	; 0x2ce6 <realloc+0x182>
    2cb4:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    2cb8:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	41 f4       	brne	.+16     	; 0x2cd0 <realloc+0x16c>
    2cc0:	8d b7       	in	r24, 0x3d	; 61
    2cc2:	9e b7       	in	r25, 0x3e	; 62
    2cc4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2cc8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2ccc:	84 1b       	sub	r24, r20
    2cce:	95 0b       	sbc	r25, r21
    2cd0:	e8 17       	cp	r30, r24
    2cd2:	f9 07       	cpc	r31, r25
    2cd4:	b0 f4       	brcc	.+44     	; 0x2d02 <realloc+0x19e>
    2cd6:	f0 93 52 07 	sts	0x0752, r31	; 0x800752 <__brkval+0x1>
    2cda:	e0 93 51 07 	sts	0x0751, r30	; 0x800751 <__brkval>
    2cde:	f9 01       	movw	r30, r18
    2ce0:	71 83       	std	Z+1, r23	; 0x01
    2ce2:	60 83       	st	Z, r22
    2ce4:	0c c0       	rjmp	.+24     	; 0x2cfe <realloc+0x19a>
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	1c de       	rcall	.-968    	; 0x2922 <malloc>
    2cea:	7c 01       	movw	r14, r24
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	49 f0       	breq	.+18     	; 0x2d02 <realloc+0x19e>
    2cf0:	a8 01       	movw	r20, r16
    2cf2:	be 01       	movw	r22, r28
    2cf4:	17 d0       	rcall	.+46     	; 0x2d24 <memcpy>
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	ac de       	rcall	.-680    	; 0x2a52 <free>
    2cfa:	c7 01       	movw	r24, r14
    2cfc:	04 c0       	rjmp	.+8      	; 0x2d06 <realloc+0x1a2>
    2cfe:	ce 01       	movw	r24, r28
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <realloc+0x1a2>
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	1f 91       	pop	r17
    2d0c:	0f 91       	pop	r16
    2d0e:	ff 90       	pop	r15
    2d10:	ef 90       	pop	r14
    2d12:	df 90       	pop	r13
    2d14:	cf 90       	pop	r12
    2d16:	bf 90       	pop	r11
    2d18:	af 90       	pop	r10
    2d1a:	9f 90       	pop	r9
    2d1c:	8f 90       	pop	r8
    2d1e:	7f 90       	pop	r7
    2d20:	6f 90       	pop	r6
    2d22:	08 95       	ret

00002d24 <memcpy>:
    2d24:	fb 01       	movw	r30, r22
    2d26:	dc 01       	movw	r26, r24
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <memcpy+0xa>
    2d2a:	01 90       	ld	r0, Z+
    2d2c:	0d 92       	st	X+, r0
    2d2e:	41 50       	subi	r20, 0x01	; 1
    2d30:	50 40       	sbci	r21, 0x00	; 0
    2d32:	d8 f7       	brcc	.-10     	; 0x2d2a <memcpy+0x6>
    2d34:	08 95       	ret

00002d36 <memmove>:
    2d36:	68 17       	cp	r22, r24
    2d38:	79 07       	cpc	r23, r25
    2d3a:	68 f4       	brcc	.+26     	; 0x2d56 <memmove+0x20>
    2d3c:	fb 01       	movw	r30, r22
    2d3e:	dc 01       	movw	r26, r24
    2d40:	e4 0f       	add	r30, r20
    2d42:	f5 1f       	adc	r31, r21
    2d44:	a4 0f       	add	r26, r20
    2d46:	b5 1f       	adc	r27, r21
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <memmove+0x18>
    2d4a:	02 90       	ld	r0, -Z
    2d4c:	0e 92       	st	-X, r0
    2d4e:	41 50       	subi	r20, 0x01	; 1
    2d50:	50 40       	sbci	r21, 0x00	; 0
    2d52:	d8 f7       	brcc	.-10     	; 0x2d4a <memmove+0x14>
    2d54:	08 95       	ret
    2d56:	e6 cf       	rjmp	.-52     	; 0x2d24 <memcpy>

00002d58 <strcpy>:
    2d58:	fb 01       	movw	r30, r22
    2d5a:	dc 01       	movw	r26, r24
    2d5c:	01 90       	ld	r0, Z+
    2d5e:	0d 92       	st	X+, r0
    2d60:	00 20       	and	r0, r0
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <strcpy+0x4>
    2d64:	08 95       	ret

00002d66 <strstr>:
    2d66:	fb 01       	movw	r30, r22
    2d68:	51 91       	ld	r21, Z+
    2d6a:	55 23       	and	r21, r21
    2d6c:	a9 f0       	breq	.+42     	; 0x2d98 <strstr+0x32>
    2d6e:	bf 01       	movw	r22, r30
    2d70:	dc 01       	movw	r26, r24
    2d72:	4d 91       	ld	r20, X+
    2d74:	45 17       	cp	r20, r21
    2d76:	41 11       	cpse	r20, r1
    2d78:	e1 f7       	brne	.-8      	; 0x2d72 <strstr+0xc>
    2d7a:	59 f4       	brne	.+22     	; 0x2d92 <strstr+0x2c>
    2d7c:	cd 01       	movw	r24, r26
    2d7e:	01 90       	ld	r0, Z+
    2d80:	00 20       	and	r0, r0
    2d82:	49 f0       	breq	.+18     	; 0x2d96 <strstr+0x30>
    2d84:	4d 91       	ld	r20, X+
    2d86:	40 15       	cp	r20, r0
    2d88:	41 11       	cpse	r20, r1
    2d8a:	c9 f3       	breq	.-14     	; 0x2d7e <strstr+0x18>
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	41 11       	cpse	r20, r1
    2d90:	ef cf       	rjmp	.-34     	; 0x2d70 <strstr+0xa>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	01 97       	sbiw	r24, 0x01	; 1
    2d98:	08 95       	ret

00002d9a <itoa>:
    2d9a:	45 32       	cpi	r20, 0x25	; 37
    2d9c:	51 05       	cpc	r21, r1
    2d9e:	18 f4       	brcc	.+6      	; 0x2da6 <itoa+0xc>
    2da0:	42 30       	cpi	r20, 0x02	; 2
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <itoa+0xc>
    2da4:	04 c0       	rjmp	.+8      	; 0x2dae <__itoa_ncheck>
    2da6:	fb 01       	movw	r30, r22
    2da8:	10 82       	st	Z, r1
    2daa:	cb 01       	movw	r24, r22
    2dac:	08 95       	ret

00002dae <__itoa_ncheck>:
    2dae:	bb 27       	eor	r27, r27
    2db0:	4a 30       	cpi	r20, 0x0A	; 10
    2db2:	31 f4       	brne	.+12     	; 0x2dc0 <__itoa_ncheck+0x12>
    2db4:	99 23       	and	r25, r25
    2db6:	22 f4       	brpl	.+8      	; 0x2dc0 <__itoa_ncheck+0x12>
    2db8:	bd e2       	ldi	r27, 0x2D	; 45
    2dba:	90 95       	com	r25
    2dbc:	81 95       	neg	r24
    2dbe:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc0:	01 c0       	rjmp	.+2      	; 0x2dc4 <__utoa_common>

00002dc2 <__utoa_ncheck>:
    2dc2:	bb 27       	eor	r27, r27

00002dc4 <__utoa_common>:
    2dc4:	fb 01       	movw	r30, r22
    2dc6:	55 27       	eor	r21, r21
    2dc8:	aa 27       	eor	r26, r26
    2dca:	88 0f       	add	r24, r24
    2dcc:	99 1f       	adc	r25, r25
    2dce:	aa 1f       	adc	r26, r26
    2dd0:	a4 17       	cp	r26, r20
    2dd2:	10 f0       	brcs	.+4      	; 0x2dd8 <__utoa_common+0x14>
    2dd4:	a4 1b       	sub	r26, r20
    2dd6:	83 95       	inc	r24
    2dd8:	50 51       	subi	r21, 0x10	; 16
    2dda:	b9 f7       	brne	.-18     	; 0x2dca <__utoa_common+0x6>
    2ddc:	a0 5d       	subi	r26, 0xD0	; 208
    2dde:	aa 33       	cpi	r26, 0x3A	; 58
    2de0:	08 f0       	brcs	.+2      	; 0x2de4 <__utoa_common+0x20>
    2de2:	a9 5d       	subi	r26, 0xD9	; 217
    2de4:	a1 93       	st	Z+, r26
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	79 f7       	brne	.-34     	; 0x2dc8 <__utoa_common+0x4>
    2dea:	b1 11       	cpse	r27, r1
    2dec:	b1 93       	st	Z+, r27
    2dee:	11 92       	st	Z+, r1
    2df0:	cb 01       	movw	r24, r22
    2df2:	00 c0       	rjmp	.+0      	; 0x2df4 <strrev>

00002df4 <strrev>:
    2df4:	dc 01       	movw	r26, r24
    2df6:	fc 01       	movw	r30, r24
    2df8:	67 2f       	mov	r22, r23
    2dfa:	71 91       	ld	r23, Z+
    2dfc:	77 23       	and	r23, r23
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <strrev+0x4>
    2e00:	32 97       	sbiw	r30, 0x02	; 2
    2e02:	04 c0       	rjmp	.+8      	; 0x2e0c <strrev+0x18>
    2e04:	7c 91       	ld	r23, X
    2e06:	6d 93       	st	X+, r22
    2e08:	70 83       	st	Z, r23
    2e0a:	62 91       	ld	r22, -Z
    2e0c:	ae 17       	cp	r26, r30
    2e0e:	bf 07       	cpc	r27, r31
    2e10:	c8 f3       	brcs	.-14     	; 0x2e04 <strrev+0x10>
    2e12:	08 95       	ret

00002e14 <__do_global_dtors>:
    2e14:	11 e0       	ldi	r17, 0x01	; 1
    2e16:	c7 e1       	ldi	r28, 0x17	; 23
    2e18:	d1 e0       	ldi	r29, 0x01	; 1
    2e1a:	00 e0       	ldi	r16, 0x00	; 0
    2e1c:	05 c0       	rjmp	.+10     	; 0x2e28 <__do_global_dtors+0x14>
    2e1e:	80 2f       	mov	r24, r16
    2e20:	fe 01       	movw	r30, r28
    2e22:	77 dd       	rcall	.-1298   	; 0x2912 <__tablejump2__>
    2e24:	21 96       	adiw	r28, 0x01	; 1
    2e26:	01 1d       	adc	r16, r1
    2e28:	c8 31       	cpi	r28, 0x18	; 24
    2e2a:	d1 07       	cpc	r29, r17
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	08 07       	cpc	r16, r24
    2e30:	b1 f7       	brne	.-20     	; 0x2e1e <__do_global_dtors+0xa>
    2e32:	f8 94       	cli

00002e34 <__stop_program>:
    2e34:	ff cf       	rjmp	.-2      	; 0x2e34 <__stop_program>
