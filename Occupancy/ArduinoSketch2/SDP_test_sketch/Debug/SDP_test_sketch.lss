
SDP_test_sketch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800200  00002c50  00002ce4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002c50  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000323  0080039a  0080039a  00002e7e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e7e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002eb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000860  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00016f53  00000000  00000000  00003750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003bd3  00000000  00000000  0001a6a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004889  00000000  00000000  0001e276  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b6c  00000000  00000000  00022b00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000038cf  00000000  00000000  0002466c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009740  00000000  00000000  00027f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f0  00000000  00000000  0003167b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	17 c1       	rjmp	.+558    	; 0x230 <__ctors_end>
       2:	00 00       	nop
       4:	45 c1       	rjmp	.+650    	; 0x290 <__bad_interrupt>
       6:	00 00       	nop
       8:	43 c1       	rjmp	.+646    	; 0x290 <__bad_interrupt>
       a:	00 00       	nop
       c:	41 c1       	rjmp	.+642    	; 0x290 <__bad_interrupt>
       e:	00 00       	nop
      10:	3f c1       	rjmp	.+638    	; 0x290 <__bad_interrupt>
      12:	00 00       	nop
      14:	3d c1       	rjmp	.+634    	; 0x290 <__bad_interrupt>
      16:	00 00       	nop
      18:	3b c1       	rjmp	.+630    	; 0x290 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	39 c1       	rjmp	.+626    	; 0x290 <__bad_interrupt>
      1e:	00 00       	nop
      20:	37 c1       	rjmp	.+622    	; 0x290 <__bad_interrupt>
      22:	00 00       	nop
      24:	35 c1       	rjmp	.+618    	; 0x290 <__bad_interrupt>
      26:	00 00       	nop
      28:	33 c1       	rjmp	.+614    	; 0x290 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	31 c1       	rjmp	.+610    	; 0x290 <__bad_interrupt>
      2e:	00 00       	nop
      30:	2f c1       	rjmp	.+606    	; 0x290 <__bad_interrupt>
      32:	00 00       	nop
      34:	2d c1       	rjmp	.+602    	; 0x290 <__bad_interrupt>
      36:	00 00       	nop
      38:	2b c1       	rjmp	.+598    	; 0x290 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	29 c1       	rjmp	.+594    	; 0x290 <__bad_interrupt>
      3e:	00 00       	nop
      40:	27 c1       	rjmp	.+590    	; 0x290 <__bad_interrupt>
      42:	00 00       	nop
      44:	25 c1       	rjmp	.+586    	; 0x290 <__bad_interrupt>
      46:	00 00       	nop
      48:	23 c1       	rjmp	.+582    	; 0x290 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	21 c1       	rjmp	.+578    	; 0x290 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1f c1       	rjmp	.+574    	; 0x290 <__bad_interrupt>
      52:	00 00       	nop
      54:	1d c1       	rjmp	.+570    	; 0x290 <__bad_interrupt>
      56:	00 00       	nop
      58:	1b c1       	rjmp	.+566    	; 0x290 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <__vector_23>
      60:	17 c1       	rjmp	.+558    	; 0x290 <__bad_interrupt>
      62:	00 00       	nop
      64:	84 c5       	rjmp	.+2824   	; 0xb6e <__vector_25>
      66:	00 00       	nop
      68:	b8 c5       	rjmp	.+2928   	; 0xbda <__vector_26>
      6a:	00 00       	nop
      6c:	11 c1       	rjmp	.+546    	; 0x290 <__bad_interrupt>
      6e:	00 00       	nop
      70:	0f c1       	rjmp	.+542    	; 0x290 <__bad_interrupt>
      72:	00 00       	nop
      74:	0d c1       	rjmp	.+538    	; 0x290 <__bad_interrupt>
      76:	00 00       	nop
      78:	0b c1       	rjmp	.+534    	; 0x290 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	09 c1       	rjmp	.+530    	; 0x290 <__bad_interrupt>
      7e:	00 00       	nop
      80:	07 c1       	rjmp	.+526    	; 0x290 <__bad_interrupt>
      82:	00 00       	nop
      84:	05 c1       	rjmp	.+522    	; 0x290 <__bad_interrupt>
      86:	00 00       	nop
      88:	03 c1       	rjmp	.+518    	; 0x290 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	01 c1       	rjmp	.+514    	; 0x290 <__bad_interrupt>
      8e:	00 00       	nop
      90:	03 c6       	rjmp	.+3078   	; 0xc98 <__vector_36>
      92:	00 00       	nop
      94:	37 c6       	rjmp	.+3182   	; 0xd04 <__vector_37>
      96:	00 00       	nop
      98:	fb c0       	rjmp	.+502    	; 0x290 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 6e 11 	jmp	0x22dc	; 0x22dc <__vector_39>
      a0:	f7 c0       	rjmp	.+494    	; 0x290 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f5 c0       	rjmp	.+490    	; 0x290 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f3 c0       	rjmp	.+486    	; 0x290 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	f1 c0       	rjmp	.+482    	; 0x290 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ef c0       	rjmp	.+478    	; 0x290 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	ed c0       	rjmp	.+474    	; 0x290 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	eb c0       	rjmp	.+470    	; 0x290 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e9 c0       	rjmp	.+466    	; 0x290 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e7 c0       	rjmp	.+462    	; 0x290 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e5 c0       	rjmp	.+458    	; 0x290 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	e3 c0       	rjmp	.+454    	; 0x290 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	e1 c0       	rjmp	.+450    	; 0x290 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	df c0       	rjmp	.+446    	; 0x290 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	dd c0       	rjmp	.+442    	; 0x290 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	db c0       	rjmp	.+438    	; 0x290 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d9 c0       	rjmp	.+434    	; 0x290 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d7 c0       	rjmp	.+430    	; 0x290 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	23 0a       	sbc	r2, r19
      e6:	26 0a       	sbc	r2, r22
      e8:	15 0a       	sbc	r1, r21
      ea:	19 0a       	sbc	r1, r25
      ec:	1f 0a       	sbc	r1, r31
      ee:	5d 0a       	sbc	r5, r29
      f0:	2a 0a       	sbc	r2, r26
      f2:	2e 0a       	sbc	r2, r30
      f4:	34 0a       	sbc	r3, r20
      f6:	38 0a       	sbc	r3, r24
      f8:	3c 0a       	sbc	r3, r28
      fa:	42 0a       	sbc	r4, r18
      fc:	46 0a       	sbc	r4, r22
      fe:	4a 0a       	sbc	r4, r26
     100:	5d 0a       	sbc	r5, r29
     102:	50 0a       	sbc	r5, r16
     104:	54 0a       	sbc	r5, r20
     106:	58 0a       	sbc	r5, r24

00000108 <__trampolines_end>:
     108:	00 00       	nop
     10a:	0a 0b       	sbc	r16, r26
     10c:	02 09       	sbc	r16, r2
     10e:	0c 0d       	add	r16, r12
     110:	0e 08       	sbc	r0, r14
     112:	07 03       	mulsu	r16, r23
     114:	04 01       	movw	r0, r8
	...
     132:	00 00       	nop
     134:	12 11       	cpse	r17, r2
     136:	10 00       	.word	0x0010	; ????
	...

0000014e <digital_pin_to_bit_mask_PGM>:
     14e:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     15e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     16e:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     17e:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     18e:	04 08 10 20 40 80                                   ... @.

00000194 <digital_pin_to_port_PGM>:
     194:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     1a4:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     1b4:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     1c4:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     1d4:	0b 0b 0b 0b 0b 0b                                   ......

000001da <port_to_input_PGM>:
     1da:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     1ea:	00 01 00 00 03 01 06 01 09 01                       ..........

000001f4 <port_to_output_PGM>:
     1f4:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     204:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000020e <port_to_mode_PGM>:
     20e:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     21e:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000228 <__ctors_start>:
     228:	eb 02       	muls	r30, r27
     22a:	1f 06       	cpc	r1, r31
     22c:	b4 06       	cpc	r11, r20
     22e:	6e 10       	cpse	r6, r14

00000230 <__ctors_end>:
     230:	11 24       	eor	r1, r1
     232:	1f be       	out	0x3f, r1	; 63
     234:	cf ef       	ldi	r28, 0xFF	; 255
     236:	d1 e2       	ldi	r29, 0x21	; 33
     238:	de bf       	out	0x3e, r29	; 62
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	00 e0       	ldi	r16, 0x00	; 0
     23e:	0c bf       	out	0x3c, r16	; 60

00000240 <__do_copy_data>:
     240:	13 e0       	ldi	r17, 0x03	; 3
     242:	a0 e0       	ldi	r26, 0x00	; 0
     244:	b2 e0       	ldi	r27, 0x02	; 2
     246:	e0 e5       	ldi	r30, 0x50	; 80
     248:	fc e2       	ldi	r31, 0x2C	; 44
     24a:	00 e0       	ldi	r16, 0x00	; 0
     24c:	0b bf       	out	0x3b, r16	; 59
     24e:	02 c0       	rjmp	.+4      	; 0x254 <__do_copy_data+0x14>
     250:	07 90       	elpm	r0, Z+
     252:	0d 92       	st	X+, r0
     254:	aa 39       	cpi	r26, 0x9A	; 154
     256:	b1 07       	cpc	r27, r17
     258:	d9 f7       	brne	.-10     	; 0x250 <__do_copy_data+0x10>

0000025a <__do_clear_bss>:
     25a:	26 e0       	ldi	r18, 0x06	; 6
     25c:	aa e9       	ldi	r26, 0x9A	; 154
     25e:	b3 e0       	ldi	r27, 0x03	; 3
     260:	01 c0       	rjmp	.+2      	; 0x264 <.do_clear_bss_start>

00000262 <.do_clear_bss_loop>:
     262:	1d 92       	st	X+, r1

00000264 <.do_clear_bss_start>:
     264:	ad 3b       	cpi	r26, 0xBD	; 189
     266:	b2 07       	cpc	r27, r18
     268:	e1 f7       	brne	.-8      	; 0x262 <.do_clear_bss_loop>

0000026a <__do_global_ctors>:
     26a:	11 e0       	ldi	r17, 0x01	; 1
     26c:	c8 e1       	ldi	r28, 0x18	; 24
     26e:	d1 e0       	ldi	r29, 0x01	; 1
     270:	00 e0       	ldi	r16, 0x00	; 0
     272:	06 c0       	rjmp	.+12     	; 0x280 <__do_global_ctors+0x16>
     274:	21 97       	sbiw	r28, 0x01	; 1
     276:	01 09       	sbc	r16, r1
     278:	80 2f       	mov	r24, r16
     27a:	fe 01       	movw	r30, r28
     27c:	0e 94 a5 13 	call	0x274a	; 0x274a <__tablejump2__>
     280:	c4 31       	cpi	r28, 0x14	; 20
     282:	d1 07       	cpc	r29, r17
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	08 07       	cpc	r16, r24
     288:	a9 f7       	brne	.-22     	; 0x274 <__do_global_ctors+0xa>
     28a:	9c d5       	rcall	.+2872   	; 0xdc4 <main>
     28c:	0c 94 26 16 	jmp	0x2c4c	; 0x2c4c <_exit>

00000290 <__bad_interrupt>:
     290:	b7 ce       	rjmp	.-658    	; 0x0 <__vectors>

00000292 <_Z12Camera_setup16Adafruit_AMG88xx>:
 */ 
#include "Camera.h"
#include "SoftwareSerial.h"
#include <Arduino.h>

void Camera_setup(Adafruit_AMG88xx amg){
     292:	cf 93       	push	r28
     294:	df 93       	push	r29
     296:	ec 01       	movw	r28, r24
	bool status;
	
	digitalWrite(Camera_enable_pin, LOW); //shut off NPN switch
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	87 e1       	ldi	r24, 0x17	; 23
     29c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	delay(100);
     2a0:	64 e6       	ldi	r22, 0x64	; 100
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 62 09 	call	0x12c4	; 0x12c4 <delay>
	
	// default settings
	status = amg.begin();
     2ac:	69 e6       	ldi	r22, 0x69	; 105
     2ae:	ce 01       	movw	r24, r28
     2b0:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN16Adafruit_AMG88xx5beginEh>
	if (!status) {
     2b4:	81 11       	cpse	r24, r1
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <_Z12Camera_setup16Adafruit_AMG88xx+0x32>
		Serial.println("Could not find a valid AMG88xx sensor, check wiring!");
     2b8:	66 e0       	ldi	r22, 0x06	; 6
     2ba:	72 e0       	ldi	r23, 0x02	; 2
     2bc:	82 eb       	ldi	r24, 0xB2	; 178
     2be:	94 e0       	ldi	r25, 0x04	; 4
     2c0:	f3 d5       	rcall	.+3046   	; 0xea8 <_ZN5Print7printlnEPKc>
     2c2:	ff cf       	rjmp	.-2      	; 0x2c2 <_Z12Camera_setup16Adafruit_AMG88xx+0x30>
		while (1);
	}
	
	Serial.println("-- Pixels Test --");
     2c4:	6b e3       	ldi	r22, 0x3B	; 59
     2c6:	72 e0       	ldi	r23, 0x02	; 2
     2c8:	82 eb       	ldi	r24, 0xB2	; 178
     2ca:	94 e0       	ldi	r25, 0x04	; 4
     2cc:	ed d5       	rcall	.+3034   	; 0xea8 <_ZN5Print7printlnEPKc>

	Serial.println();
     2ce:	82 eb       	ldi	r24, 0xB2	; 178
     2d0:	94 e0       	ldi	r25, 0x04	; 4
     2d2:	d7 d5       	rcall	.+2990   	; 0xe82 <_ZN5Print7printlnEv>

	delay(100); // let sensor boot up
     2d4:	64 e6       	ldi	r22, 0x64	; 100
     2d6:	70 e0       	ldi	r23, 0x00	; 0
     2d8:	80 e0       	ldi	r24, 0x00	; 0
}
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	df 91       	pop	r29
	
	Serial.println("-- Pixels Test --");

	Serial.println();

	delay(100); // let sensor boot up
     2de:	cf 91       	pop	r28
     2e0:	f1 c7       	rjmp	.+4066   	; 0x12c4 <delay>

000002e2 <_Z11Camera_read16Adafruit_AMG88xxPf>:
}

void Camera_read(Adafruit_AMG88xx amg, float *pixels){
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	8c 01       	movw	r16, r24
     2ec:	d6 2f       	mov	r29, r22
     2ee:	c7 2f       	mov	r28, r23
	//turn on camera
	digitalWrite(Camera_enable_pin, LOW); //shut off NPN switch
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	87 e1       	ldi	r24, 0x17	; 23
     2f4:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	delay(100);
     2f8:	64 e6       	ldi	r22, 0x64	; 100
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	e1 d7       	rcall	.+4034   	; 0x12c4 <delay>
	
	//read all the pixels
	amg.readPixels(pixels);
     302:	40 e4       	ldi	r20, 0x40	; 64
     304:	6d 2f       	mov	r22, r29
     306:	7c 2f       	mov	r23, r28
     308:	c8 01       	movw	r24, r16
     30a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <_ZN16Adafruit_AMG88xx10readPixelsEPfh>

	Serial.print("[");
     30e:	6d e4       	ldi	r22, 0x4D	; 77
     310:	72 e0       	ldi	r23, 0x02	; 2
     312:	82 eb       	ldi	r24, 0xB2	; 178
     314:	94 e0       	ldi	r25, 0x04	; 4
     316:	ad d5       	rcall	.+2906   	; 0xe72 <_ZN5Print5printEPKc>
     318:	0d 2f       	mov	r16, r29
     31a:	1c 2f       	mov	r17, r28
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
     31c:	c1 e0       	ldi	r28, 0x01	; 1
     31e:	d0 e0       	ldi	r29, 0x00	; 0
		Serial.print(pixels[i-1]);
     320:	f8 01       	movw	r30, r16
     322:	41 91       	ld	r20, Z+
     324:	51 91       	ld	r21, Z+
     326:	61 91       	ld	r22, Z+
     328:	71 91       	ld	r23, Z+
     32a:	8f 01       	movw	r16, r30
     32c:	22 e0       	ldi	r18, 0x02	; 2
     32e:	30 e0       	ldi	r19, 0x00	; 0
     330:	82 eb       	ldi	r24, 0xB2	; 178
     332:	94 e0       	ldi	r25, 0x04	; 4
     334:	4b d7       	rcall	.+3734   	; 0x11cc <_ZN5Print5printEdi>
		Serial.print(", ");
     336:	6f e4       	ldi	r22, 0x4F	; 79
     338:	72 e0       	ldi	r23, 0x02	; 2
     33a:	82 eb       	ldi	r24, 0xB2	; 178
     33c:	94 e0       	ldi	r25, 0x04	; 4
     33e:	99 d5       	rcall	.+2866   	; 0xe72 <_ZN5Print5printEPKc>
		if( i%8 == 0 ) Serial.println();
     340:	ce 01       	movw	r24, r28
     342:	87 70       	andi	r24, 0x07	; 7
     344:	99 27       	eor	r25, r25
     346:	89 2b       	or	r24, r25
     348:	19 f4       	brne	.+6      	; 0x350 <_Z11Camera_read16Adafruit_AMG88xxPf+0x6e>
     34a:	82 eb       	ldi	r24, 0xB2	; 178
     34c:	94 e0       	ldi	r25, 0x04	; 4
     34e:	99 d5       	rcall	.+2866   	; 0xe82 <_ZN5Print7printlnEv>
	
	//read all the pixels
	amg.readPixels(pixels);

	Serial.print("[");
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
     350:	21 96       	adiw	r28, 0x01	; 1
     352:	c1 34       	cpi	r28, 0x41	; 65
     354:	d1 05       	cpc	r29, r1
     356:	21 f7       	brne	.-56     	; 0x320 <_Z11Camera_read16Adafruit_AMG88xxPf+0x3e>
		Serial.print(pixels[i-1]);
		Serial.print(", ");
		if( i%8 == 0 ) Serial.println();
	}
	Serial.println("]");
     358:	62 e5       	ldi	r22, 0x52	; 82
     35a:	72 e0       	ldi	r23, 0x02	; 2
     35c:	82 eb       	ldi	r24, 0xB2	; 178
     35e:	94 e0       	ldi	r25, 0x04	; 4
	Serial.println();
     360:	a3 d5       	rcall	.+2886   	; 0xea8 <_ZN5Print7printlnEPKc>
     362:	82 eb       	ldi	r24, 0xB2	; 178
     364:	94 e0       	ldi	r25, 0x04	; 4
     366:	8d d5       	rcall	.+2842   	; 0xe82 <_ZN5Print7printlnEv>
	
	digitalWrite(Camera_enable_pin, HIGH); //turn on NPN and sink current
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	87 e1       	ldi	r24, 0x17	; 23
     36c:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>

	//delay a second
	delay(1000);
     370:	68 ee       	ldi	r22, 0xE8	; 232
     372:	73 e0       	ldi	r23, 0x03	; 3
     374:	80 e0       	ldi	r24, 0x00	; 0
}
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	1f 91       	pop	r17
	Serial.println();
	
	digitalWrite(Camera_enable_pin, HIGH); //turn on NPN and sink current

	//delay a second
	delay(1000);
     37e:	0f 91       	pop	r16
     380:	a1 c7       	rjmp	.+3906   	; 0x12c4 <delay>

00000382 <_Z16Occupancy_detectv>:
	
	Occupancy_detect();
	delay (1000);
}

int Occupancy_detect(){
     382:	cf 92       	push	r12
     384:	df 92       	push	r13
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	1f 93       	push	r17
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	60 97       	sbiw	r28, 0x10	; 16
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
	int Distance;
	int PIR;
	int Temperature;
	int j;
	
	digitalWrite(Ping_enable_pin, LOW); //turn on sensors for read
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	87 e2       	ldi	r24, 0x27	; 39
     3a6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	digitalWrite(PIR_enable_pin, LOW);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	82 e2       	ldi	r24, 0x22	; 34
     3ae:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	delay(100);
     3b2:	64 e6       	ldi	r22, 0x64	; 100
     3b4:	70 e0       	ldi	r23, 0x00	; 0
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	84 d7       	rcall	.+3848   	; 0x12c4 <delay>
	Distance = hcsr04.distanceInMillimeters(); //read ping sensor
     3bc:	8a e9       	ldi	r24, 0x9A	; 154
     3be:	93 e0       	ldi	r25, 0x03	; 3
     3c0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_ZN6HCSR0421distanceInMillimetersEv>
	Serial.println(digitalRead(PIR_read_pin)); //read PIR sensor
     3c4:	80 e2       	ldi	r24, 0x20	; 32
     3c6:	0e 94 c8 0a 	call	0x1590	; 0x1590 <digitalRead>
     3ca:	4a e0       	ldi	r20, 0x0A	; 10
     3cc:	50 e0       	ldi	r21, 0x00	; 0
     3ce:	bc 01       	movw	r22, r24
     3d0:	82 eb       	ldi	r24, 0xB2	; 178
     3d2:	94 e0       	ldi	r25, 0x04	; 4
     3d4:	1d d6       	rcall	.+3130   	; 0x1010 <_ZN5Print7printlnEii>
	PIR = digitalRead(PIR_read_pin); //read PIR sensor
     3d6:	80 e2       	ldi	r24, 0x20	; 32
     3d8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <digitalRead>
     3dc:	8c 01       	movw	r16, r24
	Serial.println(PIR); //read PIR sensor
     3de:	4a e0       	ldi	r20, 0x0A	; 10
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	bc 01       	movw	r22, r24
     3e4:	82 eb       	ldi	r24, 0xB2	; 178
     3e6:	94 e0       	ldi	r25, 0x04	; 4
     3e8:	13 d6       	rcall	.+3110   	; 0x1010 <_ZN5Print7printlnEii>
	
	Temperature = amg.readThermistor();
     3ea:	82 ea       	ldi	r24, 0xA2	; 162
     3ec:	94 e0       	ldi	r25, 0x04	; 4
     3ee:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN16Adafruit_AMG88xx14readThermistorEv>
     3f2:	6b 01       	movw	r12, r22
     3f4:	7c 01       	movw	r14, r24
	Camera_read(amg, pixels);
     3f6:	80 e1       	ldi	r24, 0x10	; 16
     3f8:	e2 ea       	ldi	r30, 0xA2	; 162
     3fa:	f4 e0       	ldi	r31, 0x04	; 4
     3fc:	de 01       	movw	r26, r28
     3fe:	11 96       	adiw	r26, 0x01	; 1
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	8a 95       	dec	r24
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	62 ea       	ldi	r22, 0xA2	; 162
     40a:	73 e0       	ldi	r23, 0x03	; 3
     40c:	ce 01       	movw	r24, r28
     40e:	01 96       	adiw	r24, 0x01	; 1
	for(int i=1; i<=AMG88xx_PIXEL_ARRAY_SIZE; i++){
		if ((pixels[i-1] - Temperature) > Detect_temp){
     410:	68 df       	rcall	.-304    	; 0x2e2 <_Z11Camera_read16Adafruit_AMG88xxPf>
     412:	c7 01       	movw	r24, r14
     414:	b6 01       	movw	r22, r12
     416:	55 d1       	rcall	.+682    	; 0x6c2 <__fixsfsi>
     418:	07 2e       	mov	r0, r23
     41a:	00 0c       	add	r0, r0
     41c:	88 0b       	sbc	r24, r24
     41e:	99 0b       	sbc	r25, r25
     420:	83 d1       	rcall	.+774    	; 0x728 <__floatsisf>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	60 91 a2 03 	lds	r22, 0x03A2	; 0x8003a2 <pixels>
     42a:	70 91 a3 03 	lds	r23, 0x03A3	; 0x8003a3 <pixels+0x1>
     42e:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <pixels+0x2>
     432:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <pixels+0x3>
     436:	e0 d0       	rcall	.+448    	; 0x5f8 <__subsf3>
     438:	20 e0       	ldi	r18, 0x00	; 0
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	40 ea       	ldi	r20, 0xA0	; 160
     43e:	50 e4       	ldi	r21, 0x40	; 64
     440:	ff d1       	rcall	.+1022   	; 0x840 <__gesf2>
			j++;
		}
		
		if((j > Detect_pixels) && (PIR != 0)){
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	84 30       	cpi	r24, 0x04	; 4
     448:	91 05       	cpc	r25, r1
     44a:	2c f0       	brlt	.+10     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			return 1;
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	01 2b       	or	r16, r17
     450:	21 f4       	brne	.+8      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     452:	80 e0       	ldi	r24, 0x00	; 0
     454:	02 c0       	rjmp	.+4      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
			} else{
			return 0;
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	digitalWrite(Ping_enable_pin, HIGH);
	digitalWrite(PIR_enable_pin, HIGH);
}
     45a:	60 96       	adiw	r28, 0x10	; 16
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	f8 94       	cli
     460:	de bf       	out	0x3e, r29	; 62
     462:	0f be       	out	0x3f, r0	; 63
     464:	cd bf       	out	0x3d, r28	; 61
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	1f 91       	pop	r17
     46c:	0f 91       	pop	r16
     46e:	ff 90       	pop	r15
     470:	ef 90       	pop	r14
     472:	df 90       	pop	r13
     474:	cf 90       	pop	r12
     476:	08 95       	ret

00000478 <loop>:

void loop() {
	// put your main code here, to run repeatedly:
	//updateSerial(); //Telecom module read
	
	Occupancy_detect();
     478:	84 df       	rcall	.-248    	; 0x382 <_Z16Occupancy_detectv>
	delay (1000);
     47a:	68 ee       	ldi	r22, 0xE8	; 232
     47c:	73 e0       	ldi	r23, 0x03	; 3
     47e:	80 e0       	ldi	r24, 0x00	; 0
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	20 c7       	rjmp	.+3648   	; 0x12c4 <delay>

00000484 <_Z11Pins_assignv>:
	return success;
}

void Pins_assign(){
	//pinMode(Telecom_enable_pin, OUTPUT);
	pinMode(Ping_enable_pin, OUTPUT);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	87 e2       	ldi	r24, 0x27	; 39
     488:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <pinMode>
	pinMode(Camera_enable_pin, OUTPUT);
     48c:	61 e0       	ldi	r22, 0x01	; 1
     48e:	87 e1       	ldi	r24, 0x17	; 23
     490:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <pinMode>
	pinMode(PIR_enable_pin, OUTPUT);
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	82 e2       	ldi	r24, 0x22	; 34
     498:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <pinMode>
	pinMode(PIR_read_pin, INPUT);
     49c:	60 e0       	ldi	r22, 0x00	; 0
     49e:	80 e2       	ldi	r24, 0x20	; 32
     4a0:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <pinMode>
	//digitalWrite(Telecom_enable_pin, HIGH);
	digitalWrite(Ping_enable_pin, LOW); //low turn on
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	87 e2       	ldi	r24, 0x27	; 39
     4a8:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	digitalWrite(Camera_enable_pin, LOW); //low turn on
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	87 e1       	ldi	r24, 0x17	; 23
     4b0:	0e 94 9a 0a 	call	0x1534	; 0x1534 <digitalWrite>
	digitalWrite(PIR_enable_pin, LOW);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	82 e2       	ldi	r24, 0x22	; 34
     4b8:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <digitalWrite>

000004bc <setup>:
//void Camera_read();
void Pins_assign();
int Setup_4G();
int Occupancy_detect();

void setup() {
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
     4d4:	60 97       	sbiw	r28, 0x10	; 16
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	de bf       	out	0x3e, r29	; 62
     4dc:	0f be       	out	0x3f, r0	; 63
     4de:	cd bf       	out	0x3d, r28	; 61
	// put your setup code here, to run once:
	int Initial_time = millis();
     4e0:	c0 d6       	rcall	.+3456   	; 0x1262 <millis>
     4e2:	4b 01       	movw	r8, r22
     4e4:	5c 01       	movw	r10, r24
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4e6:	26 e0       	ldi	r18, 0x06	; 6
     4e8:	40 e8       	ldi	r20, 0x80	; 128
     4ea:	55 e2       	ldi	r21, 0x25	; 37
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	82 eb       	ldi	r24, 0xB2	; 178
     4f2:	94 e0       	ldi	r25, 0x04	; 4
	
	Serial.begin(9600); //setup USB
	while (!Serial);
	
	Pins_assign();
     4f4:	d4 d2       	rcall	.+1448   	; 0xa9e <_ZN14HardwareSerial5beginEmh>
     4f6:	c6 df       	rcall	.-116    	; 0x484 <_Z11Pins_assignv>
	
	//Setup_4G(); //setup telecom unit
	
	Camera_setup(amg); //setup IR camera
     4f8:	80 e1       	ldi	r24, 0x10	; 16
     4fa:	e2 ea       	ldi	r30, 0xA2	; 162
     4fc:	f4 e0       	ldi	r31, 0x04	; 4
     4fe:	de 01       	movw	r26, r28
     500:	11 96       	adiw	r26, 0x01	; 1
     502:	01 90       	ld	r0, Z+
     504:	0d 92       	st	X+, r0
     506:	8a 95       	dec	r24
     508:	e1 f7       	brne	.-8      	; 0x502 <setup+0x46>
     50a:	ce 01       	movw	r24, r28
     50c:	01 96       	adiw	r24, 0x01	; 1
	
	Pins_assign(); //setup PIR pin
     50e:	c1 de       	rcall	.-638    	; 0x292 <_Z12Camera_setup16Adafruit_AMG88xx>
	
	delay (100);
     510:	b9 df       	rcall	.-142    	; 0x484 <_Z11Pins_assignv>
     512:	64 e6       	ldi	r22, 0x64	; 100
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	d4 d6       	rcall	.+3496   	; 0x12c4 <delay>
	
	Camera_read(amg, pixels); //IR camera read, fills array pixels with 64 temperature values.
     51c:	80 e1       	ldi	r24, 0x10	; 16
     51e:	e2 ea       	ldi	r30, 0xA2	; 162
     520:	f4 e0       	ldi	r31, 0x04	; 4
     522:	de 01       	movw	r26, r28
     524:	11 96       	adiw	r26, 0x01	; 1
     526:	01 90       	ld	r0, Z+
     528:	0d 92       	st	X+, r0
     52a:	8a 95       	dec	r24
     52c:	e1 f7       	brne	.-8      	; 0x526 <setup+0x6a>
     52e:	62 ea       	ldi	r22, 0xA2	; 162
     530:	73 e0       	ldi	r23, 0x03	; 3
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
	
	digitalWrite(Ping_enable_pin, LOW); //turn on sensors for read
     536:	d5 de       	rcall	.-598    	; 0x2e2 <_Z11Camera_read16Adafruit_AMG88xxPf>
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	87 e2       	ldi	r24, 0x27	; 39
     53c:	fb d7       	rcall	.+4086   	; 0x1534 <digitalWrite>
	digitalWrite(PIR_enable_pin,LOW);
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	82 e2       	ldi	r24, 0x22	; 34
     542:	f8 d7       	rcall	.+4080   	; 0x1534 <digitalWrite>
	delay(100);
     544:	64 e6       	ldi	r22, 0x64	; 100
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	bb d6       	rcall	.+3446   	; 0x12c4 <delay>
     54e:	6a e9       	ldi	r22, 0x9A	; 154
	Serial.println(hcsr04.ToString()); //read ping sensor
     550:	73 e0       	ldi	r23, 0x03	; 3
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <_ZN6HCSR048ToStringEv>
     55a:	be 01       	movw	r22, r28
     55c:	6f 5f       	subi	r22, 0xFF	; 255
     55e:	7f 4f       	sbci	r23, 0xFF	; 255
     560:	82 eb       	ldi	r24, 0xB2	; 178
     562:	94 e0       	ldi	r25, 0x04	; 4
     564:	91 d4       	rcall	.+2338   	; 0xe88 <_ZN5Print7printlnERK6String>
     566:	ce 01       	movw	r24, r28
     568:	01 96       	adiw	r24, 0x01	; 1
     56a:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <_ZN6StringD1Ev>
     56e:	80 e2       	ldi	r24, 0x20	; 32
	if( digitalRead(PIR_read_pin) != 0){ //read PIR sensor
     570:	0e 94 c8 0a 	call	0x1590	; 0x1590 <digitalRead>
     574:	89 2b       	or	r24, r25
     576:	19 f0       	breq	.+6      	; 0x57e <setup+0xc2>
		Serial.println("PIR positive detect");
     578:	64 e5       	ldi	r22, 0x54	; 84
     57a:	72 e0       	ldi	r23, 0x02	; 2
     57c:	02 c0       	rjmp	.+4      	; 0x582 <setup+0xc6>
	}
	else {
		Serial.println("PIR negative detect");
     57e:	68 e6       	ldi	r22, 0x68	; 104
     580:	72 e0       	ldi	r23, 0x02	; 2
     582:	82 eb       	ldi	r24, 0xB2	; 178
     584:	94 e0       	ldi	r25, 0x04	; 4
     586:	90 d4       	rcall	.+2336   	; 0xea8 <_ZN5Print7printlnEPKc>
	}
	
	int Setup_time = millis() - Initial_time;
     588:	6c d6       	rcall	.+3288   	; 0x1262 <millis>
     58a:	6b 01       	movw	r12, r22
     58c:	7c 01       	movw	r14, r24
     58e:	6c e7       	ldi	r22, 0x7C	; 124
	
	Serial.print("Setup time: ");
     590:	72 e0       	ldi	r23, 0x02	; 2
     592:	82 eb       	ldi	r24, 0xB2	; 178
     594:	94 e0       	ldi	r25, 0x04	; 4
     596:	6d d4       	rcall	.+2266   	; 0xe72 <_ZN5Print5printEPKc>
	Serial.println(Setup_time);
     598:	b6 01       	movw	r22, r12
     59a:	68 19       	sub	r22, r8
     59c:	79 09       	sbc	r23, r9
     59e:	4a e0       	ldi	r20, 0x0A	; 10
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	82 eb       	ldi	r24, 0xB2	; 178
     5a4:	94 e0       	ldi	r25, 0x04	; 4
     5a6:	34 d5       	rcall	.+2664   	; 0x1010 <_ZN5Print7printlnEii>
     5a8:	61 e0       	ldi	r22, 0x01	; 1
	
	digitalWrite(Ping_enable_pin, HIGH);
     5aa:	87 e2       	ldi	r24, 0x27	; 39
     5ac:	c3 d7       	rcall	.+3974   	; 0x1534 <digitalWrite>
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	82 e2       	ldi	r24, 0x22	; 34
	digitalWrite(PIR_enable_pin, HIGH);
     5b2:	c0 d7       	rcall	.+3968   	; 0x1534 <digitalWrite>
     5b4:	60 96       	adiw	r28, 0x10	; 16
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
}
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	ff 90       	pop	r15
     5c6:	ef 90       	pop	r14
     5c8:	df 90       	pop	r13
     5ca:	cf 90       	pop	r12
     5cc:	bf 90       	pop	r11
     5ce:	af 90       	pop	r10
     5d0:	9f 90       	pop	r9
     5d2:	8f 90       	pop	r8
     5d4:	08 95       	ret

000005d6 <_GLOBAL__sub_I_amg>:
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	00 ea       	ldi	r16, 0xA0	; 160
#define Detect_pixels 3 //amount of pixels needed for IR camera detect, dummy value


//SoftwareSerial Telecom_serial(Telecom_RX, Telecom_TX); //set up serial port for telecom module
#define Telecom_serial Serial1
HCSR04 hcsr04(TRIG_PIN, ECHO_PIN, 20, 4000); //setup ping sensor
     5dc:	1f e0       	ldi	r17, 0x0F	; 15
     5de:	24 e1       	ldi	r18, 0x14	; 20
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4b e1       	ldi	r20, 0x1B	; 27
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	6d e1       	ldi	r22, 0x1D	; 29
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	8a e9       	ldi	r24, 0x9A	; 154
     5ec:	93 e0       	ldi	r25, 0x03	; 3
     5ee:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <_ZN6HCSR04C1Eiiii>
	pinMode(PIR_read_pin, INPUT);
	//digitalWrite(Telecom_enable_pin, HIGH);
	digitalWrite(Ping_enable_pin, LOW); //low turn on
	digitalWrite(Camera_enable_pin, LOW); //low turn on
	digitalWrite(PIR_enable_pin, LOW);
}
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret

000005f8 <__subsf3>:
     5f8:	50 58       	subi	r21, 0x80	; 128

000005fa <__addsf3>:
     5fa:	bb 27       	eor	r27, r27
     5fc:	aa 27       	eor	r26, r26
     5fe:	0e d0       	rcall	.+28     	; 0x61c <__addsf3x>
     600:	e5 c0       	rjmp	.+458    	; 0x7cc <__fp_round>
     602:	d6 d0       	rcall	.+428    	; 0x7b0 <__fp_pscA>
     604:	30 f0       	brcs	.+12     	; 0x612 <__addsf3+0x18>
     606:	db d0       	rcall	.+438    	; 0x7be <__fp_pscB>
     608:	20 f0       	brcs	.+8      	; 0x612 <__addsf3+0x18>
     60a:	31 f4       	brne	.+12     	; 0x618 <__addsf3+0x1e>
     60c:	9f 3f       	cpi	r25, 0xFF	; 255
     60e:	11 f4       	brne	.+4      	; 0x614 <__addsf3+0x1a>
     610:	1e f4       	brtc	.+6      	; 0x618 <__addsf3+0x1e>
     612:	cb c0       	rjmp	.+406    	; 0x7aa <__fp_nan>
     614:	0e f4       	brtc	.+2      	; 0x618 <__addsf3+0x1e>
     616:	e0 95       	com	r30
     618:	e7 fb       	bst	r30, 7
     61a:	c1 c0       	rjmp	.+386    	; 0x79e <__fp_inf>

0000061c <__addsf3x>:
     61c:	e9 2f       	mov	r30, r25
     61e:	e7 d0       	rcall	.+462    	; 0x7ee <__fp_split3>
     620:	80 f3       	brcs	.-32     	; 0x602 <__addsf3+0x8>
     622:	ba 17       	cp	r27, r26
     624:	62 07       	cpc	r22, r18
     626:	73 07       	cpc	r23, r19
     628:	84 07       	cpc	r24, r20
     62a:	95 07       	cpc	r25, r21
     62c:	18 f0       	brcs	.+6      	; 0x634 <__addsf3x+0x18>
     62e:	71 f4       	brne	.+28     	; 0x64c <__addsf3x+0x30>
     630:	9e f5       	brtc	.+102    	; 0x698 <__addsf3x+0x7c>
     632:	ff c0       	rjmp	.+510    	; 0x832 <__fp_zero>
     634:	0e f4       	brtc	.+2      	; 0x638 <__addsf3x+0x1c>
     636:	e0 95       	com	r30
     638:	0b 2e       	mov	r0, r27
     63a:	ba 2f       	mov	r27, r26
     63c:	a0 2d       	mov	r26, r0
     63e:	0b 01       	movw	r0, r22
     640:	b9 01       	movw	r22, r18
     642:	90 01       	movw	r18, r0
     644:	0c 01       	movw	r0, r24
     646:	ca 01       	movw	r24, r20
     648:	a0 01       	movw	r20, r0
     64a:	11 24       	eor	r1, r1
     64c:	ff 27       	eor	r31, r31
     64e:	59 1b       	sub	r21, r25
     650:	99 f0       	breq	.+38     	; 0x678 <__addsf3x+0x5c>
     652:	59 3f       	cpi	r21, 0xF9	; 249
     654:	50 f4       	brcc	.+20     	; 0x66a <__addsf3x+0x4e>
     656:	50 3e       	cpi	r21, 0xE0	; 224
     658:	68 f1       	brcs	.+90     	; 0x6b4 <__addsf3x+0x98>
     65a:	1a 16       	cp	r1, r26
     65c:	f0 40       	sbci	r31, 0x00	; 0
     65e:	a2 2f       	mov	r26, r18
     660:	23 2f       	mov	r18, r19
     662:	34 2f       	mov	r19, r20
     664:	44 27       	eor	r20, r20
     666:	58 5f       	subi	r21, 0xF8	; 248
     668:	f3 cf       	rjmp	.-26     	; 0x650 <__addsf3x+0x34>
     66a:	46 95       	lsr	r20
     66c:	37 95       	ror	r19
     66e:	27 95       	ror	r18
     670:	a7 95       	ror	r26
     672:	f0 40       	sbci	r31, 0x00	; 0
     674:	53 95       	inc	r21
     676:	c9 f7       	brne	.-14     	; 0x66a <__addsf3x+0x4e>
     678:	7e f4       	brtc	.+30     	; 0x698 <__addsf3x+0x7c>
     67a:	1f 16       	cp	r1, r31
     67c:	ba 0b       	sbc	r27, r26
     67e:	62 0b       	sbc	r22, r18
     680:	73 0b       	sbc	r23, r19
     682:	84 0b       	sbc	r24, r20
     684:	ba f0       	brmi	.+46     	; 0x6b4 <__addsf3x+0x98>
     686:	91 50       	subi	r25, 0x01	; 1
     688:	a1 f0       	breq	.+40     	; 0x6b2 <__addsf3x+0x96>
     68a:	ff 0f       	add	r31, r31
     68c:	bb 1f       	adc	r27, r27
     68e:	66 1f       	adc	r22, r22
     690:	77 1f       	adc	r23, r23
     692:	88 1f       	adc	r24, r24
     694:	c2 f7       	brpl	.-16     	; 0x686 <__addsf3x+0x6a>
     696:	0e c0       	rjmp	.+28     	; 0x6b4 <__addsf3x+0x98>
     698:	ba 0f       	add	r27, r26
     69a:	62 1f       	adc	r22, r18
     69c:	73 1f       	adc	r23, r19
     69e:	84 1f       	adc	r24, r20
     6a0:	48 f4       	brcc	.+18     	; 0x6b4 <__addsf3x+0x98>
     6a2:	87 95       	ror	r24
     6a4:	77 95       	ror	r23
     6a6:	67 95       	ror	r22
     6a8:	b7 95       	ror	r27
     6aa:	f7 95       	ror	r31
     6ac:	9e 3f       	cpi	r25, 0xFE	; 254
     6ae:	08 f0       	brcs	.+2      	; 0x6b2 <__addsf3x+0x96>
     6b0:	b3 cf       	rjmp	.-154    	; 0x618 <__addsf3+0x1e>
     6b2:	93 95       	inc	r25
     6b4:	88 0f       	add	r24, r24
     6b6:	08 f0       	brcs	.+2      	; 0x6ba <__addsf3x+0x9e>
     6b8:	99 27       	eor	r25, r25
     6ba:	ee 0f       	add	r30, r30
     6bc:	97 95       	ror	r25
     6be:	87 95       	ror	r24
     6c0:	08 95       	ret

000006c2 <__fixsfsi>:
     6c2:	04 d0       	rcall	.+8      	; 0x6cc <__fixunssfsi>
     6c4:	68 94       	set
     6c6:	b1 11       	cpse	r27, r1
     6c8:	b5 c0       	rjmp	.+362    	; 0x834 <__fp_szero>
     6ca:	08 95       	ret

000006cc <__fixunssfsi>:
     6cc:	98 d0       	rcall	.+304    	; 0x7fe <__fp_splitA>
     6ce:	88 f0       	brcs	.+34     	; 0x6f2 <__fixunssfsi+0x26>
     6d0:	9f 57       	subi	r25, 0x7F	; 127
     6d2:	90 f0       	brcs	.+36     	; 0x6f8 <__fixunssfsi+0x2c>
     6d4:	b9 2f       	mov	r27, r25
     6d6:	99 27       	eor	r25, r25
     6d8:	b7 51       	subi	r27, 0x17	; 23
     6da:	a0 f0       	brcs	.+40     	; 0x704 <__fixunssfsi+0x38>
     6dc:	d1 f0       	breq	.+52     	; 0x712 <__fixunssfsi+0x46>
     6de:	66 0f       	add	r22, r22
     6e0:	77 1f       	adc	r23, r23
     6e2:	88 1f       	adc	r24, r24
     6e4:	99 1f       	adc	r25, r25
     6e6:	1a f0       	brmi	.+6      	; 0x6ee <__fixunssfsi+0x22>
     6e8:	ba 95       	dec	r27
     6ea:	c9 f7       	brne	.-14     	; 0x6de <__fixunssfsi+0x12>
     6ec:	12 c0       	rjmp	.+36     	; 0x712 <__fixunssfsi+0x46>
     6ee:	b1 30       	cpi	r27, 0x01	; 1
     6f0:	81 f0       	breq	.+32     	; 0x712 <__fixunssfsi+0x46>
     6f2:	9f d0       	rcall	.+318    	; 0x832 <__fp_zero>
     6f4:	b1 e0       	ldi	r27, 0x01	; 1
     6f6:	08 95       	ret
     6f8:	9c c0       	rjmp	.+312    	; 0x832 <__fp_zero>
     6fa:	67 2f       	mov	r22, r23
     6fc:	78 2f       	mov	r23, r24
     6fe:	88 27       	eor	r24, r24
     700:	b8 5f       	subi	r27, 0xF8	; 248
     702:	39 f0       	breq	.+14     	; 0x712 <__fixunssfsi+0x46>
     704:	b9 3f       	cpi	r27, 0xF9	; 249
     706:	cc f3       	brlt	.-14     	; 0x6fa <__fixunssfsi+0x2e>
     708:	86 95       	lsr	r24
     70a:	77 95       	ror	r23
     70c:	67 95       	ror	r22
     70e:	b3 95       	inc	r27
     710:	d9 f7       	brne	.-10     	; 0x708 <__fixunssfsi+0x3c>
     712:	3e f4       	brtc	.+14     	; 0x722 <__fixunssfsi+0x56>
     714:	90 95       	com	r25
     716:	80 95       	com	r24
     718:	70 95       	com	r23
     71a:	61 95       	neg	r22
     71c:	7f 4f       	sbci	r23, 0xFF	; 255
     71e:	8f 4f       	sbci	r24, 0xFF	; 255
     720:	9f 4f       	sbci	r25, 0xFF	; 255
     722:	08 95       	ret

00000724 <__floatunsisf>:
     724:	e8 94       	clt
     726:	09 c0       	rjmp	.+18     	; 0x73a <__floatsisf+0x12>

00000728 <__floatsisf>:
     728:	97 fb       	bst	r25, 7
     72a:	3e f4       	brtc	.+14     	; 0x73a <__floatsisf+0x12>
     72c:	90 95       	com	r25
     72e:	80 95       	com	r24
     730:	70 95       	com	r23
     732:	61 95       	neg	r22
     734:	7f 4f       	sbci	r23, 0xFF	; 255
     736:	8f 4f       	sbci	r24, 0xFF	; 255
     738:	9f 4f       	sbci	r25, 0xFF	; 255
     73a:	99 23       	and	r25, r25
     73c:	a9 f0       	breq	.+42     	; 0x768 <__floatsisf+0x40>
     73e:	f9 2f       	mov	r31, r25
     740:	96 e9       	ldi	r25, 0x96	; 150
     742:	bb 27       	eor	r27, r27
     744:	93 95       	inc	r25
     746:	f6 95       	lsr	r31
     748:	87 95       	ror	r24
     74a:	77 95       	ror	r23
     74c:	67 95       	ror	r22
     74e:	b7 95       	ror	r27
     750:	f1 11       	cpse	r31, r1
     752:	f8 cf       	rjmp	.-16     	; 0x744 <__floatsisf+0x1c>
     754:	fa f4       	brpl	.+62     	; 0x794 <__floatsisf+0x6c>
     756:	bb 0f       	add	r27, r27
     758:	11 f4       	brne	.+4      	; 0x75e <__floatsisf+0x36>
     75a:	60 ff       	sbrs	r22, 0
     75c:	1b c0       	rjmp	.+54     	; 0x794 <__floatsisf+0x6c>
     75e:	6f 5f       	subi	r22, 0xFF	; 255
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	8f 4f       	sbci	r24, 0xFF	; 255
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	16 c0       	rjmp	.+44     	; 0x794 <__floatsisf+0x6c>
     768:	88 23       	and	r24, r24
     76a:	11 f0       	breq	.+4      	; 0x770 <__floatsisf+0x48>
     76c:	96 e9       	ldi	r25, 0x96	; 150
     76e:	11 c0       	rjmp	.+34     	; 0x792 <__floatsisf+0x6a>
     770:	77 23       	and	r23, r23
     772:	21 f0       	breq	.+8      	; 0x77c <__floatsisf+0x54>
     774:	9e e8       	ldi	r25, 0x8E	; 142
     776:	87 2f       	mov	r24, r23
     778:	76 2f       	mov	r23, r22
     77a:	05 c0       	rjmp	.+10     	; 0x786 <__floatsisf+0x5e>
     77c:	66 23       	and	r22, r22
     77e:	71 f0       	breq	.+28     	; 0x79c <__floatsisf+0x74>
     780:	96 e8       	ldi	r25, 0x86	; 134
     782:	86 2f       	mov	r24, r22
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	2a f0       	brmi	.+10     	; 0x794 <__floatsisf+0x6c>
     78a:	9a 95       	dec	r25
     78c:	66 0f       	add	r22, r22
     78e:	77 1f       	adc	r23, r23
     790:	88 1f       	adc	r24, r24
     792:	da f7       	brpl	.-10     	; 0x78a <__floatsisf+0x62>
     794:	88 0f       	add	r24, r24
     796:	96 95       	lsr	r25
     798:	87 95       	ror	r24
     79a:	97 f9       	bld	r25, 7
     79c:	08 95       	ret

0000079e <__fp_inf>:
     79e:	97 f9       	bld	r25, 7
     7a0:	9f 67       	ori	r25, 0x7F	; 127
     7a2:	80 e8       	ldi	r24, 0x80	; 128
     7a4:	70 e0       	ldi	r23, 0x00	; 0
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	08 95       	ret

000007aa <__fp_nan>:
     7aa:	9f ef       	ldi	r25, 0xFF	; 255
     7ac:	80 ec       	ldi	r24, 0xC0	; 192
     7ae:	08 95       	ret

000007b0 <__fp_pscA>:
     7b0:	00 24       	eor	r0, r0
     7b2:	0a 94       	dec	r0
     7b4:	16 16       	cp	r1, r22
     7b6:	17 06       	cpc	r1, r23
     7b8:	18 06       	cpc	r1, r24
     7ba:	09 06       	cpc	r0, r25
     7bc:	08 95       	ret

000007be <__fp_pscB>:
     7be:	00 24       	eor	r0, r0
     7c0:	0a 94       	dec	r0
     7c2:	12 16       	cp	r1, r18
     7c4:	13 06       	cpc	r1, r19
     7c6:	14 06       	cpc	r1, r20
     7c8:	05 06       	cpc	r0, r21
     7ca:	08 95       	ret

000007cc <__fp_round>:
     7cc:	09 2e       	mov	r0, r25
     7ce:	03 94       	inc	r0
     7d0:	00 0c       	add	r0, r0
     7d2:	11 f4       	brne	.+4      	; 0x7d8 <__fp_round+0xc>
     7d4:	88 23       	and	r24, r24
     7d6:	52 f0       	brmi	.+20     	; 0x7ec <__fp_round+0x20>
     7d8:	bb 0f       	add	r27, r27
     7da:	40 f4       	brcc	.+16     	; 0x7ec <__fp_round+0x20>
     7dc:	bf 2b       	or	r27, r31
     7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0x18>
     7e0:	60 ff       	sbrs	r22, 0
     7e2:	04 c0       	rjmp	.+8      	; 0x7ec <__fp_round+0x20>
     7e4:	6f 5f       	subi	r22, 0xFF	; 255
     7e6:	7f 4f       	sbci	r23, 0xFF	; 255
     7e8:	8f 4f       	sbci	r24, 0xFF	; 255
     7ea:	9f 4f       	sbci	r25, 0xFF	; 255
     7ec:	08 95       	ret

000007ee <__fp_split3>:
     7ee:	57 fd       	sbrc	r21, 7
     7f0:	90 58       	subi	r25, 0x80	; 128
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	59 f0       	breq	.+22     	; 0x80e <__fp_splitA+0x10>
     7f8:	5f 3f       	cpi	r21, 0xFF	; 255
     7fa:	71 f0       	breq	.+28     	; 0x818 <__fp_splitA+0x1a>
     7fc:	47 95       	ror	r20

000007fe <__fp_splitA>:
     7fe:	88 0f       	add	r24, r24
     800:	97 fb       	bst	r25, 7
     802:	99 1f       	adc	r25, r25
     804:	61 f0       	breq	.+24     	; 0x81e <__fp_splitA+0x20>
     806:	9f 3f       	cpi	r25, 0xFF	; 255
     808:	79 f0       	breq	.+30     	; 0x828 <__fp_splitA+0x2a>
     80a:	87 95       	ror	r24
     80c:	08 95       	ret
     80e:	12 16       	cp	r1, r18
     810:	13 06       	cpc	r1, r19
     812:	14 06       	cpc	r1, r20
     814:	55 1f       	adc	r21, r21
     816:	f2 cf       	rjmp	.-28     	; 0x7fc <__fp_split3+0xe>
     818:	46 95       	lsr	r20
     81a:	f1 df       	rcall	.-30     	; 0x7fe <__fp_splitA>
     81c:	08 c0       	rjmp	.+16     	; 0x82e <__fp_splitA+0x30>
     81e:	16 16       	cp	r1, r22
     820:	17 06       	cpc	r1, r23
     822:	18 06       	cpc	r1, r24
     824:	99 1f       	adc	r25, r25
     826:	f1 cf       	rjmp	.-30     	; 0x80a <__fp_splitA+0xc>
     828:	86 95       	lsr	r24
     82a:	71 05       	cpc	r23, r1
     82c:	61 05       	cpc	r22, r1
     82e:	08 94       	sec
     830:	08 95       	ret

00000832 <__fp_zero>:
     832:	e8 94       	clt

00000834 <__fp_szero>:
     834:	bb 27       	eor	r27, r27
     836:	66 27       	eor	r22, r22
     838:	77 27       	eor	r23, r23
     83a:	cb 01       	movw	r24, r22
     83c:	97 f9       	bld	r25, 7
     83e:	08 95       	ret

00000840 <__gesf2>:
     840:	03 d0       	rcall	.+6      	; 0x848 <__fp_cmp>
     842:	08 f4       	brcc	.+2      	; 0x846 <__gesf2+0x6>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	08 95       	ret

00000848 <__fp_cmp>:
     848:	99 0f       	add	r25, r25
     84a:	00 08       	sbc	r0, r0
     84c:	55 0f       	add	r21, r21
     84e:	aa 0b       	sbc	r26, r26
     850:	e0 e8       	ldi	r30, 0x80	; 128
     852:	fe ef       	ldi	r31, 0xFE	; 254
     854:	16 16       	cp	r1, r22
     856:	17 06       	cpc	r1, r23
     858:	e8 07       	cpc	r30, r24
     85a:	f9 07       	cpc	r31, r25
     85c:	c0 f0       	brcs	.+48     	; 0x88e <__fp_cmp+0x46>
     85e:	12 16       	cp	r1, r18
     860:	13 06       	cpc	r1, r19
     862:	e4 07       	cpc	r30, r20
     864:	f5 07       	cpc	r31, r21
     866:	98 f0       	brcs	.+38     	; 0x88e <__fp_cmp+0x46>
     868:	62 1b       	sub	r22, r18
     86a:	73 0b       	sbc	r23, r19
     86c:	84 0b       	sbc	r24, r20
     86e:	95 0b       	sbc	r25, r21
     870:	39 f4       	brne	.+14     	; 0x880 <__fp_cmp+0x38>
     872:	0a 26       	eor	r0, r26
     874:	61 f0       	breq	.+24     	; 0x88e <__fp_cmp+0x46>
     876:	23 2b       	or	r18, r19
     878:	24 2b       	or	r18, r20
     87a:	25 2b       	or	r18, r21
     87c:	21 f4       	brne	.+8      	; 0x886 <__fp_cmp+0x3e>
     87e:	08 95       	ret
     880:	0a 26       	eor	r0, r26
     882:	09 f4       	brne	.+2      	; 0x886 <__fp_cmp+0x3e>
     884:	a1 40       	sbci	r26, 0x01	; 1
     886:	a6 95       	lsr	r26
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	81 1d       	adc	r24, r1
     88c:	81 1d       	adc	r24, r1
     88e:	08 95       	ret

00000890 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     890:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     892:	91 8d       	ldd	r25, Z+25	; 0x19
     894:	22 8d       	ldd	r18, Z+26	; 0x1a
     896:	89 2f       	mov	r24, r25
     898:	90 e0       	ldi	r25, 0x00	; 0
     89a:	80 5c       	subi	r24, 0xC0	; 192
     89c:	9f 4f       	sbci	r25, 0xFF	; 255
     89e:	82 1b       	sub	r24, r18
     8a0:	91 09       	sbc	r25, r1
}
     8a2:	8f 73       	andi	r24, 0x3F	; 63
     8a4:	99 27       	eor	r25, r25
     8a6:	08 95       	ret

000008a8 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     8a8:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     8aa:	91 8d       	ldd	r25, Z+25	; 0x19
     8ac:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ae:	98 17       	cp	r25, r24
     8b0:	31 f0       	breq	.+12     	; 0x8be <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     8b2:	82 8d       	ldd	r24, Z+26	; 0x1a
     8b4:	e8 0f       	add	r30, r24
     8b6:	f1 1d       	adc	r31, r1
     8b8:	85 8d       	ldd	r24, Z+29	; 0x1d
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     8c2:	08 95       	ret

000008c4 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     8c4:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     8c6:	91 8d       	ldd	r25, Z+25	; 0x19
     8c8:	82 8d       	ldd	r24, Z+26	; 0x1a
     8ca:	98 17       	cp	r25, r24
     8cc:	61 f0       	breq	.+24     	; 0x8e6 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     8ce:	82 8d       	ldd	r24, Z+26	; 0x1a
     8d0:	df 01       	movw	r26, r30
     8d2:	a8 0f       	add	r26, r24
     8d4:	b1 1d       	adc	r27, r1
     8d6:	5d 96       	adiw	r26, 0x1d	; 29
     8d8:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     8da:	92 8d       	ldd	r25, Z+26	; 0x1a
     8dc:	9f 5f       	subi	r25, 0xFF	; 255
     8de:	9f 73       	andi	r25, 0x3F	; 63
     8e0:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     8e6:	8f ef       	ldi	r24, 0xFF	; 255
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     8ea:	08 95       	ret

000008ec <_ZN14HardwareSerial17availableForWriteEv>:
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
     8ec:	fc 01       	movw	r30, r24
     8ee:	53 8d       	ldd	r21, Z+27	; 0x1b
    tail = _tx_buffer_tail;
     8f0:	44 8d       	ldd	r20, Z+28	; 0x1c
     8f2:	25 2f       	mov	r18, r21
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	84 2f       	mov	r24, r20
     8f8:	90 e0       	ldi	r25, 0x00	; 0
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     8fa:	82 1b       	sub	r24, r18
     8fc:	93 0b       	sbc	r25, r19
     8fe:	54 17       	cp	r21, r20
     900:	10 f0       	brcs	.+4      	; 0x906 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     902:	cf 96       	adiw	r24, 0x3f	; 63
     904:	08 95       	ret
  return tail - head - 1;
     906:	01 97       	sbiw	r24, 0x01	; 1
}
     908:	08 95       	ret

0000090a <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     90a:	86 e1       	ldi	r24, 0x16	; 22
     90c:	96 e0       	ldi	r25, 0x06	; 6
     90e:	89 2b       	or	r24, r25
     910:	39 f0       	breq	.+14     	; 0x920 <_Z14serialEventRunv+0x16>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	89 2b       	or	r24, r25
     918:	19 f0       	breq	.+6      	; 0x920 <_Z14serialEventRunv+0x16>
     91a:	88 d1       	rcall	.+784    	; 0xc2c <_Z17Serial0_availablev>
     91c:	81 11       	cpse	r24, r1
     91e:	24 c0       	rjmp	.+72     	; 0x968 <_Z14serialEventRunv+0x5e>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     920:	8b ea       	ldi	r24, 0xAB	; 171
     922:	96 e0       	ldi	r25, 0x06	; 6
     924:	89 2b       	or	r24, r25
     926:	39 f0       	breq	.+14     	; 0x936 <_Z14serialEventRunv+0x2c>
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	89 2b       	or	r24, r25
     92e:	19 f0       	breq	.+6      	; 0x936 <_Z14serialEventRunv+0x2c>
     930:	12 d2       	rcall	.+1060   	; 0xd56 <_Z17Serial1_availablev>
     932:	81 11       	cpse	r24, r1
     934:	1c c0       	rjmp	.+56     	; 0x96e <_Z14serialEventRunv+0x64>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	89 2b       	or	r24, r25
     93c:	41 f0       	breq	.+16     	; 0x94e <_Z14serialEventRunv+0x44>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	89 2b       	or	r24, r25
     944:	21 f0       	breq	.+8      	; 0x94e <_Z14serialEventRunv+0x44>
     946:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     94a:	81 11       	cpse	r24, r1
     94c:	13 c0       	rjmp	.+38     	; 0x974 <_Z14serialEventRunv+0x6a>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	89 2b       	or	r24, r25
     954:	a1 f0       	breq	.+40     	; 0x97e <_Z14serialEventRunv+0x74>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	89 2b       	or	r24, r25
     95c:	81 f0       	breq	.+32     	; 0x97e <_Z14serialEventRunv+0x74>
     95e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     962:	81 11       	cpse	r24, r1
     964:	0a c0       	rjmp	.+20     	; 0x97a <_Z14serialEventRunv+0x70>
     966:	08 95       	ret
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     968:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     96c:	d9 cf       	rjmp	.-78     	; 0x920 <_Z14serialEventRunv+0x16>
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
     96e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     972:	e1 cf       	rjmp	.-62     	; 0x936 <_Z14serialEventRunv+0x2c>
#endif
#if defined(HAVE_HWSERIAL2)
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
     974:	0e 94 00 00 	call	0	; 0x0 <__vectors>
     978:	ea cf       	rjmp	.-44     	; 0x94e <_Z14serialEventRunv+0x44>
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
     97a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     97e:	08 95       	ret

00000980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     980:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     982:	84 8d       	ldd	r24, Z+28	; 0x1c
     984:	df 01       	movw	r26, r30
     986:	a8 0f       	add	r26, r24
     988:	b1 1d       	adc	r27, r1
     98a:	a3 5a       	subi	r26, 0xA3	; 163
     98c:	bf 4f       	sbci	r27, 0xFF	; 255
     98e:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     990:	84 8d       	ldd	r24, Z+28	; 0x1c
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	01 96       	adiw	r24, 0x01	; 1
     996:	8f 73       	andi	r24, 0x3F	; 63
     998:	99 27       	eor	r25, r25
     99a:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     99c:	a6 89       	ldd	r26, Z+22	; 0x16
     99e:	b7 89       	ldd	r27, Z+23	; 0x17
     9a0:	2c 93       	st	X, r18
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     9a2:	a0 89       	ldd	r26, Z+16	; 0x10
     9a4:	b1 89       	ldd	r27, Z+17	; 0x11
     9a6:	8c 91       	ld	r24, X
     9a8:	83 70       	andi	r24, 0x03	; 3
     9aa:	80 64       	ori	r24, 0x40	; 64
     9ac:	8c 93       	st	X, r24
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
     9ae:	93 8d       	ldd	r25, Z+27	; 0x1b
     9b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     9b2:	98 13       	cpse	r25, r24
     9b4:	06 c0       	rjmp	.+12     	; 0x9c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x42>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     9b6:	02 88       	ldd	r0, Z+18	; 0x12
     9b8:	f3 89       	ldd	r31, Z+19	; 0x13
     9ba:	e0 2d       	mov	r30, r0
     9bc:	80 81       	ld	r24, Z
     9be:	8f 7d       	andi	r24, 0xDF	; 223
     9c0:	80 83       	st	Z, r24
     9c2:	08 95       	ret

000009c4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	ec 01       	movw	r28, r24
  _written = true;
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     9d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     9d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9da:	98 13       	cpse	r25, r24
     9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <_ZN14HardwareSerial5writeEh+0x24>
     9de:	e8 89       	ldd	r30, Y+16	; 0x10
     9e0:	f9 89       	ldd	r31, Y+17	; 0x11
     9e2:	80 81       	ld	r24, Z
     9e4:	85 fd       	sbrc	r24, 5
     9e6:	25 c0       	rjmp	.+74     	; 0xa32 <_ZN14HardwareSerial5writeEh+0x6e>
     9e8:	f6 2e       	mov	r15, r22
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     9ea:	0b 8d       	ldd	r16, Y+27	; 0x1b
     9ec:	10 e0       	ldi	r17, 0x00	; 0
     9ee:	0f 5f       	subi	r16, 0xFF	; 255
     9f0:	1f 4f       	sbci	r17, 0xFF	; 255
     9f2:	0f 73       	andi	r16, 0x3F	; 63
     9f4:	11 27       	eor	r17, r17
     9f6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     9f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     9fa:	e8 12       	cpse	r14, r24
     9fc:	0b c0       	rjmp	.+22     	; 0xa14 <_ZN14HardwareSerial5writeEh+0x50>
    if (bit_is_clear(SREG, SREG_I)) {
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	07 fc       	sbrc	r0, 7
     a02:	fa cf       	rjmp	.-12     	; 0x9f8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     a04:	e8 89       	ldd	r30, Y+16	; 0x10
     a06:	f9 89       	ldd	r31, Y+17	; 0x11
     a08:	80 81       	ld	r24, Z
     a0a:	85 ff       	sbrs	r24, 5
     a0c:	f5 cf       	rjmp	.-22     	; 0x9f8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     a0e:	ce 01       	movw	r24, r28
     a10:	b7 df       	rcall	.-146    	; 0x980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a12:	f2 cf       	rjmp	.-28     	; 0x9f8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a16:	fe 01       	movw	r30, r28
     a18:	e8 0f       	add	r30, r24
     a1a:	f1 1d       	adc	r31, r1
     a1c:	e3 5a       	subi	r30, 0xA3	; 163
     a1e:	ff 4f       	sbci	r31, 0xFF	; 255
     a20:	f0 82       	st	Z, r15

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a22:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     a24:	f8 94       	cli
    _tx_buffer_head = i;
     a26:	0b 8f       	std	Y+27, r16	; 0x1b
    sbi(*_ucsrb, UDRIE0);
     a28:	ea 89       	ldd	r30, Y+18	; 0x12
     a2a:	fb 89       	ldd	r31, Y+19	; 0x13
     a2c:	80 81       	ld	r24, Z
     a2e:	80 62       	ori	r24, 0x20	; 32
     a30:	0a c0       	rjmp	.+20     	; 0xa46 <_ZN14HardwareSerial5writeEh+0x82>
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
     a32:	9f b7       	in	r25, 0x3f	; 63
     a34:	f8 94       	cli
      *_udr = c;
     a36:	ee 89       	ldd	r30, Y+22	; 0x16
     a38:	ff 89       	ldd	r31, Y+23	; 0x17
     a3a:	60 83       	st	Z, r22
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
     a3c:	e8 89       	ldd	r30, Y+16	; 0x10
     a3e:	f9 89       	ldd	r31, Y+17	; 0x11
     a40:	80 81       	ld	r24, Z
     a42:	83 70       	andi	r24, 0x03	; 3
     a44:	80 64       	ori	r24, 0x40	; 64
     a46:	80 83       	st	Z, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     a48:	9f bf       	out	0x3f, r25	; 63
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
  }
  
  return 1;
}
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	ff 90       	pop	r15
     a58:	ef 90       	pop	r14
     a5a:	08 95       	ret

00000a5c <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     a62:	88 8d       	ldd	r24, Y+24	; 0x18
     a64:	88 23       	and	r24, r24
     a66:	c1 f0       	breq	.+48     	; 0xa98 <_ZN14HardwareSerial5flushEv+0x3c>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     a68:	ea 89       	ldd	r30, Y+18	; 0x12
     a6a:	fb 89       	ldd	r31, Y+19	; 0x13
     a6c:	80 81       	ld	r24, Z
     a6e:	85 fd       	sbrc	r24, 5
     a70:	05 c0       	rjmp	.+10     	; 0xa7c <_ZN14HardwareSerial5flushEv+0x20>
     a72:	a8 89       	ldd	r26, Y+16	; 0x10
     a74:	b9 89       	ldd	r27, Y+17	; 0x11
     a76:	8c 91       	ld	r24, X
     a78:	86 fd       	sbrc	r24, 6
     a7a:	0e c0       	rjmp	.+28     	; 0xa98 <_ZN14HardwareSerial5flushEv+0x3c>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	07 fc       	sbrc	r0, 7
     a80:	f5 cf       	rjmp	.-22     	; 0xa6c <_ZN14HardwareSerial5flushEv+0x10>
     a82:	80 81       	ld	r24, Z
     a84:	85 ff       	sbrs	r24, 5
     a86:	f2 cf       	rjmp	.-28     	; 0xa6c <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     a88:	a8 89       	ldd	r26, Y+16	; 0x10
     a8a:	b9 89       	ldd	r27, Y+17	; 0x11
     a8c:	8c 91       	ld	r24, X
     a8e:	85 ff       	sbrs	r24, 5
     a90:	ed cf       	rjmp	.-38     	; 0xa6c <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     a92:	ce 01       	movw	r24, r28
     a94:	75 df       	rcall	.-278    	; 0x980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     a96:	e8 cf       	rjmp	.-48     	; 0xa68 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     a98:	df 91       	pop	r29
     a9a:	cf 91       	pop	r28
     a9c:	08 95       	ret

00000a9e <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     a9e:	cf 92       	push	r12
     aa0:	df 92       	push	r13
     aa2:	ef 92       	push	r14
     aa4:	ff 92       	push	r15
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ec 01       	movw	r28, r24
     aae:	6a 01       	movw	r12, r20
     ab0:	7b 01       	movw	r14, r22
     ab2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     ab4:	e8 89       	ldd	r30, Y+16	; 0x10
     ab6:	f9 89       	ldd	r31, Y+17	; 0x11
     ab8:	82 e0       	ldi	r24, 0x02	; 2
     aba:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     abc:	41 15       	cp	r20, r1
     abe:	51 4e       	sbci	r21, 0xE1	; 225
     ac0:	61 05       	cpc	r22, r1
     ac2:	71 05       	cpc	r23, r1
     ac4:	b1 f0       	breq	.+44     	; 0xaf2 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	79 e0       	ldi	r23, 0x09	; 9
     aca:	8d e3       	ldi	r24, 0x3D	; 61
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	a7 01       	movw	r20, r14
     ad0:	96 01       	movw	r18, r12
     ad2:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
     ad6:	da 01       	movw	r26, r20
     ad8:	c9 01       	movw	r24, r18
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	a1 09       	sbc	r26, r1
     ade:	b1 09       	sbc	r27, r1
     ae0:	b6 95       	lsr	r27
     ae2:	a7 95       	ror	r26
     ae4:	97 95       	ror	r25
     ae6:	87 95       	ror	r24
     ae8:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     aea:	21 15       	cp	r18, r1
     aec:	80 e1       	ldi	r24, 0x10	; 16
     aee:	38 07       	cpc	r19, r24
     af0:	a8 f0       	brcs	.+42     	; 0xb1c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     af2:	e8 89       	ldd	r30, Y+16	; 0x10
     af4:	f9 89       	ldd	r31, Y+17	; 0x11
     af6:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     af8:	60 e8       	ldi	r22, 0x80	; 128
     afa:	74 e8       	ldi	r23, 0x84	; 132
     afc:	8e e1       	ldi	r24, 0x1E	; 30
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a7 01       	movw	r20, r14
     b02:	96 01       	movw	r18, r12
     b04:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
     b08:	da 01       	movw	r26, r20
     b0a:	c9 01       	movw	r24, r18
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	b6 95       	lsr	r27
     b14:	a7 95       	ror	r26
     b16:	97 95       	ror	r25
     b18:	87 95       	ror	r24
     b1a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     b1c:	ec 85       	ldd	r30, Y+12	; 0x0c
     b1e:	fd 85       	ldd	r31, Y+13	; 0x0d
     b20:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     b22:	ee 85       	ldd	r30, Y+14	; 0x0e
     b24:	ff 85       	ldd	r31, Y+15	; 0x0f
     b26:	20 83       	st	Z, r18

  _written = false;
     b28:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     b2a:	ec 89       	ldd	r30, Y+20	; 0x14
     b2c:	fd 89       	ldd	r31, Y+21	; 0x15
     b2e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     b30:	ea 89       	ldd	r30, Y+18	; 0x12
     b32:	fb 89       	ldd	r31, Y+19	; 0x13
     b34:	80 81       	ld	r24, Z
     b36:	80 61       	ori	r24, 0x10	; 16
     b38:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     b3a:	ea 89       	ldd	r30, Y+18	; 0x12
     b3c:	fb 89       	ldd	r31, Y+19	; 0x13
     b3e:	80 81       	ld	r24, Z
     b40:	88 60       	ori	r24, 0x08	; 8
     b42:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     b44:	ea 89       	ldd	r30, Y+18	; 0x12
     b46:	fb 89       	ldd	r31, Y+19	; 0x13
     b48:	80 81       	ld	r24, Z
     b4a:	80 68       	ori	r24, 0x80	; 128
     b4c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     b4e:	ea 89       	ldd	r30, Y+18	; 0x12
     b50:	fb 89       	ldd	r31, Y+19	; 0x13
     b52:	80 81       	ld	r24, Z
     b54:	8f 7d       	andi	r24, 0xDF	; 223
     b56:	80 83       	st	Z, r24
}
     b58:	df 91       	pop	r29
     b5a:	cf 91       	pop	r28
     b5c:	1f 91       	pop	r17
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	08 95       	ret

00000b68 <_ZN5Print17availableForWriteEv>:
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	08 95       	ret

00000b6e <__vector_25>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     b6e:	1f 92       	push	r1
     b70:	0f 92       	push	r0
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	0f 92       	push	r0
     b76:	11 24       	eor	r1, r1
     b78:	0b b6       	in	r0, 0x3b	; 59
     b7a:	0f 92       	push	r0
     b7c:	2f 93       	push	r18
     b7e:	8f 93       	push	r24
     b80:	9f 93       	push	r25
     b82:	ef 93       	push	r30
     b84:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     b86:	e0 91 c2 04 	lds	r30, 0x04C2	; 0x8004c2 <Serial+0x10>
     b8a:	f0 91 c3 04 	lds	r31, 0x04C3	; 0x8004c3 <Serial+0x11>
     b8e:	80 81       	ld	r24, Z
     b90:	e0 91 c8 04 	lds	r30, 0x04C8	; 0x8004c8 <Serial+0x16>
     b94:	f0 91 c9 04 	lds	r31, 0x04C9	; 0x8004c9 <Serial+0x17>
     b98:	82 fd       	sbrc	r24, 2
     b9a:	12 c0       	rjmp	.+36     	; 0xbc0 <__vector_25+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     b9c:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     b9e:	80 91 cb 04 	lds	r24, 0x04CB	; 0x8004cb <Serial+0x19>
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     ba6:	20 91 cc 04 	lds	r18, 0x04CC	; 0x8004cc <Serial+0x1a>
     baa:	82 17       	cp	r24, r18
     bac:	51 f0       	breq	.+20     	; 0xbc2 <__vector_25+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     bae:	e0 91 cb 04 	lds	r30, 0x04CB	; 0x8004cb <Serial+0x19>
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ee 54       	subi	r30, 0x4E	; 78
     bb6:	fb 4f       	sbci	r31, 0xFB	; 251
     bb8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     bba:	80 93 cb 04 	sts	0x04CB, r24	; 0x8004cb <Serial+0x19>
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <__vector_25+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     bc0:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	9f 91       	pop	r25
     bc8:	8f 91       	pop	r24
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0b be       	out	0x3b, r0	; 59
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <__vector_26>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     bda:	1f 92       	push	r1
     bdc:	0f 92       	push	r0
     bde:	0f b6       	in	r0, 0x3f	; 63
     be0:	0f 92       	push	r0
     be2:	11 24       	eor	r1, r1
     be4:	0b b6       	in	r0, 0x3b	; 59
     be6:	0f 92       	push	r0
     be8:	2f 93       	push	r18
     bea:	3f 93       	push	r19
     bec:	4f 93       	push	r20
     bee:	5f 93       	push	r21
     bf0:	6f 93       	push	r22
     bf2:	7f 93       	push	r23
     bf4:	8f 93       	push	r24
     bf6:	9f 93       	push	r25
     bf8:	af 93       	push	r26
     bfa:	bf 93       	push	r27
     bfc:	ef 93       	push	r30
     bfe:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     c00:	82 eb       	ldi	r24, 0xB2	; 178
     c02:	94 e0       	ldi	r25, 0x04	; 4
     c04:	bd de       	rcall	.-646    	; 0x980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     c06:	ff 91       	pop	r31
     c08:	ef 91       	pop	r30
     c0a:	bf 91       	pop	r27
     c0c:	af 91       	pop	r26
     c0e:	9f 91       	pop	r25
     c10:	8f 91       	pop	r24
     c12:	7f 91       	pop	r23
     c14:	6f 91       	pop	r22
     c16:	5f 91       	pop	r21
     c18:	4f 91       	pop	r20
     c1a:	3f 91       	pop	r19
     c1c:	2f 91       	pop	r18
     c1e:	0f 90       	pop	r0
     c20:	0b be       	out	0x3b, r0	; 59
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     c2c:	82 eb       	ldi	r24, 0xB2	; 178
     c2e:	94 e0       	ldi	r25, 0x04	; 4
     c30:	2f de       	rcall	.-930    	; 0x890 <_ZN14HardwareSerial9availableEv>
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	89 2b       	or	r24, r25
     c36:	09 f4       	brne	.+2      	; 0xc3a <_Z17Serial0_availablev+0xe>
     c38:	20 e0       	ldi	r18, 0x00	; 0
}
     c3a:	82 2f       	mov	r24, r18
     c3c:	08 95       	ret

00000c3e <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     c3e:	e2 eb       	ldi	r30, 0xB2	; 178
     c40:	f4 e0       	ldi	r31, 0x04	; 4
     c42:	13 82       	std	Z+3, r1	; 0x03
     c44:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     c46:	88 ee       	ldi	r24, 0xE8	; 232
     c48:	93 e0       	ldi	r25, 0x03	; 3
     c4a:	a0 e0       	ldi	r26, 0x00	; 0
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	84 83       	std	Z+4, r24	; 0x04
     c50:	95 83       	std	Z+5, r25	; 0x05
     c52:	a6 83       	std	Z+6, r26	; 0x06
     c54:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     c56:	84 ef       	ldi	r24, 0xF4	; 244
     c58:	92 e0       	ldi	r25, 0x02	; 2
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	80 83       	st	Z, r24
     c5e:	85 ec       	ldi	r24, 0xC5	; 197
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	95 87       	std	Z+13, r25	; 0x0d
     c64:	84 87       	std	Z+12, r24	; 0x0c
     c66:	84 ec       	ldi	r24, 0xC4	; 196
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	97 87       	std	Z+15, r25	; 0x0f
     c6c:	86 87       	std	Z+14, r24	; 0x0e
     c6e:	80 ec       	ldi	r24, 0xC0	; 192
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	91 8b       	std	Z+17, r25	; 0x11
     c74:	80 8b       	std	Z+16, r24	; 0x10
     c76:	81 ec       	ldi	r24, 0xC1	; 193
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	93 8b       	std	Z+19, r25	; 0x13
     c7c:	82 8b       	std	Z+18, r24	; 0x12
     c7e:	82 ec       	ldi	r24, 0xC2	; 194
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	95 8b       	std	Z+21, r25	; 0x15
     c84:	84 8b       	std	Z+20, r24	; 0x14
     c86:	86 ec       	ldi	r24, 0xC6	; 198
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	97 8b       	std	Z+23, r25	; 0x17
     c8c:	86 8b       	std	Z+22, r24	; 0x16
     c8e:	11 8e       	std	Z+25, r1	; 0x19
     c90:	12 8e       	std	Z+26, r1	; 0x1a
     c92:	13 8e       	std	Z+27, r1	; 0x1b
     c94:	14 8e       	std	Z+28, r1	; 0x1c
     c96:	08 95       	ret

00000c98 <__vector_36>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     c98:	1f 92       	push	r1
     c9a:	0f 92       	push	r0
     c9c:	0f b6       	in	r0, 0x3f	; 63
     c9e:	0f 92       	push	r0
     ca0:	11 24       	eor	r1, r1
     ca2:	0b b6       	in	r0, 0x3b	; 59
     ca4:	0f 92       	push	r0
     ca6:	2f 93       	push	r18
     ca8:	8f 93       	push	r24
     caa:	9f 93       	push	r25
     cac:	ef 93       	push	r30
     cae:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     cb0:	e0 91 5f 05 	lds	r30, 0x055F	; 0x80055f <Serial1+0x10>
     cb4:	f0 91 60 05 	lds	r31, 0x0560	; 0x800560 <Serial1+0x11>
     cb8:	80 81       	ld	r24, Z
     cba:	e0 91 65 05 	lds	r30, 0x0565	; 0x800565 <Serial1+0x16>
     cbe:	f0 91 66 05 	lds	r31, 0x0566	; 0x800566 <Serial1+0x17>
     cc2:	82 fd       	sbrc	r24, 2
     cc4:	12 c0       	rjmp	.+36     	; 0xcea <__vector_36+0x52>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     cc6:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     cc8:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <Serial1+0x19>
     ccc:	8f 5f       	subi	r24, 0xFF	; 255
     cce:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     cd0:	20 91 69 05 	lds	r18, 0x0569	; 0x800569 <Serial1+0x1a>
     cd4:	82 17       	cp	r24, r18
     cd6:	51 f0       	breq	.+20     	; 0xcec <__vector_36+0x54>
      _rx_buffer[_rx_buffer_head] = c;
     cd8:	e0 91 68 05 	lds	r30, 0x0568	; 0x800568 <Serial1+0x19>
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	e1 5b       	subi	r30, 0xB1	; 177
     ce0:	fa 4f       	sbci	r31, 0xFA	; 250
     ce2:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     ce4:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <Serial1+0x19>
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <__vector_36+0x54>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     cea:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	9f 91       	pop	r25
     cf2:	8f 91       	pop	r24
     cf4:	2f 91       	pop	r18
     cf6:	0f 90       	pop	r0
     cf8:	0b be       	out	0x3b, r0	; 59
     cfa:	0f 90       	pop	r0
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	0f 90       	pop	r0
     d00:	1f 90       	pop	r1
     d02:	18 95       	reti

00000d04 <__vector_37>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
     d04:	1f 92       	push	r1
     d06:	0f 92       	push	r0
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	0f 92       	push	r0
     d0c:	11 24       	eor	r1, r1
     d0e:	0b b6       	in	r0, 0x3b	; 59
     d10:	0f 92       	push	r0
     d12:	2f 93       	push	r18
     d14:	3f 93       	push	r19
     d16:	4f 93       	push	r20
     d18:	5f 93       	push	r21
     d1a:	6f 93       	push	r22
     d1c:	7f 93       	push	r23
     d1e:	8f 93       	push	r24
     d20:	9f 93       	push	r25
     d22:	af 93       	push	r26
     d24:	bf 93       	push	r27
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
     d2a:	8f e4       	ldi	r24, 0x4F	; 79
     d2c:	95 e0       	ldi	r25, 0x05	; 5
     d2e:	28 de       	rcall	.-944    	; 0x980 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	bf 91       	pop	r27
     d36:	af 91       	pop	r26
     d38:	9f 91       	pop	r25
     d3a:	8f 91       	pop	r24
     d3c:	7f 91       	pop	r23
     d3e:	6f 91       	pop	r22
     d40:	5f 91       	pop	r21
     d42:	4f 91       	pop	r20
     d44:	3f 91       	pop	r19
     d46:	2f 91       	pop	r18
     d48:	0f 90       	pop	r0
     d4a:	0b be       	out	0x3b, r0	; 59
     d4c:	0f 90       	pop	r0
     d4e:	0f be       	out	0x3f, r0	; 63
     d50:	0f 90       	pop	r0
     d52:	1f 90       	pop	r1
     d54:	18 95       	reti

00000d56 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
     d56:	8f e4       	ldi	r24, 0x4F	; 79
     d58:	95 e0       	ldi	r25, 0x05	; 5
     d5a:	9a dd       	rcall	.-1228   	; 0x890 <_ZN14HardwareSerial9availableEv>
     d5c:	21 e0       	ldi	r18, 0x01	; 1
     d5e:	89 2b       	or	r24, r25
     d60:	09 f4       	brne	.+2      	; 0xd64 <_Z17Serial1_availablev+0xe>
     d62:	20 e0       	ldi	r18, 0x00	; 0
}
     d64:	82 2f       	mov	r24, r18
     d66:	08 95       	ret

00000d68 <_GLOBAL__sub_I___vector_36>:
     d68:	ef e4       	ldi	r30, 0x4F	; 79
     d6a:	f5 e0       	ldi	r31, 0x05	; 5
     d6c:	13 82       	std	Z+3, r1	; 0x03
     d6e:	12 82       	std	Z+2, r1	; 0x02
     d70:	88 ee       	ldi	r24, 0xE8	; 232
     d72:	93 e0       	ldi	r25, 0x03	; 3
     d74:	a0 e0       	ldi	r26, 0x00	; 0
     d76:	b0 e0       	ldi	r27, 0x00	; 0
     d78:	84 83       	std	Z+4, r24	; 0x04
     d7a:	95 83       	std	Z+5, r25	; 0x05
     d7c:	a6 83       	std	Z+6, r26	; 0x06
     d7e:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     d80:	84 ef       	ldi	r24, 0xF4	; 244
     d82:	92 e0       	ldi	r25, 0x02	; 2
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	80 83       	st	Z, r24
     d88:	8d ec       	ldi	r24, 0xCD	; 205
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	95 87       	std	Z+13, r25	; 0x0d
     d8e:	84 87       	std	Z+12, r24	; 0x0c
     d90:	8c ec       	ldi	r24, 0xCC	; 204
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	97 87       	std	Z+15, r25	; 0x0f
     d96:	86 87       	std	Z+14, r24	; 0x0e
     d98:	88 ec       	ldi	r24, 0xC8	; 200
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	91 8b       	std	Z+17, r25	; 0x11
     d9e:	80 8b       	std	Z+16, r24	; 0x10
     da0:	89 ec       	ldi	r24, 0xC9	; 201
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	93 8b       	std	Z+19, r25	; 0x13
     da6:	82 8b       	std	Z+18, r24	; 0x12
     da8:	8a ec       	ldi	r24, 0xCA	; 202
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	95 8b       	std	Z+21, r25	; 0x15
     dae:	84 8b       	std	Z+20, r24	; 0x14
     db0:	8e ec       	ldi	r24, 0xCE	; 206
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	97 8b       	std	Z+23, r25	; 0x17
     db6:	86 8b       	std	Z+22, r24	; 0x16
     db8:	11 8e       	std	Z+25, r1	; 0x19
     dba:	12 8e       	std	Z+26, r1	; 0x1a
     dbc:	13 8e       	std	Z+27, r1	; 0x1b
     dbe:	14 8e       	std	Z+28, r1	; 0x1c
     dc0:	08 95       	ret

00000dc2 <initVariant>:
     dc2:	08 95       	ret

00000dc4 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     dc4:	c3 d2       	rcall	.+1414   	; 0x134c <init>

	initVariant();
     dc6:	fd df       	rcall	.-6      	; 0xdc2 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     dc8:	79 db       	rcall	.-2318   	; 0x4bc <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     dca:	c5 e8       	ldi	r28, 0x85	; 133
     dcc:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     dce:	54 db       	rcall	.-2392   	; 0x478 <loop>
		if (serialEventRun) serialEventRun();
     dd0:	20 97       	sbiw	r28, 0x00	; 0
     dd2:	e9 f3       	breq	.-6      	; 0xdce <main+0xa>
     dd4:	9a dd       	rcall	.-1228   	; 0x90a <_Z14serialEventRunv>
     dd6:	fb cf       	rjmp	.-10     	; 0xdce <main+0xa>

00000dd8 <_ZN5Print5writeEPKhj>:
     dd8:	cf 92       	push	r12
size_t Print::println(long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     dda:	df 92       	push	r13
     ddc:	ef 92       	push	r14
     dde:	ff 92       	push	r15
     de0:	0f 93       	push	r16
     de2:	1f 93       	push	r17
     de4:	cf 93       	push	r28
     de6:	df 93       	push	r29
     de8:	6c 01       	movw	r12, r24
     dea:	7a 01       	movw	r14, r20
     dec:	8b 01       	movw	r16, r22
     dee:	c0 e0       	ldi	r28, 0x00	; 0
     df0:	d0 e0       	ldi	r29, 0x00	; 0
     df2:	ce 15       	cp	r28, r14
     df4:	df 05       	cpc	r29, r15
     df6:	81 f0       	breq	.+32     	; 0xe18 <_ZN5Print5writeEPKhj+0x40>
     df8:	d8 01       	movw	r26, r16
     dfa:	6d 91       	ld	r22, X+
     dfc:	8d 01       	movw	r16, r26
     dfe:	d6 01       	movw	r26, r12
     e00:	ed 91       	ld	r30, X+
     e02:	fc 91       	ld	r31, X
     e04:	01 90       	ld	r0, Z+
     e06:	f0 81       	ld	r31, Z
     e08:	e0 2d       	mov	r30, r0
     e0a:	c6 01       	movw	r24, r12
     e0c:	19 95       	eicall
     e0e:	89 2b       	or	r24, r25
     e10:	11 f0       	breq	.+4      	; 0xe16 <_ZN5Print5writeEPKhj+0x3e>
     e12:	21 96       	adiw	r28, 0x01	; 1
     e14:	ee cf       	rjmp	.-36     	; 0xdf2 <_ZN5Print5writeEPKhj+0x1a>
     e16:	7e 01       	movw	r14, r28
     e18:	c7 01       	movw	r24, r14
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	08 95       	ret

00000e2c <_ZN5Print5writeEPKc>:
     e2c:	61 15       	cp	r22, r1
     e2e:	71 05       	cpc	r23, r1
     e30:	79 f0       	breq	.+30     	; 0xe50 <_ZN5Print5writeEPKc+0x24>
     e32:	fb 01       	movw	r30, r22
     e34:	01 90       	ld	r0, Z+
     e36:	00 20       	and	r0, r0
     e38:	e9 f7       	brne	.-6      	; 0xe34 <_ZN5Print5writeEPKc+0x8>
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	af 01       	movw	r20, r30
     e3e:	46 1b       	sub	r20, r22
     e40:	57 0b       	sbc	r21, r23
     e42:	dc 01       	movw	r26, r24
     e44:	ed 91       	ld	r30, X+
     e46:	fc 91       	ld	r31, X
     e48:	02 80       	ldd	r0, Z+2	; 0x02
     e4a:	f3 81       	ldd	r31, Z+3	; 0x03
     e4c:	e0 2d       	mov	r30, r0
     e4e:	19 94       	eijmp
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	08 95       	ret

00000e56 <_ZN5Print5printERK6String>:
     e56:	db 01       	movw	r26, r22
     e58:	14 96       	adiw	r26, 0x04	; 4
     e5a:	4d 91       	ld	r20, X+
     e5c:	5c 91       	ld	r21, X
     e5e:	15 97       	sbiw	r26, 0x05	; 5
     e60:	6d 91       	ld	r22, X+
     e62:	7c 91       	ld	r23, X
     e64:	dc 01       	movw	r26, r24
     e66:	ed 91       	ld	r30, X+
     e68:	fc 91       	ld	r31, X
     e6a:	02 80       	ldd	r0, Z+2	; 0x02
     e6c:	f3 81       	ldd	r31, Z+3	; 0x03
     e6e:	e0 2d       	mov	r30, r0
     e70:	19 94       	eijmp

00000e72 <_ZN5Print5printEPKc>:
     e72:	dc cf       	rjmp	.-72     	; 0xe2c <_ZN5Print5writeEPKc>

00000e74 <_ZN5Print5printEc>:
     e74:	dc 01       	movw	r26, r24
     e76:	ed 91       	ld	r30, X+
     e78:	fc 91       	ld	r31, X
     e7a:	01 90       	ld	r0, Z+
     e7c:	f0 81       	ld	r31, Z
     e7e:	e0 2d       	mov	r30, r0
     e80:	19 94       	eijmp

00000e82 <_ZN5Print7printlnEv>:
     e82:	62 e0       	ldi	r22, 0x02	; 2
     e84:	73 e0       	ldi	r23, 0x03	; 3
     e86:	d2 cf       	rjmp	.-92     	; 0xe2c <_ZN5Print5writeEPKc>

00000e88 <_ZN5Print7printlnERK6String>:
     e88:	0f 93       	push	r16
     e8a:	1f 93       	push	r17
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	ec 01       	movw	r28, r24
     e92:	e1 df       	rcall	.-62     	; 0xe56 <_ZN5Print5printERK6String>
     e94:	8c 01       	movw	r16, r24
     e96:	ce 01       	movw	r24, r28
     e98:	f4 df       	rcall	.-24     	; 0xe82 <_ZN5Print7printlnEv>
     e9a:	80 0f       	add	r24, r16
     e9c:	91 1f       	adc	r25, r17
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	08 95       	ret

00000ea8 <_ZN5Print7printlnEPKc>:
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	ec 01       	movw	r28, r24
     eb2:	bc df       	rcall	.-136    	; 0xe2c <_ZN5Print5writeEPKc>
     eb4:	8c 01       	movw	r16, r24
     eb6:	ce 01       	movw	r24, r28
     eb8:	e4 df       	rcall	.-56     	; 0xe82 <_ZN5Print7printlnEv>
     eba:	80 0f       	add	r24, r16
     ebc:	91 1f       	adc	r25, r17
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	08 95       	ret

00000ec8 <_ZN5Print11printNumberEmh>:
     ec8:	8f 92       	push	r8
     eca:	9f 92       	push	r9
     ecc:	af 92       	push	r10
     ece:	bf 92       	push	r11
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	a1 97       	sbiw	r28, 0x21	; 33
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
     eec:	7c 01       	movw	r14, r24
     eee:	fa 01       	movw	r30, r20
     ef0:	cb 01       	movw	r24, r22
     ef2:	19 a2       	std	Y+33, r1	; 0x21
     ef4:	22 30       	cpi	r18, 0x02	; 2
     ef6:	08 f4       	brcc	.+2      	; 0xefa <_ZN5Print11printNumberEmh+0x32>
     ef8:	2a e0       	ldi	r18, 0x0A	; 10
     efa:	8e 01       	movw	r16, r28
     efc:	0f 5d       	subi	r16, 0xDF	; 223
     efe:	1f 4f       	sbci	r17, 0xFF	; 255
     f00:	82 2e       	mov	r8, r18
     f02:	91 2c       	mov	r9, r1
     f04:	a1 2c       	mov	r10, r1
     f06:	b1 2c       	mov	r11, r1
     f08:	bf 01       	movw	r22, r30
     f0a:	a5 01       	movw	r20, r10
     f0c:	94 01       	movw	r18, r8
     f0e:	0e 94 83 13 	call	0x2706	; 0x2706 <__udivmodsi4>
     f12:	f9 01       	movw	r30, r18
     f14:	ca 01       	movw	r24, r20
     f16:	01 50       	subi	r16, 0x01	; 1
     f18:	11 09       	sbc	r17, r1
     f1a:	6a 30       	cpi	r22, 0x0A	; 10
     f1c:	10 f4       	brcc	.+4      	; 0xf22 <_ZN5Print11printNumberEmh+0x5a>
     f1e:	60 5d       	subi	r22, 0xD0	; 208
     f20:	01 c0       	rjmp	.+2      	; 0xf24 <_ZN5Print11printNumberEmh+0x5c>
     f22:	69 5c       	subi	r22, 0xC9	; 201
     f24:	d8 01       	movw	r26, r16
     f26:	6c 93       	st	X, r22
     f28:	23 2b       	or	r18, r19
     f2a:	24 2b       	or	r18, r20
     f2c:	25 2b       	or	r18, r21
     f2e:	61 f7       	brne	.-40     	; 0xf08 <_ZN5Print11printNumberEmh+0x40>
     f30:	b8 01       	movw	r22, r16
     f32:	c7 01       	movw	r24, r14
     f34:	7b df       	rcall	.-266    	; 0xe2c <_ZN5Print5writeEPKc>
     f36:	a1 96       	adiw	r28, 0x21	; 33
     f38:	0f b6       	in	r0, 0x3f	; 63
     f3a:	f8 94       	cli
     f3c:	de bf       	out	0x3e, r29	; 62
     f3e:	0f be       	out	0x3f, r0	; 63
     f40:	cd bf       	out	0x3d, r28	; 61
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	0f 91       	pop	r16
     f4a:	ff 90       	pop	r15
     f4c:	ef 90       	pop	r14
     f4e:	bf 90       	pop	r11
     f50:	af 90       	pop	r10
     f52:	9f 90       	pop	r9
     f54:	8f 90       	pop	r8
     f56:	08 95       	ret

00000f58 <_ZN5Print5printEmi>:
     f58:	21 15       	cp	r18, r1
     f5a:	31 05       	cpc	r19, r1
     f5c:	41 f4       	brne	.+16     	; 0xf6e <_ZN5Print5printEmi+0x16>
     f5e:	dc 01       	movw	r26, r24
     f60:	ed 91       	ld	r30, X+
     f62:	fc 91       	ld	r31, X
     f64:	01 90       	ld	r0, Z+
     f66:	f0 81       	ld	r31, Z
     f68:	e0 2d       	mov	r30, r0
     f6a:	64 2f       	mov	r22, r20
     f6c:	19 94       	eijmp
     f6e:	ac cf       	rjmp	.-168    	; 0xec8 <_ZN5Print11printNumberEmh>

00000f70 <_ZN5Print5printEji>:
     f70:	9a 01       	movw	r18, r20
     f72:	ab 01       	movw	r20, r22
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	ef cf       	rjmp	.-34     	; 0xf58 <_ZN5Print5printEmi>

00000f7a <_ZN5Print5printEli>:
     f7a:	cf 92       	push	r12
     f7c:	df 92       	push	r13
     f7e:	ef 92       	push	r14
     f80:	ff 92       	push	r15
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	21 15       	cp	r18, r1
     f8c:	31 05       	cpc	r19, r1
     f8e:	81 f4       	brne	.+32     	; 0xfb0 <_ZN5Print5printEli+0x36>
     f90:	dc 01       	movw	r26, r24
     f92:	ed 91       	ld	r30, X+
     f94:	fc 91       	ld	r31, X
     f96:	01 90       	ld	r0, Z+
     f98:	f0 81       	ld	r31, Z
     f9a:	e0 2d       	mov	r30, r0
     f9c:	64 2f       	mov	r22, r20
     f9e:	df 91       	pop	r29
     fa0:	cf 91       	pop	r28
     fa2:	1f 91       	pop	r17
     fa4:	0f 91       	pop	r16
     fa6:	ff 90       	pop	r15
     fa8:	ef 90       	pop	r14
     faa:	df 90       	pop	r13
     fac:	cf 90       	pop	r12
     fae:	19 94       	eijmp
     fb0:	2a 30       	cpi	r18, 0x0A	; 10
     fb2:	31 05       	cpc	r19, r1
     fb4:	f1 f4       	brne	.+60     	; 0xff2 <_ZN5Print5printEli+0x78>
     fb6:	77 ff       	sbrs	r23, 7
     fb8:	1b c0       	rjmp	.+54     	; 0xff0 <_ZN5Print5printEli+0x76>
     fba:	6a 01       	movw	r12, r20
     fbc:	7b 01       	movw	r14, r22
     fbe:	ec 01       	movw	r28, r24
     fc0:	6d e2       	ldi	r22, 0x2D	; 45
     fc2:	58 df       	rcall	.-336    	; 0xe74 <_ZN5Print5printEc>
     fc4:	8c 01       	movw	r16, r24
     fc6:	44 27       	eor	r20, r20
     fc8:	55 27       	eor	r21, r21
     fca:	ba 01       	movw	r22, r20
     fcc:	4c 19       	sub	r20, r12
     fce:	5d 09       	sbc	r21, r13
     fd0:	6e 09       	sbc	r22, r14
     fd2:	7f 09       	sbc	r23, r15
     fd4:	2a e0       	ldi	r18, 0x0A	; 10
     fd6:	ce 01       	movw	r24, r28
     fd8:	77 df       	rcall	.-274    	; 0xec8 <_ZN5Print11printNumberEmh>
     fda:	80 0f       	add	r24, r16
     fdc:	91 1f       	adc	r25, r17
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	08 95       	ret
     ff0:	2a e0       	ldi	r18, 0x0A	; 10
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	62 cf       	rjmp	.-316    	; 0xec8 <_ZN5Print11printNumberEmh>

00001004 <_ZN5Print5printEii>:
    1004:	9a 01       	movw	r18, r20
    1006:	ab 01       	movw	r20, r22
    1008:	77 0f       	add	r23, r23
    100a:	66 0b       	sbc	r22, r22
    100c:	77 0b       	sbc	r23, r23
    100e:	b5 cf       	rjmp	.-150    	; 0xf7a <_ZN5Print5printEli>

00001010 <_ZN5Print7printlnEii>:
    1010:	0f 93       	push	r16
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	ec 01       	movw	r28, r24
    101a:	f4 df       	rcall	.-24     	; 0x1004 <_ZN5Print5printEii>
    101c:	8c 01       	movw	r16, r24
    101e:	ce 01       	movw	r24, r28
    1020:	30 df       	rcall	.-416    	; 0xe82 <_ZN5Print7printlnEv>
    1022:	80 0f       	add	r24, r16
    1024:	91 1f       	adc	r25, r17
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1030:	7f 92       	push	r7
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	8c 01       	movw	r16, r24
    104c:	6a 01       	movw	r12, r20
    104e:	7b 01       	movw	r14, r22
    1050:	72 2e       	mov	r7, r18
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    1052:	9a 01       	movw	r18, r20
    1054:	ab 01       	movw	r20, r22
    1056:	c7 01       	movw	r24, r14
    1058:	b6 01       	movw	r22, r12
    105a:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__unordsf2>
    105e:	88 23       	and	r24, r24
    1060:	19 f0       	breq	.+6      	; 0x1068 <_ZN5Print10printFloatEdh+0x38>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1062:	65 e0       	ldi	r22, 0x05	; 5
    1064:	73 e0       	ldi	r23, 0x03	; 3
    1066:	26 c0       	rjmp	.+76     	; 0x10b4 <_ZN5Print10printFloatEdh+0x84>
size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
    1068:	46 01       	movw	r8, r12
    106a:	57 01       	movw	r10, r14
    106c:	e8 94       	clt
    106e:	b7 f8       	bld	r11, 7
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	5f e7       	ldi	r21, 0x7F	; 127
    1078:	c5 01       	movw	r24, r10
    107a:	b4 01       	movw	r22, r8
    107c:	0e 94 7e 13 	call	0x26fc	; 0x26fc <__unordsf2>
    1080:	81 11       	cpse	r24, r1
    1082:	0d c0       	rjmp	.+26     	; 0x109e <_ZN5Print10printFloatEdh+0x6e>
    1084:	2f ef       	ldi	r18, 0xFF	; 255
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	5f e7       	ldi	r21, 0x7F	; 127
    108c:	c5 01       	movw	r24, r10
    108e:	b4 01       	movw	r22, r8
    1090:	0e 94 9c 12 	call	0x2538	; 0x2538 <__cmpsf2>
    1094:	18 16       	cp	r1, r24
    1096:	1c f4       	brge	.+6      	; 0x109e <_ZN5Print10printFloatEdh+0x6e>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1098:	69 e0       	ldi	r22, 0x09	; 9
    109a:	73 e0       	ldi	r23, 0x03	; 3
    109c:	0b c0       	rjmp	.+22     	; 0x10b4 <_ZN5Print10printFloatEdh+0x84>
{ 
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    109e:	2f ef       	ldi	r18, 0xFF	; 255
    10a0:	3f ef       	ldi	r19, 0xFF	; 255
    10a2:	4f e7       	ldi	r20, 0x7F	; 127
    10a4:	5f e4       	ldi	r21, 0x4F	; 79
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	ca db       	rcall	.-2156   	; 0x840 <__gesf2>
    10ac:	18 16       	cp	r1, r24
    10ae:	8c f4       	brge	.+34     	; 0x10d2 <_ZN5Print10printFloatEdh+0xa2>
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10b0:	6d e0       	ldi	r22, 0x0D	; 13
    10b2:	73 e0       	ldi	r23, 0x03	; 3
    10b4:	c8 01       	movw	r24, r16
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    10b6:	df 91       	pop	r29
    10b8:	cf 91       	pop	r28
    10ba:	1f 91       	pop	r17
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	df 90       	pop	r13
    10c4:	cf 90       	pop	r12
    10c6:	bf 90       	pop	r11
    10c8:	af 90       	pop	r10
    10ca:	9f 90       	pop	r9
    10cc:	8f 90       	pop	r8
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    10ce:	7f 90       	pop	r7
    10d0:	ad ce       	rjmp	.-678    	; 0xe2c <_ZN5Print5writeEPKc>
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    10d2:	2f ef       	ldi	r18, 0xFF	; 255
    10d4:	3f ef       	ldi	r19, 0xFF	; 255
    10d6:	4f e7       	ldi	r20, 0x7F	; 127
    10d8:	5f ec       	ldi	r21, 0xCF	; 207
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
    10de:	0e 94 9c 12 	call	0x2538	; 0x2538 <__cmpsf2>
    10e2:	87 fd       	sbrc	r24, 7
    10e4:	e5 cf       	rjmp	.-54     	; 0x10b0 <_ZN5Print10printFloatEdh+0x80>
  
  // Handle negative numbers
  if (number < 0.0)
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	a9 01       	movw	r20, r18
    10ec:	c7 01       	movw	r24, r14
    10ee:	b6 01       	movw	r22, r12
    10f0:	0e 94 9c 12 	call	0x2538	; 0x2538 <__cmpsf2>
    10f4:	87 ff       	sbrs	r24, 7
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <_ZN5Print10printFloatEdh+0xda>
  {
     n += print('-');
    10f8:	6d e2       	ldi	r22, 0x2D	; 45
    10fa:	c8 01       	movw	r24, r16
    10fc:	bb de       	rcall	.-650    	; 0xe74 <_ZN5Print5printEc>
    10fe:	ec 01       	movw	r28, r24
     number = -number;
    1100:	f7 fa       	bst	r15, 7
    1102:	f0 94       	com	r15
    1104:	f7 f8       	bld	r15, 7
    1106:	f0 94       	com	r15
    1108:	02 c0       	rjmp	.+4      	; 0x110e <_ZN5Print10printFloatEdh+0xde>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    110a:	c0 e0       	ldi	r28, 0x00	; 0
    110c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    110e:	b1 2c       	mov	r11, r1
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	9f e3       	ldi	r25, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1118:	7b 14       	cp	r7, r11
    111a:	41 f0       	breq	.+16     	; 0x112c <_ZN5Print10printFloatEdh+0xfc>
    rounding /= 10.0;
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 a1 12 	call	0x2542	; 0x2542 <__divsf3>
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1128:	b3 94       	inc	r11
    rounding /= 10.0;
  
  number += rounding;
    112a:	f6 cf       	rjmp	.-20     	; 0x1118 <_ZN5Print10printFloatEdh+0xe8>
    112c:	a7 01       	movw	r20, r14
    112e:	96 01       	movw	r18, r12
    1130:	64 da       	rcall	.-2872   	; 0x5fa <__addsf3>
    1132:	6b 01       	movw	r12, r22

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1134:	7c 01       	movw	r14, r24
    1136:	ca da       	rcall	.-2668   	; 0x6cc <__fixunssfsi>
    1138:	4b 01       	movw	r8, r22
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    113a:	5c 01       	movw	r10, r24
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	ab 01       	movw	r20, r22
    1140:	bc 01       	movw	r22, r24
    1142:	c8 01       	movw	r24, r16
    1144:	c1 de       	rcall	.-638    	; 0xec8 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    1146:	c8 0f       	add	r28, r24

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1148:	d9 1f       	adc	r29, r25
    114a:	77 20       	and	r7, r7
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    114c:	81 f1       	breq	.+96     	; 0x11ae <_ZN5Print10printFloatEdh+0x17e>
    114e:	c5 01       	movw	r24, r10
    1150:	b4 01       	movw	r22, r8
    1152:	e8 da       	rcall	.-2608   	; 0x724 <__floatunsisf>
    1154:	9b 01       	movw	r18, r22
    1156:	ac 01       	movw	r20, r24
    1158:	c7 01       	movw	r24, r14
    115a:	b6 01       	movw	r22, r12
    115c:	4d da       	rcall	.-2918   	; 0x5f8 <__subsf3>
    115e:	6b 01       	movw	r12, r22
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1160:	7c 01       	movw	r14, r24
    1162:	6e e2       	ldi	r22, 0x2E	; 46
    1164:	c8 01       	movw	r24, r16
    1166:	86 de       	rcall	.-756    	; 0xe74 <_ZN5Print5printEc>
    1168:	c8 0f       	add	r28, r24
    116a:	d9 1f       	adc	r29, r25
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    116c:	20 e0       	ldi	r18, 0x00	; 0
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	40 e2       	ldi	r20, 0x20	; 32
    1172:	51 e4       	ldi	r21, 0x41	; 65
    1174:	c7 01       	movw	r24, r14
    1176:	b6 01       	movw	r22, r12
    1178:	0e 94 12 13 	call	0x2624	; 0x2624 <__mulsf3>
    unsigned int toPrint = (unsigned int)(remainder);
    117c:	4b 01       	movw	r8, r22
    117e:	5c 01       	movw	r10, r24
    1180:	a5 da       	rcall	.-2742   	; 0x6cc <__fixunssfsi>
    n += print(toPrint);
    1182:	6b 01       	movw	r12, r22
    1184:	7c 01       	movw	r14, r24
    1186:	4a e0       	ldi	r20, 0x0A	; 10
    1188:	50 e0       	ldi	r21, 0x00	; 0
    118a:	c8 01       	movw	r24, r16
    118c:	f1 de       	rcall	.-542    	; 0xf70 <_ZN5Print5printEji>
    remainder -= toPrint; 
    118e:	c8 0f       	add	r28, r24
    1190:	d9 1f       	adc	r29, r25
    1192:	b6 01       	movw	r22, r12
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	c5 da       	rcall	.-2678   	; 0x724 <__floatunsisf>
    119a:	9b 01       	movw	r18, r22
    119c:	ac 01       	movw	r20, r24
    119e:	c5 01       	movw	r24, r10
    11a0:	b4 01       	movw	r22, r8
    11a2:	2a da       	rcall	.-2988   	; 0x5f8 <__subsf3>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24
    11a8:	7a 94       	dec	r7
  if (digits > 0) {
    n += print('.'); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    11aa:	71 10       	cpse	r7, r1
    11ac:	df cf       	rjmp	.-66     	; 0x116c <_ZN5Print10printFloatEdh+0x13c>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    11ae:	ce 01       	movw	r24, r28
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	af 90       	pop	r10
    11c4:	9f 90       	pop	r9
    11c6:	8f 90       	pop	r8
    11c8:	7f 90       	pop	r7
    11ca:	08 95       	ret

000011cc <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    11cc:	31 cf       	rjmp	.-414    	; 0x1030 <_ZN5Print10printFloatEdh>

000011ce <__vector_23>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    11ce:	1f 92       	push	r1
    11d0:	0f 92       	push	r0
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	0f 92       	push	r0
    11d6:	11 24       	eor	r1, r1
    11d8:	2f 93       	push	r18
    11da:	3f 93       	push	r19
    11dc:	8f 93       	push	r24
    11de:	9f 93       	push	r25
    11e0:	af 93       	push	r26
    11e2:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    11e4:	80 91 ed 05 	lds	r24, 0x05ED	; 0x8005ed <timer0_millis>
    11e8:	90 91 ee 05 	lds	r25, 0x05EE	; 0x8005ee <timer0_millis+0x1>
    11ec:	a0 91 ef 05 	lds	r26, 0x05EF	; 0x8005ef <timer0_millis+0x2>
    11f0:	b0 91 f0 05 	lds	r27, 0x05F0	; 0x8005f0 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    11f4:	30 91 ec 05 	lds	r19, 0x05EC	; 0x8005ec <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    11f8:	23 e0       	ldi	r18, 0x03	; 3
    11fa:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    11fc:	2d 37       	cpi	r18, 0x7D	; 125
    11fe:	20 f4       	brcc	.+8      	; 0x1208 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	a1 1d       	adc	r26, r1
    1204:	b1 1d       	adc	r27, r1
    1206:	05 c0       	rjmp	.+10     	; 0x1212 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1208:	26 e8       	ldi	r18, 0x86	; 134
    120a:	23 0f       	add	r18, r19
		m += 1;
    120c:	02 96       	adiw	r24, 0x02	; 2
    120e:	a1 1d       	adc	r26, r1
    1210:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1212:	20 93 ec 05 	sts	0x05EC, r18	; 0x8005ec <timer0_fract>
	timer0_millis = m;
    1216:	80 93 ed 05 	sts	0x05ED, r24	; 0x8005ed <timer0_millis>
    121a:	90 93 ee 05 	sts	0x05EE, r25	; 0x8005ee <timer0_millis+0x1>
    121e:	a0 93 ef 05 	sts	0x05EF, r26	; 0x8005ef <timer0_millis+0x2>
    1222:	b0 93 f0 05 	sts	0x05F0, r27	; 0x8005f0 <timer0_millis+0x3>
	timer0_overflow_count++;
    1226:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <timer0_overflow_count>
    122a:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <timer0_overflow_count+0x1>
    122e:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <timer0_overflow_count+0x2>
    1232:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x3>
    1236:	01 96       	adiw	r24, 0x01	; 1
    1238:	a1 1d       	adc	r26, r1
    123a:	b1 1d       	adc	r27, r1
    123c:	80 93 f1 05 	sts	0x05F1, r24	; 0x8005f1 <timer0_overflow_count>
    1240:	90 93 f2 05 	sts	0x05F2, r25	; 0x8005f2 <timer0_overflow_count+0x1>
    1244:	a0 93 f3 05 	sts	0x05F3, r26	; 0x8005f3 <timer0_overflow_count+0x2>
    1248:	b0 93 f4 05 	sts	0x05F4, r27	; 0x8005f4 <timer0_overflow_count+0x3>
}
    124c:	bf 91       	pop	r27
    124e:	af 91       	pop	r26
    1250:	9f 91       	pop	r25
    1252:	8f 91       	pop	r24
    1254:	3f 91       	pop	r19
    1256:	2f 91       	pop	r18
    1258:	0f 90       	pop	r0
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	0f 90       	pop	r0
    125e:	1f 90       	pop	r1
    1260:	18 95       	reti

00001262 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1262:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1264:	f8 94       	cli
	m = timer0_millis;
    1266:	60 91 ed 05 	lds	r22, 0x05ED	; 0x8005ed <timer0_millis>
    126a:	70 91 ee 05 	lds	r23, 0x05EE	; 0x8005ee <timer0_millis+0x1>
    126e:	80 91 ef 05 	lds	r24, 0x05EF	; 0x8005ef <timer0_millis+0x2>
    1272:	90 91 f0 05 	lds	r25, 0x05F0	; 0x8005f0 <timer0_millis+0x3>
	SREG = oldSREG;
    1276:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1278:	08 95       	ret

0000127a <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    127a:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    127c:	f8 94       	cli
	m = timer0_overflow_count;
    127e:	80 91 f1 05 	lds	r24, 0x05F1	; 0x8005f1 <timer0_overflow_count>
    1282:	90 91 f2 05 	lds	r25, 0x05F2	; 0x8005f2 <timer0_overflow_count+0x1>
    1286:	a0 91 f3 05 	lds	r26, 0x05F3	; 0x8005f3 <timer0_overflow_count+0x2>
    128a:	b0 91 f4 05 	lds	r27, 0x05F4	; 0x8005f4 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    128e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1290:	a8 9b       	sbis	0x15, 0	; 21
    1292:	05 c0       	rjmp	.+10     	; 0x129e <micros+0x24>
    1294:	2f 3f       	cpi	r18, 0xFF	; 255
    1296:	19 f0       	breq	.+6      	; 0x129e <micros+0x24>
		m++;
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	a1 1d       	adc	r26, r1
    129c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    129e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    12a0:	ba 2f       	mov	r27, r26
    12a2:	a9 2f       	mov	r26, r25
    12a4:	98 2f       	mov	r25, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	82 0f       	add	r24, r18
    12aa:	91 1d       	adc	r25, r1
    12ac:	a1 1d       	adc	r26, r1
    12ae:	b1 1d       	adc	r27, r1
    12b0:	bc 01       	movw	r22, r24
    12b2:	cd 01       	movw	r24, r26
    12b4:	42 e0       	ldi	r20, 0x02	; 2
    12b6:	66 0f       	add	r22, r22
    12b8:	77 1f       	adc	r23, r23
    12ba:	88 1f       	adc	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	4a 95       	dec	r20
    12c0:	d1 f7       	brne	.-12     	; 0x12b6 <micros+0x3c>
}
    12c2:	08 95       	ret

000012c4 <delay>:

void delay(unsigned long ms)
{
    12c4:	8f 92       	push	r8
    12c6:	9f 92       	push	r9
    12c8:	af 92       	push	r10
    12ca:	bf 92       	push	r11
    12cc:	cf 92       	push	r12
    12ce:	df 92       	push	r13
    12d0:	ef 92       	push	r14
    12d2:	ff 92       	push	r15
    12d4:	6b 01       	movw	r12, r22
    12d6:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    12d8:	d0 df       	rcall	.-96     	; 0x127a <micros>
    12da:	4b 01       	movw	r8, r22
    12dc:	5c 01       	movw	r10, r24

	while (ms > 0) {
    12de:	c1 14       	cp	r12, r1
    12e0:	d1 04       	cpc	r13, r1
    12e2:	e1 04       	cpc	r14, r1
    12e4:	f1 04       	cpc	r15, r1
		yield();
    12e6:	f1 f0       	breq	.+60     	; 0x1324 <delay+0x60>
		while ( ms > 0 && (micros() - start) >= 1000) {
    12e8:	fc d6       	rcall	.+3576   	; 0x20e2 <yield>
    12ea:	c7 df       	rcall	.-114    	; 0x127a <micros>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	88 19       	sub	r24, r8
    12f2:	99 09       	sbc	r25, r9
    12f4:	aa 09       	sbc	r26, r10
    12f6:	bb 09       	sbc	r27, r11
    12f8:	88 3e       	cpi	r24, 0xE8	; 232
    12fa:	93 40       	sbci	r25, 0x03	; 3
    12fc:	a1 05       	cpc	r26, r1
    12fe:	b1 05       	cpc	r27, r1
    1300:	70 f3       	brcs	.-36     	; 0x12de <delay+0x1a>
			ms--;
    1302:	21 e0       	ldi	r18, 0x01	; 1
    1304:	c2 1a       	sub	r12, r18
    1306:	d1 08       	sbc	r13, r1
    1308:	e1 08       	sbc	r14, r1
    130a:	f1 08       	sbc	r15, r1
			start += 1000;
    130c:	88 ee       	ldi	r24, 0xE8	; 232
    130e:	88 0e       	add	r8, r24
    1310:	83 e0       	ldi	r24, 0x03	; 3
    1312:	98 1e       	adc	r9, r24
    1314:	a1 1c       	adc	r10, r1
    1316:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    1318:	c1 14       	cp	r12, r1
    131a:	d1 04       	cpc	r13, r1
    131c:	e1 04       	cpc	r14, r1
    131e:	f1 04       	cpc	r15, r1
    1320:	21 f7       	brne	.-56     	; 0x12ea <delay+0x26>
    1322:	dd cf       	rjmp	.-70     	; 0x12de <delay+0x1a>
			ms--;
			start += 1000;
		}
	}
}
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	08 95       	ret

00001336 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    1336:	82 30       	cpi	r24, 0x02	; 2
    1338:	91 05       	cpc	r25, r1
    133a:	38 f0       	brcs	.+14     	; 0x134a <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    133c:	88 0f       	add	r24, r24
    133e:	99 1f       	adc	r25, r25
    1340:	88 0f       	add	r24, r24
    1342:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    1344:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <delayMicroseconds+0x10>
    134a:	08 95       	ret

0000134c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    134c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    134e:	84 b5       	in	r24, 0x24	; 36
    1350:	82 60       	ori	r24, 0x02	; 2
    1352:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    1354:	84 b5       	in	r24, 0x24	; 36
    1356:	81 60       	ori	r24, 0x01	; 1
    1358:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    135a:	85 b5       	in	r24, 0x25	; 37
    135c:	82 60       	ori	r24, 0x02	; 2
    135e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1360:	85 b5       	in	r24, 0x25	; 37
    1362:	81 60       	ori	r24, 0x01	; 1
    1364:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    1366:	ee e6       	ldi	r30, 0x6E	; 110
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	81 60       	ori	r24, 0x01	; 1
    136e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1370:	e1 e8       	ldi	r30, 0x81	; 129
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1376:	80 81       	ld	r24, Z
    1378:	82 60       	ori	r24, 0x02	; 2
    137a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    137c:	80 81       	ld	r24, Z
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1382:	e0 e8       	ldi	r30, 0x80	; 128
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	81 60       	ori	r24, 0x01	; 1
    138a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    138c:	e1 eb       	ldi	r30, 0xB1	; 177
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	84 60       	ori	r24, 0x04	; 4
    1394:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1396:	e0 eb       	ldi	r30, 0xB0	; 176
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	81 60       	ori	r24, 0x01	; 1
    139e:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    13a0:	e1 e9       	ldi	r30, 0x91	; 145
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	82 60       	ori	r24, 0x02	; 2
    13a8:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    13aa:	80 81       	ld	r24, Z
    13ac:	81 60       	ori	r24, 0x01	; 1
    13ae:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    13b0:	e0 e9       	ldi	r30, 0x90	; 144
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    13ba:	e1 ea       	ldi	r30, 0xA1	; 161
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    13c4:	80 81       	ld	r24, Z
    13c6:	81 60       	ori	r24, 0x01	; 1
    13c8:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    13ca:	e0 ea       	ldi	r30, 0xA0	; 160
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	81 60       	ori	r24, 0x01	; 1
    13d2:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    13d4:	e1 e2       	ldi	r30, 0x21	; 33
    13d6:	f1 e0       	ldi	r31, 0x01	; 1
    13d8:	80 81       	ld	r24, Z
    13da:	82 60       	ori	r24, 0x02	; 2
    13dc:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    13de:	80 81       	ld	r24, Z
    13e0:	81 60       	ori	r24, 0x01	; 1
    13e2:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    13e4:	e0 e2       	ldi	r30, 0x20	; 32
    13e6:	f1 e0       	ldi	r31, 0x01	; 1
    13e8:	80 81       	ld	r24, Z
    13ea:	81 60       	ori	r24, 0x01	; 1
    13ec:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    13ee:	ea e7       	ldi	r30, 0x7A	; 122
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	84 60       	ori	r24, 0x04	; 4
    13f6:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    13f8:	80 81       	ld	r24, Z
    13fa:	82 60       	ori	r24, 0x02	; 2
    13fc:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    13fe:	80 81       	ld	r24, Z
    1400:	81 60       	ori	r24, 0x01	; 1
    1402:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1404:	80 81       	ld	r24, Z
    1406:	80 68       	ori	r24, 0x80	; 128
    1408:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    140a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    140e:	08 95       	ret

00001410 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	fc 01       	movw	r30, r24
    1414:	31 97       	sbiw	r30, 0x01	; 1
    1416:	e2 31       	cpi	r30, 0x12	; 18
    1418:	f1 05       	cpc	r31, r1
    141a:	08 f0       	brcs	.+2      	; 0x141e <turnOffPWM+0xe>
    141c:	4e c0       	rjmp	.+156    	; 0x14ba <turnOffPWM+0xaa>
    141e:	88 27       	eor	r24, r24
    1420:	ee 58       	subi	r30, 0x8E	; 142
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	8f 4f       	sbci	r24, 0xFF	; 255
    1426:	0c 94 a5 13 	jmp	0x274a	; 0x274a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    142a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    142e:	8f 77       	andi	r24, 0x7F	; 127
    1430:	03 c0       	rjmp	.+6      	; 0x1438 <turnOffPWM+0x28>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1432:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1436:	8f 7d       	andi	r24, 0xDF	; 223
    1438:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    143c:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    143e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
    1442:	87 7f       	andi	r24, 0xF7	; 247
    1444:	f9 cf       	rjmp	.-14     	; 0x1438 <turnOffPWM+0x28>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1446:	84 b5       	in	r24, 0x24	; 36
    1448:	8f 77       	andi	r24, 0x7F	; 127
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <turnOffPWM+0x40>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    144c:	84 b5       	in	r24, 0x24	; 36
    144e:	8f 7d       	andi	r24, 0xDF	; 223
    1450:	84 bd       	out	0x24, r24	; 36
    1452:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1454:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1458:	8f 77       	andi	r24, 0x7F	; 127
    145a:	03 c0       	rjmp	.+6      	; 0x1462 <turnOffPWM+0x52>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    145c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1460:	8f 7d       	andi	r24, 0xDF	; 223
    1462:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7000b0>
    1466:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    1468:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    146c:	8f 77       	andi	r24, 0x7F	; 127
    146e:	07 c0       	rjmp	.+14     	; 0x147e <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    1470:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1474:	8f 7d       	andi	r24, 0xDF	; 223
    1476:	03 c0       	rjmp	.+6      	; 0x147e <turnOffPWM+0x6e>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    1478:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    147c:	87 7f       	andi	r24, 0xF7	; 247
    147e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x700090>
    1482:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    1484:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1488:	8f 77       	andi	r24, 0x7F	; 127
    148a:	07 c0       	rjmp	.+14     	; 0x149a <turnOffPWM+0x8a>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    148c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1490:	8f 7d       	andi	r24, 0xDF	; 223
    1492:	03 c0       	rjmp	.+6      	; 0x149a <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    1494:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    1498:	87 7f       	andi	r24, 0xF7	; 247
    149a:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
    149e:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    14a0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	07 c0       	rjmp	.+14     	; 0x14b6 <turnOffPWM+0xa6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    14a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14ac:	8f 7d       	andi	r24, 0xDF	; 223
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <turnOffPWM+0xa6>
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    14b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14b4:	87 7f       	andi	r24, 0xF7	; 247
    14b6:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
    14ba:	08 95       	ret

000014bc <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    14bc:	cf 93       	push	r28
    14be:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	fc 01       	movw	r30, r24
    14c4:	e2 5b       	subi	r30, 0xB2	; 178
    14c6:	fe 4f       	sbci	r31, 0xFE	; 254
    14c8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    14ca:	fc 01       	movw	r30, r24
    14cc:	ec 56       	subi	r30, 0x6C	; 108
    14ce:	fe 4f       	sbci	r31, 0xFE	; 254
    14d0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    14d2:	88 23       	and	r24, r24
    14d4:	61 f1       	breq	.+88     	; 0x152e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	88 0f       	add	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	fc 01       	movw	r30, r24
    14de:	e2 5f       	subi	r30, 0xF2	; 242
    14e0:	fd 4f       	sbci	r31, 0xFD	; 253
    14e2:	c5 91       	lpm	r28, Z+
    14e4:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    14e6:	fc 01       	movw	r30, r24
    14e8:	ec 50       	subi	r30, 0x0C	; 12
    14ea:	fe 4f       	sbci	r31, 0xFE	; 254
    14ec:	a5 91       	lpm	r26, Z+
    14ee:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    14f0:	61 11       	cpse	r22, r1
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    14f4:	9f b7       	in	r25, 0x3f	; 63
                cli();
    14f6:	f8 94       	cli
		*reg &= ~bit;
    14f8:	88 81       	ld	r24, Y
    14fa:	20 95       	com	r18
    14fc:	82 23       	and	r24, r18
    14fe:	88 83       	st	Y, r24
		*out &= ~bit;
    1500:	ec 91       	ld	r30, X
    1502:	2e 23       	and	r18, r30
    1504:	0b c0       	rjmp	.+22     	; 0x151c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    1506:	62 30       	cpi	r22, 0x02	; 2
    1508:	61 f4       	brne	.+24     	; 0x1522 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    150a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    150c:	f8 94       	cli
		*reg &= ~bit;
    150e:	88 81       	ld	r24, Y
    1510:	32 2f       	mov	r19, r18
    1512:	30 95       	com	r19
    1514:	83 23       	and	r24, r19
    1516:	88 83       	st	Y, r24
		*out |= bit;
    1518:	ec 91       	ld	r30, X
    151a:	2e 2b       	or	r18, r30
    151c:	2c 93       	st	X, r18
		SREG = oldSREG;
    151e:	9f bf       	out	0x3f, r25	; 63
    1520:	06 c0       	rjmp	.+12     	; 0x152e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    1522:	8f b7       	in	r24, 0x3f	; 63
                cli();
    1524:	f8 94       	cli
		*reg |= bit;
    1526:	e8 81       	ld	r30, Y
    1528:	2e 2b       	or	r18, r30
    152a:	28 83       	st	Y, r18
		SREG = oldSREG;
    152c:	8f bf       	out	0x3f, r24	; 63
	}
}
    152e:	df 91       	pop	r29
    1530:	cf 91       	pop	r28
    1532:	08 95       	ret

00001534 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1534:	1f 93       	push	r17
    1536:	cf 93       	push	r28
    1538:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	f9 01       	movw	r30, r18
    1540:	e8 5f       	subi	r30, 0xF8	; 248
    1542:	fe 4f       	sbci	r31, 0xFE	; 254
    1544:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    1546:	f9 01       	movw	r30, r18
    1548:	e2 5b       	subi	r30, 0xB2	; 178
    154a:	fe 4f       	sbci	r31, 0xFE	; 254
    154c:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    154e:	f9 01       	movw	r30, r18
    1550:	ec 56       	subi	r30, 0x6C	; 108
    1552:	fe 4f       	sbci	r31, 0xFE	; 254
    1554:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1556:	cc 23       	and	r28, r28
    1558:	b9 f0       	breq	.+46     	; 0x1588 <digitalWrite+0x54>
    155a:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    155c:	81 11       	cpse	r24, r1
    155e:	58 df       	rcall	.-336    	; 0x1410 <turnOffPWM>

	out = portOutputRegister(port);
    1560:	ec 2f       	mov	r30, r28
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	ee 0f       	add	r30, r30
    1566:	ff 1f       	adc	r31, r31
    1568:	ec 50       	subi	r30, 0x0C	; 12
    156a:	fe 4f       	sbci	r31, 0xFE	; 254
    156c:	a5 91       	lpm	r26, Z+
    156e:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    1570:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1572:	f8 94       	cli

	if (val == LOW) {
    1574:	11 11       	cpse	r17, r1
    1576:	04 c0       	rjmp	.+8      	; 0x1580 <digitalWrite+0x4c>
		*out &= ~bit;
    1578:	8c 91       	ld	r24, X
    157a:	d0 95       	com	r29
    157c:	d8 23       	and	r29, r24
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <digitalWrite+0x50>
	} else {
		*out |= bit;
    1580:	ec 91       	ld	r30, X
    1582:	de 2b       	or	r29, r30
    1584:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    1586:	9f bf       	out	0x3f, r25	; 63
}
    1588:	df 91       	pop	r29
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	08 95       	ret

00001590 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	f9 01       	movw	r30, r18
    159a:	e8 5f       	subi	r30, 0xF8	; 248
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    15a0:	f9 01       	movw	r30, r18
    15a2:	e2 5b       	subi	r30, 0xB2	; 178
    15a4:	fe 4f       	sbci	r31, 0xFE	; 254
    15a6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    15a8:	f9 01       	movw	r30, r18
    15aa:	ec 56       	subi	r30, 0x6C	; 108
    15ac:	fe 4f       	sbci	r31, 0xFE	; 254
    15ae:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    15b0:	cc 23       	and	r28, r28
    15b2:	89 f0       	breq	.+34     	; 0x15d6 <digitalRead+0x46>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    15b4:	81 11       	cpse	r24, r1
    15b6:	2c df       	rcall	.-424    	; 0x1410 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    15b8:	ec 2f       	mov	r30, r28
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	e6 52       	subi	r30, 0x26	; 38
    15c2:	fe 4f       	sbci	r31, 0xFE	; 254
    15c4:	a5 91       	lpm	r26, Z+
    15c6:	b4 91       	lpm	r27, Z
    15c8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    15ca:	ed 23       	and	r30, r29
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	21 f4       	brne	.+8      	; 0x15da <digitalRead+0x4a>
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <digitalRead+0x4a>
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	08 95       	ret

000015e0 <_ZN6StringD1Ev>:
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	00 97       	sbiw	r24, 0x00	; 0
    15e8:	11 f0       	breq	.+4      	; 0x15ee <_ZN6StringD1Ev+0xe>
    15ea:	0c 94 45 14 	jmp	0x288a	; 0x288a <free>
    15ee:	08 95       	ret

000015f0 <_ZN6String10invalidateEv>:
    15f0:	cf 93       	push	r28
    15f2:	df 93       	push	r29
    15f4:	ec 01       	movw	r28, r24
    15f6:	88 81       	ld	r24, Y
    15f8:	99 81       	ldd	r25, Y+1	; 0x01
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	11 f0       	breq	.+4      	; 0x1602 <_ZN6String10invalidateEv+0x12>
    15fe:	0e 94 45 14 	call	0x288a	; 0x288a <free>
    1602:	19 82       	std	Y+1, r1	; 0x01
    1604:	18 82       	st	Y, r1
    1606:	1d 82       	std	Y+5, r1	; 0x05
    1608:	1c 82       	std	Y+4, r1	; 0x04
    160a:	1b 82       	std	Y+3, r1	; 0x03
    160c:	1a 82       	std	Y+2, r1	; 0x02
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	08 95       	ret

00001614 <_ZN6String12changeBufferEj>:
    1614:	0f 93       	push	r16
    1616:	1f 93       	push	r17
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
    161e:	8b 01       	movw	r16, r22
    1620:	6f 5f       	subi	r22, 0xFF	; 255
    1622:	7f 4f       	sbci	r23, 0xFF	; 255
    1624:	88 81       	ld	r24, Y
    1626:	99 81       	ldd	r25, Y+1	; 0x01
    1628:	0e 94 ce 14 	call	0x299c	; 0x299c <realloc>
    162c:	00 97       	sbiw	r24, 0x00	; 0
    162e:	31 f0       	breq	.+12     	; 0x163c <_ZN6String12changeBufferEj+0x28>
    1630:	99 83       	std	Y+1, r25	; 0x01
    1632:	88 83       	st	Y, r24
    1634:	1b 83       	std	Y+3, r17	; 0x03
    1636:	0a 83       	std	Y+2, r16	; 0x02
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	01 c0       	rjmp	.+2      	; 0x163e <_ZN6String12changeBufferEj+0x2a>
    163c:	80 e0       	ldi	r24, 0x00	; 0
    163e:	df 91       	pop	r29
    1640:	cf 91       	pop	r28
    1642:	1f 91       	pop	r17
    1644:	0f 91       	pop	r16
    1646:	08 95       	ret

00001648 <_ZN6String7reserveEj>:
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	ec 01       	movw	r28, r24
    164e:	88 81       	ld	r24, Y
    1650:	99 81       	ldd	r25, Y+1	; 0x01
    1652:	89 2b       	or	r24, r25
    1654:	29 f0       	breq	.+10     	; 0x1660 <_ZN6String7reserveEj+0x18>
    1656:	8a 81       	ldd	r24, Y+2	; 0x02
    1658:	9b 81       	ldd	r25, Y+3	; 0x03
    165a:	86 17       	cp	r24, r22
    165c:	97 07       	cpc	r25, r23
    165e:	58 f4       	brcc	.+22     	; 0x1676 <_ZN6String7reserveEj+0x2e>
    1660:	ce 01       	movw	r24, r28
    1662:	d8 df       	rcall	.-80     	; 0x1614 <_ZN6String12changeBufferEj>
    1664:	88 23       	and	r24, r24
    1666:	41 f0       	breq	.+16     	; 0x1678 <_ZN6String7reserveEj+0x30>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	89 2b       	or	r24, r25
    166e:	19 f4       	brne	.+6      	; 0x1676 <_ZN6String7reserveEj+0x2e>
    1670:	e8 81       	ld	r30, Y
    1672:	f9 81       	ldd	r31, Y+1	; 0x01
    1674:	10 82       	st	Z, r1
    1676:	81 e0       	ldi	r24, 0x01	; 1
    1678:	df 91       	pop	r29
    167a:	cf 91       	pop	r28
    167c:	08 95       	ret

0000167e <_ZN6String4copyEPKcj>:
    167e:	ef 92       	push	r14
    1680:	ff 92       	push	r15
    1682:	0f 93       	push	r16
    1684:	1f 93       	push	r17
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ec 01       	movw	r28, r24
    168c:	7b 01       	movw	r14, r22
    168e:	8a 01       	movw	r16, r20
    1690:	ba 01       	movw	r22, r20
    1692:	da df       	rcall	.-76     	; 0x1648 <_ZN6String7reserveEj>
    1694:	81 11       	cpse	r24, r1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <_ZN6String4copyEPKcj+0x20>
    1698:	ce 01       	movw	r24, r28
    169a:	aa df       	rcall	.-172    	; 0x15f0 <_ZN6String10invalidateEv>
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <_ZN6String4copyEPKcj+0x2e>
    169e:	1d 83       	std	Y+5, r17	; 0x05
    16a0:	0c 83       	std	Y+4, r16	; 0x04
    16a2:	b7 01       	movw	r22, r14
    16a4:	88 81       	ld	r24, Y
    16a6:	99 81       	ldd	r25, Y+1	; 0x01
    16a8:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <strcpy>
    16ac:	ce 01       	movw	r24, r28
    16ae:	df 91       	pop	r29
    16b0:	cf 91       	pop	r28
    16b2:	1f 91       	pop	r17
    16b4:	0f 91       	pop	r16
    16b6:	ff 90       	pop	r15
    16b8:	ef 90       	pop	r14
    16ba:	08 95       	ret

000016bc <_ZN6StringC1EPKc>:
    16bc:	fc 01       	movw	r30, r24
    16be:	11 82       	std	Z+1, r1	; 0x01
    16c0:	10 82       	st	Z, r1
    16c2:	13 82       	std	Z+3, r1	; 0x03
    16c4:	12 82       	std	Z+2, r1	; 0x02
    16c6:	15 82       	std	Z+5, r1	; 0x05
    16c8:	14 82       	std	Z+4, r1	; 0x04
    16ca:	61 15       	cp	r22, r1
    16cc:	71 05       	cpc	r23, r1
    16ce:	49 f0       	breq	.+18     	; 0x16e2 <_ZN6StringC1EPKc+0x26>
    16d0:	fb 01       	movw	r30, r22
    16d2:	01 90       	ld	r0, Z+
    16d4:	00 20       	and	r0, r0
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <_ZN6StringC1EPKc+0x16>
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	af 01       	movw	r20, r30
    16dc:	46 1b       	sub	r20, r22
    16de:	57 0b       	sbc	r21, r23
    16e0:	ce cf       	rjmp	.-100    	; 0x167e <_ZN6String4copyEPKcj>
    16e2:	08 95       	ret

000016e4 <_ZN6StringaSEPKc>:
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	ec 01       	movw	r28, r24
    16ea:	61 15       	cp	r22, r1
    16ec:	71 05       	cpc	r23, r1
    16ee:	51 f0       	breq	.+20     	; 0x1704 <_ZN6StringaSEPKc+0x20>
    16f0:	fb 01       	movw	r30, r22
    16f2:	01 90       	ld	r0, Z+
    16f4:	00 20       	and	r0, r0
    16f6:	e9 f7       	brne	.-6      	; 0x16f2 <_ZN6StringaSEPKc+0xe>
    16f8:	31 97       	sbiw	r30, 0x01	; 1
    16fa:	af 01       	movw	r20, r30
    16fc:	46 1b       	sub	r20, r22
    16fe:	57 0b       	sbc	r21, r23
    1700:	be df       	rcall	.-132    	; 0x167e <_ZN6String4copyEPKcj>
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <_ZN6StringaSEPKc+0x22>
    1704:	75 df       	rcall	.-278    	; 0x15f0 <_ZN6String10invalidateEv>
    1706:	ce 01       	movw	r24, r28
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	08 95       	ret

0000170e <_ZN6StringC1Eih>:
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	cf 93       	push	r28
    1714:	df 93       	push	r29
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	62 97       	sbiw	r28, 0x12	; 18
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	8c 01       	movw	r16, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	11 82       	std	Z+1, r1	; 0x01
    172e:	10 82       	st	Z, r1
    1730:	13 82       	std	Z+3, r1	; 0x03
    1732:	12 82       	std	Z+2, r1	; 0x02
    1734:	15 82       	std	Z+5, r1	; 0x05
    1736:	14 82       	std	Z+4, r1	; 0x04
    1738:	50 e0       	ldi	r21, 0x00	; 0
    173a:	be 01       	movw	r22, r28
    173c:	6f 5f       	subi	r22, 0xFF	; 255
    173e:	7f 4f       	sbci	r23, 0xFF	; 255
    1740:	0e 94 e9 15 	call	0x2bd2	; 0x2bd2 <itoa>
    1744:	be 01       	movw	r22, r28
    1746:	6f 5f       	subi	r22, 0xFF	; 255
    1748:	7f 4f       	sbci	r23, 0xFF	; 255
    174a:	c8 01       	movw	r24, r16
    174c:	cb df       	rcall	.-106    	; 0x16e4 <_ZN6StringaSEPKc>
    174e:	62 96       	adiw	r28, 0x12	; 18
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <_ZNK6String11lastIndexOfERKS_j>:
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	7b 01       	movw	r14, r22
    177a:	8a 01       	movw	r16, r20
    177c:	fb 01       	movw	r30, r22
    177e:	44 81       	ldd	r20, Z+4	; 0x04
    1780:	55 81       	ldd	r21, Z+5	; 0x05
    1782:	41 15       	cp	r20, r1
    1784:	51 05       	cpc	r21, r1
    1786:	61 f1       	breq	.+88     	; 0x17e0 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    1788:	fc 01       	movw	r30, r24
    178a:	24 81       	ldd	r18, Z+4	; 0x04
    178c:	35 81       	ldd	r19, Z+5	; 0x05
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	31 f1       	breq	.+76     	; 0x17e0 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    1794:	24 17       	cp	r18, r20
    1796:	35 07       	cpc	r19, r21
    1798:	18 f1       	brcs	.+70     	; 0x17e0 <_ZNK6String11lastIndexOfERKS_j+0x7c>
    179a:	02 17       	cp	r16, r18
    179c:	13 07       	cpc	r17, r19
    179e:	18 f0       	brcs	.+6      	; 0x17a6 <_ZNK6String11lastIndexOfERKS_j+0x42>
    17a0:	89 01       	movw	r16, r18
    17a2:	01 50       	subi	r16, 0x01	; 1
    17a4:	11 09       	sbc	r17, r1
    17a6:	fc 01       	movw	r30, r24
    17a8:	a0 80       	ld	r10, Z
    17aa:	b1 80       	ldd	r11, Z+1	; 0x01
    17ac:	c5 01       	movw	r24, r10
    17ae:	df ef       	ldi	r29, 0xFF	; 255
    17b0:	cf ef       	ldi	r28, 0xFF	; 255
    17b2:	65 01       	movw	r12, r10
    17b4:	c0 0e       	add	r12, r16
    17b6:	d1 1e       	adc	r13, r17
    17b8:	c8 16       	cp	r12, r24
    17ba:	d9 06       	cpc	r13, r25
    17bc:	a0 f0       	brcs	.+40     	; 0x17e6 <_ZNK6String11lastIndexOfERKS_j+0x82>
    17be:	f7 01       	movw	r30, r14
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <strstr>
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	69 f0       	breq	.+26     	; 0x17e6 <_ZNK6String11lastIndexOfERKS_j+0x82>
    17cc:	9c 01       	movw	r18, r24
    17ce:	2a 19       	sub	r18, r10
    17d0:	3b 09       	sbc	r19, r11
    17d2:	02 17       	cp	r16, r18
    17d4:	13 07       	cpc	r17, r19
    17d6:	10 f0       	brcs	.+4      	; 0x17dc <_ZNK6String11lastIndexOfERKS_j+0x78>
    17d8:	d2 2f       	mov	r29, r18
    17da:	c3 2f       	mov	r28, r19
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	ec cf       	rjmp	.-40     	; 0x17b8 <_ZNK6String11lastIndexOfERKS_j+0x54>
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	9f ef       	ldi	r25, 0xFF	; 255
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <_ZNK6String11lastIndexOfERKS_j+0x86>
    17e6:	8d 2f       	mov	r24, r29
    17e8:	9c 2f       	mov	r25, r28
    17ea:	df 91       	pop	r29
    17ec:	cf 91       	pop	r28
    17ee:	1f 91       	pop	r17
    17f0:	0f 91       	pop	r16
    17f2:	ff 90       	pop	r15
    17f4:	ef 90       	pop	r14
    17f6:	df 90       	pop	r13
    17f8:	cf 90       	pop	r12
    17fa:	bf 90       	pop	r11
    17fc:	af 90       	pop	r10
    17fe:	08 95       	ret

00001800 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    1800:	2f 92       	push	r2
    1802:	3f 92       	push	r3
    1804:	4f 92       	push	r4
    1806:	5f 92       	push	r5
    1808:	6f 92       	push	r6
    180a:	7f 92       	push	r7
    180c:	8f 92       	push	r8
    180e:	9f 92       	push	r9
    1810:	af 92       	push	r10
    1812:	bf 92       	push	r11
    1814:	cf 92       	push	r12
    1816:	df 92       	push	r13
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
	if (len == 0 || find.len == 0) return;
    1824:	fc 01       	movw	r30, r24
    1826:	44 80       	ldd	r4, Z+4	; 0x04
    1828:	55 80       	ldd	r5, Z+5	; 0x05
    182a:	41 14       	cp	r4, r1
    182c:	51 04       	cpc	r5, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <_ZN6String7replaceERKS_S1_+0x32>
    1830:	cc c0       	rjmp	.+408    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
    1832:	fb 01       	movw	r30, r22
    1834:	84 80       	ldd	r8, Z+4	; 0x04
    1836:	95 80       	ldd	r9, Z+5	; 0x05
    1838:	81 14       	cp	r8, r1
    183a:	91 04       	cpc	r9, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <_ZN6String7replaceERKS_S1_+0x40>
    183e:	c5 c0       	rjmp	.+394    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
    1840:	7a 01       	movw	r14, r20
    1842:	6b 01       	movw	r12, r22
    1844:	8c 01       	movw	r16, r24
	int diff = replace.len - find.len;
    1846:	fa 01       	movw	r30, r20
    1848:	64 80       	ldd	r6, Z+4	; 0x04
    184a:	75 80       	ldd	r7, Z+5	; 0x05
    184c:	68 18       	sub	r6, r8
    184e:	79 08       	sbc	r7, r9
	char *readFrom = buffer;
    1850:	fc 01       	movw	r30, r24
    1852:	c0 81       	ld	r28, Z
    1854:	d1 81       	ldd	r29, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    1856:	61 14       	cp	r6, r1
    1858:	71 04       	cpc	r7, r1
    185a:	b9 f4       	brne	.+46     	; 0x188a <_ZN6String7replaceERKS_S1_+0x8a>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    185c:	f6 01       	movw	r30, r12
    185e:	60 81       	ld	r22, Z
    1860:	71 81       	ldd	r23, Z+1	; 0x01
    1862:	ce 01       	movw	r24, r28
    1864:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <strstr>
    1868:	ec 01       	movw	r28, r24
    186a:	00 97       	sbiw	r24, 0x00	; 0
    186c:	09 f4       	brne	.+2      	; 0x1870 <_ZN6String7replaceERKS_S1_+0x70>
    186e:	ad c0       	rjmp	.+346    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
			memcpy(foundAt, replace.buffer, replace.len);
    1870:	f7 01       	movw	r30, r14
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	44 81       	ldd	r20, Z+4	; 0x04
    1878:	55 81       	ldd	r21, Z+5	; 0x05
    187a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <memcpy>
			readFrom = foundAt + replace.len;
    187e:	f7 01       	movw	r30, r14
    1880:	84 81       	ldd	r24, Z+4	; 0x04
    1882:	95 81       	ldd	r25, Z+5	; 0x05
    1884:	c8 0f       	add	r28, r24
    1886:	d9 1f       	adc	r29, r25
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1888:	e9 cf       	rjmp	.-46     	; 0x185c <_ZN6String7replaceERKS_S1_+0x5c>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    188a:	77 fe       	sbrs	r7, 7
    188c:	44 c0       	rjmp	.+136    	; 0x1916 <_ZN6String7replaceERKS_S1_+0x116>
    188e:	5e 01       	movw	r10, r28
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1890:	f6 01       	movw	r30, r12
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	c5 01       	movw	r24, r10
    1898:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <strstr>
    189c:	2c 01       	movw	r4, r24
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	21 f1       	breq	.+72     	; 0x18ea <_ZN6String7replaceERKS_S1_+0xea>
			unsigned int n = foundAt - readFrom;
    18a2:	4c 01       	movw	r8, r24
    18a4:	8a 18       	sub	r8, r10
    18a6:	9b 08       	sbc	r9, r11
			memcpy(writeTo, readFrom, n);
    18a8:	a4 01       	movw	r20, r8
    18aa:	b5 01       	movw	r22, r10
    18ac:	ce 01       	movw	r24, r28
    18ae:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <memcpy>
			writeTo += n;
    18b2:	c8 0d       	add	r28, r8
    18b4:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    18b6:	f7 01       	movw	r30, r14
    18b8:	60 81       	ld	r22, Z
    18ba:	71 81       	ldd	r23, Z+1	; 0x01
    18bc:	44 81       	ldd	r20, Z+4	; 0x04
    18be:	55 81       	ldd	r21, Z+5	; 0x05
    18c0:	ce 01       	movw	r24, r28
    18c2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <memcpy>
			writeTo += replace.len;
    18c6:	f7 01       	movw	r30, r14
    18c8:	84 81       	ldd	r24, Z+4	; 0x04
    18ca:	95 81       	ldd	r25, Z+5	; 0x05
    18cc:	c8 0f       	add	r28, r24
    18ce:	d9 1f       	adc	r29, r25
			readFrom = foundAt + find.len;
    18d0:	f6 01       	movw	r30, r12
    18d2:	a4 80       	ldd	r10, Z+4	; 0x04
    18d4:	b5 80       	ldd	r11, Z+5	; 0x05
    18d6:	a4 0c       	add	r10, r4
    18d8:	b5 1c       	adc	r11, r5
			len += diff;
    18da:	f8 01       	movw	r30, r16
    18dc:	84 81       	ldd	r24, Z+4	; 0x04
    18de:	95 81       	ldd	r25, Z+5	; 0x05
    18e0:	86 0d       	add	r24, r6
    18e2:	97 1d       	adc	r25, r7
    18e4:	95 83       	std	Z+5, r25	; 0x05
    18e6:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    18e8:	d3 cf       	rjmp	.-90     	; 0x1890 <_ZN6String7replaceERKS_S1_+0x90>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    18ea:	b5 01       	movw	r22, r10
    18ec:	ce 01       	movw	r24, r28
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	bf 90       	pop	r11
    1900:	af 90       	pop	r10
    1902:	9f 90       	pop	r9
    1904:	8f 90       	pop	r8
    1906:	7f 90       	pop	r7
    1908:	6f 90       	pop	r6
    190a:	5f 90       	pop	r5
    190c:	4f 90       	pop	r4
    190e:	3f 90       	pop	r3
    1910:	2f 90       	pop	r2
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    1912:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <strcpy>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1916:	fb 01       	movw	r30, r22
    1918:	20 80       	ld	r2, Z
    191a:	31 80       	ldd	r3, Z+1	; 0x01
    191c:	52 01       	movw	r10, r4
    191e:	b1 01       	movw	r22, r2
    1920:	ce 01       	movw	r24, r28
    1922:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <strstr>
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	31 f0       	breq	.+12     	; 0x1936 <_ZN6String7replaceERKS_S1_+0x136>
			readFrom = foundAt + find.len;
    192a:	ec 01       	movw	r28, r24
    192c:	c8 0d       	add	r28, r8
    192e:	d9 1d       	adc	r29, r9
			size += diff;
    1930:	a6 0c       	add	r10, r6
    1932:	b7 1c       	adc	r11, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    1934:	f4 cf       	rjmp	.-24     	; 0x191e <_ZN6String7replaceERKS_S1_+0x11e>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    1936:	a4 14       	cp	r10, r4
    1938:	b5 04       	cpc	r11, r5
    193a:	09 f4       	brne	.+2      	; 0x193e <_ZN6String7replaceERKS_S1_+0x13e>
    193c:	46 c0       	rjmp	.+140    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    193e:	f8 01       	movw	r30, r16
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	93 81       	ldd	r25, Z+3	; 0x03
    1944:	8a 15       	cp	r24, r10
    1946:	9b 05       	cpc	r25, r11
    1948:	28 f4       	brcc	.+10     	; 0x1954 <_ZN6String7replaceERKS_S1_+0x154>
    194a:	b5 01       	movw	r22, r10
    194c:	c8 01       	movw	r24, r16
    194e:	62 de       	rcall	.-828    	; 0x1614 <_ZN6String12changeBufferEj>
    1950:	88 23       	and	r24, r24
    1952:	d9 f1       	breq	.+118    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
		int index = len - 1;
    1954:	f8 01       	movw	r30, r16
    1956:	44 81       	ldd	r20, Z+4	; 0x04
    1958:	55 81       	ldd	r21, Z+5	; 0x05
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
    195a:	41 50       	subi	r20, 0x01	; 1
    195c:	51 09       	sbc	r21, r1
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    195e:	57 fd       	sbrc	r21, 7
    1960:	34 c0       	rjmp	.+104    	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
    1962:	b6 01       	movw	r22, r12
    1964:	c8 01       	movw	r24, r16
    1966:	fe de       	rcall	.-516    	; 0x1764 <_ZNK6String11lastIndexOfERKS_j>
    1968:	ec 01       	movw	r28, r24
    196a:	97 fd       	sbrc	r25, 7
    196c:	2e c0       	rjmp	.+92     	; 0x19ca <_ZN6String7replaceERKS_S1_+0x1ca>
			readFrom = buffer + index + find.len;
    196e:	f6 01       	movw	r30, r12
    1970:	24 81       	ldd	r18, Z+4	; 0x04
    1972:	35 81       	ldd	r19, Z+5	; 0x05
    1974:	28 0f       	add	r18, r24
    1976:	39 1f       	adc	r19, r25
    1978:	f8 01       	movw	r30, r16
    197a:	80 81       	ld	r24, Z
    197c:	91 81       	ldd	r25, Z+1	; 0x01
    197e:	82 0f       	add	r24, r18
    1980:	93 1f       	adc	r25, r19
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    1982:	44 81       	ldd	r20, Z+4	; 0x04
    1984:	55 81       	ldd	r21, Z+5	; 0x05
    1986:	42 1b       	sub	r20, r18
    1988:	53 0b       	sbc	r21, r19
    198a:	bc 01       	movw	r22, r24
    198c:	86 0d       	add	r24, r6
    198e:	97 1d       	adc	r25, r7
    1990:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <memmove>
			len += diff;
    1994:	f8 01       	movw	r30, r16
    1996:	84 81       	ldd	r24, Z+4	; 0x04
    1998:	95 81       	ldd	r25, Z+5	; 0x05
    199a:	86 0d       	add	r24, r6
    199c:	97 1d       	adc	r25, r7
    199e:	95 83       	std	Z+5, r25	; 0x05
    19a0:	84 83       	std	Z+4, r24	; 0x04
			buffer[len] = 0;
    19a2:	20 81       	ld	r18, Z
    19a4:	31 81       	ldd	r19, Z+1	; 0x01
    19a6:	f9 01       	movw	r30, r18
    19a8:	e8 0f       	add	r30, r24
    19aa:	f9 1f       	adc	r31, r25
    19ac:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    19ae:	f8 01       	movw	r30, r16
    19b0:	80 81       	ld	r24, Z
    19b2:	91 81       	ldd	r25, Z+1	; 0x01
    19b4:	f7 01       	movw	r30, r14
    19b6:	60 81       	ld	r22, Z
    19b8:	71 81       	ldd	r23, Z+1	; 0x01
    19ba:	44 81       	ldd	r20, Z+4	; 0x04
    19bc:	55 81       	ldd	r21, Z+5	; 0x05
    19be:	8c 0f       	add	r24, r28
    19c0:	9d 1f       	adc	r25, r29
    19c2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <memcpy>
			index--;
    19c6:	ae 01       	movw	r20, r28
    19c8:	c8 cf       	rjmp	.-112    	; 0x195a <_ZN6String7replaceERKS_S1_+0x15a>
		}
	}
}
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	3f 90       	pop	r3
    19ec:	2f 90       	pop	r2
    19ee:	08 95       	ret

000019f0 <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj>:
    19f0:	9b 01       	movw	r18, r22
    19f2:	77 70       	andi	r23, 0x07	; 7
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	33 ff       	sbrs	r19, 3
    19fa:	09 c0       	rjmp	.+18     	; 0x1a0e <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj+0x1e>
    19fc:	0e 94 92 03 	call	0x724	; 0x724 <__floatunsisf>
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	60 e0       	ldi	r22, 0x00	; 0
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	cb 01       	movw	r24, r22
    1a0a:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__subsf3>
    1a0e:	0c 94 92 03 	jmp	0x724	; 0x724 <__floatunsisf>

00001a12 <_ZN16Adafruit_AMG88xx5writeEhPhh>:
    1a12:	ef 92       	push	r14
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	c6 2f       	mov	r28, r22
    1a20:	7a 01       	movw	r14, r20
    1a22:	02 2f       	mov	r16, r18
    1a24:	fc 01       	movw	r30, r24
    1a26:	60 81       	ld	r22, Z
    1a28:	85 ef       	ldi	r24, 0xF5	; 245
    1a2a:	95 e0       	ldi	r25, 0x05	; 5
    1a2c:	d7 d2       	rcall	.+1454   	; 0x1fdc <_ZN7TwoWire17beginTransmissionEh>
    1a2e:	6c 2f       	mov	r22, r28
    1a30:	85 ef       	ldi	r24, 0xF5	; 245
    1a32:	95 e0       	ldi	r25, 0x05	; 5
    1a34:	86 d2       	rcall	.+1292   	; 0x1f42 <_ZN7TwoWire5writeEh>
    1a36:	e7 01       	movw	r28, r14
    1a38:	10 e0       	ldi	r17, 0x00	; 0
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	8e 19       	sub	r24, r14
    1a3e:	9f 09       	sbc	r25, r15
    1a40:	80 17       	cp	r24, r16
    1a42:	91 07       	cpc	r25, r17
    1a44:	2c f4       	brge	.+10     	; 0x1a50 <_ZN16Adafruit_AMG88xx5writeEhPhh+0x3e>
    1a46:	69 91       	ld	r22, Y+
    1a48:	85 ef       	ldi	r24, 0xF5	; 245
    1a4a:	95 e0       	ldi	r25, 0x05	; 5
    1a4c:	7a d2       	rcall	.+1268   	; 0x1f42 <_ZN7TwoWire5writeEh>
    1a4e:	f5 cf       	rjmp	.-22     	; 0x1a3a <_ZN16Adafruit_AMG88xx5writeEhPhh+0x28>
    1a50:	85 ef       	ldi	r24, 0xF5	; 245
    1a52:	95 e0       	ldi	r25, 0x05	; 5
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	3b c3       	rjmp	.+1654   	; 0x20d8 <_ZN7TwoWire15endTransmissionEv>

00001a62 <_ZN16Adafruit_AMG88xx6write8Ehh>:
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
    1a66:	1f 92       	push	r1
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	49 83       	std	Y+1, r20	; 0x01
    1a6e:	21 e0       	ldi	r18, 0x01	; 1
    1a70:	ae 01       	movw	r20, r28
    1a72:	4f 5f       	subi	r20, 0xFF	; 255
    1a74:	5f 4f       	sbci	r21, 0xFF	; 255
    1a76:	cd df       	rcall	.-102    	; 0x1a12 <_ZN16Adafruit_AMG88xx5writeEhPhh>
    1a78:	0f 90       	pop	r0
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	08 95       	ret

00001a80 <_ZN16Adafruit_AMG88xx16disableInterruptEv>:
    1a80:	fc 01       	movw	r30, r24
    1a82:	24 81       	ldd	r18, Z+4	; 0x04
    1a84:	2e 7f       	andi	r18, 0xFE	; 254
    1a86:	24 83       	std	Z+4, r18	; 0x04
    1a88:	21 fb       	bst	r18, 1
    1a8a:	44 27       	eor	r20, r20
    1a8c:	40 f9       	bld	r20, 0
    1a8e:	50 e0       	ldi	r21, 0x00	; 0
    1a90:	44 0f       	add	r20, r20
    1a92:	55 1f       	adc	r21, r21
    1a94:	63 e0       	ldi	r22, 0x03	; 3
    1a96:	e5 cf       	rjmp	.-54     	; 0x1a62 <_ZN16Adafruit_AMG88xx6write8Ehh>

00001a98 <_ZN16Adafruit_AMG88xx5beginEh>:
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	ec 01       	movw	r28, r24
    1a9e:	68 83       	st	Y, r22
    1aa0:	85 ef       	ldi	r24, 0xF5	; 245
    1aa2:	95 e0       	ldi	r25, 0x05	; 5
    1aa4:	8c d2       	rcall	.+1304   	; 0x1fbe <_ZN7TwoWire5beginEv>
    1aa6:	19 82       	std	Y+1, r1	; 0x01
    1aa8:	40 e0       	ldi	r20, 0x00	; 0
    1aaa:	60 e0       	ldi	r22, 0x00	; 0
    1aac:	ce 01       	movw	r24, r28
    1aae:	d9 df       	rcall	.-78     	; 0x1a62 <_ZN16Adafruit_AMG88xx6write8Ehh>
    1ab0:	8f e3       	ldi	r24, 0x3F	; 63
    1ab2:	8a 83       	std	Y+2, r24	; 0x02
    1ab4:	4f e3       	ldi	r20, 0x3F	; 63
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	ce 01       	movw	r24, r28
    1aba:	d3 df       	rcall	.-90     	; 0x1a62 <_ZN16Adafruit_AMG88xx6write8Ehh>
    1abc:	ce 01       	movw	r24, r28
    1abe:	e0 df       	rcall	.-64     	; 0x1a80 <_ZN16Adafruit_AMG88xx16disableInterruptEv>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	8e 7f       	andi	r24, 0xFE	; 254
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    1ac6:	40 e0       	ldi	r20, 0x00	; 0
    1ac8:	62 e0       	ldi	r22, 0x02	; 2
    1aca:	ce 01       	movw	r24, r28
    1acc:	ca df       	rcall	.-108    	; 0x1a62 <_ZN16Adafruit_AMG88xx6write8Ehh>
    1ace:	64 e6       	ldi	r22, 0x64	; 100
    1ad0:	70 e0       	ldi	r23, 0x00	; 0
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	f6 db       	rcall	.-2068   	; 0x12c4 <delay>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	08 95       	ret

00001ae0 <_ZN16Adafruit_AMG88xx4readEhPhh>:
    1ae0:	6f 92       	push	r6
    1ae2:	7f 92       	push	r7
    1ae4:	8f 92       	push	r8
    1ae6:	9f 92       	push	r9
    1ae8:	af 92       	push	r10
    1aea:	bf 92       	push	r11
    1aec:	cf 92       	push	r12
    1aee:	df 92       	push	r13
    1af0:	ef 92       	push	r14
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	8c 01       	movw	r16, r24
    1afe:	66 2e       	mov	r6, r22
    1b00:	6a 01       	movw	r12, r20
    1b02:	72 2e       	mov	r7, r18
    1b04:	c0 e0       	ldi	r28, 0x00	; 0
    1b06:	c7 15       	cp	r28, r7
    1b08:	78 f5       	brcc	.+94     	; 0x1b68 <_ZN16Adafruit_AMG88xx4readEhPhh+0x88>
    1b0a:	d7 2d       	mov	r29, r7
    1b0c:	dc 1b       	sub	r29, r28
    1b0e:	d1 32       	cpi	r29, 0x21	; 33
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <_ZN16Adafruit_AMG88xx4readEhPhh+0x34>
    1b12:	d0 e2       	ldi	r29, 0x20	; 32
    1b14:	f8 01       	movw	r30, r16
    1b16:	60 81       	ld	r22, Z
    1b18:	85 ef       	ldi	r24, 0xF5	; 245
    1b1a:	95 e0       	ldi	r25, 0x05	; 5
    1b1c:	5f d2       	rcall	.+1214   	; 0x1fdc <_ZN7TwoWire17beginTransmissionEh>
    1b1e:	6c 2f       	mov	r22, r28
    1b20:	66 0d       	add	r22, r6
    1b22:	85 ef       	ldi	r24, 0xF5	; 245
    1b24:	95 e0       	ldi	r25, 0x05	; 5
    1b26:	0d d2       	rcall	.+1050   	; 0x1f42 <_ZN7TwoWire5writeEh>
    1b28:	85 ef       	ldi	r24, 0xF5	; 245
    1b2a:	95 e0       	ldi	r25, 0x05	; 5
    1b2c:	d5 d2       	rcall	.+1450   	; 0x20d8 <_ZN7TwoWire15endTransmissionEv>
    1b2e:	4d 2f       	mov	r20, r29
    1b30:	f8 01       	movw	r30, r16
    1b32:	60 81       	ld	r22, Z
    1b34:	85 ef       	ldi	r24, 0xF5	; 245
    1b36:	95 e0       	ldi	r25, 0x05	; 5
    1b38:	cd d2       	rcall	.+1434   	; 0x20d4 <_ZN7TwoWire11requestFromEhh>
    1b3a:	81 2c       	mov	r8, r1
    1b3c:	91 2c       	mov	r9, r1
    1b3e:	ad 2e       	mov	r10, r29
    1b40:	b1 2c       	mov	r11, r1
    1b42:	8c 2f       	mov	r24, r28
    1b44:	88 0d       	add	r24, r8
    1b46:	8a 14       	cp	r8, r10
    1b48:	9b 04       	cpc	r9, r11
    1b4a:	14 f0       	brlt	.+4      	; 0x1b50 <_ZN16Adafruit_AMG88xx4readEhPhh+0x70>
    1b4c:	cd 0f       	add	r28, r29
    1b4e:	db cf       	rjmp	.-74     	; 0x1b06 <_ZN16Adafruit_AMG88xx4readEhPhh+0x26>
    1b50:	76 01       	movw	r14, r12
    1b52:	e8 0e       	add	r14, r24
    1b54:	f1 1c       	adc	r15, r1
    1b56:	85 ef       	ldi	r24, 0xF5	; 245
    1b58:	95 e0       	ldi	r25, 0x05	; 5
    1b5a:	6d d1       	rcall	.+730    	; 0x1e36 <_ZN7TwoWire4readEv>
    1b5c:	f7 01       	movw	r30, r14
    1b5e:	80 83       	st	Z, r24
    1b60:	ff ef       	ldi	r31, 0xFF	; 255
    1b62:	8f 1a       	sub	r8, r31
    1b64:	9f 0a       	sbc	r9, r31
    1b66:	ed cf       	rjmp	.-38     	; 0x1b42 <_ZN16Adafruit_AMG88xx4readEhPhh+0x62>
    1b68:	df 91       	pop	r29
    1b6a:	cf 91       	pop	r28
    1b6c:	1f 91       	pop	r17
    1b6e:	0f 91       	pop	r16
    1b70:	ff 90       	pop	r15
    1b72:	ef 90       	pop	r14
    1b74:	df 90       	pop	r13
    1b76:	cf 90       	pop	r12
    1b78:	bf 90       	pop	r11
    1b7a:	af 90       	pop	r10
    1b7c:	9f 90       	pop	r9
    1b7e:	8f 90       	pop	r8
    1b80:	7f 90       	pop	r7
    1b82:	6f 90       	pop	r6
    1b84:	08 95       	ret

00001b86 <_ZN16Adafruit_AMG88xx14readThermistorEv>:
    1b86:	0f 93       	push	r16
    1b88:	1f 93       	push	r17
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	1f 92       	push	r1
    1b90:	1f 92       	push	r1
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
    1b96:	8c 01       	movw	r16, r24
    1b98:	22 e0       	ldi	r18, 0x02	; 2
    1b9a:	ae 01       	movw	r20, r28
    1b9c:	4f 5f       	subi	r20, 0xFF	; 255
    1b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba0:	6e e0       	ldi	r22, 0x0E	; 14
    1ba2:	9e df       	rcall	.-196    	; 0x1ae0 <_ZN16Adafruit_AMG88xx4readEhPhh>
    1ba4:	69 81       	ldd	r22, Y+1	; 0x01
    1ba6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ba8:	c8 01       	movw	r24, r16
    1baa:	22 df       	rcall	.-444    	; 0x19f0 <_ZN16Adafruit_AMG88xx18signedMag12ToFloatEj>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	5d e3       	ldi	r21, 0x3D	; 61
    1bb4:	37 d5       	rcall	.+2670   	; 0x2624 <__mulsf3>
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

00001bc4 <_ZN16Adafruit_AMG88xx10readPixelsEPfh>:
    1bc4:	8f 92       	push	r8
    1bc6:	9f 92       	push	r9
    1bc8:	af 92       	push	r10
    1bca:	bf 92       	push	r11
    1bcc:	cf 92       	push	r12
    1bce:	df 92       	push	r13
    1bd0:	ef 92       	push	r14
    1bd2:	ff 92       	push	r15
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    1be0:	f6 2e       	mov	r15, r22
    1be2:	17 2f       	mov	r17, r23
    1be4:	04 2f       	mov	r16, r20
    1be6:	8d b6       	in	r8, 0x3d	; 61
    1be8:	9e b6       	in	r9, 0x3e	; 62
    1bea:	24 2f       	mov	r18, r20
    1bec:	22 0f       	add	r18, r18
    1bee:	46 fd       	sbrc	r20, 6
    1bf0:	20 e8       	ldi	r18, 0x80	; 128
    1bf2:	4d b7       	in	r20, 0x3d	; 61
    1bf4:	5e b7       	in	r21, 0x3e	; 62
    1bf6:	42 1b       	sub	r20, r18
    1bf8:	51 09       	sbc	r21, r1
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	5e bf       	out	0x3e, r21	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	4d bf       	out	0x3d, r20	; 61
    1c04:	ed b7       	in	r30, 0x3d	; 61
    1c06:	fe b7       	in	r31, 0x3e	; 62
    1c08:	31 96       	adiw	r30, 0x01	; 1
    1c0a:	5f 01       	movw	r10, r30
    1c0c:	af 01       	movw	r20, r30
    1c0e:	60 e8       	ldi	r22, 0x80	; 128
    1c10:	67 df       	rcall	.-306    	; 0x1ae0 <_ZN16Adafruit_AMG88xx4readEhPhh>
    1c12:	cf 2c       	mov	r12, r15
    1c14:	d1 2e       	mov	r13, r17
    1c16:	e1 2c       	mov	r14, r1
    1c18:	f1 2c       	mov	r15, r1
    1c1a:	10 e0       	ldi	r17, 0x00	; 0
    1c1c:	e0 16       	cp	r14, r16
    1c1e:	f1 06       	cpc	r15, r17
    1c20:	54 f5       	brge	.+84     	; 0x1c76 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0xb2>
    1c22:	8e 2d       	mov	r24, r14
    1c24:	88 0f       	add	r24, r24
    1c26:	f5 01       	movw	r30, r10
    1c28:	e8 0f       	add	r30, r24
    1c2a:	f1 1d       	adc	r31, r1
    1c2c:	61 81       	ldd	r22, Z+1	; 0x01
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	76 2f       	mov	r23, r22
    1c32:	66 27       	eor	r22, r22
    1c34:	80 81       	ld	r24, Z
    1c36:	68 2b       	or	r22, r24
    1c38:	94 e0       	ldi	r25, 0x04	; 4
    1c3a:	66 0f       	add	r22, r22
    1c3c:	77 1f       	adc	r23, r23
    1c3e:	9a 95       	dec	r25
    1c40:	e1 f7       	brne	.-8      	; 0x1c3a <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x76>
    1c42:	24 e0       	ldi	r18, 0x04	; 4
    1c44:	75 95       	asr	r23
    1c46:	67 95       	ror	r22
    1c48:	2a 95       	dec	r18
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x80>
    1c4c:	07 2e       	mov	r0, r23
    1c4e:	00 0c       	add	r0, r0
    1c50:	88 0b       	sbc	r24, r24
    1c52:	99 0b       	sbc	r25, r25
    1c54:	0e 94 94 03 	call	0x728	; 0x728 <__floatsisf>
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	40 e8       	ldi	r20, 0x80	; 128
    1c5e:	5e e3       	ldi	r21, 0x3E	; 62
    1c60:	e1 d4       	rcall	.+2498   	; 0x2624 <__mulsf3>
    1c62:	f6 01       	movw	r30, r12
    1c64:	61 93       	st	Z+, r22
    1c66:	71 93       	st	Z+, r23
    1c68:	81 93       	st	Z+, r24
    1c6a:	91 93       	st	Z+, r25
    1c6c:	6f 01       	movw	r12, r30
    1c6e:	ff ef       	ldi	r31, 0xFF	; 255
    1c70:	ef 1a       	sub	r14, r31
    1c72:	ff 0a       	sbc	r15, r31
    1c74:	d3 cf       	rjmp	.-90     	; 0x1c1c <_ZN16Adafruit_AMG88xx10readPixelsEPfh+0x58>
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	9e be       	out	0x3e, r9	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	8d be       	out	0x3d, r8	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	08 95       	ret

00001c9a <_ZN6HCSR04C1Eiiii>:
    1c9a:	af 92       	push	r10
    1c9c:	bf 92       	push	r11
    1c9e:	cf 92       	push	r12
    1ca0:	df 92       	push	r13
    1ca2:	ef 92       	push	r14
    1ca4:	ff 92       	push	r15
    1ca6:	0f 93       	push	r16
    1ca8:	1f 93       	push	r17
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	ec 01       	movw	r28, r24
    1cb0:	e6 2e       	mov	r14, r22
    1cb2:	a7 2e       	mov	r10, r23
    1cb4:	f4 2e       	mov	r15, r20
    1cb6:	b5 2e       	mov	r11, r21
    1cb8:	69 01       	movw	r12, r18
    1cba:	8f ef       	ldi	r24, 0xFF	; 255
    1cbc:	9f ef       	ldi	r25, 0xFF	; 255
    1cbe:	9d 83       	std	Y+5, r25	; 0x05
    1cc0:	8c 83       	std	Y+4, r24	; 0x04
    1cc2:	9f 83       	std	Y+7, r25	; 0x07
    1cc4:	8e 83       	std	Y+6, r24	; 0x06
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	8e 2d       	mov	r24, r14
    1cca:	f8 db       	rcall	.-2064   	; 0x14bc <pinMode>
    1ccc:	60 e0       	ldi	r22, 0x00	; 0
    1cce:	8f 2d       	mov	r24, r15
    1cd0:	f5 db       	rcall	.-2070   	; 0x14bc <pinMode>
    1cd2:	e8 82       	st	Y, r14
    1cd4:	a9 82       	std	Y+1, r10	; 0x01
    1cd6:	fa 82       	std	Y+2, r15	; 0x02
    1cd8:	bb 82       	std	Y+3, r11	; 0x03
    1cda:	dd 82       	std	Y+5, r13	; 0x05
    1cdc:	cc 82       	std	Y+4, r12	; 0x04
    1cde:	1f 83       	std	Y+7, r17	; 0x07
    1ce0:	0e 83       	std	Y+6, r16	; 0x06
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	bf 90       	pop	r11
    1cf4:	af 90       	pop	r10
    1cf6:	08 95       	ret

00001cf8 <_ZN6HCSR0418echoInMicrosecondsEv>:
    1cf8:	cf 92       	push	r12
    1cfa:	df 92       	push	r13
    1cfc:	ef 92       	push	r14
    1cfe:	ff 92       	push	r15
    1d00:	cf 93       	push	r28
    1d02:	df 93       	push	r29
    1d04:	ec 01       	movw	r28, r24
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	88 81       	ld	r24, Y
    1d0a:	14 dc       	rcall	.-2008   	; 0x1534 <digitalWrite>
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	12 db       	rcall	.-2524   	; 0x1336 <delayMicroseconds>
    1d12:	61 e0       	ldi	r22, 0x01	; 1
    1d14:	88 81       	ld	r24, Y
    1d16:	0e dc       	rcall	.-2020   	; 0x1534 <digitalWrite>
    1d18:	8a e0       	ldi	r24, 0x0A	; 10
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0c db       	rcall	.-2536   	; 0x1336 <delayMicroseconds>
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	88 81       	ld	r24, Y
    1d22:	08 dc       	rcall	.-2032   	; 0x1534 <digitalWrite>
    1d24:	8a 81       	ldd	r24, Y+2	; 0x02
    1d26:	34 dc       	rcall	.-1944   	; 0x1590 <digitalRead>
    1d28:	89 2b       	or	r24, r25
    1d2a:	e1 f3       	breq	.-8      	; 0x1d24 <_ZN6HCSR0418echoInMicrosecondsEv+0x2c>
    1d2c:	a6 da       	rcall	.-2740   	; 0x127a <micros>
    1d2e:	6b 01       	movw	r12, r22
    1d30:	7c 01       	movw	r14, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	2d dc       	rcall	.-1958   	; 0x1590 <digitalRead>
    1d36:	01 97       	sbiw	r24, 0x01	; 1
    1d38:	e1 f3       	breq	.-8      	; 0x1d32 <_ZN6HCSR0418echoInMicrosecondsEv+0x3a>
    1d3a:	9f da       	rcall	.-2754   	; 0x127a <micros>
    1d3c:	cb 01       	movw	r24, r22
    1d3e:	8c 19       	sub	r24, r12
    1d40:	9d 09       	sbc	r25, r13
    1d42:	df 91       	pop	r29
    1d44:	cf 91       	pop	r28
    1d46:	ff 90       	pop	r15
    1d48:	ef 90       	pop	r14
    1d4a:	df 90       	pop	r13
    1d4c:	cf 90       	pop	r12
    1d4e:	08 95       	ret

00001d50 <_ZN6HCSR0421distanceInMillimetersEv>:
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	ec 01       	movw	r28, r24
    1d56:	d0 df       	rcall	.-96     	; 0x1cf8 <_ZN6HCSR0418echoInMicrosecondsEv>
    1d58:	97 fd       	sbrc	r25, 7
    1d5a:	01 96       	adiw	r24, 0x01	; 1
    1d5c:	bc 01       	movw	r22, r24
    1d5e:	75 95       	asr	r23
    1d60:	67 95       	ror	r22
    1d62:	07 2e       	mov	r0, r23
    1d64:	00 0c       	add	r0, r0
    1d66:	88 0b       	sbc	r24, r24
    1d68:	99 0b       	sbc	r25, r25
    1d6a:	0e 94 94 03 	call	0x728	; 0x728 <__floatsisf>
    1d6e:	27 ee       	ldi	r18, 0xE7	; 231
    1d70:	3b ef       	ldi	r19, 0xFB	; 251
    1d72:	49 ea       	ldi	r20, 0xA9	; 169
    1d74:	5e e3       	ldi	r21, 0x3E	; 62
    1d76:	56 d4       	rcall	.+2220   	; 0x2624 <__mulsf3>
    1d78:	0e 94 61 03 	call	0x6c2	; 0x6c2 <__fixsfsi>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	4c 81       	ldd	r20, Y+4	; 0x04
    1d80:	5d 81       	ldd	r21, Y+5	; 0x05
    1d82:	4f 3f       	cpi	r20, 0xFF	; 255
    1d84:	af ef       	ldi	r26, 0xFF	; 255
    1d86:	5a 07       	cpc	r21, r26
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <_ZN6HCSR0421distanceInMillimetersEv+0x42>
    1d8a:	ee 81       	ldd	r30, Y+6	; 0x06
    1d8c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d8e:	31 96       	adiw	r30, 0x01	; 1
    1d90:	59 f0       	breq	.+22     	; 0x1da8 <_ZN6HCSR0421distanceInMillimetersEv+0x58>
    1d92:	42 17       	cp	r20, r18
    1d94:	53 07       	cpc	r21, r19
    1d96:	2c f4       	brge	.+10     	; 0x1da2 <_ZN6HCSR0421distanceInMillimetersEv+0x52>
    1d98:	4e 81       	ldd	r20, Y+6	; 0x06
    1d9a:	5f 81       	ldd	r21, Y+7	; 0x07
    1d9c:	24 17       	cp	r18, r20
    1d9e:	35 07       	cpc	r19, r21
    1da0:	1c f0       	brlt	.+6      	; 0x1da8 <_ZN6HCSR0421distanceInMillimetersEv+0x58>
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	9f ef       	ldi	r25, 0xFF	; 255
    1da6:	01 c0       	rjmp	.+2      	; 0x1daa <_ZN6HCSR0421distanceInMillimetersEv+0x5a>
    1da8:	cb 01       	movw	r24, r22
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <_ZN6HCSR048ToStringEv>:
    1db0:	ef 92       	push	r14
    1db2:	ff 92       	push	r15
    1db4:	0f 93       	push	r16
    1db6:	1f 93       	push	r17
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	2c 97       	sbiw	r28, 0x0c	; 12
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8c 01       	movw	r16, r24
    1dce:	7b 01       	movw	r14, r22
    1dd0:	61 e1       	ldi	r22, 0x11	; 17
    1dd2:	73 e0       	ldi	r23, 0x03	; 3
    1dd4:	73 dc       	rcall	.-1818   	; 0x16bc <_ZN6StringC1EPKc>
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	bb df       	rcall	.-138    	; 0x1d50 <_ZN6HCSR0421distanceInMillimetersEv>
    1dda:	4a e0       	ldi	r20, 0x0A	; 10
    1ddc:	bc 01       	movw	r22, r24
    1dde:	ce 01       	movw	r24, r28
    1de0:	07 96       	adiw	r24, 0x07	; 7
    1de2:	95 dc       	rcall	.-1750   	; 0x170e <_ZN6StringC1Eih>
    1de4:	6a e7       	ldi	r22, 0x7A	; 122
    1de6:	73 e0       	ldi	r23, 0x03	; 3
    1de8:	ce 01       	movw	r24, r28
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	67 dc       	rcall	.-1842   	; 0x16bc <_ZN6StringC1EPKc>
    1dee:	ae 01       	movw	r20, r28
    1df0:	49 5f       	subi	r20, 0xF9	; 249
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255
    1df4:	be 01       	movw	r22, r28
    1df6:	6f 5f       	subi	r22, 0xFF	; 255
    1df8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	01 dd       	rcall	.-1534   	; 0x1800 <_ZN6String7replaceERKS_S1_>
    1dfe:	ce 01       	movw	r24, r28
    1e00:	01 96       	adiw	r24, 0x01	; 1
    1e02:	ee db       	rcall	.-2084   	; 0x15e0 <_ZN6StringD1Ev>
    1e04:	ce 01       	movw	r24, r28
    1e06:	07 96       	adiw	r24, 0x07	; 7
    1e08:	eb db       	rcall	.-2090   	; 0x15e0 <_ZN6StringD1Ev>
    1e0a:	c8 01       	movw	r24, r16
    1e0c:	2c 96       	adiw	r28, 0x0c	; 12
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	08 95       	ret

00001e26 <_ZN7TwoWire9availableEv>:
    1e26:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	20 91 2a 06 	lds	r18, 0x062A	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1e30:	82 1b       	sub	r24, r18
    1e32:	91 09       	sbc	r25, r1
    1e34:	08 95       	ret

00001e36 <_ZN7TwoWire4readEv>:
    1e36:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1e3a:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1e3e:	98 17       	cp	r25, r24
    1e40:	50 f4       	brcc	.+20     	; 0x1e56 <_ZN7TwoWire4readEv+0x20>
    1e42:	e9 2f       	mov	r30, r25
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	e5 5d       	subi	r30, 0xD5	; 213
    1e48:	f9 4f       	sbci	r31, 0xF9	; 249
    1e4a:	20 81       	ld	r18, Z
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	9f 5f       	subi	r25, 0xFF	; 255
    1e50:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <_ZN7TwoWire4readEv+0x24>
    1e56:	2f ef       	ldi	r18, 0xFF	; 255
    1e58:	3f ef       	ldi	r19, 0xFF	; 255
    1e5a:	c9 01       	movw	r24, r18
    1e5c:	08 95       	ret

00001e5e <_ZN7TwoWire4peekEv>:
    1e5e:	e0 91 2a 06 	lds	r30, 0x062A	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1e62:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1e66:	e8 17       	cp	r30, r24
    1e68:	30 f4       	brcc	.+12     	; 0x1e76 <_ZN7TwoWire4peekEv+0x18>
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	e5 5d       	subi	r30, 0xD5	; 213
    1e6e:	f9 4f       	sbci	r31, 0xF9	; 249
    1e70:	80 81       	ld	r24, Z
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	08 95       	ret
    1e76:	8f ef       	ldi	r24, 0xFF	; 255
    1e78:	9f ef       	ldi	r25, 0xFF	; 255
    1e7a:	08 95       	ret

00001e7c <_ZN7TwoWire5flushEv>:
    1e7c:	08 95       	ret

00001e7e <_ZN7TwoWire16onReceiveServiceEPhi>:
    1e7e:	cf 93       	push	r28
    1e80:	df 93       	push	r29
    1e82:	ec 01       	movw	r28, r24
    1e84:	e0 91 01 06 	lds	r30, 0x0601	; 0x800601 <_ZN7TwoWire14user_onReceiveE>
    1e88:	f0 91 02 06 	lds	r31, 0x0602	; 0x800602 <_ZN7TwoWire14user_onReceiveE+0x1>
    1e8c:	30 97       	sbiw	r30, 0x00	; 0
    1e8e:	f1 f0       	breq	.+60     	; 0x1ecc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1e90:	90 91 2a 06 	lds	r25, 0x062A	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1e94:	80 91 29 06 	lds	r24, 0x0629	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1e98:	98 17       	cp	r25, r24
    1e9a:	c0 f0       	brcs	.+48     	; 0x1ecc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	29 2f       	mov	r18, r25
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	26 17       	cp	r18, r22
    1ea4:	37 07       	cpc	r19, r23
    1ea6:	54 f4       	brge	.+20     	; 0x1ebc <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    1ea8:	de 01       	movw	r26, r28
    1eaa:	a2 0f       	add	r26, r18
    1eac:	b3 1f       	adc	r27, r19
    1eae:	4c 91       	ld	r20, X
    1eb0:	d9 01       	movw	r26, r18
    1eb2:	a5 5d       	subi	r26, 0xD5	; 213
    1eb4:	b9 4f       	sbci	r27, 0xF9	; 249
    1eb6:	4c 93       	st	X, r20
    1eb8:	9f 5f       	subi	r25, 0xFF	; 255
    1eba:	f1 cf       	rjmp	.-30     	; 0x1e9e <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    1ebc:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1ec0:	60 93 29 06 	sts	0x0629, r22	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	df 91       	pop	r29
    1ec8:	cf 91       	pop	r28
    1eca:	19 94       	eijmp
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <_ZN7TwoWire16onRequestServiceEv>:
    1ed2:	e0 91 03 06 	lds	r30, 0x0603	; 0x800603 <_ZN7TwoWire14user_onRequestE>
    1ed6:	f0 91 04 06 	lds	r31, 0x0604	; 0x800604 <_ZN7TwoWire14user_onRequestE+0x1>
    1eda:	30 97       	sbiw	r30, 0x00	; 0
    1edc:	29 f0       	breq	.+10     	; 0x1ee8 <_ZN7TwoWire16onRequestServiceEv+0x16>
    1ede:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    1ee2:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1ee6:	19 94       	eijmp
    1ee8:	08 95       	ret

00001eea <_ZN7TwoWire5writeEPKhj>:
    1eea:	cf 92       	push	r12
    1eec:	df 92       	push	r13
    1eee:	ef 92       	push	r14
    1ef0:	ff 92       	push	r15
    1ef2:	0f 93       	push	r16
    1ef4:	1f 93       	push	r17
    1ef6:	cf 93       	push	r28
    1ef8:	df 93       	push	r29
    1efa:	7c 01       	movw	r14, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8a 01       	movw	r16, r20
    1f00:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <_ZN7TwoWire12transmittingE>
    1f04:	22 23       	and	r18, r18
    1f06:	89 f0       	breq	.+34     	; 0x1f2a <_ZN7TwoWire5writeEPKhj+0x40>
    1f08:	eb 01       	movw	r28, r22
    1f0a:	6b 01       	movw	r12, r22
    1f0c:	c4 0e       	add	r12, r20
    1f0e:	d5 1e       	adc	r13, r21
    1f10:	cc 15       	cp	r28, r12
    1f12:	dd 05       	cpc	r29, r13
    1f14:	61 f0       	breq	.+24     	; 0x1f2e <_ZN7TwoWire5writeEPKhj+0x44>
    1f16:	69 91       	ld	r22, Y+
    1f18:	d7 01       	movw	r26, r14
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	01 90       	ld	r0, Z+
    1f20:	f0 81       	ld	r31, Z
    1f22:	e0 2d       	mov	r30, r0
    1f24:	c7 01       	movw	r24, r14
    1f26:	19 95       	eicall
    1f28:	f3 cf       	rjmp	.-26     	; 0x1f10 <_ZN7TwoWire5writeEPKhj+0x26>
    1f2a:	64 2f       	mov	r22, r20
    1f2c:	95 d1       	rcall	.+810    	; 0x2258 <twi_transmit>
    1f2e:	c8 01       	movw	r24, r16
    1f30:	df 91       	pop	r29
    1f32:	cf 91       	pop	r28
    1f34:	1f 91       	pop	r17
    1f36:	0f 91       	pop	r16
    1f38:	ff 90       	pop	r15
    1f3a:	ef 90       	pop	r14
    1f3c:	df 90       	pop	r13
    1f3e:	cf 90       	pop	r12
    1f40:	08 95       	ret

00001f42 <_ZN7TwoWire5writeEh>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	1f 92       	push	r1
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	69 83       	std	Y+1, r22	; 0x01
    1f4e:	20 91 05 06 	lds	r18, 0x0605	; 0x800605 <_ZN7TwoWire12transmittingE>
    1f52:	22 23       	and	r18, r18
    1f54:	d1 f0       	breq	.+52     	; 0x1f8a <_ZN7TwoWire5writeEh+0x48>
    1f56:	20 91 06 06 	lds	r18, 0x0606	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1f5a:	20 32       	cpi	r18, 0x20	; 32
    1f5c:	40 f0       	brcs	.+16     	; 0x1f6e <_ZN7TwoWire5writeEh+0x2c>
    1f5e:	21 e0       	ldi	r18, 0x01	; 1
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	fc 01       	movw	r30, r24
    1f64:	33 83       	std	Z+3, r19	; 0x03
    1f66:	22 83       	std	Z+2, r18	; 0x02
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	14 c0       	rjmp	.+40     	; 0x1f96 <_ZN7TwoWire5writeEh+0x54>
    1f6e:	80 91 07 06 	lds	r24, 0x0607	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    1f72:	e8 2f       	mov	r30, r24
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	e8 5f       	subi	r30, 0xF8	; 248
    1f78:	f9 4f       	sbci	r31, 0xF9	; 249
    1f7a:	99 81       	ldd	r25, Y+1	; 0x01
    1f7c:	90 83       	st	Z, r25
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 07 06 	sts	0x0607, r24	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    1f84:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1f88:	04 c0       	rjmp	.+8      	; 0x1f92 <_ZN7TwoWire5writeEh+0x50>
    1f8a:	61 e0       	ldi	r22, 0x01	; 1
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	01 96       	adiw	r24, 0x01	; 1
    1f90:	63 d1       	rcall	.+710    	; 0x2258 <twi_transmit>
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	0f 90       	pop	r0
    1f98:	df 91       	pop	r29
    1f9a:	cf 91       	pop	r28
    1f9c:	08 95       	ret

00001f9e <_ZN7TwoWireC1Ev>:
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	13 82       	std	Z+3, r1	; 0x03
    1fa2:	12 82       	std	Z+2, r1	; 0x02
    1fa4:	88 ee       	ldi	r24, 0xE8	; 232
    1fa6:	93 e0       	ldi	r25, 0x03	; 3
    1fa8:	a0 e0       	ldi	r26, 0x00	; 0
    1faa:	b0 e0       	ldi	r27, 0x00	; 0
    1fac:	84 83       	std	Z+4, r24	; 0x04
    1fae:	95 83       	std	Z+5, r25	; 0x05
    1fb0:	a6 83       	std	Z+6, r26	; 0x06
    1fb2:	b7 83       	std	Z+7, r27	; 0x07
    1fb4:	8b e8       	ldi	r24, 0x8B	; 139
    1fb6:	93 e0       	ldi	r25, 0x03	; 3
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	08 95       	ret

00001fbe <_ZN7TwoWire5beginEv>:
    1fbe:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    1fc2:	10 92 29 06 	sts	0x0629, r1	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    1fc6:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    1fca:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1fce:	8a d0       	rcall	.+276    	; 0x20e4 <twi_init>
    1fd0:	89 e6       	ldi	r24, 0x69	; 105
    1fd2:	9f e0       	ldi	r25, 0x0F	; 15
    1fd4:	6e d1       	rcall	.+732    	; 0x22b2 <twi_attachSlaveTxEvent>
    1fd6:	8f e3       	ldi	r24, 0x3F	; 63
    1fd8:	9f e0       	ldi	r25, 0x0F	; 15
    1fda:	66 c1       	rjmp	.+716    	; 0x22a8 <twi_attachSlaveRxEvent>

00001fdc <_ZN7TwoWire17beginTransmissionEh>:
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <_ZN7TwoWire12transmittingE>
    1fe2:	60 93 28 06 	sts	0x0628, r22	; 0x800628 <_ZN7TwoWire9txAddressE>
    1fe6:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    1fea:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1fee:	08 95       	ret

00001ff0 <_ZN7TwoWire15endTransmissionEh>:
    1ff0:	0f 93       	push	r16
    1ff2:	06 2f       	mov	r16, r22
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	40 91 06 06 	lds	r20, 0x0606	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    1ffa:	68 e0       	ldi	r22, 0x08	; 8
    1ffc:	76 e0       	ldi	r23, 0x06	; 6
    1ffe:	80 91 28 06 	lds	r24, 0x0628	; 0x800628 <_ZN7TwoWire9txAddressE>
    2002:	d4 d0       	rcall	.+424    	; 0x21ac <twi_writeTo>
    2004:	10 92 07 06 	sts	0x0607, r1	; 0x800607 <_ZN7TwoWire13txBufferIndexE>
    2008:	10 92 06 06 	sts	0x0606, r1	; 0x800606 <_ZN7TwoWire14txBufferLengthE>
    200c:	10 92 05 06 	sts	0x0605, r1	; 0x800605 <_ZN7TwoWire12transmittingE>
    2010:	0f 91       	pop	r16
    2012:	08 95       	ret

00002014 <_ZN7TwoWire11requestFromEhhmhh>:
    2014:	4f 92       	push	r4
    2016:	5f 92       	push	r5
    2018:	6f 92       	push	r6
    201a:	7f 92       	push	r7
    201c:	af 92       	push	r10
    201e:	bf 92       	push	r11
    2020:	cf 92       	push	r12
    2022:	ef 92       	push	r14
    2024:	ff 92       	push	r15
    2026:	0f 93       	push	r16
    2028:	1f 93       	push	r17
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	5c 01       	movw	r10, r24
    2030:	f6 2e       	mov	r15, r22
    2032:	d4 2f       	mov	r29, r20
    2034:	28 01       	movw	r4, r16
    2036:	39 01       	movw	r6, r18
    2038:	ee 20       	and	r14, r14
    203a:	11 f1       	breq	.+68     	; 0x2080 <_ZN7TwoWire11requestFromEhhmhh+0x6c>
    203c:	cf df       	rcall	.-98     	; 0x1fdc <_ZN7TwoWire17beginTransmissionEh>
    203e:	ce 2d       	mov	r28, r14
    2040:	c4 30       	cpi	r28, 0x04	; 4
    2042:	08 f0       	brcs	.+2      	; 0x2046 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    2044:	c3 e0       	ldi	r28, 0x03	; 3
    2046:	c1 50       	subi	r28, 0x01	; 1
    2048:	c0 f0       	brcs	.+48     	; 0x207a <_ZN7TwoWire11requestFromEhhmhh+0x66>
    204a:	28 e0       	ldi	r18, 0x08	; 8
    204c:	c2 9f       	mul	r28, r18
    204e:	c0 01       	movw	r24, r0
    2050:	11 24       	eor	r1, r1
    2052:	a3 01       	movw	r20, r6
    2054:	92 01       	movw	r18, r4
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <_ZN7TwoWire11requestFromEhhmhh+0x4c>
    2058:	56 95       	lsr	r21
    205a:	47 95       	ror	r20
    205c:	37 95       	ror	r19
    205e:	27 95       	ror	r18
    2060:	8a 95       	dec	r24
    2062:	d2 f7       	brpl	.-12     	; 0x2058 <_ZN7TwoWire11requestFromEhhmhh+0x44>
    2064:	ca 01       	movw	r24, r20
    2066:	b9 01       	movw	r22, r18
    2068:	d5 01       	movw	r26, r10
    206a:	ed 91       	ld	r30, X+
    206c:	fc 91       	ld	r31, X
    206e:	01 90       	ld	r0, Z+
    2070:	f0 81       	ld	r31, Z
    2072:	e0 2d       	mov	r30, r0
    2074:	c5 01       	movw	r24, r10
    2076:	19 95       	eicall
    2078:	e6 cf       	rjmp	.-52     	; 0x2046 <_ZN7TwoWire11requestFromEhhmhh+0x32>
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	c5 01       	movw	r24, r10
    207e:	b8 df       	rcall	.-144    	; 0x1ff0 <_ZN7TwoWire15endTransmissionEh>
    2080:	4d 2f       	mov	r20, r29
    2082:	d1 32       	cpi	r29, 0x21	; 33
    2084:	08 f0       	brcs	.+2      	; 0x2088 <_ZN7TwoWire11requestFromEhhmhh+0x74>
    2086:	40 e2       	ldi	r20, 0x20	; 32
    2088:	2c 2d       	mov	r18, r12
    208a:	6b e2       	ldi	r22, 0x2B	; 43
    208c:	76 e0       	ldi	r23, 0x06	; 6
    208e:	8f 2d       	mov	r24, r15
    2090:	45 d0       	rcall	.+138    	; 0x211c <twi_readFrom>
    2092:	10 92 2a 06 	sts	0x062A, r1	; 0x80062a <_ZN7TwoWire13rxBufferIndexE>
    2096:	80 93 29 06 	sts	0x0629, r24	; 0x800629 <_ZN7TwoWire14rxBufferLengthE>
    209a:	df 91       	pop	r29
    209c:	cf 91       	pop	r28
    209e:	1f 91       	pop	r17
    20a0:	0f 91       	pop	r16
    20a2:	ff 90       	pop	r15
    20a4:	ef 90       	pop	r14
    20a6:	cf 90       	pop	r12
    20a8:	bf 90       	pop	r11
    20aa:	af 90       	pop	r10
    20ac:	7f 90       	pop	r7
    20ae:	6f 90       	pop	r6
    20b0:	5f 90       	pop	r5
    20b2:	4f 90       	pop	r4
    20b4:	08 95       	ret

000020b6 <_ZN7TwoWire11requestFromEhhh>:
    20b6:	cf 92       	push	r12
    20b8:	ef 92       	push	r14
    20ba:	0f 93       	push	r16
    20bc:	1f 93       	push	r17
    20be:	c2 2e       	mov	r12, r18
    20c0:	e1 2c       	mov	r14, r1
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	98 01       	movw	r18, r16
    20c8:	a5 df       	rcall	.-182    	; 0x2014 <_ZN7TwoWire11requestFromEhhmhh>
    20ca:	1f 91       	pop	r17
    20cc:	0f 91       	pop	r16
    20ce:	ef 90       	pop	r14
    20d0:	cf 90       	pop	r12
    20d2:	08 95       	ret

000020d4 <_ZN7TwoWire11requestFromEhh>:
    20d4:	21 e0       	ldi	r18, 0x01	; 1
    20d6:	ef cf       	rjmp	.-34     	; 0x20b6 <_ZN7TwoWire11requestFromEhhh>

000020d8 <_ZN7TwoWire15endTransmissionEv>:
    20d8:	61 e0       	ldi	r22, 0x01	; 1
    20da:	8a cf       	rjmp	.-236    	; 0x1ff0 <_ZN7TwoWire15endTransmissionEh>

000020dc <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
    20dc:	85 ef       	ldi	r24, 0xF5	; 245
    20de:	95 e0       	ldi	r25, 0x05	; 5
    20e0:	5e cf       	rjmp	.-324    	; 0x1f9e <_ZN7TwoWireC1Ev>

000020e2 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    20e2:	08 95       	ret

000020e4 <twi_init>:
    20e4:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <twi_state>
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <twi_sendStop>
    20ee:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <twi_inRepStart>
    20f2:	61 e0       	ldi	r22, 0x01	; 1
    20f4:	84 e1       	ldi	r24, 0x14	; 20
    20f6:	1e da       	rcall	.-3012   	; 0x1534 <digitalWrite>
    20f8:	61 e0       	ldi	r22, 0x01	; 1
    20fa:	85 e1       	ldi	r24, 0x15	; 21
    20fc:	1b da       	rcall	.-3018   	; 0x1534 <digitalWrite>
    20fe:	e9 eb       	ldi	r30, 0xB9	; 185
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8e 7f       	andi	r24, 0xFE	; 254
    2106:	80 83       	st	Z, r24
    2108:	80 81       	ld	r24, Z
    210a:	8d 7f       	andi	r24, 0xFD	; 253
    210c:	80 83       	st	Z, r24
    210e:	88 e4       	ldi	r24, 0x48	; 72
    2110:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2114:	85 e4       	ldi	r24, 0x45	; 69
    2116:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    211a:	08 95       	ret

0000211c <twi_readFrom>:
    211c:	41 32       	cpi	r20, 0x21	; 33
    211e:	08 f0       	brcs	.+2      	; 0x2122 <twi_readFrom+0x6>
    2120:	43 c0       	rjmp	.+134    	; 0x21a8 <twi_readFrom+0x8c>
    2122:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <twi_state>
    2126:	91 11       	cpse	r25, r1
    2128:	fc cf       	rjmp	.-8      	; 0x2122 <twi_readFrom+0x6>
    212a:	91 e0       	ldi	r25, 0x01	; 1
    212c:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <twi_state>
    2130:	20 93 b6 06 	sts	0x06B6, r18	; 0x8006b6 <twi_sendStop>
    2134:	2f ef       	ldi	r18, 0xFF	; 255
    2136:	20 93 4b 06 	sts	0x064B, r18	; 0x80064b <twi_error>
    213a:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <twi_masterBufferIndex>
    213e:	24 0f       	add	r18, r20
    2140:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <twi_masterBufferLength>
    2144:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <twi_slarw>
    2148:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <twi_slarw>
    214c:	88 0f       	add	r24, r24
    214e:	89 2b       	or	r24, r25
    2150:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <twi_slarw>
    2154:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <twi_inRepStart>
    2158:	81 30       	cpi	r24, 0x01	; 1
    215a:	61 f4       	brne	.+24     	; 0x2174 <twi_readFrom+0x58>
    215c:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <twi_inRepStart>
    2160:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <twi_slarw>
    2164:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2168:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    216c:	83 fd       	sbrc	r24, 3
    216e:	f8 cf       	rjmp	.-16     	; 0x2160 <twi_readFrom+0x44>
    2170:	85 ec       	ldi	r24, 0xC5	; 197
    2172:	01 c0       	rjmp	.+2      	; 0x2176 <twi_readFrom+0x5a>
    2174:	85 ee       	ldi	r24, 0xE5	; 229
    2176:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    217a:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <twi_state>
    217e:	81 30       	cpi	r24, 0x01	; 1
    2180:	e1 f3       	breq	.-8      	; 0x217a <twi_readFrom+0x5e>
    2182:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <twi_masterBufferIndex>
    2186:	84 17       	cp	r24, r20
    2188:	10 f4       	brcc	.+4      	; 0x218e <twi_readFrom+0x72>
    218a:	40 91 90 06 	lds	r20, 0x0690	; 0x800690 <twi_masterBufferIndex>
    218e:	a1 e9       	ldi	r26, 0x91	; 145
    2190:	b6 e0       	ldi	r27, 0x06	; 6
    2192:	96 2f       	mov	r25, r22
    2194:	fb 01       	movw	r30, r22
    2196:	8e 2f       	mov	r24, r30
    2198:	89 1b       	sub	r24, r25
    219a:	84 17       	cp	r24, r20
    219c:	18 f4       	brcc	.+6      	; 0x21a4 <twi_readFrom+0x88>
    219e:	8d 91       	ld	r24, X+
    21a0:	81 93       	st	Z+, r24
    21a2:	f9 cf       	rjmp	.-14     	; 0x2196 <twi_readFrom+0x7a>
    21a4:	84 2f       	mov	r24, r20
    21a6:	08 95       	ret
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	08 95       	ret

000021ac <twi_writeTo>:
    21ac:	0f 93       	push	r16
    21ae:	41 32       	cpi	r20, 0x21	; 33
    21b0:	08 f0       	brcs	.+2      	; 0x21b4 <twi_writeTo+0x8>
    21b2:	4a c0       	rjmp	.+148    	; 0x2248 <__stack+0x49>
    21b4:	90 91 b8 06 	lds	r25, 0x06B8	; 0x8006b8 <twi_state>
    21b8:	91 11       	cpse	r25, r1
    21ba:	fc cf       	rjmp	.-8      	; 0x21b4 <twi_writeTo+0x8>
    21bc:	32 e0       	ldi	r19, 0x02	; 2
    21be:	30 93 b8 06 	sts	0x06B8, r19	; 0x8006b8 <twi_state>
    21c2:	00 93 b6 06 	sts	0x06B6, r16	; 0x8006b6 <twi_sendStop>
    21c6:	3f ef       	ldi	r19, 0xFF	; 255
    21c8:	30 93 4b 06 	sts	0x064B, r19	; 0x80064b <twi_error>
    21cc:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <twi_masterBufferIndex>
    21d0:	40 93 8f 06 	sts	0x068F, r20	; 0x80068f <twi_masterBufferLength>
    21d4:	56 2f       	mov	r21, r22
    21d6:	a1 e9       	ldi	r26, 0x91	; 145
    21d8:	b6 e0       	ldi	r27, 0x06	; 6
    21da:	fb 01       	movw	r30, r22
    21dc:	3e 2f       	mov	r19, r30
    21de:	35 1b       	sub	r19, r21
    21e0:	34 17       	cp	r19, r20
    21e2:	18 f4       	brcc	.+6      	; 0x21ea <twi_writeTo+0x3e>
    21e4:	31 91       	ld	r19, Z+
    21e6:	3d 93       	st	X+, r19
    21e8:	f9 cf       	rjmp	.-14     	; 0x21dc <twi_writeTo+0x30>
    21ea:	10 92 b7 06 	sts	0x06B7, r1	; 0x8006b7 <twi_slarw>
    21ee:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <twi_slarw>
    21f2:	88 0f       	add	r24, r24
    21f4:	83 2b       	or	r24, r19
    21f6:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <twi_slarw>
    21fa:	80 91 b5 06 	lds	r24, 0x06B5	; 0x8006b5 <twi_inRepStart>
    21fe:	81 30       	cpi	r24, 0x01	; 1
    2200:	61 f4       	brne	.+24     	; 0x221a <__stack+0x1b>
    2202:	10 92 b5 06 	sts	0x06B5, r1	; 0x8006b5 <twi_inRepStart>
    2206:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <twi_slarw>
    220a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    220e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2212:	83 fd       	sbrc	r24, 3
    2214:	f8 cf       	rjmp	.-16     	; 0x2206 <__stack+0x7>
    2216:	85 ec       	ldi	r24, 0xC5	; 197
    2218:	01 c0       	rjmp	.+2      	; 0x221c <__stack+0x1d>
    221a:	85 ee       	ldi	r24, 0xE5	; 229
    221c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2220:	22 23       	and	r18, r18
    2222:	21 f0       	breq	.+8      	; 0x222c <__stack+0x2d>
    2224:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <twi_state>
    2228:	82 30       	cpi	r24, 0x02	; 2
    222a:	d1 f3       	breq	.-12     	; 0x2220 <__stack+0x21>
    222c:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <twi_error>
    2230:	8f 3f       	cpi	r24, 0xFF	; 255
    2232:	79 f0       	breq	.+30     	; 0x2252 <__stack+0x53>
    2234:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <twi_error>
    2238:	80 32       	cpi	r24, 0x20	; 32
    223a:	41 f0       	breq	.+16     	; 0x224c <__stack+0x4d>
    223c:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <twi_error>
    2240:	80 33       	cpi	r24, 0x30	; 48
    2242:	31 f0       	breq	.+12     	; 0x2250 <__stack+0x51>
    2244:	94 e0       	ldi	r25, 0x04	; 4
    2246:	05 c0       	rjmp	.+10     	; 0x2252 <__stack+0x53>
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	03 c0       	rjmp	.+6      	; 0x2252 <__stack+0x53>
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	01 c0       	rjmp	.+2      	; 0x2252 <__stack+0x53>
    2250:	93 e0       	ldi	r25, 0x03	; 3
    2252:	89 2f       	mov	r24, r25
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <twi_transmit>:
    2258:	40 91 6d 06 	lds	r20, 0x066D	; 0x80066d <twi_txBufferLength>
    225c:	26 2f       	mov	r18, r22
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	24 0f       	add	r18, r20
    2262:	31 1d       	adc	r19, r1
    2264:	21 32       	cpi	r18, 0x21	; 33
    2266:	31 05       	cpc	r19, r1
    2268:	dc f4       	brge	.+54     	; 0x22a0 <twi_transmit+0x48>
    226a:	20 91 b8 06 	lds	r18, 0x06B8	; 0x8006b8 <twi_state>
    226e:	24 30       	cpi	r18, 0x04	; 4
    2270:	c9 f4       	brne	.+50     	; 0x22a4 <twi_transmit+0x4c>
    2272:	fc 01       	movw	r30, r24
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	86 17       	cp	r24, r22
    227a:	58 f4       	brcc	.+22     	; 0x2292 <twi_transmit+0x3a>
    227c:	30 91 6d 06 	lds	r19, 0x066D	; 0x80066d <twi_txBufferLength>
    2280:	21 91       	ld	r18, Z+
    2282:	dc 01       	movw	r26, r24
    2284:	a1 59       	subi	r26, 0x91	; 145
    2286:	b9 4f       	sbci	r27, 0xF9	; 249
    2288:	a3 0f       	add	r26, r19
    228a:	b1 1d       	adc	r27, r1
    228c:	2c 93       	st	X, r18
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	f3 cf       	rjmp	.-26     	; 0x2278 <twi_transmit+0x20>
    2292:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <twi_txBufferLength>
    2296:	68 0f       	add	r22, r24
    2298:	60 93 6d 06 	sts	0x066D, r22	; 0x80066d <twi_txBufferLength>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	08 95       	ret
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	08 95       	ret
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	08 95       	ret

000022a8 <twi_attachSlaveRxEvent>:
    22a8:	90 93 b2 06 	sts	0x06B2, r25	; 0x8006b2 <twi_onSlaveReceive+0x1>
    22ac:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_onSlaveReceive>
    22b0:	08 95       	ret

000022b2 <twi_attachSlaveTxEvent>:
    22b2:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <twi_onSlaveTransmit+0x1>
    22b6:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <twi_onSlaveTransmit>
    22ba:	08 95       	ret

000022bc <twi_stop>:
    22bc:	85 ed       	ldi	r24, 0xD5	; 213
    22be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22c6:	84 fd       	sbrc	r24, 4
    22c8:	fc cf       	rjmp	.-8      	; 0x22c2 <twi_stop+0x6>
    22ca:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <twi_state>
    22ce:	08 95       	ret

000022d0 <twi_releaseBus>:
    22d0:	85 ec       	ldi	r24, 0xC5	; 197
    22d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    22d6:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <twi_state>
    22da:	08 95       	ret

000022dc <__vector_39>:
    22dc:	1f 92       	push	r1
    22de:	0f 92       	push	r0
    22e0:	0f b6       	in	r0, 0x3f	; 63
    22e2:	0f 92       	push	r0
    22e4:	11 24       	eor	r1, r1
    22e6:	0b b6       	in	r0, 0x3b	; 59
    22e8:	0f 92       	push	r0
    22ea:	2f 93       	push	r18
    22ec:	3f 93       	push	r19
    22ee:	4f 93       	push	r20
    22f0:	5f 93       	push	r21
    22f2:	6f 93       	push	r22
    22f4:	7f 93       	push	r23
    22f6:	8f 93       	push	r24
    22f8:	9f 93       	push	r25
    22fa:	af 93       	push	r26
    22fc:	bf 93       	push	r27
    22fe:	ef 93       	push	r30
    2300:	ff 93       	push	r31
    2302:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2306:	88 7f       	andi	r24, 0xF8	; 248
    2308:	80 36       	cpi	r24, 0x60	; 96
    230a:	09 f4       	brne	.+2      	; 0x230e <__vector_39+0x32>
    230c:	9d c0       	rjmp	.+314    	; 0x2448 <__vector_39+0x16c>
    230e:	70 f5       	brcc	.+92     	; 0x236c <__vector_39+0x90>
    2310:	88 32       	cpi	r24, 0x28	; 40
    2312:	09 f4       	brne	.+2      	; 0x2316 <__vector_39+0x3a>
    2314:	5c c0       	rjmp	.+184    	; 0x23ce <__vector_39+0xf2>
    2316:	90 f4       	brcc	.+36     	; 0x233c <__vector_39+0x60>
    2318:	80 31       	cpi	r24, 0x10	; 16
    231a:	09 f4       	brne	.+2      	; 0x231e <__vector_39+0x42>
    231c:	55 c0       	rjmp	.+170    	; 0x23c8 <__vector_39+0xec>
    231e:	38 f4       	brcc	.+14     	; 0x232e <__vector_39+0x52>
    2320:	88 23       	and	r24, r24
    2322:	09 f4       	brne	.+2      	; 0x2326 <__vector_39+0x4a>
    2324:	f3 c0       	rjmp	.+486    	; 0x250c <__vector_39+0x230>
    2326:	88 30       	cpi	r24, 0x08	; 8
    2328:	09 f4       	brne	.+2      	; 0x232c <__vector_39+0x50>
    232a:	4e c0       	rjmp	.+156    	; 0x23c8 <__vector_39+0xec>
    232c:	f2 c0       	rjmp	.+484    	; 0x2512 <__vector_39+0x236>
    232e:	88 31       	cpi	r24, 0x18	; 24
    2330:	09 f4       	brne	.+2      	; 0x2334 <__vector_39+0x58>
    2332:	4d c0       	rjmp	.+154    	; 0x23ce <__vector_39+0xf2>
    2334:	80 32       	cpi	r24, 0x20	; 32
    2336:	09 f4       	brne	.+2      	; 0x233a <__vector_39+0x5e>
    2338:	5e c0       	rjmp	.+188    	; 0x23f6 <__vector_39+0x11a>
    233a:	eb c0       	rjmp	.+470    	; 0x2512 <__vector_39+0x236>
    233c:	80 34       	cpi	r24, 0x40	; 64
    233e:	09 f4       	brne	.+2      	; 0x2342 <__vector_39+0x66>
    2340:	69 c0       	rjmp	.+210    	; 0x2414 <__vector_39+0x138>
    2342:	50 f4       	brcc	.+20     	; 0x2358 <__vector_39+0x7c>
    2344:	80 33       	cpi	r24, 0x30	; 48
    2346:	09 f4       	brne	.+2      	; 0x234a <__vector_39+0x6e>
    2348:	56 c0       	rjmp	.+172    	; 0x23f6 <__vector_39+0x11a>
    234a:	88 33       	cpi	r24, 0x38	; 56
    234c:	09 f0       	breq	.+2      	; 0x2350 <__vector_39+0x74>
    234e:	e1 c0       	rjmp	.+450    	; 0x2512 <__vector_39+0x236>
    2350:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_error>
    2354:	bd df       	rcall	.-134    	; 0x22d0 <twi_releaseBus>
    2356:	dd c0       	rjmp	.+442    	; 0x2512 <__vector_39+0x236>
    2358:	80 35       	cpi	r24, 0x50	; 80
    235a:	09 f4       	brne	.+2      	; 0x235e <__vector_39+0x82>
    235c:	4f c0       	rjmp	.+158    	; 0x23fc <__vector_39+0x120>
    235e:	88 35       	cpi	r24, 0x58	; 88
    2360:	09 f4       	brne	.+2      	; 0x2364 <__vector_39+0x88>
    2362:	5d c0       	rjmp	.+186    	; 0x241e <__vector_39+0x142>
    2364:	88 34       	cpi	r24, 0x48	; 72
    2366:	09 f0       	breq	.+2      	; 0x236a <__vector_39+0x8e>
    2368:	d4 c0       	rjmp	.+424    	; 0x2512 <__vector_39+0x236>
    236a:	d2 c0       	rjmp	.+420    	; 0x2510 <__vector_39+0x234>
    236c:	88 39       	cpi	r24, 0x98	; 152
    236e:	09 f4       	brne	.+2      	; 0x2372 <__vector_39+0x96>
    2370:	c3 c0       	rjmp	.+390    	; 0x24f8 <__vector_39+0x21c>
    2372:	a8 f4       	brcc	.+42     	; 0x239e <__vector_39+0xc2>
    2374:	88 37       	cpi	r24, 0x78	; 120
    2376:	09 f4       	brne	.+2      	; 0x237a <__vector_39+0x9e>
    2378:	67 c0       	rjmp	.+206    	; 0x2448 <__vector_39+0x16c>
    237a:	38 f4       	brcc	.+14     	; 0x238a <__vector_39+0xae>
    237c:	88 36       	cpi	r24, 0x68	; 104
    237e:	09 f4       	brne	.+2      	; 0x2382 <__vector_39+0xa6>
    2380:	63 c0       	rjmp	.+198    	; 0x2448 <__vector_39+0x16c>
    2382:	80 37       	cpi	r24, 0x70	; 112
    2384:	09 f4       	brne	.+2      	; 0x2388 <__vector_39+0xac>
    2386:	60 c0       	rjmp	.+192    	; 0x2448 <__vector_39+0x16c>
    2388:	c4 c0       	rjmp	.+392    	; 0x2512 <__vector_39+0x236>
    238a:	88 38       	cpi	r24, 0x88	; 136
    238c:	09 f4       	brne	.+2      	; 0x2390 <__vector_39+0xb4>
    238e:	b4 c0       	rjmp	.+360    	; 0x24f8 <__vector_39+0x21c>
    2390:	80 39       	cpi	r24, 0x90	; 144
    2392:	09 f4       	brne	.+2      	; 0x2396 <__vector_39+0xba>
    2394:	5f c0       	rjmp	.+190    	; 0x2454 <__vector_39+0x178>
    2396:	80 38       	cpi	r24, 0x80	; 128
    2398:	09 f0       	breq	.+2      	; 0x239c <__vector_39+0xc0>
    239a:	bb c0       	rjmp	.+374    	; 0x2512 <__vector_39+0x236>
    239c:	5b c0       	rjmp	.+182    	; 0x2454 <__vector_39+0x178>
    239e:	80 3b       	cpi	r24, 0xB0	; 176
    23a0:	09 f4       	brne	.+2      	; 0x23a4 <__vector_39+0xc8>
    23a2:	82 c0       	rjmp	.+260    	; 0x24a8 <__vector_39+0x1cc>
    23a4:	38 f4       	brcc	.+14     	; 0x23b4 <__vector_39+0xd8>
    23a6:	80 3a       	cpi	r24, 0xA0	; 160
    23a8:	09 f4       	brne	.+2      	; 0x23ac <__vector_39+0xd0>
    23aa:	66 c0       	rjmp	.+204    	; 0x2478 <__vector_39+0x19c>
    23ac:	88 3a       	cpi	r24, 0xA8	; 168
    23ae:	09 f4       	brne	.+2      	; 0x23b2 <__vector_39+0xd6>
    23b0:	7b c0       	rjmp	.+246    	; 0x24a8 <__vector_39+0x1cc>
    23b2:	af c0       	rjmp	.+350    	; 0x2512 <__vector_39+0x236>
    23b4:	80 3c       	cpi	r24, 0xC0	; 192
    23b6:	09 f4       	brne	.+2      	; 0x23ba <__vector_39+0xde>
    23b8:	a3 c0       	rjmp	.+326    	; 0x2500 <__vector_39+0x224>
    23ba:	88 3c       	cpi	r24, 0xC8	; 200
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <__vector_39+0xe4>
    23be:	a0 c0       	rjmp	.+320    	; 0x2500 <__vector_39+0x224>
    23c0:	88 3b       	cpi	r24, 0xB8	; 184
    23c2:	09 f4       	brne	.+2      	; 0x23c6 <__vector_39+0xea>
    23c4:	86 c0       	rjmp	.+268    	; 0x24d2 <__vector_39+0x1f6>
    23c6:	a5 c0       	rjmp	.+330    	; 0x2512 <__vector_39+0x236>
    23c8:	80 91 b7 06 	lds	r24, 0x06B7	; 0x8006b7 <twi_slarw>
    23cc:	10 c0       	rjmp	.+32     	; 0x23ee <__vector_39+0x112>
    23ce:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <twi_masterBufferIndex>
    23d2:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <twi_masterBufferLength>
    23d6:	98 17       	cp	r25, r24
    23d8:	70 f5       	brcc	.+92     	; 0x2436 <__vector_39+0x15a>
    23da:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <twi_masterBufferIndex>
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	8e 0f       	add	r24, r30
    23e2:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <twi_masterBufferIndex>
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	ef 56       	subi	r30, 0x6F	; 111
    23ea:	f9 4f       	sbci	r31, 0xF9	; 249
    23ec:	80 81       	ld	r24, Z
    23ee:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    23f2:	85 ec       	ldi	r24, 0xC5	; 197
    23f4:	82 c0       	rjmp	.+260    	; 0x24fa <__vector_39+0x21e>
    23f6:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <twi_error>
    23fa:	8a c0       	rjmp	.+276    	; 0x2510 <__vector_39+0x234>
    23fc:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <twi_masterBufferIndex>
    2400:	81 e0       	ldi	r24, 0x01	; 1
    2402:	8e 0f       	add	r24, r30
    2404:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <twi_masterBufferIndex>
    2408:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	ef 56       	subi	r30, 0x6F	; 111
    2410:	f9 4f       	sbci	r31, 0xF9	; 249
    2412:	80 83       	st	Z, r24
    2414:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <twi_masterBufferIndex>
    2418:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <twi_masterBufferLength>
    241c:	6a c0       	rjmp	.+212    	; 0x24f2 <__vector_39+0x216>
    241e:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <twi_masterBufferIndex>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	8e 0f       	add	r24, r30
    2426:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <twi_masterBufferIndex>
    242a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    242e:	f0 e0       	ldi	r31, 0x00	; 0
    2430:	ef 56       	subi	r30, 0x6F	; 111
    2432:	f9 4f       	sbci	r31, 0xF9	; 249
    2434:	80 83       	st	Z, r24
    2436:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <twi_sendStop>
    243a:	81 11       	cpse	r24, r1
    243c:	69 c0       	rjmp	.+210    	; 0x2510 <__vector_39+0x234>
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	80 93 b5 06 	sts	0x06B5, r24	; 0x8006b5 <twi_inRepStart>
    2444:	84 ea       	ldi	r24, 0xA4	; 164
    2446:	5d c0       	rjmp	.+186    	; 0x2502 <__vector_39+0x226>
    2448:	83 e0       	ldi	r24, 0x03	; 3
    244a:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <twi_state>
    244e:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <twi_rxBufferIndex>
    2452:	cf cf       	rjmp	.-98     	; 0x23f2 <__vector_39+0x116>
    2454:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <twi_rxBufferIndex>
    2458:	80 32       	cpi	r24, 0x20	; 32
    245a:	08 f0       	brcs	.+2      	; 0x245e <__vector_39+0x182>
    245c:	4d c0       	rjmp	.+154    	; 0x24f8 <__vector_39+0x21c>
    245e:	e0 91 4c 06 	lds	r30, 0x064C	; 0x80064c <twi_rxBufferIndex>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8e 0f       	add	r24, r30
    2466:	80 93 4c 06 	sts	0x064C, r24	; 0x80064c <twi_rxBufferIndex>
    246a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	e3 5b       	subi	r30, 0xB3	; 179
    2472:	f9 4f       	sbci	r31, 0xF9	; 249
    2474:	80 83       	st	Z, r24
    2476:	bd cf       	rjmp	.-134    	; 0x23f2 <__vector_39+0x116>
    2478:	2b df       	rcall	.-426    	; 0x22d0 <twi_releaseBus>
    247a:	80 91 4c 06 	lds	r24, 0x064C	; 0x80064c <twi_rxBufferIndex>
    247e:	80 32       	cpi	r24, 0x20	; 32
    2480:	30 f4       	brcc	.+12     	; 0x248e <__vector_39+0x1b2>
    2482:	e0 91 4c 06 	lds	r30, 0x064C	; 0x80064c <twi_rxBufferIndex>
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	e3 5b       	subi	r30, 0xB3	; 179
    248a:	f9 4f       	sbci	r31, 0xF9	; 249
    248c:	10 82       	st	Z, r1
    248e:	60 91 4c 06 	lds	r22, 0x064C	; 0x80064c <twi_rxBufferIndex>
    2492:	70 e0       	ldi	r23, 0x00	; 0
    2494:	e0 91 b1 06 	lds	r30, 0x06B1	; 0x8006b1 <twi_onSlaveReceive>
    2498:	f0 91 b2 06 	lds	r31, 0x06B2	; 0x8006b2 <twi_onSlaveReceive+0x1>
    249c:	8d e4       	ldi	r24, 0x4D	; 77
    249e:	96 e0       	ldi	r25, 0x06	; 6
    24a0:	19 95       	eicall
    24a2:	10 92 4c 06 	sts	0x064C, r1	; 0x80064c <twi_rxBufferIndex>
    24a6:	35 c0       	rjmp	.+106    	; 0x2512 <__vector_39+0x236>
    24a8:	84 e0       	ldi	r24, 0x04	; 4
    24aa:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <twi_state>
    24ae:	10 92 6e 06 	sts	0x066E, r1	; 0x80066e <twi_txBufferIndex>
    24b2:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <twi_txBufferLength>
    24b6:	e0 91 b3 06 	lds	r30, 0x06B3	; 0x8006b3 <twi_onSlaveTransmit>
    24ba:	f0 91 b4 06 	lds	r31, 0x06B4	; 0x8006b4 <twi_onSlaveTransmit+0x1>
    24be:	19 95       	eicall
    24c0:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <twi_txBufferLength>
    24c4:	81 11       	cpse	r24, r1
    24c6:	05 c0       	rjmp	.+10     	; 0x24d2 <__vector_39+0x1f6>
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <twi_txBufferLength>
    24ce:	10 92 6f 06 	sts	0x066F, r1	; 0x80066f <twi_txBuffer>
    24d2:	e0 91 6e 06 	lds	r30, 0x066E	; 0x80066e <twi_txBufferIndex>
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	8e 0f       	add	r24, r30
    24da:	80 93 6e 06 	sts	0x066E, r24	; 0x80066e <twi_txBufferIndex>
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	e1 59       	subi	r30, 0x91	; 145
    24e2:	f9 4f       	sbci	r31, 0xF9	; 249
    24e4:	80 81       	ld	r24, Z
    24e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    24ea:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <twi_txBufferIndex>
    24ee:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <twi_txBufferLength>
    24f2:	98 17       	cp	r25, r24
    24f4:	08 f4       	brcc	.+2      	; 0x24f8 <__vector_39+0x21c>
    24f6:	7d cf       	rjmp	.-262    	; 0x23f2 <__vector_39+0x116>
    24f8:	85 e8       	ldi	r24, 0x85	; 133
    24fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    24fe:	09 c0       	rjmp	.+18     	; 0x2512 <__vector_39+0x236>
    2500:	85 ec       	ldi	r24, 0xC5	; 197
    2502:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2506:	10 92 b8 06 	sts	0x06B8, r1	; 0x8006b8 <twi_state>
    250a:	03 c0       	rjmp	.+6      	; 0x2512 <__vector_39+0x236>
    250c:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <twi_error>
    2510:	d5 de       	rcall	.-598    	; 0x22bc <twi_stop>
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0b be       	out	0x3b, r0	; 59
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti

00002538 <__cmpsf2>:
    2538:	0e 94 24 04 	call	0x848	; 0x848 <__fp_cmp>
    253c:	08 f4       	brcc	.+2      	; 0x2540 <__cmpsf2+0x8>
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	08 95       	ret

00002542 <__divsf3>:
    2542:	12 d0       	rcall	.+36     	; 0x2568 <__divsf3x>
    2544:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_round>
    2548:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscB>
    254c:	58 f0       	brcs	.+22     	; 0x2564 <__divsf3+0x22>
    254e:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_pscA>
    2552:	40 f0       	brcs	.+16     	; 0x2564 <__divsf3+0x22>
    2554:	29 f4       	brne	.+10     	; 0x2560 <__divsf3+0x1e>
    2556:	5f 3f       	cpi	r21, 0xFF	; 255
    2558:	29 f0       	breq	.+10     	; 0x2564 <__divsf3+0x22>
    255a:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_inf>
    255e:	51 11       	cpse	r21, r1
    2560:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>
    2564:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_nan>

00002568 <__divsf3x>:
    2568:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_split3>
    256c:	68 f3       	brcs	.-38     	; 0x2548 <__divsf3+0x6>

0000256e <__divsf3_pse>:
    256e:	99 23       	and	r25, r25
    2570:	b1 f3       	breq	.-20     	; 0x255e <__divsf3+0x1c>
    2572:	55 23       	and	r21, r21
    2574:	91 f3       	breq	.-28     	; 0x255a <__divsf3+0x18>
    2576:	95 1b       	sub	r25, r21
    2578:	55 0b       	sbc	r21, r21
    257a:	bb 27       	eor	r27, r27
    257c:	aa 27       	eor	r26, r26
    257e:	62 17       	cp	r22, r18
    2580:	73 07       	cpc	r23, r19
    2582:	84 07       	cpc	r24, r20
    2584:	38 f0       	brcs	.+14     	; 0x2594 <__divsf3_pse+0x26>
    2586:	9f 5f       	subi	r25, 0xFF	; 255
    2588:	5f 4f       	sbci	r21, 0xFF	; 255
    258a:	22 0f       	add	r18, r18
    258c:	33 1f       	adc	r19, r19
    258e:	44 1f       	adc	r20, r20
    2590:	aa 1f       	adc	r26, r26
    2592:	a9 f3       	breq	.-22     	; 0x257e <__divsf3_pse+0x10>
    2594:	35 d0       	rcall	.+106    	; 0x2600 <__divsf3_pse+0x92>
    2596:	0e 2e       	mov	r0, r30
    2598:	3a f0       	brmi	.+14     	; 0x25a8 <__divsf3_pse+0x3a>
    259a:	e0 e8       	ldi	r30, 0x80	; 128
    259c:	32 d0       	rcall	.+100    	; 0x2602 <__divsf3_pse+0x94>
    259e:	91 50       	subi	r25, 0x01	; 1
    25a0:	50 40       	sbci	r21, 0x00	; 0
    25a2:	e6 95       	lsr	r30
    25a4:	00 1c       	adc	r0, r0
    25a6:	ca f7       	brpl	.-14     	; 0x259a <__divsf3_pse+0x2c>
    25a8:	2b d0       	rcall	.+86     	; 0x2600 <__divsf3_pse+0x92>
    25aa:	fe 2f       	mov	r31, r30
    25ac:	29 d0       	rcall	.+82     	; 0x2600 <__divsf3_pse+0x92>
    25ae:	66 0f       	add	r22, r22
    25b0:	77 1f       	adc	r23, r23
    25b2:	88 1f       	adc	r24, r24
    25b4:	bb 1f       	adc	r27, r27
    25b6:	26 17       	cp	r18, r22
    25b8:	37 07       	cpc	r19, r23
    25ba:	48 07       	cpc	r20, r24
    25bc:	ab 07       	cpc	r26, r27
    25be:	b0 e8       	ldi	r27, 0x80	; 128
    25c0:	09 f0       	breq	.+2      	; 0x25c4 <__divsf3_pse+0x56>
    25c2:	bb 0b       	sbc	r27, r27
    25c4:	80 2d       	mov	r24, r0
    25c6:	bf 01       	movw	r22, r30
    25c8:	ff 27       	eor	r31, r31
    25ca:	93 58       	subi	r25, 0x83	; 131
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	3a f0       	brmi	.+14     	; 0x25de <__divsf3_pse+0x70>
    25d0:	9e 3f       	cpi	r25, 0xFE	; 254
    25d2:	51 05       	cpc	r21, r1
    25d4:	78 f0       	brcs	.+30     	; 0x25f4 <__divsf3_pse+0x86>
    25d6:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_inf>
    25da:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>
    25de:	5f 3f       	cpi	r21, 0xFF	; 255
    25e0:	e4 f3       	brlt	.-8      	; 0x25da <__divsf3_pse+0x6c>
    25e2:	98 3e       	cpi	r25, 0xE8	; 232
    25e4:	d4 f3       	brlt	.-12     	; 0x25da <__divsf3_pse+0x6c>
    25e6:	86 95       	lsr	r24
    25e8:	77 95       	ror	r23
    25ea:	67 95       	ror	r22
    25ec:	b7 95       	ror	r27
    25ee:	f7 95       	ror	r31
    25f0:	9f 5f       	subi	r25, 0xFF	; 255
    25f2:	c9 f7       	brne	.-14     	; 0x25e6 <__divsf3_pse+0x78>
    25f4:	88 0f       	add	r24, r24
    25f6:	91 1d       	adc	r25, r1
    25f8:	96 95       	lsr	r25
    25fa:	87 95       	ror	r24
    25fc:	97 f9       	bld	r25, 7
    25fe:	08 95       	ret
    2600:	e1 e0       	ldi	r30, 0x01	; 1
    2602:	66 0f       	add	r22, r22
    2604:	77 1f       	adc	r23, r23
    2606:	88 1f       	adc	r24, r24
    2608:	bb 1f       	adc	r27, r27
    260a:	62 17       	cp	r22, r18
    260c:	73 07       	cpc	r23, r19
    260e:	84 07       	cpc	r24, r20
    2610:	ba 07       	cpc	r27, r26
    2612:	20 f0       	brcs	.+8      	; 0x261c <__divsf3_pse+0xae>
    2614:	62 1b       	sub	r22, r18
    2616:	73 0b       	sbc	r23, r19
    2618:	84 0b       	sbc	r24, r20
    261a:	ba 0b       	sbc	r27, r26
    261c:	ee 1f       	adc	r30, r30
    261e:	88 f7       	brcc	.-30     	; 0x2602 <__divsf3_pse+0x94>
    2620:	e0 95       	com	r30
    2622:	08 95       	ret

00002624 <__mulsf3>:
    2624:	11 d0       	rcall	.+34     	; 0x2648 <__mulsf3x>
    2626:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__fp_round>
    262a:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <__fp_pscA>
    262e:	38 f0       	brcs	.+14     	; 0x263e <__mulsf3+0x1a>
    2630:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscB>
    2634:	20 f0       	brcs	.+8      	; 0x263e <__mulsf3+0x1a>
    2636:	95 23       	and	r25, r21
    2638:	11 f0       	breq	.+4      	; 0x263e <__mulsf3+0x1a>
    263a:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_inf>
    263e:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_nan>
    2642:	11 24       	eor	r1, r1
    2644:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>

00002648 <__mulsf3x>:
    2648:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fp_split3>
    264c:	70 f3       	brcs	.-36     	; 0x262a <__mulsf3+0x6>

0000264e <__mulsf3_pse>:
    264e:	95 9f       	mul	r25, r21
    2650:	c1 f3       	breq	.-16     	; 0x2642 <__mulsf3+0x1e>
    2652:	95 0f       	add	r25, r21
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	55 1f       	adc	r21, r21
    2658:	62 9f       	mul	r22, r18
    265a:	f0 01       	movw	r30, r0
    265c:	72 9f       	mul	r23, r18
    265e:	bb 27       	eor	r27, r27
    2660:	f0 0d       	add	r31, r0
    2662:	b1 1d       	adc	r27, r1
    2664:	63 9f       	mul	r22, r19
    2666:	aa 27       	eor	r26, r26
    2668:	f0 0d       	add	r31, r0
    266a:	b1 1d       	adc	r27, r1
    266c:	aa 1f       	adc	r26, r26
    266e:	64 9f       	mul	r22, r20
    2670:	66 27       	eor	r22, r22
    2672:	b0 0d       	add	r27, r0
    2674:	a1 1d       	adc	r26, r1
    2676:	66 1f       	adc	r22, r22
    2678:	82 9f       	mul	r24, r18
    267a:	22 27       	eor	r18, r18
    267c:	b0 0d       	add	r27, r0
    267e:	a1 1d       	adc	r26, r1
    2680:	62 1f       	adc	r22, r18
    2682:	73 9f       	mul	r23, r19
    2684:	b0 0d       	add	r27, r0
    2686:	a1 1d       	adc	r26, r1
    2688:	62 1f       	adc	r22, r18
    268a:	83 9f       	mul	r24, r19
    268c:	a0 0d       	add	r26, r0
    268e:	61 1d       	adc	r22, r1
    2690:	22 1f       	adc	r18, r18
    2692:	74 9f       	mul	r23, r20
    2694:	33 27       	eor	r19, r19
    2696:	a0 0d       	add	r26, r0
    2698:	61 1d       	adc	r22, r1
    269a:	23 1f       	adc	r18, r19
    269c:	84 9f       	mul	r24, r20
    269e:	60 0d       	add	r22, r0
    26a0:	21 1d       	adc	r18, r1
    26a2:	82 2f       	mov	r24, r18
    26a4:	76 2f       	mov	r23, r22
    26a6:	6a 2f       	mov	r22, r26
    26a8:	11 24       	eor	r1, r1
    26aa:	9f 57       	subi	r25, 0x7F	; 127
    26ac:	50 40       	sbci	r21, 0x00	; 0
    26ae:	9a f0       	brmi	.+38     	; 0x26d6 <__mulsf3_pse+0x88>
    26b0:	f1 f0       	breq	.+60     	; 0x26ee <__mulsf3_pse+0xa0>
    26b2:	88 23       	and	r24, r24
    26b4:	4a f0       	brmi	.+18     	; 0x26c8 <__mulsf3_pse+0x7a>
    26b6:	ee 0f       	add	r30, r30
    26b8:	ff 1f       	adc	r31, r31
    26ba:	bb 1f       	adc	r27, r27
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	91 50       	subi	r25, 0x01	; 1
    26c4:	50 40       	sbci	r21, 0x00	; 0
    26c6:	a9 f7       	brne	.-22     	; 0x26b2 <__mulsf3_pse+0x64>
    26c8:	9e 3f       	cpi	r25, 0xFE	; 254
    26ca:	51 05       	cpc	r21, r1
    26cc:	80 f0       	brcs	.+32     	; 0x26ee <__mulsf3_pse+0xa0>
    26ce:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__fp_inf>
    26d2:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_szero>
    26d6:	5f 3f       	cpi	r21, 0xFF	; 255
    26d8:	e4 f3       	brlt	.-8      	; 0x26d2 <__mulsf3_pse+0x84>
    26da:	98 3e       	cpi	r25, 0xE8	; 232
    26dc:	d4 f3       	brlt	.-12     	; 0x26d2 <__mulsf3_pse+0x84>
    26de:	86 95       	lsr	r24
    26e0:	77 95       	ror	r23
    26e2:	67 95       	ror	r22
    26e4:	b7 95       	ror	r27
    26e6:	f7 95       	ror	r31
    26e8:	e7 95       	ror	r30
    26ea:	9f 5f       	subi	r25, 0xFF	; 255
    26ec:	c1 f7       	brne	.-16     	; 0x26de <__mulsf3_pse+0x90>
    26ee:	fe 2b       	or	r31, r30
    26f0:	88 0f       	add	r24, r24
    26f2:	91 1d       	adc	r25, r1
    26f4:	96 95       	lsr	r25
    26f6:	87 95       	ror	r24
    26f8:	97 f9       	bld	r25, 7
    26fa:	08 95       	ret

000026fc <__unordsf2>:
    26fc:	0e 94 24 04 	call	0x848	; 0x848 <__fp_cmp>
    2700:	88 0b       	sbc	r24, r24
    2702:	99 0b       	sbc	r25, r25
    2704:	08 95       	ret

00002706 <__udivmodsi4>:
    2706:	a1 e2       	ldi	r26, 0x21	; 33
    2708:	1a 2e       	mov	r1, r26
    270a:	aa 1b       	sub	r26, r26
    270c:	bb 1b       	sub	r27, r27
    270e:	fd 01       	movw	r30, r26
    2710:	0d c0       	rjmp	.+26     	; 0x272c <__udivmodsi4_ep>

00002712 <__udivmodsi4_loop>:
    2712:	aa 1f       	adc	r26, r26
    2714:	bb 1f       	adc	r27, r27
    2716:	ee 1f       	adc	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	a2 17       	cp	r26, r18
    271c:	b3 07       	cpc	r27, r19
    271e:	e4 07       	cpc	r30, r20
    2720:	f5 07       	cpc	r31, r21
    2722:	20 f0       	brcs	.+8      	; 0x272c <__udivmodsi4_ep>
    2724:	a2 1b       	sub	r26, r18
    2726:	b3 0b       	sbc	r27, r19
    2728:	e4 0b       	sbc	r30, r20
    272a:	f5 0b       	sbc	r31, r21

0000272c <__udivmodsi4_ep>:
    272c:	66 1f       	adc	r22, r22
    272e:	77 1f       	adc	r23, r23
    2730:	88 1f       	adc	r24, r24
    2732:	99 1f       	adc	r25, r25
    2734:	1a 94       	dec	r1
    2736:	69 f7       	brne	.-38     	; 0x2712 <__udivmodsi4_loop>
    2738:	60 95       	com	r22
    273a:	70 95       	com	r23
    273c:	80 95       	com	r24
    273e:	90 95       	com	r25
    2740:	9b 01       	movw	r18, r22
    2742:	ac 01       	movw	r20, r24
    2744:	bd 01       	movw	r22, r26
    2746:	cf 01       	movw	r24, r30
    2748:	08 95       	ret

0000274a <__tablejump2__>:
    274a:	ee 0f       	add	r30, r30
    274c:	ff 1f       	adc	r31, r31
    274e:	88 1f       	adc	r24, r24
    2750:	8b bf       	out	0x3b, r24	; 59
    2752:	07 90       	elpm	r0, Z+
    2754:	f6 91       	elpm	r31, Z
    2756:	e0 2d       	mov	r30, r0
    2758:	19 94       	eijmp

0000275a <malloc>:
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	82 30       	cpi	r24, 0x02	; 2
    2764:	91 05       	cpc	r25, r1
    2766:	10 f4       	brcc	.+4      	; 0x276c <malloc+0x12>
    2768:	82 e0       	ldi	r24, 0x02	; 2
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	e0 91 bb 06 	lds	r30, 0x06BB	; 0x8006bb <__flp>
    2770:	f0 91 bc 06 	lds	r31, 0x06BC	; 0x8006bc <__flp+0x1>
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	a0 e0       	ldi	r26, 0x00	; 0
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	30 97       	sbiw	r30, 0x00	; 0
    277e:	19 f1       	breq	.+70     	; 0x27c6 <malloc+0x6c>
    2780:	40 81       	ld	r20, Z
    2782:	51 81       	ldd	r21, Z+1	; 0x01
    2784:	02 81       	ldd	r16, Z+2	; 0x02
    2786:	13 81       	ldd	r17, Z+3	; 0x03
    2788:	48 17       	cp	r20, r24
    278a:	59 07       	cpc	r21, r25
    278c:	c8 f0       	brcs	.+50     	; 0x27c0 <malloc+0x66>
    278e:	84 17       	cp	r24, r20
    2790:	95 07       	cpc	r25, r21
    2792:	69 f4       	brne	.+26     	; 0x27ae <malloc+0x54>
    2794:	10 97       	sbiw	r26, 0x00	; 0
    2796:	31 f0       	breq	.+12     	; 0x27a4 <malloc+0x4a>
    2798:	12 96       	adiw	r26, 0x02	; 2
    279a:	0c 93       	st	X, r16
    279c:	12 97       	sbiw	r26, 0x02	; 2
    279e:	13 96       	adiw	r26, 0x03	; 3
    27a0:	1c 93       	st	X, r17
    27a2:	27 c0       	rjmp	.+78     	; 0x27f2 <malloc+0x98>
    27a4:	00 93 bb 06 	sts	0x06BB, r16	; 0x8006bb <__flp>
    27a8:	10 93 bc 06 	sts	0x06BC, r17	; 0x8006bc <__flp+0x1>
    27ac:	22 c0       	rjmp	.+68     	; 0x27f2 <malloc+0x98>
    27ae:	21 15       	cp	r18, r1
    27b0:	31 05       	cpc	r19, r1
    27b2:	19 f0       	breq	.+6      	; 0x27ba <malloc+0x60>
    27b4:	42 17       	cp	r20, r18
    27b6:	53 07       	cpc	r21, r19
    27b8:	18 f4       	brcc	.+6      	; 0x27c0 <malloc+0x66>
    27ba:	9a 01       	movw	r18, r20
    27bc:	bd 01       	movw	r22, r26
    27be:	ef 01       	movw	r28, r30
    27c0:	df 01       	movw	r26, r30
    27c2:	f8 01       	movw	r30, r16
    27c4:	db cf       	rjmp	.-74     	; 0x277c <malloc+0x22>
    27c6:	21 15       	cp	r18, r1
    27c8:	31 05       	cpc	r19, r1
    27ca:	f9 f0       	breq	.+62     	; 0x280a <malloc+0xb0>
    27cc:	28 1b       	sub	r18, r24
    27ce:	39 0b       	sbc	r19, r25
    27d0:	24 30       	cpi	r18, 0x04	; 4
    27d2:	31 05       	cpc	r19, r1
    27d4:	80 f4       	brcc	.+32     	; 0x27f6 <malloc+0x9c>
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	61 15       	cp	r22, r1
    27dc:	71 05       	cpc	r23, r1
    27de:	21 f0       	breq	.+8      	; 0x27e8 <malloc+0x8e>
    27e0:	fb 01       	movw	r30, r22
    27e2:	93 83       	std	Z+3, r25	; 0x03
    27e4:	82 83       	std	Z+2, r24	; 0x02
    27e6:	04 c0       	rjmp	.+8      	; 0x27f0 <malloc+0x96>
    27e8:	90 93 bc 06 	sts	0x06BC, r25	; 0x8006bc <__flp+0x1>
    27ec:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <__flp>
    27f0:	fe 01       	movw	r30, r28
    27f2:	32 96       	adiw	r30, 0x02	; 2
    27f4:	44 c0       	rjmp	.+136    	; 0x287e <malloc+0x124>
    27f6:	fe 01       	movw	r30, r28
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	81 93       	st	Z+, r24
    27fe:	91 93       	st	Z+, r25
    2800:	22 50       	subi	r18, 0x02	; 2
    2802:	31 09       	sbc	r19, r1
    2804:	39 83       	std	Y+1, r19	; 0x01
    2806:	28 83       	st	Y, r18
    2808:	3a c0       	rjmp	.+116    	; 0x287e <malloc+0x124>
    280a:	20 91 b9 06 	lds	r18, 0x06B9	; 0x8006b9 <__brkval>
    280e:	30 91 ba 06 	lds	r19, 0x06BA	; 0x8006ba <__brkval+0x1>
    2812:	23 2b       	or	r18, r19
    2814:	41 f4       	brne	.+16     	; 0x2826 <malloc+0xcc>
    2816:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    281a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    281e:	30 93 ba 06 	sts	0x06BA, r19	; 0x8006ba <__brkval+0x1>
    2822:	20 93 b9 06 	sts	0x06B9, r18	; 0x8006b9 <__brkval>
    2826:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    282a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    282e:	21 15       	cp	r18, r1
    2830:	31 05       	cpc	r19, r1
    2832:	41 f4       	brne	.+16     	; 0x2844 <malloc+0xea>
    2834:	2d b7       	in	r18, 0x3d	; 61
    2836:	3e b7       	in	r19, 0x3e	; 62
    2838:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    283c:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2840:	24 1b       	sub	r18, r20
    2842:	35 0b       	sbc	r19, r21
    2844:	e0 91 b9 06 	lds	r30, 0x06B9	; 0x8006b9 <__brkval>
    2848:	f0 91 ba 06 	lds	r31, 0x06BA	; 0x8006ba <__brkval+0x1>
    284c:	e2 17       	cp	r30, r18
    284e:	f3 07       	cpc	r31, r19
    2850:	a0 f4       	brcc	.+40     	; 0x287a <malloc+0x120>
    2852:	2e 1b       	sub	r18, r30
    2854:	3f 0b       	sbc	r19, r31
    2856:	28 17       	cp	r18, r24
    2858:	39 07       	cpc	r19, r25
    285a:	78 f0       	brcs	.+30     	; 0x287a <malloc+0x120>
    285c:	ac 01       	movw	r20, r24
    285e:	4e 5f       	subi	r20, 0xFE	; 254
    2860:	5f 4f       	sbci	r21, 0xFF	; 255
    2862:	24 17       	cp	r18, r20
    2864:	35 07       	cpc	r19, r21
    2866:	48 f0       	brcs	.+18     	; 0x287a <malloc+0x120>
    2868:	4e 0f       	add	r20, r30
    286a:	5f 1f       	adc	r21, r31
    286c:	50 93 ba 06 	sts	0x06BA, r21	; 0x8006ba <__brkval+0x1>
    2870:	40 93 b9 06 	sts	0x06B9, r20	; 0x8006b9 <__brkval>
    2874:	81 93       	st	Z+, r24
    2876:	91 93       	st	Z+, r25
    2878:	02 c0       	rjmp	.+4      	; 0x287e <malloc+0x124>
    287a:	e0 e0       	ldi	r30, 0x00	; 0
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	cf 01       	movw	r24, r30
    2880:	df 91       	pop	r29
    2882:	cf 91       	pop	r28
    2884:	1f 91       	pop	r17
    2886:	0f 91       	pop	r16
    2888:	08 95       	ret

0000288a <free>:
    288a:	cf 93       	push	r28
    288c:	df 93       	push	r29
    288e:	00 97       	sbiw	r24, 0x00	; 0
    2890:	09 f4       	brne	.+2      	; 0x2894 <free+0xa>
    2892:	81 c0       	rjmp	.+258    	; 0x2996 <free+0x10c>
    2894:	fc 01       	movw	r30, r24
    2896:	32 97       	sbiw	r30, 0x02	; 2
    2898:	13 82       	std	Z+3, r1	; 0x03
    289a:	12 82       	std	Z+2, r1	; 0x02
    289c:	a0 91 bb 06 	lds	r26, 0x06BB	; 0x8006bb <__flp>
    28a0:	b0 91 bc 06 	lds	r27, 0x06BC	; 0x8006bc <__flp+0x1>
    28a4:	10 97       	sbiw	r26, 0x00	; 0
    28a6:	81 f4       	brne	.+32     	; 0x28c8 <free+0x3e>
    28a8:	20 81       	ld	r18, Z
    28aa:	31 81       	ldd	r19, Z+1	; 0x01
    28ac:	82 0f       	add	r24, r18
    28ae:	93 1f       	adc	r25, r19
    28b0:	20 91 b9 06 	lds	r18, 0x06B9	; 0x8006b9 <__brkval>
    28b4:	30 91 ba 06 	lds	r19, 0x06BA	; 0x8006ba <__brkval+0x1>
    28b8:	28 17       	cp	r18, r24
    28ba:	39 07       	cpc	r19, r25
    28bc:	51 f5       	brne	.+84     	; 0x2912 <free+0x88>
    28be:	f0 93 ba 06 	sts	0x06BA, r31	; 0x8006ba <__brkval+0x1>
    28c2:	e0 93 b9 06 	sts	0x06B9, r30	; 0x8006b9 <__brkval>
    28c6:	67 c0       	rjmp	.+206    	; 0x2996 <free+0x10c>
    28c8:	ed 01       	movw	r28, r26
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	ce 17       	cp	r28, r30
    28d0:	df 07       	cpc	r29, r31
    28d2:	40 f4       	brcc	.+16     	; 0x28e4 <free+0x5a>
    28d4:	4a 81       	ldd	r20, Y+2	; 0x02
    28d6:	5b 81       	ldd	r21, Y+3	; 0x03
    28d8:	9e 01       	movw	r18, r28
    28da:	41 15       	cp	r20, r1
    28dc:	51 05       	cpc	r21, r1
    28de:	f1 f0       	breq	.+60     	; 0x291c <free+0x92>
    28e0:	ea 01       	movw	r28, r20
    28e2:	f5 cf       	rjmp	.-22     	; 0x28ce <free+0x44>
    28e4:	d3 83       	std	Z+3, r29	; 0x03
    28e6:	c2 83       	std	Z+2, r28	; 0x02
    28e8:	40 81       	ld	r20, Z
    28ea:	51 81       	ldd	r21, Z+1	; 0x01
    28ec:	84 0f       	add	r24, r20
    28ee:	95 1f       	adc	r25, r21
    28f0:	c8 17       	cp	r28, r24
    28f2:	d9 07       	cpc	r29, r25
    28f4:	59 f4       	brne	.+22     	; 0x290c <free+0x82>
    28f6:	88 81       	ld	r24, Y
    28f8:	99 81       	ldd	r25, Y+1	; 0x01
    28fa:	84 0f       	add	r24, r20
    28fc:	95 1f       	adc	r25, r21
    28fe:	02 96       	adiw	r24, 0x02	; 2
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
    2904:	8a 81       	ldd	r24, Y+2	; 0x02
    2906:	9b 81       	ldd	r25, Y+3	; 0x03
    2908:	93 83       	std	Z+3, r25	; 0x03
    290a:	82 83       	std	Z+2, r24	; 0x02
    290c:	21 15       	cp	r18, r1
    290e:	31 05       	cpc	r19, r1
    2910:	29 f4       	brne	.+10     	; 0x291c <free+0x92>
    2912:	f0 93 bc 06 	sts	0x06BC, r31	; 0x8006bc <__flp+0x1>
    2916:	e0 93 bb 06 	sts	0x06BB, r30	; 0x8006bb <__flp>
    291a:	3d c0       	rjmp	.+122    	; 0x2996 <free+0x10c>
    291c:	e9 01       	movw	r28, r18
    291e:	fb 83       	std	Y+3, r31	; 0x03
    2920:	ea 83       	std	Y+2, r30	; 0x02
    2922:	49 91       	ld	r20, Y+
    2924:	59 91       	ld	r21, Y+
    2926:	c4 0f       	add	r28, r20
    2928:	d5 1f       	adc	r29, r21
    292a:	ec 17       	cp	r30, r28
    292c:	fd 07       	cpc	r31, r29
    292e:	61 f4       	brne	.+24     	; 0x2948 <free+0xbe>
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	84 0f       	add	r24, r20
    2936:	95 1f       	adc	r25, r21
    2938:	02 96       	adiw	r24, 0x02	; 2
    293a:	e9 01       	movw	r28, r18
    293c:	99 83       	std	Y+1, r25	; 0x01
    293e:	88 83       	st	Y, r24
    2940:	82 81       	ldd	r24, Z+2	; 0x02
    2942:	93 81       	ldd	r25, Z+3	; 0x03
    2944:	9b 83       	std	Y+3, r25	; 0x03
    2946:	8a 83       	std	Y+2, r24	; 0x02
    2948:	e0 e0       	ldi	r30, 0x00	; 0
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	12 96       	adiw	r26, 0x02	; 2
    294e:	8d 91       	ld	r24, X+
    2950:	9c 91       	ld	r25, X
    2952:	13 97       	sbiw	r26, 0x03	; 3
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	19 f0       	breq	.+6      	; 0x295e <free+0xd4>
    2958:	fd 01       	movw	r30, r26
    295a:	dc 01       	movw	r26, r24
    295c:	f7 cf       	rjmp	.-18     	; 0x294c <free+0xc2>
    295e:	8d 91       	ld	r24, X+
    2960:	9c 91       	ld	r25, X
    2962:	11 97       	sbiw	r26, 0x01	; 1
    2964:	9d 01       	movw	r18, r26
    2966:	2e 5f       	subi	r18, 0xFE	; 254
    2968:	3f 4f       	sbci	r19, 0xFF	; 255
    296a:	82 0f       	add	r24, r18
    296c:	93 1f       	adc	r25, r19
    296e:	20 91 b9 06 	lds	r18, 0x06B9	; 0x8006b9 <__brkval>
    2972:	30 91 ba 06 	lds	r19, 0x06BA	; 0x8006ba <__brkval+0x1>
    2976:	28 17       	cp	r18, r24
    2978:	39 07       	cpc	r19, r25
    297a:	69 f4       	brne	.+26     	; 0x2996 <free+0x10c>
    297c:	30 97       	sbiw	r30, 0x00	; 0
    297e:	29 f4       	brne	.+10     	; 0x298a <free+0x100>
    2980:	10 92 bc 06 	sts	0x06BC, r1	; 0x8006bc <__flp+0x1>
    2984:	10 92 bb 06 	sts	0x06BB, r1	; 0x8006bb <__flp>
    2988:	02 c0       	rjmp	.+4      	; 0x298e <free+0x104>
    298a:	13 82       	std	Z+3, r1	; 0x03
    298c:	12 82       	std	Z+2, r1	; 0x02
    298e:	b0 93 ba 06 	sts	0x06BA, r27	; 0x8006ba <__brkval+0x1>
    2992:	a0 93 b9 06 	sts	0x06B9, r26	; 0x8006b9 <__brkval>
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	08 95       	ret

0000299c <realloc>:
    299c:	6f 92       	push	r6
    299e:	7f 92       	push	r7
    29a0:	8f 92       	push	r8
    29a2:	9f 92       	push	r9
    29a4:	af 92       	push	r10
    29a6:	bf 92       	push	r11
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	ff 92       	push	r15
    29b0:	0f 93       	push	r16
    29b2:	1f 93       	push	r17
    29b4:	cf 93       	push	r28
    29b6:	df 93       	push	r29
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	81 f4       	brne	.+32     	; 0x29dc <realloc+0x40>
    29bc:	cb 01       	movw	r24, r22
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	ef 90       	pop	r14
    29ca:	df 90       	pop	r13
    29cc:	cf 90       	pop	r12
    29ce:	bf 90       	pop	r11
    29d0:	af 90       	pop	r10
    29d2:	9f 90       	pop	r9
    29d4:	8f 90       	pop	r8
    29d6:	7f 90       	pop	r7
    29d8:	6f 90       	pop	r6
    29da:	bf ce       	rjmp	.-642    	; 0x275a <malloc>
    29dc:	fc 01       	movw	r30, r24
    29de:	e6 0f       	add	r30, r22
    29e0:	f7 1f       	adc	r31, r23
    29e2:	9c 01       	movw	r18, r24
    29e4:	22 50       	subi	r18, 0x02	; 2
    29e6:	31 09       	sbc	r19, r1
    29e8:	e2 17       	cp	r30, r18
    29ea:	f3 07       	cpc	r31, r19
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <realloc+0x54>
    29ee:	a5 c0       	rjmp	.+330    	; 0x2b3a <realloc+0x19e>
    29f0:	ec 01       	movw	r28, r24
    29f2:	d9 01       	movw	r26, r18
    29f4:	0d 91       	ld	r16, X+
    29f6:	1c 91       	ld	r17, X
    29f8:	11 97       	sbiw	r26, 0x01	; 1
    29fa:	06 17       	cp	r16, r22
    29fc:	17 07       	cpc	r17, r23
    29fe:	a8 f0       	brcs	.+42     	; 0x2a2a <realloc+0x8e>
    2a00:	05 30       	cpi	r16, 0x05	; 5
    2a02:	11 05       	cpc	r17, r1
    2a04:	08 f4       	brcc	.+2      	; 0x2a08 <realloc+0x6c>
    2a06:	97 c0       	rjmp	.+302    	; 0x2b36 <realloc+0x19a>
    2a08:	c8 01       	movw	r24, r16
    2a0a:	04 97       	sbiw	r24, 0x04	; 4
    2a0c:	86 17       	cp	r24, r22
    2a0e:	97 07       	cpc	r25, r23
    2a10:	08 f4       	brcc	.+2      	; 0x2a14 <realloc+0x78>
    2a12:	91 c0       	rjmp	.+290    	; 0x2b36 <realloc+0x19a>
    2a14:	02 50       	subi	r16, 0x02	; 2
    2a16:	11 09       	sbc	r17, r1
    2a18:	06 1b       	sub	r16, r22
    2a1a:	17 0b       	sbc	r17, r23
    2a1c:	01 93       	st	Z+, r16
    2a1e:	11 93       	st	Z+, r17
    2a20:	6d 93       	st	X+, r22
    2a22:	7c 93       	st	X, r23
    2a24:	cf 01       	movw	r24, r30
    2a26:	31 df       	rcall	.-414    	; 0x288a <free>
    2a28:	86 c0       	rjmp	.+268    	; 0x2b36 <realloc+0x19a>
    2a2a:	5b 01       	movw	r10, r22
    2a2c:	a0 1a       	sub	r10, r16
    2a2e:	b1 0a       	sbc	r11, r17
    2a30:	4c 01       	movw	r8, r24
    2a32:	80 0e       	add	r8, r16
    2a34:	91 1e       	adc	r9, r17
    2a36:	a0 91 bb 06 	lds	r26, 0x06BB	; 0x8006bb <__flp>
    2a3a:	b0 91 bc 06 	lds	r27, 0x06BC	; 0x8006bc <__flp+0x1>
    2a3e:	61 2c       	mov	r6, r1
    2a40:	71 2c       	mov	r7, r1
    2a42:	e1 2c       	mov	r14, r1
    2a44:	f1 2c       	mov	r15, r1
    2a46:	10 97       	sbiw	r26, 0x00	; 0
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <realloc+0xb0>
    2a4a:	46 c0       	rjmp	.+140    	; 0x2ad8 <realloc+0x13c>
    2a4c:	8d 91       	ld	r24, X+
    2a4e:	9c 91       	ld	r25, X
    2a50:	11 97       	sbiw	r26, 0x01	; 1
    2a52:	a8 15       	cp	r26, r8
    2a54:	b9 05       	cpc	r27, r9
    2a56:	b1 f5       	brne	.+108    	; 0x2ac4 <realloc+0x128>
    2a58:	6c 01       	movw	r12, r24
    2a5a:	42 e0       	ldi	r20, 0x02	; 2
    2a5c:	c4 0e       	add	r12, r20
    2a5e:	d1 1c       	adc	r13, r1
    2a60:	ca 14       	cp	r12, r10
    2a62:	db 04       	cpc	r13, r11
    2a64:	78 f1       	brcs	.+94     	; 0x2ac4 <realloc+0x128>
    2a66:	4c 01       	movw	r8, r24
    2a68:	8a 18       	sub	r8, r10
    2a6a:	9b 08       	sbc	r9, r11
    2a6c:	64 01       	movw	r12, r8
    2a6e:	42 e0       	ldi	r20, 0x02	; 2
    2a70:	c4 0e       	add	r12, r20
    2a72:	d1 1c       	adc	r13, r1
    2a74:	12 96       	adiw	r26, 0x02	; 2
    2a76:	bc 90       	ld	r11, X
    2a78:	12 97       	sbiw	r26, 0x02	; 2
    2a7a:	13 96       	adiw	r26, 0x03	; 3
    2a7c:	ac 91       	ld	r26, X
    2a7e:	b5 e0       	ldi	r27, 0x05	; 5
    2a80:	cb 16       	cp	r12, r27
    2a82:	d1 04       	cpc	r13, r1
    2a84:	40 f0       	brcs	.+16     	; 0x2a96 <realloc+0xfa>
    2a86:	b2 82       	std	Z+2, r11	; 0x02
    2a88:	a3 83       	std	Z+3, r26	; 0x03
    2a8a:	91 82       	std	Z+1, r9	; 0x01
    2a8c:	80 82       	st	Z, r8
    2a8e:	d9 01       	movw	r26, r18
    2a90:	6d 93       	st	X+, r22
    2a92:	7c 93       	st	X, r23
    2a94:	09 c0       	rjmp	.+18     	; 0x2aa8 <realloc+0x10c>
    2a96:	0e 5f       	subi	r16, 0xFE	; 254
    2a98:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9a:	80 0f       	add	r24, r16
    2a9c:	91 1f       	adc	r25, r17
    2a9e:	f9 01       	movw	r30, r18
    2aa0:	91 83       	std	Z+1, r25	; 0x01
    2aa2:	80 83       	st	Z, r24
    2aa4:	eb 2d       	mov	r30, r11
    2aa6:	fa 2f       	mov	r31, r26
    2aa8:	e1 14       	cp	r14, r1
    2aaa:	f1 04       	cpc	r15, r1
    2aac:	31 f0       	breq	.+12     	; 0x2aba <realloc+0x11e>
    2aae:	d7 01       	movw	r26, r14
    2ab0:	13 96       	adiw	r26, 0x03	; 3
    2ab2:	fc 93       	st	X, r31
    2ab4:	ee 93       	st	-X, r30
    2ab6:	12 97       	sbiw	r26, 0x02	; 2
    2ab8:	3e c0       	rjmp	.+124    	; 0x2b36 <realloc+0x19a>
    2aba:	f0 93 bc 06 	sts	0x06BC, r31	; 0x8006bc <__flp+0x1>
    2abe:	e0 93 bb 06 	sts	0x06BB, r30	; 0x8006bb <__flp>
    2ac2:	39 c0       	rjmp	.+114    	; 0x2b36 <realloc+0x19a>
    2ac4:	68 16       	cp	r6, r24
    2ac6:	79 06       	cpc	r7, r25
    2ac8:	08 f4       	brcc	.+2      	; 0x2acc <realloc+0x130>
    2aca:	3c 01       	movw	r6, r24
    2acc:	7d 01       	movw	r14, r26
    2ace:	12 96       	adiw	r26, 0x02	; 2
    2ad0:	0d 90       	ld	r0, X+
    2ad2:	bc 91       	ld	r27, X
    2ad4:	a0 2d       	mov	r26, r0
    2ad6:	b7 cf       	rjmp	.-146    	; 0x2a46 <realloc+0xaa>
    2ad8:	80 91 b9 06 	lds	r24, 0x06B9	; 0x8006b9 <__brkval>
    2adc:	90 91 ba 06 	lds	r25, 0x06BA	; 0x8006ba <__brkval+0x1>
    2ae0:	88 16       	cp	r8, r24
    2ae2:	99 06       	cpc	r9, r25
    2ae4:	e1 f4       	brne	.+56     	; 0x2b1e <realloc+0x182>
    2ae6:	66 16       	cp	r6, r22
    2ae8:	77 06       	cpc	r7, r23
    2aea:	c8 f4       	brcc	.+50     	; 0x2b1e <realloc+0x182>
    2aec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
    2af0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
    2af4:	00 97       	sbiw	r24, 0x00	; 0
    2af6:	41 f4       	brne	.+16     	; 0x2b08 <realloc+0x16c>
    2af8:	8d b7       	in	r24, 0x3d	; 61
    2afa:	9e b7       	in	r25, 0x3e	; 62
    2afc:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    2b00:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    2b04:	84 1b       	sub	r24, r20
    2b06:	95 0b       	sbc	r25, r21
    2b08:	e8 17       	cp	r30, r24
    2b0a:	f9 07       	cpc	r31, r25
    2b0c:	b0 f4       	brcc	.+44     	; 0x2b3a <realloc+0x19e>
    2b0e:	f0 93 ba 06 	sts	0x06BA, r31	; 0x8006ba <__brkval+0x1>
    2b12:	e0 93 b9 06 	sts	0x06B9, r30	; 0x8006b9 <__brkval>
    2b16:	f9 01       	movw	r30, r18
    2b18:	71 83       	std	Z+1, r23	; 0x01
    2b1a:	60 83       	st	Z, r22
    2b1c:	0c c0       	rjmp	.+24     	; 0x2b36 <realloc+0x19a>
    2b1e:	cb 01       	movw	r24, r22
    2b20:	1c de       	rcall	.-968    	; 0x275a <malloc>
    2b22:	7c 01       	movw	r14, r24
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	49 f0       	breq	.+18     	; 0x2b3a <realloc+0x19e>
    2b28:	a8 01       	movw	r20, r16
    2b2a:	be 01       	movw	r22, r28
    2b2c:	17 d0       	rcall	.+46     	; 0x2b5c <memcpy>
    2b2e:	ce 01       	movw	r24, r28
    2b30:	ac de       	rcall	.-680    	; 0x288a <free>
    2b32:	c7 01       	movw	r24, r14
    2b34:	04 c0       	rjmp	.+8      	; 0x2b3e <realloc+0x1a2>
    2b36:	ce 01       	movw	r24, r28
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <realloc+0x1a2>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	ff 90       	pop	r15
    2b48:	ef 90       	pop	r14
    2b4a:	df 90       	pop	r13
    2b4c:	cf 90       	pop	r12
    2b4e:	bf 90       	pop	r11
    2b50:	af 90       	pop	r10
    2b52:	9f 90       	pop	r9
    2b54:	8f 90       	pop	r8
    2b56:	7f 90       	pop	r7
    2b58:	6f 90       	pop	r6
    2b5a:	08 95       	ret

00002b5c <memcpy>:
    2b5c:	fb 01       	movw	r30, r22
    2b5e:	dc 01       	movw	r26, r24
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <memcpy+0xa>
    2b62:	01 90       	ld	r0, Z+
    2b64:	0d 92       	st	X+, r0
    2b66:	41 50       	subi	r20, 0x01	; 1
    2b68:	50 40       	sbci	r21, 0x00	; 0
    2b6a:	d8 f7       	brcc	.-10     	; 0x2b62 <memcpy+0x6>
    2b6c:	08 95       	ret

00002b6e <memmove>:
    2b6e:	68 17       	cp	r22, r24
    2b70:	79 07       	cpc	r23, r25
    2b72:	68 f4       	brcc	.+26     	; 0x2b8e <memmove+0x20>
    2b74:	fb 01       	movw	r30, r22
    2b76:	dc 01       	movw	r26, r24
    2b78:	e4 0f       	add	r30, r20
    2b7a:	f5 1f       	adc	r31, r21
    2b7c:	a4 0f       	add	r26, r20
    2b7e:	b5 1f       	adc	r27, r21
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <memmove+0x18>
    2b82:	02 90       	ld	r0, -Z
    2b84:	0e 92       	st	-X, r0
    2b86:	41 50       	subi	r20, 0x01	; 1
    2b88:	50 40       	sbci	r21, 0x00	; 0
    2b8a:	d8 f7       	brcc	.-10     	; 0x2b82 <memmove+0x14>
    2b8c:	08 95       	ret
    2b8e:	e6 cf       	rjmp	.-52     	; 0x2b5c <memcpy>

00002b90 <strcpy>:
    2b90:	fb 01       	movw	r30, r22
    2b92:	dc 01       	movw	r26, r24
    2b94:	01 90       	ld	r0, Z+
    2b96:	0d 92       	st	X+, r0
    2b98:	00 20       	and	r0, r0
    2b9a:	e1 f7       	brne	.-8      	; 0x2b94 <strcpy+0x4>
    2b9c:	08 95       	ret

00002b9e <strstr>:
    2b9e:	fb 01       	movw	r30, r22
    2ba0:	51 91       	ld	r21, Z+
    2ba2:	55 23       	and	r21, r21
    2ba4:	a9 f0       	breq	.+42     	; 0x2bd0 <strstr+0x32>
    2ba6:	bf 01       	movw	r22, r30
    2ba8:	dc 01       	movw	r26, r24
    2baa:	4d 91       	ld	r20, X+
    2bac:	45 17       	cp	r20, r21
    2bae:	41 11       	cpse	r20, r1
    2bb0:	e1 f7       	brne	.-8      	; 0x2baa <strstr+0xc>
    2bb2:	59 f4       	brne	.+22     	; 0x2bca <strstr+0x2c>
    2bb4:	cd 01       	movw	r24, r26
    2bb6:	01 90       	ld	r0, Z+
    2bb8:	00 20       	and	r0, r0
    2bba:	49 f0       	breq	.+18     	; 0x2bce <strstr+0x30>
    2bbc:	4d 91       	ld	r20, X+
    2bbe:	40 15       	cp	r20, r0
    2bc0:	41 11       	cpse	r20, r1
    2bc2:	c9 f3       	breq	.-14     	; 0x2bb6 <strstr+0x18>
    2bc4:	fb 01       	movw	r30, r22
    2bc6:	41 11       	cpse	r20, r1
    2bc8:	ef cf       	rjmp	.-34     	; 0x2ba8 <strstr+0xa>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	08 95       	ret

00002bd2 <itoa>:
    2bd2:	45 32       	cpi	r20, 0x25	; 37
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	18 f4       	brcc	.+6      	; 0x2bde <itoa+0xc>
    2bd8:	42 30       	cpi	r20, 0x02	; 2
    2bda:	08 f0       	brcs	.+2      	; 0x2bde <itoa+0xc>
    2bdc:	04 c0       	rjmp	.+8      	; 0x2be6 <__itoa_ncheck>
    2bde:	fb 01       	movw	r30, r22
    2be0:	10 82       	st	Z, r1
    2be2:	cb 01       	movw	r24, r22
    2be4:	08 95       	ret

00002be6 <__itoa_ncheck>:
    2be6:	bb 27       	eor	r27, r27
    2be8:	4a 30       	cpi	r20, 0x0A	; 10
    2bea:	31 f4       	brne	.+12     	; 0x2bf8 <__itoa_ncheck+0x12>
    2bec:	99 23       	and	r25, r25
    2bee:	22 f4       	brpl	.+8      	; 0x2bf8 <__itoa_ncheck+0x12>
    2bf0:	bd e2       	ldi	r27, 0x2D	; 45
    2bf2:	90 95       	com	r25
    2bf4:	81 95       	neg	r24
    2bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    2bf8:	01 c0       	rjmp	.+2      	; 0x2bfc <__utoa_common>

00002bfa <__utoa_ncheck>:
    2bfa:	bb 27       	eor	r27, r27

00002bfc <__utoa_common>:
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	55 27       	eor	r21, r21
    2c00:	aa 27       	eor	r26, r26
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	aa 1f       	adc	r26, r26
    2c08:	a4 17       	cp	r26, r20
    2c0a:	10 f0       	brcs	.+4      	; 0x2c10 <__utoa_common+0x14>
    2c0c:	a4 1b       	sub	r26, r20
    2c0e:	83 95       	inc	r24
    2c10:	50 51       	subi	r21, 0x10	; 16
    2c12:	b9 f7       	brne	.-18     	; 0x2c02 <__utoa_common+0x6>
    2c14:	a0 5d       	subi	r26, 0xD0	; 208
    2c16:	aa 33       	cpi	r26, 0x3A	; 58
    2c18:	08 f0       	brcs	.+2      	; 0x2c1c <__utoa_common+0x20>
    2c1a:	a9 5d       	subi	r26, 0xD9	; 217
    2c1c:	a1 93       	st	Z+, r26
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	79 f7       	brne	.-34     	; 0x2c00 <__utoa_common+0x4>
    2c22:	b1 11       	cpse	r27, r1
    2c24:	b1 93       	st	Z+, r27
    2c26:	11 92       	st	Z+, r1
    2c28:	cb 01       	movw	r24, r22
    2c2a:	00 c0       	rjmp	.+0      	; 0x2c2c <strrev>

00002c2c <strrev>:
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	fc 01       	movw	r30, r24
    2c30:	67 2f       	mov	r22, r23
    2c32:	71 91       	ld	r23, Z+
    2c34:	77 23       	and	r23, r23
    2c36:	e1 f7       	brne	.-8      	; 0x2c30 <strrev+0x4>
    2c38:	32 97       	sbiw	r30, 0x02	; 2
    2c3a:	04 c0       	rjmp	.+8      	; 0x2c44 <strrev+0x18>
    2c3c:	7c 91       	ld	r23, X
    2c3e:	6d 93       	st	X+, r22
    2c40:	70 83       	st	Z, r23
    2c42:	62 91       	ld	r22, -Z
    2c44:	ae 17       	cp	r26, r30
    2c46:	bf 07       	cpc	r27, r31
    2c48:	c8 f3       	brcs	.-14     	; 0x2c3c <strrev+0x10>
    2c4a:	08 95       	ret

00002c4c <_exit>:
    2c4c:	f8 94       	cli

00002c4e <__stop_program>:
    2c4e:	ff cf       	rjmp	.-2      	; 0x2c4e <__stop_program>
